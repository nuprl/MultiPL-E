name: HumanEval_143_words_in_sentence
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj29egyj4.d(26): Error: undefined identifier `split`\\n/tmp/tmpj29egyj4.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpj29egyj4.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpj29egyj4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe_ijx0gv.d(26): Error: undefined identifier `split`\\n/tmp/tmpe_ijx0gv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpe_ijx0gv.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe_ijx0gv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1f522ja.d(26): Error: undefined identifier `split`\\n/tmp/tmpc1f522ja.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpc1f522ja.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpc1f522ja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable words = split(sentence);\n    immutable primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    immutable result = [];\n    foreach(immutable word;\
    \ words)\n    {\n        immutable len = word.length;\n        if(primes.canFind(len))\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result.join(\"\
    \ \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ejp5ty6.d(26): Error: undefined identifier `split`\\n/tmp/tmp1ejp5ty6.d(37):\
    \ Error: no property `join` for type `immutable(void[])`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ejp5ty6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaejf08vq.d(26): Error: undefined identifier `split`\\n/tmp/tmpaejf08vq.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaejf08vq.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpaejf08vq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps65d2kal.d(26): Error: undefined identifier `split`\\n/tmp/tmps65d2kal.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmps65d2kal.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps65d2kal.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfznk5zsj.d(26): Error: undefined identifier `split`\\n/tmp/tmpfznk5zsj.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpfznk5zsj.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfznk5zsj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp842bnsov.d(26): Error: undefined identifier `split`\\n/tmp/tmp842bnsov.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp842bnsov.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp842bnsov.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28852u9x.d(26): Error: undefined identifier `split`\\n/tmp/tmp28852u9x.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp28852u9x.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp28852u9x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_mckp_d.d(26): Error: undefined identifier `split`\\n/tmp/tmpl_mckp_d.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpl_mckp_d.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpl_mckp_d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvd34dk4p.d(26): Error: undefined identifier `split`\\n/tmp/tmpvd34dk4p.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpvd34dk4p.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpvd34dk4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4h6z8y9x.d(26): Error: undefined identifier `split`\\n/tmp/tmp4h6z8y9x.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp4h6z8y9x.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4h6z8y9x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ht__jiz.d(26): Error: undefined identifier `split`\\n/tmp/tmp1ht__jiz.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp1ht__jiz.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1ht__jiz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxvqdu0h.d(26): Error: undefined identifier `split`\\n/tmp/tmptxvqdu0h.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptxvqdu0h.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptxvqdu0h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split;\n    string result = \"\"\
    ;\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n       \
    \ {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqeb3wcyl.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpqeb3wcyl.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpqeb3wcyl.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqeb3wcyl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ghf_qn_.d(26): Error: undefined identifier `split`\\n/tmp/tmp2ghf_qn_.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp2ghf_qn_.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2ghf_qn_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1f50q3c5.d(26): Error: undefined identifier `split`\\n/tmp/tmp1f50q3c5.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp1f50q3c5.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1f50q3c5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_pg_p_s.d(26): Error: undefined identifier `split`\\n/tmp/tmpl_pg_p_s.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpl_pg_p_s.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpl_pg_p_s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7p245ve5.d(26): Error: undefined identifier `split`\\n/tmp/tmp7p245ve5.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp7p245ve5.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp7p245ve5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence, \" \");\n    string result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpryy977rq.d(26): Error: undefined identifier `split`\\n/tmp/tmpryy977rq.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpryy977rq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxiljciev.d(26): Error: undefined identifier `split`\\n/tmp/tmpxiljciev.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpxiljciev.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxiljciev.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2iyf5hxx.d(26): Error: undefined identifier `split`\\n/tmp/tmp2iyf5hxx.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp2iyf5hxx.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2iyf5hxx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00b4kdji.d(26): Error: undefined identifier `split`\\n/tmp/tmp00b4kdji.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp00b4kdji.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp00b4kdji.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0ucrqgh.d(26): Error: undefined identifier `split`\\n/tmp/tmpj0ucrqgh.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpj0ucrqgh.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj0ucrqgh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable words = split(sentence);\n    immutable primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    immutable result = [];\n    foreach(word; words)\n\
    \    {\n        immutable len = word.length;\n        if(primes.canFind(len))\n\
    \        {\n            result ~= word;\n        }\n    }\n    return join(result,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpks9zf17z.d(26): Error: undefined identifier `split`\\n/tmp/tmpks9zf17z.d(37):\
    \ Error: undefined identifier `join`, did you mean function `main`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks9zf17z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8q76t3d.d(26): Error: undefined identifier `split`\\n/tmp/tmpl8q76t3d.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpl8q76t3d.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpl8q76t3d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf4l3_hmi.d(26): Error: undefined identifier `split`\\n/tmp/tmpf4l3_hmi.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpf4l3_hmi.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpf4l3_hmi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzeghzv5i.d(26): Error: undefined identifier `split`\\n/tmp/tmpzeghzv5i.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpzeghzv5i.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzeghzv5i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfobf6c0y.d(26): Error: undefined identifier `split`\\n/tmp/tmpfobf6c0y.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpfobf6c0y.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfobf6c0y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvy5zmt1.d(26): Error: undefined identifier `split`\\n/tmp/tmpwvy5zmt1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpwvy5zmt1.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpwvy5zmt1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp67o9_plr.d(26): Error: undefined identifier `split`\\n/tmp/tmp67o9_plr.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp67o9_plr.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp67o9_plr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmposi943vm.d(26): Error: undefined identifier `split`\\n/tmp/tmposi943vm.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmposi943vm.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmposi943vm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxikamxg3.d(26): Error: undefined identifier `split`\\n/tmp/tmpxikamxg3.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpxikamxg3.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxikamxg3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo945iabb.d(26): Error: undefined identifier `split`\\n/tmp/tmpo945iabb.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpo945iabb.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpo945iabb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpty5dw794.d(26): Error: undefined identifier `split`\\n/tmp/tmpty5dw794.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpty5dw794.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpty5dw794.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplr3lnkax.d(26): Error: undefined identifier `split`\\n/tmp/tmplr3lnkax.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmplr3lnkax.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmplr3lnkax.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split(\" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzro7j0zz.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpzro7j0zz.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpzro7j0zz.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzro7j0zz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprk3y5ry0.d(26): Error: undefined identifier `split`\\n/tmp/tmprk3y5ry0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprk3y5ry0.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprk3y5ry0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40ukfebv.d(26): Error: undefined identifier `split`\\n/tmp/tmp40ukfebv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp40ukfebv.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp40ukfebv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbgkzb4q0.d(26): Error: undefined identifier `split`\\n/tmp/tmpbgkzb4q0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpbgkzb4q0.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbgkzb4q0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpho_bevy6.d(26): Error: undefined identifier `split`\\n/tmp/tmpho_bevy6.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpho_bevy6.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpho_bevy6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgy3cxhl.d(26): Error: undefined identifier `split`\\n/tmp/tmprgy3cxhl.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprgy3cxhl.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprgy3cxhl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpwobef4.d(26): Error: undefined identifier `split`\\n/tmp/tmpgpwobef4.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgpwobef4.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgpwobef4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_cajv8cx.d(26): Error: undefined identifier `split`\\n/tmp/tmp_cajv8cx.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_cajv8cx.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_cajv8cx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavydfl54.d(26): Error: undefined identifier `split`\\n/tmp/tmpavydfl54.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpavydfl54.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpavydfl54.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp6zwr4ih.d(26): Error: undefined identifier `split`\\n/tmp/tmpp6zwr4ih.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpp6zwr4ih.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpp6zwr4ih.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcw0f1c2m.d(26): Error: undefined identifier `split`\\n/tmp/tmpcw0f1c2m.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpcw0f1c2m.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpcw0f1c2m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1xla4f3.d(26): Error: undefined identifier `split`\\n/tmp/tmpn1xla4f3.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpn1xla4f3.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpn1xla4f3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj7kc1af.d(26): Error: undefined identifier `split`\\n/tmp/tmplj7kc1af.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmplj7kc1af.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplj7kc1af.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpijq7ats0.d(26): Error: undefined identifier `split`\\n/tmp/tmpijq7ats0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpijq7ats0.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpijq7ats0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt143cn0b.d(26): Error: undefined identifier `split`\\n/tmp/tmpt143cn0b.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpt143cn0b.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpt143cn0b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxthlb_tc.d(26): Error: undefined identifier `split`\\n/tmp/tmpxthlb_tc.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpxthlb_tc.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxthlb_tc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpswvfxjwi.d(26): Error: undefined identifier `split`\\n/tmp/tmpswvfxjwi.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpswvfxjwi.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpswvfxjwi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqr68ntfy.d(26): Error: undefined identifier `split`\\n/tmp/tmpqr68ntfy.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpqr68ntfy.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqr68ntfy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence, \" \");\n    string result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4anqyh98.d(26): Error: undefined identifier `split`\\n/tmp/tmp4anqyh98.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4anqyh98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqu7_dc6_.d(26): Error: undefined identifier `split`\\n/tmp/tmpqu7_dc6_.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpqu7_dc6_.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqu7_dc6_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lw5_dou.d(26): Error: undefined identifier `split`\\n/tmp/tmp_lw5_dou.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_lw5_dou.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_lw5_dou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0zhqmiw.d(26): Error: undefined identifier `split`\\n/tmp/tmpe0zhqmiw.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpe0zhqmiw.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe0zhqmiw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence);\n    string result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28l5924i.d(26): Error: undefined identifier `split`\\n/tmp/tmp28l5924i.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp28l5924i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9qo_xme.d(26): Error: undefined identifier `split`\\n/tmp/tmpf9qo_xme.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpf9qo_xme.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpf9qo_xme.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptust2gxg.d(26): Error: undefined identifier `split`\\n/tmp/tmptust2gxg.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptust2gxg.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptust2gxg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxj5f18vv.d(26): Error: undefined identifier `split`\\n/tmp/tmpxj5f18vv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpxj5f18vv.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxj5f18vv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaqe6i18g.d(26): Error: undefined identifier `split`\\n/tmp/tmpaqe6i18g.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaqe6i18g.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpaqe6i18g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp8kl7y8b.d(26): Error: undefined identifier `split`\\n/tmp/tmpp8kl7y8b.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpp8kl7y8b.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpp8kl7y8b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.math\
    \ : isPrime;\n    import std.array : array;\n    import std.range : retro;\n \
    \   import std.conv : to;\n    import std.string : join;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \   \nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ve80otm.d(78): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ve80otm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqvriue1.d(26): Error: undefined identifier `split`\\n/tmp/tmpmqvriue1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpmqvriue1.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmqvriue1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8392b14.d(26): Error: undefined identifier `split`\\n/tmp/tmpm8392b14.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpm8392b14.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm8392b14.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2gs6knc.d(26): Error: undefined identifier `split`\\n/tmp/tmpl2gs6knc.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpl2gs6knc.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpl2gs6knc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgh207g7n.d(26): Error: undefined identifier `split`\\n/tmp/tmpgh207g7n.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgh207g7n.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgh207g7n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7acdo1g.d(26): Error: undefined identifier `split`\\n/tmp/tmpn7acdo1g.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpn7acdo1g.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpn7acdo1g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuza1d8i4.d(26): Error: undefined identifier `split`\\n/tmp/tmpuza1d8i4.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpuza1d8i4.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuza1d8i4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgdpq0dr.d(26): Error: undefined identifier `split`\\n/tmp/tmpzgdpq0dr.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpzgdpq0dr.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzgdpq0dr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ss7_if9.d(26): Error: undefined identifier `split`\\n/tmp/tmp5ss7_if9.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp5ss7_if9.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5ss7_if9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidam5fn9.d(26): Error: undefined identifier `split`\\n/tmp/tmpidam5fn9.d(35):\
    \ Error: no property `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpidam5fn9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpookwj3pd.d(26): Error: undefined identifier `split`\\n/tmp/tmpookwj3pd.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpookwj3pd.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpookwj3pd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprz1r3b17.d(26): Error: undefined identifier `split`\\n/tmp/tmprz1r3b17.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprz1r3b17.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprz1r3b17.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq60oftjl.d(26): Error: undefined identifier `split`\\n/tmp/tmpq60oftjl.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpq60oftjl.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpq60oftjl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cdb2g0v.d(26): Error: undefined identifier `split`\\n/tmp/tmp4cdb2g0v.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp4cdb2g0v.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4cdb2g0v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91wa3dnf.d(26): Error: undefined identifier `split`\\n/tmp/tmp91wa3dnf.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp91wa3dnf.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp91wa3dnf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7jpvl2i.d(26): Error: undefined identifier `split`\\n/tmp/tmpj7jpvl2i.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpj7jpvl2i.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpj7jpvl2i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjxjkccc1.d(26): Error: undefined identifier `split`\\n/tmp/tmpjxjkccc1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpjxjkccc1.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjxjkccc1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2n1kmqgv.d(26): Error: undefined identifier `split`\\n/tmp/tmp2n1kmqgv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp2n1kmqgv.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2n1kmqgv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpapycqq68.d(26): Error: undefined identifier `split`\\n/tmp/tmpapycqq68.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpapycqq68.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpapycqq68.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpws_kj3r7.d(26): Error: undefined identifier `split`\\n/tmp/tmpws_kj3r7.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpws_kj3r7.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpws_kj3r7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7f40wp15.d(26): Error: undefined identifier `split`\\n/tmp/tmp7f40wp15.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp7f40wp15.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp7f40wp15.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp23_fxshg.d(26): Error: undefined identifier `split`\\n/tmp/tmp23_fxshg.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp23_fxshg.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp23_fxshg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi2eux6gm.d(26): Error: undefined identifier `split`\\n/tmp/tmpi2eux6gm.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpi2eux6gm.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpi2eux6gm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0mnv3_h.d(26): Error: undefined identifier `split`\\n/tmp/tmpu0mnv3_h.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpu0mnv3_h.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpu0mnv3_h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwvl1zro.d(26): Error: undefined identifier `split`\\n/tmp/tmprwvl1zro.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprwvl1zro.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprwvl1zro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgl6e_s0o.d(26): Error: undefined identifier `split`\\n/tmp/tmpgl6e_s0o.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgl6e_s0o.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgl6e_s0o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93hw_hjh.d(26): Error: undefined identifier `split`\\n/tmp/tmp93hw_hjh.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp93hw_hjh.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp93hw_hjh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgyma9rfp.d(26): Error: undefined identifier `split`\\n/tmp/tmpgyma9rfp.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgyma9rfp.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgyma9rfp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_wmixyc.d(26): Error: undefined identifier `split`\\n/tmp/tmpk_wmixyc.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpk_wmixyc.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpk_wmixyc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6tvaadtm.d(26): Error: undefined identifier `split`\\n/tmp/tmp6tvaadtm.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6tvaadtm.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6tvaadtm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_6rmvpn.d(26): Error: undefined identifier `split`\\n/tmp/tmp0_6rmvpn.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp0_6rmvpn.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0_6rmvpn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp469j1l07.d(26): Error: undefined identifier `split`\\n/tmp/tmp469j1l07.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp469j1l07.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp469j1l07.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupzjgkri.d(26): Error: undefined identifier `split`\\n/tmp/tmpupzjgkri.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpupzjgkri.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpupzjgkri.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence, \" \");\n    string result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwbsn25u.d(26): Error: undefined identifier `split`\\n/tmp/tmprwbsn25u.d(35):\
    \ Error: no property `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprwbsn25u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphmh4r1jk.d(26): Error: undefined identifier `split`\\n/tmp/tmphmh4r1jk.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmphmh4r1jk.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphmh4r1jk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqsu2gbig.d(26): Error: undefined identifier `split`\\n/tmp/tmpqsu2gbig.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpqsu2gbig.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqsu2gbig.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8l58bt3m.d(26): Error: undefined identifier `split`\\n/tmp/tmp8l58bt3m.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp8l58bt3m.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8l58bt3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaaxrh00s.d(26): Error: undefined identifier `split`\\n/tmp/tmpaaxrh00s.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaaxrh00s.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpaaxrh00s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsvu2nu99.d(26): Error: undefined identifier `split`\\n/tmp/tmpsvu2nu99.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpsvu2nu99.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpsvu2nu99.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnhxjgau.d(26): Error: undefined identifier `split`\\n/tmp/tmprnhxjgau.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprnhxjgau.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprnhxjgau.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoycofiuv.d(26): Error: undefined identifier `split`\\n/tmp/tmpoycofiuv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpoycofiuv.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpoycofiuv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8nxj9pa.d(26): Error: undefined identifier `split`\\n/tmp/tmpm8nxj9pa.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpm8nxj9pa.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm8nxj9pa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7nl3q4c.d(26): Error: undefined identifier `split`\\n/tmp/tmpr7nl3q4c.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpr7nl3q4c.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr7nl3q4c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptk4gtrjh.d(26): Error: undefined identifier `split`\\n/tmp/tmptk4gtrjh.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptk4gtrjh.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptk4gtrjh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9vsrvqh.d(26): Error: undefined identifier `split`\\n/tmp/tmpq9vsrvqh.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpq9vsrvqh.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq9vsrvqh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphre8vxfe.d(26): Error: undefined identifier `split`\\n/tmp/tmphre8vxfe.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmphre8vxfe.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphre8vxfe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsy0bsfsn.d(26): Error: undefined identifier `split`\\n/tmp/tmpsy0bsfsn.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpsy0bsfsn.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpsy0bsfsn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string res = \"\"\
    ;\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n       \
    \ {\n            res ~= word ~ \" \";\n        }\n    }\n    return res.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9k6kz6te.d(26): Error: undefined identifier `split`\\n/tmp/tmp9k6kz6te.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp9k6kz6te.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp9k6kz6te.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf4d82po1.d(26): Error: undefined identifier `split`\\n/tmp/tmpf4d82po1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpf4d82po1.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpf4d82po1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqil4o_1q.d(26): Error: undefined identifier `split`\\n/tmp/tmpqil4o_1q.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpqil4o_1q.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqil4o_1q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmasbtbkv.d(26): Error: undefined identifier `split`\\n/tmp/tmpmasbtbkv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpmasbtbkv.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmasbtbkv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00qir303.d(26): Error: undefined identifier `split`\\n/tmp/tmp00qir303.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp00qir303.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp00qir303.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mh2r7bb.d(26): Error: undefined identifier `split`\\n/tmp/tmp_mh2r7bb.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_mh2r7bb.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_mh2r7bb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf6506mnt.d(26): Error: undefined identifier `split`\\n/tmp/tmpf6506mnt.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpf6506mnt.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpf6506mnt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokplz1r2.d(26): Error: undefined identifier `split`\\n/tmp/tmpokplz1r2.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpokplz1r2.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpokplz1r2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstyyf6e8.d(26): Error: undefined identifier `split`\\n/tmp/tmpstyyf6e8.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpstyyf6e8.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpstyyf6e8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaissljzk.d(26): Error: undefined identifier `split`\\n/tmp/tmpaissljzk.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaissljzk.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpaissljzk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxbti98o.d(26): Error: undefined identifier `split`\\n/tmp/tmptxbti98o.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptxbti98o.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptxbti98o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xcf0_fz.d(26): Error: undefined identifier `split`\\n/tmp/tmp6xcf0_fz.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6xcf0_fz.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6xcf0_fz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_o40gzj0.d(26): Error: undefined identifier `split`\\n/tmp/tmp_o40gzj0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_o40gzj0.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_o40gzj0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl967zi82.d(26): Error: undefined identifier `split`\\n/tmp/tmpl967zi82.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpl967zi82.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpl967zi82.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9l96ea2.d(26): Error: undefined identifier `split`\\n/tmp/tmpm9l96ea2.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpm9l96ea2.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm9l96ea2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaxi4sqli.d(26): Error: undefined identifier `split`\\n/tmp/tmpaxi4sqli.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaxi4sqli.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpaxi4sqli.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnl6o81kr.d(26): Error: undefined identifier `split`\\n/tmp/tmpnl6o81kr.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpnl6o81kr.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpnl6o81kr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv21x3wd4.d(26): Error: undefined identifier `split`\\n/tmp/tmpv21x3wd4.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpv21x3wd4.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpv21x3wd4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp536b4mf.d(26): Error: undefined identifier `split`\\n/tmp/tmpp536b4mf.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpp536b4mf.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpp536b4mf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7qn4_50.d(26): Error: undefined identifier `split`\\n/tmp/tmph7qn4_50.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmph7qn4_50.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmph7qn4_50.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3we8g9gg.d(26): Error: undefined identifier `split`\\n/tmp/tmp3we8g9gg.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp3we8g9gg.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3we8g9gg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi02th3z3.d(26): Error: undefined identifier `split`\\n/tmp/tmpi02th3z3.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpi02th3z3.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpi02th3z3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6yf71b0n.d(26): Error: undefined identifier `split`\\n/tmp/tmp6yf71b0n.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6yf71b0n.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6yf71b0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8y6r1gp.d(26): Error: undefined identifier `split`\\n/tmp/tmpw8y6r1gp.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpw8y6r1gp.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpw8y6r1gp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiu7b23aj.d(26): Error: undefined identifier `split`\\n/tmp/tmpiu7b23aj.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpiu7b23aj.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpiu7b23aj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpra4myfdi.d(26): Error: undefined identifier `split`\\n/tmp/tmpra4myfdi.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpra4myfdi.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpra4myfdi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ufa4aoj.d(26): Error: undefined identifier `split`\\n/tmp/tmp6ufa4aoj.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6ufa4aoj.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6ufa4aoj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstfhiek9.d(26): Error: undefined identifier `split`\\n/tmp/tmpstfhiek9.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpstfhiek9.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpstfhiek9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ybs74jk.d(26): Error: undefined identifier `split`\\n/tmp/tmp3ybs74jk.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp3ybs74jk.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3ybs74jk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpufpeei81.d(26): Error: undefined identifier `split`\\n/tmp/tmpufpeei81.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpufpeei81.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpufpeei81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp53gjko7k.d(26): Error: undefined identifier `split`\\n/tmp/tmp53gjko7k.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp53gjko7k.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp53gjko7k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpior4yt28.d(26): Error: undefined identifier `split`\\n/tmp/tmpior4yt28.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpior4yt28.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpior4yt28.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxszpaad.d(26): Error: undefined identifier `split`\\n/tmp/tmpvxszpaad.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpvxszpaad.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpvxszpaad.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi1plv9pv.d(26): Error: undefined identifier `split`\\n/tmp/tmpi1plv9pv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpi1plv9pv.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpi1plv9pv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ogb6v5w.d(26): Error: undefined identifier `split`\\n/tmp/tmp_ogb6v5w.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_ogb6v5w.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_ogb6v5w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprf1_vljx.d(26): Error: undefined identifier `split`\\n/tmp/tmprf1_vljx.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmprf1_vljx.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprf1_vljx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = sentence.split(\" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= \" \" ~ word;\n        }\n    }\n    return\
    \ result.stripLeft();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzieu1dya.d(26): Error: no property `split` for type `string`\\\
    n/tmp/tmpzieu1dya.d(30): Error: undefined identifier `isPrime`\\n/tmp/tmpzieu1dya.d(35):\
    \ Error: no property `stripLeft` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzieu1dya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1pi99b30.d(26): Error: undefined identifier `split`\\n/tmp/tmp1pi99b30.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp1pi99b30.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1pi99b30.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz9452jfo.d(26): Error: undefined identifier `split`\\n/tmp/tmpz9452jfo.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpz9452jfo.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpz9452jfo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxkpxhop.d(26): Error: undefined identifier `split`\\n/tmp/tmpdxkpxhop.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpdxkpxhop.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpdxkpxhop.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ai98bhg.d(26): Error: undefined identifier `split`\\n/tmp/tmp6ai98bhg.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp6ai98bhg.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6ai98bhg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahv1soin.d(26): Error: undefined identifier `split`\\n/tmp/tmpahv1soin.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpahv1soin.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpahv1soin.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpruzp6kfv.d(26): Error: undefined identifier `split`\\n/tmp/tmpruzp6kfv.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpruzp6kfv.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpruzp6kfv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzpah4kfe.d(26): Error: undefined identifier `split`\\n/tmp/tmpzpah4kfe.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpzpah4kfe.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzpah4kfe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bunexqg.d(26): Error: undefined identifier `split`\\n/tmp/tmp1bunexqg.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp1bunexqg.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1bunexqg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppj_i6kd8.d(26): Error: undefined identifier `split`\\n/tmp/tmppj_i6kd8.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmppj_i6kd8.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppj_i6kd8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7twnyq2b.d(26): Error: undefined identifier `split`\\n/tmp/tmp7twnyq2b.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp7twnyq2b.d(35): Error: undefined\
    \ identifier `join`, did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7twnyq2b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0a66xubo.d(26): Error: undefined identifier `split`\\n/tmp/tmp0a66xubo.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp0a66xubo.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0a66xubo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_vs3z__v.d(26): Error: undefined identifier `split`\\n/tmp/tmp_vs3z__v.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_vs3z__v.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_vs3z__v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.range\
    \ : join;\n    import std.typecons : tuple;\n    import std.math : isPrime;\n\
    \    return sentence.split(\" \")\n        .filter!(x => x.length.isPrime)\n \
    \       .map!(x => tuple(x, x.length))\n        .sort!((a, b) => a[1] < b[1])\n\
    \        .map!(x => x[0])\n        .join(\" \");\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5i5g9s3u.d(29): Error: module `std.math` import `isPrime` not\
    \ found\\n/tmp/tmp5i5g9s3u.d(30): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5i5g9s3u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0slqjxu5.d(26): Error: undefined identifier `split`\\n/tmp/tmp0slqjxu5.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp0slqjxu5.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp0slqjxu5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp720yh1nm.d(26): Error: undefined identifier `split`\\n/tmp/tmp720yh1nm.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp720yh1nm.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp720yh1nm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppx55xnw4.d(26): Error: undefined identifier `split`\\n/tmp/tmppx55xnw4.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmppx55xnw4.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppx55xnw4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeo9gvw_8.d(26): Error: undefined identifier `split`\\n/tmp/tmpeo9gvw_8.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpeo9gvw_8.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpeo9gvw_8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpve15ml6u.d(26): Error: undefined identifier `split`\\n/tmp/tmpve15ml6u.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpve15ml6u.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpve15ml6u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphyhtqx0c.d(26): Error: undefined identifier `split`\\n/tmp/tmphyhtqx0c.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmphyhtqx0c.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphyhtqx0c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    // split the sentence into words\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  // check if the length of the word is a prime number\n        if(isPrime(word.length))\n\
    \        {\n            // if it is, add it to the result\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebzs8agg.d(27): Error: undefined identifier `split`\\n/tmp/tmpebzs8agg.d(32):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpebzs8agg.d(38): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpebzs8agg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgrvvzcc1.d(26): Error: undefined identifier `split`\\n/tmp/tmpgrvvzcc1.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgrvvzcc1.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgrvvzcc1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5etkgcx7.d(26): Error: undefined identifier `split`\\n/tmp/tmp5etkgcx7.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp5etkgcx7.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5etkgcx7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv_vmjvrt.d(26): Error: undefined identifier `split`\\n/tmp/tmpv_vmjvrt.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpv_vmjvrt.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpv_vmjvrt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdx70gcka.d(26): Error: undefined identifier `split`\\n/tmp/tmpdx70gcka.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpdx70gcka.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpdx70gcka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8newf36d.d(26): Error: undefined identifier `split`\\n/tmp/tmp8newf36d.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp8newf36d.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp8newf36d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42u3v2wm.d(26): Error: undefined identifier `split`\\n/tmp/tmp42u3v2wm.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp42u3v2wm.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp42u3v2wm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_m5lacft.d(26): Error: undefined identifier `split`\\n/tmp/tmp_m5lacft.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_m5lacft.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_m5lacft.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_0sdcaz.d(26): Error: undefined identifier `split`\\n/tmp/tmp4_0sdcaz.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp4_0sdcaz.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4_0sdcaz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7h1y9c69.d(26): Error: undefined identifier `split`\\n/tmp/tmp7h1y9c69.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp7h1y9c69.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp7h1y9c69.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpico6pjju.d(26): Error: undefined identifier `split`\\n/tmp/tmpico6pjju.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpico6pjju.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpico6pjju.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3d15_o6i.d(26): Error: undefined identifier `split`\\n/tmp/tmp3d15_o6i.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp3d15_o6i.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3d15_o6i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxn0v294.d(26): Error: undefined identifier `split`\\n/tmp/tmpsxn0v294.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpsxn0v294.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpsxn0v294.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlef0di2.d(26): Error: undefined identifier `split`\\n/tmp/tmptlef0di2.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptlef0di2.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptlef0di2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5lhewkl9.d(26): Error: undefined identifier `split`\\n/tmp/tmp5lhewkl9.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp5lhewkl9.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5lhewkl9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftcdrxz0.d(26): Error: undefined identifier `split`\\n/tmp/tmpftcdrxz0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpftcdrxz0.d(35): Error: no property\
    \ `trim` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpftcdrxz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn9ouz06b.d(26): Error: undefined identifier `split`\\n/tmp/tmpn9ouz06b.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpn9ouz06b.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpn9ouz06b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cr08ka6.d(26): Error: undefined identifier `split`\\n/tmp/tmp2cr08ka6.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp2cr08ka6.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp2cr08ka6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpad_a7o2z.d(26): Error: undefined identifier `split`\\n/tmp/tmpad_a7o2z.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpad_a7o2z.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpad_a7o2z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaujj6j8m.d(26): Error: undefined identifier `split`\\n/tmp/tmpaujj6j8m.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpaujj6j8m.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpaujj6j8m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7etrr1v.d(26): Error: undefined identifier `split`\\n/tmp/tmpr7etrr1v.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpr7etrr1v.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr7etrr1v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1d6zu0p.d(26): Error: undefined identifier `split`\\n/tmp/tmpk1d6zu0p.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpk1d6zu0p.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpk1d6zu0p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp336q017m.d(26): Error: undefined identifier `split`\\n/tmp/tmp336q017m.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp336q017m.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp336q017m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_ms7u7_.d(26): Error: undefined identifier `split`\\n/tmp/tmps_ms7u7_.d(30):\
    \ Error: undefined identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps_ms7u7_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkd1ltgt0.d(26): Error: undefined identifier `split`\\n/tmp/tmpkd1ltgt0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpkd1ltgt0.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpkd1ltgt0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptpen8d0_.d(26): Error: undefined identifier `split`\\n/tmp/tmptpen8d0_.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmptpen8d0_.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptpen8d0_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp616_0ker.d(26): Error: undefined identifier `split`\\n/tmp/tmp616_0ker.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp616_0ker.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp616_0ker.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_3yl9yhq.d(26): Error: undefined identifier `split`\\n/tmp/tmp_3yl9yhq.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp_3yl9yhq.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_3yl9yhq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuiw1fqzx.d(26): Error: undefined identifier `split`\\n/tmp/tmpuiw1fqzx.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpuiw1fqzx.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuiw1fqzx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeaeifej.d(26): Error: undefined identifier `split`\\n/tmp/tmpmeaeifej.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpmeaeifej.d(35): Error: no property\
    \ `stripRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmeaeifej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpor51c2hh.d(26): Error: undefined identifier `split`\\n/tmp/tmpor51c2hh.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpor51c2hh.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpor51c2hh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8wlw2dm0.d(26): Error: undefined identifier `split`\\n/tmp/tmp8wlw2dm0.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp8wlw2dm0.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp8wlw2dm0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n\
    \    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output:\
    \ \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n      \
    \  * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgoqzpo0c.d(26): Error: undefined identifier `split`\\n/tmp/tmpgoqzpo0c.d(30):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmpgoqzpo0c.d(35): Error: no property\
    \ `trimRight` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgoqzpo0c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
