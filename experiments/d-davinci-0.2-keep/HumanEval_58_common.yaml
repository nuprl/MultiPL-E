name: HumanEval_58_common
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements\
  \ for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n \
  \   \n*/\nlong[] common(long[] l1, long[] l2) \n"
tests: "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
  \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
  \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
  \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L,\
  \ 8L], []) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n   \
    \     if(l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result;\n    long[] temp;\n\
    \    long[] temp2;\n    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n\
    \    long[] temp6;\n    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n\
    \    long[] temp10;\n    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n\
    \    long[] temp14;\n    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n\
    \    long[] temp18;\n    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n\
    \    long[] temp22;\n    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n\
    \    long[] temp26;\n    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n\
    \    long[] temp30;\n    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n\
    \    long[] temp34;\n    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n\
    \    long[] temp38;\n    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n\
    \    long[] temp42;\n    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n\
    \    long[] temp46;\n    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n\
    \    long[] temp50;\n    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n\
    \    long[] temp54;\n    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n\
    \    long[] temp58;\n    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n\
    \    long[] temp62;\n    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n\
    \    long[] temp66;\n    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n\
    \    long[] temp70;\n    long[] temp71;\n    long[] temp72;\n", "{\n    long[]\
    \ result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    foreach(long i; l1)\n    {\n        foreach(long\
    \ j; l2)\n        {\n            if(i == j)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = new long[];\n    foreach(long l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().dup;\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] res;\n    foreach(e; l1)\n    {\n        if(e in l2)\n    \
    \    {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length > l2.length) \n    {\n        result\
    \ = common(l2, l1);\n    } \n    else \n    {\n        result = [];\n        foreach\
    \ (l; l1) \n        {\n            if (l in l2) \n            {\n            \
    \    result ~= l;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            if(!result.canFind(i))\n            {\n              \
    \  result ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto s1 = l1.sort();\n    auto s2 = l2.sort();\n    auto result = new long[];\n\
    \    auto i = 0;\n    auto j = 0;\n    while (i < s1.length && j < s2.length)\
    \ \n    {\n        if (s1[i] == s2[j]) \n        {\n            result ~= s1[i];\n\
    \            i++;\n            j++;\n        } \n        else if (s1[i] < s2[j])\
    \ \n        {\n            i++;\n        } \n        else \n        {\n      \
    \      j++;\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[0];\n    foreach(long x; l1)\n    {\n        foreach(long y; l2)\n\
    \        {\n            if(x == y)\n            {\n                result ~= x;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] res = new long[];\n    foreach(l; l1)\n    {\n        if(l2.count(l)\
    \ > 0)\n        {\n            res ~= l;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            if(!result.canFind(i))\n            {\n              \
    \  result ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(long i; l1)\n    {\n    \
    \    if(l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = [];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n        {\n            result ~= l;\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result =\
    \ [];\n    foreach(long i; l1)\n    {\n        foreach(long j; l2)\n        {\n\
    \            if(i == j)\n            {\n                result ~= i;\n       \
    \     }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted = l2.dup.sort;\n\
    \    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n\
    \    long[] l1_unique_sorted = l1_unique.sort;\n    long[] l2_unique_sorted =\
    \ l2_unique.sort;\n    long[] l1_unique_sorted_set = l1_unique_sorted.toSet;\n\
    \    long[] l2_unique_sorted_set = l2_unique_sorted.toSet;\n    long[] l1_unique_sorted_set_intersection\
    \ = l1_unique_sorted_set.intersection(l2_unique_sorted_set);\n    result = l1_unique_sorted_set_intersection.array;\n\
    \    return result;\n}", "{\n    long[] result;\n    if (l1.length > l2.length)\
    \ \n    {\n        result = l1.filter!(x => l2.canFind(x)).array.sort().uniq;\n\
    \    } \n    else \n    {\n        result = l2.filter!(x => l1.canFind(x)).array.sort().uniq;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    long[] result2 = new long[l1.length];\n    long[] result3 = new long[l1.length];\n\
    \    long[] result4 = new long[l1.length];\n    long[] result5 = new long[l1.length];\n\
    \    long[] result6 = new long[l1.length];\n    long[] result7 = new long[l1.length];\n\
    \    long[] result8 = new long[l1.length];\n    long[] result9 = new long[l1.length];\n\
    \    long[] result10 = new long[l1.length];\n    long[] result11 = new long[l1.length];\n\
    \    long[] result12 = new long[l1.length];\n    long[] result13 = new long[l1.length];\n\
    \    long[] result14 = new long[l1.length];\n    long[] result15 = new long[l1.length];\n\
    \    long[] result16 = new long[l1.length];\n    long[] result17 = new long[l1.length];\n\
    \    long[] result18 = new long[l1.length];\n    long[] result19 = new long[l1.length];\n\
    \    long[] result20 = new long[l1.length];\n    long[] result21 = new long[l1.length];\n\
    \    long[] result22 = new long[l1.length];\n    long[] result23 = new long[l1.length];\n\
    \    long[] result24 = new long[l1.length];\n    long[] result25 = new long[l1.length];\n\
    \    long[] result26 = new long[l1.length];\n    long[] result27 = new long[l1.length];\n\
    \    long[] result28 = new long[l1.length];\n    long[] result29 = new long[l1.length];\n\
    \    long[] result30 = new long[l1.length];\n    long[] result31 = new long[l1.length];\n\
    \    long[] result32 = new long[l1.length];\n    long[] result33 = new long[l1.length];\n\
    \    long[] result34 = new long[l1.length];\n", "{\n    long[] result;\n    result\
    \ = l1.filter!(a => l2.canFind(a)).sort().unique();\n    return result;\n}", "{\n\
    \    long[] result = new long[l1.length];\n    long[] result2 = new long[l1.length];\n\
    \    long[] result3 = new long[l1.length];\n    long[] result4 = new long[l1.length];\n\
    \    long[] result5 = new long[l1.length];\n    long[] result6 = new long[l1.length];\n\
    \    long[] result7 = new long[l1.length];\n    long[] result8 = new long[l1.length];\n\
    \    long[] result9 = new long[l1.length];\n    long[] result10 = new long[l1.length];\n\
    \    long[] result11 = new long[l1.length];\n    long[] result12 = new long[l1.length];\n\
    \    long[] result13 = new long[l1.length];\n    long[] result14 = new long[l1.length];\n\
    \    long[] result15 = new long[l1.length];\n    long[] result16 = new long[l1.length];\n\
    \    long[] result17 = new long[l1.length];\n    long[] result18 = new long[l1.length];\n\
    \    long[] result19 = new long[l1.length];\n    long[] result20 = new long[l1.length];\n\
    \    long[] result21 = new long[l1.length];\n    long[] result22 = new long[l1.length];\n\
    \    long[] result23 = new long[l1.length];\n    long[] result24 = new long[l1.length];\n\
    \    long[] result25 = new long[l1.length];\n    long[] result26 = new long[l1.length];\n\
    \    long[] result27 = new long[l1.length];\n    long[] result28 = new long[l1.length];\n\
    \    long[] result29 = new long[l1.length];\n    long[] result30 = new long[l1.length];\n\
    \    long[] result31 = new long[l1.length];\n    long[] result32 = new long[l1.length];\n\
    \    long[] result33 = new long[l1.length];\n    long[] result34 = new long[l1.length];\n",
  "{\n    long[] result;\n    long[] l1_unique = l1.unique;\n    long[] l2_unique\
    \ = l2.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long j;\
    \ l2_unique)\n        {\n            if(i == j)\n            {\n             \
    \   result ~= i;\n            }\n        }\n    }\n    return result.sort;\n}",
  "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort();\n    long[] l2_sorted\
    \ = l2.dup.sort();\n    long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique\
    \ = l2_sorted.dup.uniq;\n    foreach(e; l1_unique)\n    {\n        if(l2_unique.canFind(e))\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result;\n    result = l1.filter!(x => l2.canFind(x)).sort().uniq;\n\
    \    return result;\n}", "{\n    long[] result;\n    long[] temp;\n    long[]\
    \ temp2;\n    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n    long[]\
    \ temp6;\n    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n    long[]\
    \ temp10;\n    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n    long[]\
    \ temp14;\n    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n    long[]\
    \ temp18;\n    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n    long[]\
    \ temp22;\n    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n    long[]\
    \ temp26;\n    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n    long[]\
    \ temp30;\n    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n    long[]\
    \ temp34;\n    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n    long[]\
    \ temp38;\n    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n    long[]\
    \ temp42;\n    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n    long[]\
    \ temp46;\n    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n    long[]\
    \ temp50;\n    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n    long[]\
    \ temp54;\n    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n    long[]\
    \ temp58;\n    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n    long[]\
    \ temp62;\n    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n    long[]\
    \ temp66;\n    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n    long[]\
    \ temp70;\n    long[] temp71;\n    long[] temp72;\n", "{\n    long[] result;\n\
    \    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n           \
    \ result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ auto s1 = l1.sort();\n    auto s2 = l2.sort();\n    long[] res;\n    foreach(i,\
    \ e; s1)\n    {\n        if(s2.canFind(e))\n        {\n            res ~= e;\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(i; l1)\n    {\n        foreach(j; l2)\n        {\n            if(i\
    \ == j)\n            {\n                result ~= i;\n            }\n        }\n\
    \    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new long[0];\n\
    \    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted = l2.dup.sort;\n  \
    \  long i = 0;\n    long j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] == l2_sorted[j]) \n        {\n           \
    \ result ~= l1_sorted[i];\n            i++;\n            j++;\n        }\n   \
    \     else if (l1_sorted[i] < l2_sorted[j]) \n        {\n            i++;\n  \
    \      }\n        else \n        {\n            j++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l1)\n\
    \    {\n        foreach(long j; l2)\n        {\n            if(i == j)\n     \
    \       {\n                result ~= i;\n            }\n        }\n    }\n   \
    \ return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n    foreach(e;\
    \ l1)\n    {\n        if(e in l2)\n        {\n            result ~= e;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n \
    \           result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n    >>> unique([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 2, 3, 4, 5, 7, 9, 34, 121, 653]\n\
    \    >>> unique([5, 3, 2, 8], [3, 2])\n    [2, 3, 5, 8]\n*/\nlong[] unique(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach(l; l1)\n  \
    \  {\n        result ~= l;\n    }\n    foreach(l; l2)\n    {\n        result ~=\
    \ l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n    >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
    \ 121])\n    [1, 2, 3, 4, 5, 7, 9, 34, 121, 653]\n    >>> unique([5, 3, 2, 8],\
    \ [3, 2])\n    [2, 3, 5, 8]\n*/\nlong[] unique(long[] l1, long[] l2) \n{\n   \
    \ long[] result = new long[];\n    foreach(l; l1)\n    {\n        result ~= l;\n\
    \    }\n    foreach(l; l2)\n    {\n        result ~= l;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n    >>> unique([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 2, 3, 4, 5, 7, 9, 34, 121,\
    \ 653]", "{\n    long[] result = [];\n    foreach(e1; l1)\n    {\n        foreach(e2;\
    \ l2)\n        {\n            if(e1 == e2)\n            {\n                result\
    \ ~= e1;\n            }\n        }\n    }\n    return result.sort().unique;\n}",
  "{\n    long[] res = new long[0];\n    long[] l1_sorted = sort(l1);\n    long[]\
    \ l2_sorted = sort(l2);\n    long i = 0;\n    long j = 0;\n    while (i < l1_sorted.length\
    \ && j < l2_sorted.length) \n    {\n        if (l1_sorted[i] == l2_sorted[j])\
    \ \n        {\n            res ~= l1_sorted[i];\n            i++;\n          \
    \  j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j]) \n        {\n\
    \            i++;\n        }\n        else \n        {\n            j++;\n   \
    \     }\n    }\n    return res;\n}\n/*\nReturn sorted unique elements for two\
    \ lists.\n    >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\
    \    [2, 3, 4, 7, 9, 34, 121]\n    >>> unique([5, 3, 2, 8], [3, 2])\n    [2, 3,\
    \ 5, 8]\n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] res = new long[0];\n\
    \    long[] l1_sorted = sort(l1);\n    long[] l2_sorted = sort(l2);\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] == l2_sorted[j]) \n        {\n           \
    \ i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\
    \ \n        {\n            res ~= l1_sorted[i];\n            i++;\n        }\n\
    \        else \n        {\n            res ~= l2_sorted[j];\n            j++;\n\
    \        }\n    }\n    while (i < l1_sorted.length", "{\n    long[] result = [];\n\
    \    foreach(long i; l1)\n    {\n        foreach(long j; l2)\n        {\n    \
    \        if(i == j)\n            {\n                result ~= i;\n           \
    \ }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result\
    \ = new long[0];\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted =\
    \ l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    foreach(e; l1)\n    {\n        if(e in l2)\n  \
    \      {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] res = new long[l1.length];\n    long[] res2 = new long[l1.length];\n\
    \    long[] res3 = new long[l1.length];\n    long[] res4 = new long[l1.length];\n\
    \    long[] res5 = new long[l1.length];\n    long[] res6 = new long[l1.length];\n\
    \    long[] res7 = new long[l1.length];\n    long[] res8 = new long[l1.length];\n\
    \    long[] res9 = new long[l1.length];\n    long[] res10 = new long[l1.length];\n\
    \    long[] res11 = new long[l1.length];\n    long[] res12 = new long[l1.length];\n\
    \    long[] res13 = new long[l1.length];\n    long[] res14 = new long[l1.length];\n\
    \    long[] res15 = new long[l1.length];\n    long[] res16 = new long[l1.length];\n\
    \    long[] res17 = new long[l1.length];\n    long[] res18 = new long[l1.length];\n\
    \    long[] res19 = new long[l1.length];\n    long[] res20 = new long[l1.length];\n\
    \    long[] res21 = new long[l1.length];\n    long[] res22 = new long[l1.length];\n\
    \    long[] res23 = new long[l1.length];\n    long[] res24 = new long[l1.length];\n\
    \    long[] res25 = new long[l1.length];\n    long[] res26 = new long[l1.length];\n\
    \    long[] res27 = new long[l1.length];\n    long[] res28 = new long[l1.length];\n\
    \    long[] res29 = new long[l1.length];\n    long[] res30 = new long[l1.length];\n\
    \    long[] res31 = new long[l1.length];\n    long[] res32 = new long[l1.length];\n\
    \    long[] res33 = new long[l1.length];\n    long[] res34 = new long[l1.length];\n",
  "{\n    long[] result = new long[];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] res = new long[];\n    foreach(e; l1)\n    {\n        if(e\
    \ in l2)\n        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l1)\n    {\n        if(l2.canFind(e))\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[l1.length];\n    long[] result2 = new long[l1.length];\n\
    \    long[] result3 = new long[l1.length];\n    long[] result4 = new long[l1.length];\n\
    \    long[] result5 = new long[l1.length];\n    long[] result6 = new long[l1.length];\n\
    \    long[] result7 = new long[l1.length];\n    long[] result8 = new long[l1.length];\n\
    \    long[] result9 = new long[l1.length];\n    long[] result10 = new long[l1.length];\n\
    \    long[] result11 = new long[l1.length];\n    long[] result12 = new long[l1.length];\n\
    \    long[] result13 = new long[l1.length];\n    long[] result14 = new long[l1.length];\n\
    \    long[] result15 = new long[l1.length];\n    long[] result16 = new long[l1.length];\n\
    \    long[] result17 = new long[l1.length];\n    long[] result18 = new long[l1.length];\n\
    \    long[] result19 = new long[l1.length];\n    long[] result20 = new long[l1.length];\n\
    \    long[] result21 = new long[l1.length];\n    long[] result22 = new long[l1.length];\n\
    \    long[] result23 = new long[l1.length];\n    long[] result24 = new long[l1.length];\n\
    \    long[] result25 = new long[l1.length];\n    long[] result26 = new long[l1.length];\n\
    \    long[] result27 = new long[l1.length];\n    long[] result28 = new long[l1.length];\n\
    \    long[] result29 = new long[l1.length];\n    long[] result30 = new long[l1.length];\n\
    \    long[] result31 = new long[l1.length];\n    long[] result32 = new long[l1.length];\n\
    \    long[] result33 = new long[l1.length];\n    long[] result34 = new long[l1.length];\n",
  "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n\
    \    long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result =\
    \ l1.dup;\n        foreach (long x; l2) \n        {\n            if (x in result)\
    \ \n            {\n                result ~= x;\n            }\n        }\n  \
    \  } \n    else \n    {\n        result = l2.dup;\n        foreach (long x; l1)\
    \ \n        {\n            if (x in result) \n            {\n                result\
    \ ~= x;\n            }\n        }\n    }\n    return result.sort.uniq;\n}", "{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique\
    \ = l2_sorted.dup.uniq;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    auto s1 = l1.sort();\n    auto s2 = l2.sort();\n    auto r = s1.intersect(s2);\n\
    \    return r.array();\n}", "{\n    long[] result = [];\n    foreach(long i; l1)\n\
    \    {\n        if(l2.canFind(i))\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result.sort().dup.unique;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(long i; l1)\n    {\n        foreach(long j; l2)\n\
    \        {\n            if(i == j)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result;\n    foreach(e; l1)\n    {\n        if(e in l2)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] l3 = l1.dup;\n    l3.sort;\n    long[] l4 = l2.dup;\n    l4.sort;\n\
    \    long[] l5 = l3.intersect(l4);\n    return l5;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n      \
    \  {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result\
    \ = l1.dup;\n        foreach (e; l2) \n        {\n            if (e in result)\
    \ \n            {\n                result ~= e;\n            }\n        }\n  \
    \  } \n    else \n    {\n        result = l2.dup;\n        foreach (e; l1) \n\
    \        {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    }\n    return result.sort.uniq;\n}", "{\n\
    \    auto s1 = l1.sort().uniq;\n    auto s2 = l2.sort().uniq;\n    long[] res;\n\
    \    foreach(e1; s1)\n    {\n        foreach(e2; s2)\n        {\n            if(e1\
    \ == e2)\n            {\n                res ~= e1;\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    long[] result;\n    foreach(l; l1)\n    {\n\
    \        if(l2.canFind(l))\n        {\n            result ~= l;\n        }\n \
    \   }\n    return result.sort().uniq;\n}", "{\n    long[] result = [];\n    foreach(e1;\
    \ l1)\n    {\n        foreach(e2; l2)\n        {\n            if(e1 == e2)\n \
    \           {\n                result ~= e1;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = new long[0];\n  \
    \  foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n            result\
    \ ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result\
    \ = l1.dup;\n        foreach (el; l2) \n        {\n            if (el in result)\
    \ \n            {\n                result ~= el;\n            }\n        }\n \
    \   } \n    else \n    {\n        result = l2.dup;\n        foreach (el; l1) \n\
    \        {\n            if (el in result) \n            {\n                result\
    \ ~= el;\n            }\n        }\n    }\n    return result.sort.uniq;\n}", "{\n\
    \    long[] l3 = new long[l1.length];\n    long[] l4 = new long[l2.length];\n\
    \    long[] l5 = new long[l1.length];\n    long[] l6 = new long[l2.length];\n\
    \    long[] l7 = new long[l1.length];\n    long[] l8 = new long[l2.length];\n\
    \    long[] l9 = new long[l1.length];\n    long[] l10 = new long[l2.length];\n\
    \    long[] l11 = new long[l1.length];\n    long[] l12 = new long[l2.length];\n\
    \    long[] l13 = new long[l1.length];\n    long[] l14 = new long[l2.length];\n\
    \    long[] l15 = new long[l1.length];\n    long[] l16 = new long[l2.length];\n\
    \    long[] l17 = new long[l1.length];\n    long[] l18 = new long[l2.length];\n\
    \    long[] l19 = new long[l1.length];\n    long[] l20 = new long[l2.length];\n\
    \    long[] l21 = new long[l1.length];\n    long[] l22 = new long[l2.length];\n\
    \    long[] l23 = new long[l1.length];\n    long[] l24 = new long[l2.length];\n\
    \    long[] l25 = new long[l1.length];\n    long[] l26 = new long[l2.length];\n\
    \    long[] l27 = new long[l1.length];\n    long[] l28 = new long[l2.length];\n\
    \    long[] l29 = new long[l1.length];\n    long[] l30 = new long[l2.length];\n\
    \    long[] l31 = new long[l1.length];\n    long[] l32 = new long[l2.length];\n\
    \    long[] l33 = new long[l1.length];\n    long[] l34 = new long[l2.length];\n\
    \    long[] l35 = new long[l1.length];\n    long[] l36 = new long[l2.length];",
  "{\n    long[] result;\n    foreach(e; l1)\n    {\n        if(e in l2)\n       \
    \ {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(long x; l1)\n    {\n    \
    \    if(l2.canFind(x))\n        {\n            result ~= x;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = [];\n    foreach(e;\
    \ l1)\n    {\n        if(e in l2)\n        {\n            result ~= e;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = [];\n\
    \    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n           \
    \ if(!result.canFind(l))\n            {\n                result ~= l;\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n \
    \           result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_uniq = l1_sorted.dup.uniq;\n    long[] l2_uniq\
    \ = l2_sorted.dup.uniq;\n    foreach(l1_item; l1_uniq)\n    {\n        foreach(l2_item;\
    \ l2_uniq)\n        {\n            if(l1_item == l2_item)\n            {\n   \
    \             result ~= l1_item;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    foreach(long i; l1)\n\
    \    {\n        foreach(long j; l2)\n        {\n            if(i == j)\n     \
    \       {\n                result ~= i;\n            }\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\
    \    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]", "{\n    auto\
    \ s1 = l1.sort().unique();\n    auto s2 = l2.sort().unique();\n    return s1.intersect(s2);\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    auto l1_set = set(l1);\n    auto l2_set = set(l2);\n    auto common_set\
    \ = l1_set & l2_set;\n    return common_set.array;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n      \
    \  {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    auto l1_set = set(l1);\n    auto l2_set = set(l2);\n    auto common_set\
    \ = l1_set & l2_set;\n    return common_set.array;\n}", "{\n    auto s1 = l1.sort().uniq;\n\
    \    auto s2 = l2.sort().uniq;\n    long[] result;\n    foreach(e1; s1)\n    {\n\
    \        foreach(e2; s2)\n        {\n            if(e1 == e2)\n            {\n\
    \                result ~= e1;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    result = [];\n    foreach(l; l1)\n    {\n    \
    \    foreach(r; l2)\n        {\n            if(l == r)\n            {\n      \
    \          result ~= l;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup.sort;\n\
    \    long[] l2_sorted = l2.dup.sort;\n    long l1_len = l1_sorted.length;\n  \
    \  long l2_len = l2_sorted.length;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < l1_len && j < l2_len) \n    {\n        if (l1_sorted[i] == l2_sorted[j])\
    \ \n        {\n            result ~= l1_sorted[i];\n            i++;\n       \
    \     j++;\n        } \n        else if (l1_sorted[i] < l2_sorted[j]) \n     \
    \   {\n            i++;\n        } \n        else \n        {\n            j++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n        {\n      \
    \      if(!result.canFind(i))\n            {\n                result ~= i;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (l1.length > l2.length) \n    {\n        result = l1.dup;\n        foreach\
    \ (long i; l2) \n        {\n            if (result.canFind(i)) \n            {\n\
    \                result ~= i;\n            }\n        }\n    } \n    else \n \
    \   {\n        result = l2.dup;\n        foreach (long i; l1) \n        {\n  \
    \          if (result.canFind(i)) \n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result = new long[];\n    foreach(i; l1)\n    {\n        foreach(j; l2)\n\
    \        {\n            if(i == j)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] res = new long[];\n    foreach(e; l1)\n    {\n        if(l2.canFind(e))\n\
    \        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result\
    \ = l1.dup;\n        foreach (e; l2) \n        {\n            if (e in result)\
    \ \n            {\n                result ~= e;\n            }\n        }\n  \
    \  } \n    else \n    {\n        result = l2.dup;\n        foreach (e; l1) \n\
    \        {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    }\n    return result.sort.uniq;\n}", "{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    result = l1_sorted.filter!(a => l2_sorted.canFind(a));\n\
    \    return result;\n}", "{\n    long[] result = new long[0];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n        {\n            result ~= l;\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result;\n\
    \    foreach(e; l1)\n    {\n        if(e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n       \
    \ {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] temp;\n    if (l1.length > l2.length) \n\
    \    {\n        temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    result\
    \ = new long[l1.length];\n    long i = 0;\n    foreach (long item; l1) \n    {\n\
    \        if (item in l2) \n        {\n            result[i] = item;\n        \
    \    i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    auto result\
    \ = new long[](0);\n    auto l1_set = new long[](0);\n    auto l2_set = new long[](0);\n\
    \    foreach(i; l1)\n    {\n        l1_set ~= i;\n    }\n    foreach(i; l2)\n\
    \    {\n        l2_set ~= i;\n    }\n    foreach(i; l1_set)\n    {\n        foreach(j;\
    \ l2_set)\n        {\n            if(i == j)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup.sort();\n    long[] l2_sorted = l2.dup.sort();\n\
    \    long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique = l2_sorted.dup.uniq;\n\
    \    long[] l1_unique_set = l1_unique.dup.toHashSet;\n    long[] l2_unique_set\
    \ = l2_unique.dup.toHashSet;\n    long[] l1_unique_set_intersection = l1_unique_set.dup.intersection(l2_unique_set);\n\
    \    result = l1_unique_set_intersection.dup.toArray;\n    return result;\n}",
  "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    long[] l1_unique_sorted = l1_unique.sort;\n    long[]\
    \ l2_unique_sorted = l2_unique.sort;\n    long[] l1_unique_sorted_set = l1_unique_sorted.toSet;\n\
    \    long[] l2_unique_sorted_set = l2_unique_sorted.toSet;\n    long[] l1_unique_sorted_set_intersection\
    \ = l1_unique_sorted_set.intersection(l2_unique_sorted_set);\n    result = l1_unique_sorted_set_intersection.toArray;\n\
    \    return result;\n}", "{\n    long[] result;\n    if (l1.length < l2.length)\
    \ \n    {\n        result = l1.dup;\n        l1 = l2;\n        l2 = result;\n\
    \    }\n    result = [];\n    foreach (e; l1) \n    {\n        if (e in l2) \n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort.uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result\
    \ = l1.dup;\n        foreach (e; l2) \n        {\n            if (e in result)\
    \ \n            {\n                result ~= e;\n            }\n        }\n  \
    \  } \n    else \n    {\n        result = l2.dup;\n        foreach (e; l1) \n\
    \        {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = [];\n    foreach(e; l1)\n    {\n        if(e in l2)\n  \
    \      {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(e; l1)\n    {\n        if(e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] res = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            res ~= l;\n        }\n    }\n    res = res.sort();\n \
    \   res = res.uniq;\n    return res;\n}", "{\n    long[] result;\n    long[] l1_sorted\
    \ = l1.dup.sort;\n    long[] l2_sorted = l2.dup.sort;\n    long[] l1_unique =\
    \ l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n    long[] l1_unique_set\
    \ = l1_unique.toSet;\n    long[] l2_unique_set = l2_unique.toSet;\n    long[]\
    \ l1_unique_set_intersection = l1_unique_set.intersection(l2_unique_set);\n  \
    \  result = l1_unique_set_intersection.toArray;\n    return result;\n}", "{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(i; 0..l1_unique.length)\n    {\n        foreach(j;\
    \ 0..l2_unique.length)\n        {\n            if(l1_unique[i] == l2_unique[j])\n\
    \            {\n                result ~= l1_unique[i];\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n \
    \   long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted = l2.dup.sort;\n   \
    \ long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique = l2_sorted.dup.uniq;\n\
    \    long[] l1_unique_sorted = l1_unique.dup.sort;\n    long[] l2_unique_sorted\
    \ = l2_unique.dup.sort;\n    long[] l1_unique_sorted_reversed = l1_unique_sorted.dup.reverse;\n\
    \    long[] l2_unique_sorted_reversed = l2_unique_sorted.dup.reverse;\n    long[]\
    \ l1_unique_sorted_reversed_uniq = l1_unique_sorted_reversed.dup.uniq;\n    long[]\
    \ l2_unique_sorted_reversed_uniq = l2_unique_sorted_reversed.dup.uniq;\n    long[]\
    \ l1_unique_sorted_reversed_uniq_sorted = l1_unique_sorted_reversed_uniq.dup.sort;\n\
    \    long[] l2_unique_sorted_reversed_uniq_sorted = l2_unique_sorted_reversed_uniq.dup.sort;\n\
    \    long[] l1_unique_sorted_reversed_uniq_sorted_reversed = l1_unique_sorted_reversed_uniq_sorted.dup.reverse;\n\
    \    long[] l2_unique_sorted_reversed_uniq_sorted_reversed = l2_unique_sorted_reversed_uniq_sorted.dup.reverse;\n\
    \    long[] l1_unique_sorted_reversed_uniq_sorted_reversed_uniq = l1_unique_sorted_reversed_uniq_sorted_reversed.dup.uniq;\n\
    \    long[] l2", "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n    \
    \    if(l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = [];\n    foreach(long\
    \ i; l1)\n    {\n        foreach(long j; l2)\n        {\n            if(i == j)\n\
    \            {\n                result ~= i;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    int i = 0;\n    foreach(e; l1)\n    {\n        if(e in l2)\n        {\n \
    \           result[i] = e;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] result = [];\n    foreach(e; l1) \n    {\n        if(e in l2)\
    \ \n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[l1.length];\n    int i = 0;\n    foreach(long\
    \ l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result[i]\
    \ = l;\n            i++;\n        }\n    }\n    return result[0..i];\n}", "{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup.sort();\n    long[] l2_sorted\
    \ = l2.dup.sort();\n    long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique\
    \ = l2_sorted.dup.uniq;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n", "{\n    long[] result;\n    auto s1 = l1.sort().uniq;\n\
    \    auto s2 = l2.sort().uniq;\n    foreach(i; s1)\n    {\n        if(s2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] temp;\n    long[] temp1;\n    long[] temp2;\n\
    \    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n\
    \    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n\
    \    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n\
    \    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n\
    \    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n\
    \    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n\
    \    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n\
    \    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n\
    \    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n\
    \    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n\
    \    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n\
    \    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n\
    \    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n\
    \    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n\
    \    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n\
    \    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n\
    \    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n\
    \    long[] temp71;\n", "{\n    long[] result;\n    if (l1.length < l2.length)\n\
    \    {\n        result = l1.dup;\n        foreach (e; l2)\n        {\n       \
    \     if (e in result)\n            {\n                result ~= e;\n        \
    \    }\n        }\n    }\n    else\n    {\n        result = l2.dup;\n        foreach\
    \ (e; l1)\n        {\n            if (e in result)\n            {\n          \
    \      result ~= e;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(long i; l1)\n    {\n    \
    \    foreach(long j; l2)\n        {\n            if(i == j)\n            {\n \
    \               result ~= i;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[0];\n    foreach(e; l1)\n    {\n        if(e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup.sort;\n\
    \    long[] l2_sorted = l2.dup.sort;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < l1_sorted.length && j < l2_sorted.length) \n    {\n        if (l1_sorted[i]\
    \ < l2_sorted[j]) \n        {\n            i++;\n        } \n        else if (l1_sorted[i]\
    \ > l2_sorted[j]) \n        {\n            j++;\n        } \n        else \n \
    \       {\n            result ~= l1_sorted[i];\n            i++;\n           \
    \ j++;\n        }\n    }\n    return result;\n}", "{\n    long[] l3 = l1.dup;\n\
    \    l3.sort;\n    long[] l4 = l2.dup;\n    l4.sort;\n    long[] l5 = l3.intersect(l4);\n\
    \    return l5;\n}", "{\n    long[] result = new long[];\n    foreach(l; l1)\n\
    \    {\n        if(l2.canFind(l))\n        {\n            result ~= l;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new\
    \ long[0];\n    foreach(long i; l1)\n    {\n        foreach(long j; l2)\n    \
    \    {\n            if(i == j)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result = new long[l1.length];\n    int i = 0;\n    foreach(e; l1)\n \
    \   {\n        if(e in l2)\n        {\n            result[i] = e;\n          \
    \  i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    long[] result\
    \ = [];\n    foreach(l; l1)\n    {\n        foreach(r; l2)\n        {\n      \
    \      if(l == r)\n            {\n                result ~= l;\n            }\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result =\
    \ [];\n    foreach(e; l1)\n    {\n        if(e in l2)\n        {\n           \
    \ result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(e; l1)\n    {\n        if(e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n    >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
    \ 3, 2, 8], [3, 2])\n    [2, 3]", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l1)\n    {\n        foreach(long j; l2)\n        {\n            if(i == j)\n\
    \            {\n                result ~= i;\n            }\n        }\n    }\n\
    \    return result.sort().dup.unique;\n}", "{\n    long[] result = new long[];\n\
    \    foreach(e1; l1)\n    {\n        foreach(e2; l2)\n        {\n            if(e1\
    \ == e2)\n            {\n                result ~= e1;\n            }\n      \
    \  }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n           \
    \ result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result = [];\n    foreach(long i; l1)\n    {\n        foreach(long j;\
    \ l2)\n        {\n            if(i == j)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            if(!result.canFind(l))\n            {\n              \
    \  result ~= l;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = [];\n    foreach(l1_item; l1)\n    {\n        foreach(l2_item;\
    \ l2)\n        {\n            if(l1_item == l2_item)\n            {\n        \
    \        result ~= l1_item;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        foreach(long\
    \ j; l2)\n        {\n            if(i == j)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result;\n    foreach(l; l1)\n    {\n        foreach(r; l2)\n    \
    \    {\n            if(l == r)\n            {\n                result ~= l;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] res = new long[];\n    foreach(long i; l1)\n    {\n        foreach(long\
    \ j; l2)\n        {\n            if(i == j)\n            {\n                res\
    \ ~= i;\n            }\n        }\n    }\n    return res.sort().uniq;\n}", "{\n\
    \    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(long i; l1)\n    {\n    \
    \    foreach(long j; l2)\n        {\n            if(i == j)\n            {\n \
    \               result ~= i;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[l1.length];\n    int i = 0;\n    foreach(long\
    \ x; l1) {\n        if(l2.canFind(x)) {\n            result[i] = x;\n        \
    \    i++;\n        }\n    }\n    return result[0..i];\n}", "{\n    auto result\
    \ = new long[](0);\n    auto l1_length = l1.length;\n    auto l2_length = l2.length;\n\
    \    auto l1_index = 0;\n    auto l2_index = 0;\n    while (l1_index < l1_length\
    \ && l2_index < l2_length)\n    {\n        if (l1[l1_index] == l2[l2_index])\n\
    \        {\n            result ~= l1[l1_index];\n            l1_index++;\n   \
    \         l2_index++;\n        }\n        else if (l1[l1_index] < l2[l2_index])\n\
    \        {\n            l1_index++;\n        }\n        else\n        {\n    \
    \        l2_index++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result.sort().dup;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    long[] l1_sorted = sort(l1);\n \
    \   long[] l2_sorted = sort(l2);\n    long[] l1_unique = unique(l1_sorted);\n\
    \    long[] l2_unique = unique(l2_sorted);\n    for (int i = 0; i < l1_unique.length;\
    \ i++)\n    {\n        for (int j = 0; j < l2_unique.length; j++)\n        {\n\
    \            if (l1_unique[i] == l2_unique[j])\n            {\n              \
    \  result ~= l1_unique[i];\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[l1.length];\n    int count = 0;\n    foreach(e1;\
    \ l1)\n    {\n        foreach(e2; l2)\n        {\n            if(e1 == e2)\n \
    \           {\n                result[count] = e1;\n                count++;\n\
    \            }\n        }\n    }\n    return result[0..count];\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach(e; l1)\n    {\n        if(l2.canFind(e))\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n\
    \    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n\
    \    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n\
    \    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n\
    \    long[] temp72;\n", "{\n    long[] result = new long[];\n    foreach(long\
    \ i; l1)\n    {\n        if(l2.canFind(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result =\
    \ new long[];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n   \
    \     {\n            if(!result.canFind(i))\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup.sort();\n    long[] l2_sorted = l2.dup.sort();\n\
    \    long[] l1_unique = l1_sorted.dup.uniq;\n    long[] l2_unique = l2_sorted.dup.uniq;\n\
    \    foreach(i; l1_unique)\n    {\n        foreach(j; l2_unique)\n        {\n\
    \            if(i == j)\n            {\n                result ~= i;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach(e; l1)\n    {\n        if(e in l2)\n        {\n       \
    \     result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result;\n    long[] tmp;\n    long[] tmp2;\n    long[] tmp3;\n   \
    \ long[] tmp4;\n    long[] tmp5;\n    long[] tmp6;\n    long[] tmp7;\n    long[]\
    \ tmp8;\n    long[] tmp9;\n    long[] tmp10;\n    long[] tmp11;\n    long[] tmp12;\n\
    \    long[] tmp13;\n    long[] tmp14;\n    long[] tmp15;\n    long[] tmp16;\n\
    \    long[] tmp17;\n    long[] tmp18;\n    long[] tmp19;\n    long[] tmp20;\n\
    \    long[] tmp21;\n    long[] tmp22;\n    long[] tmp23;\n    long[] tmp24;\n\
    \    long[] tmp25;\n    long[] tmp26;\n    long[] tmp27;\n    long[] tmp28;\n\
    \    long[] tmp29;\n    long[] tmp30;\n    long[] tmp31;\n    long[] tmp32;\n\
    \    long[] tmp33;\n    long[] tmp34;\n    long[] tmp35;\n    long[] tmp36;\n\
    \    long[] tmp37;\n    long[] tmp38;\n    long[] tmp39;\n    long[] tmp40;\n\
    \    long[] tmp41;\n    long[] tmp42;\n    long[] tmp43;\n    long[] tmp44;\n\
    \    long[] tmp45;\n    long[] tmp46;\n    long[] tmp47;\n    long[] tmp48;\n\
    \    long[] tmp49;\n    long[] tmp50;\n    long[] tmp51;\n    long[] tmp52;\n\
    \    long[] tmp53;\n    long[] tmp54;\n    long[] tmp55;\n    long[] tmp56;\n\
    \    long[] tmp57;\n    long[] tmp58;\n    long[] tmp59;\n    long[] tmp60;\n\
    \    long[] tmp61;\n    long[] tmp62;\n    long[] tmp63;\n    long[] tmp64;\n\
    \    long[] tmp65;\n    long[] tmp66;\n    long[] tmp67;\n    long[] tmp68;\n\
    \    long[] tmp69;\n    long[] tmp70;\n    long[] tmp71;\n    long[] tmp72;\n",
  "{\n    long[] result = new long[0];\n    foreach(l; l1) \n    {\n        if(l2.canFind(l))\
    \ \n        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort();\n    long[]\
    \ l2_sorted = l2.dup.sort();\n    long[] l1_unique = l1_sorted.dup.uniq;\n   \
    \ long[] l2_unique = l2_sorted.dup.uniq;\n    foreach(l; l1_unique)\n    {\n \
    \       if(l2_unique.canFind(l))\n        {\n            result ~= l;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n  \
    \  foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n            result\
    \ ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(e; l1)\n    {\n        if(e in l2)\n     \
    \   {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length < l2.length) \n    {\n        result\
    \ = l1.dup;\n        foreach (e; l2) \n        {\n            if (e in result)\
    \ \n            {\n                result ~= e;\n            }\n        }\n  \
    \  } \n    else \n    {\n        result = l2.dup;\n        foreach (e; l1) \n\
    \        {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[l1.length];\n    long[] result2 = new long[l1.length];\n\
    \    long[] result3 = new long[l1.length];\n    long[] result4 = new long[l1.length];\n\
    \    long[] result5 = new long[l1.length];\n    long[] result6 = new long[l1.length];\n\
    \    long[] result7 = new long[l1.length];\n    long[] result8 = new long[l1.length];\n\
    \    long[] result9 = new long[l1.length];\n    long[] result10 = new long[l1.length];\n\
    \    long[] result11 = new long[l1.length];\n    long[] result12 = new long[l1.length];\n\
    \    long[] result13 = new long[l1.length];\n    long[] result14 = new long[l1.length];\n\
    \    long[] result15 = new long[l1.length];\n    long[] result16 = new long[l1.length];\n\
    \    long[] result17 = new long[l1.length];\n    long[] result18 = new long[l1.length];\n\
    \    long[] result19 = new long[l1.length];\n    long[] result20 = new long[l1.length];\n\
    \    long[] result21 = new long[l1.length];\n    long[] result22 = new long[l1.length];\n\
    \    long[] result23 = new long[l1.length];\n    long[] result24 = new long[l1.length];\n\
    \    long[] result25 = new long[l1.length];\n    long[] result26 = new long[l1.length];\n\
    \    long[] result27 = new long[l1.length];\n    long[] result28 = new long[l1.length];\n\
    \    long[] result29 = new long[l1.length];\n    long[] result30 = new long[l1.length];\n\
    \    long[] result31 = new long[l1.length];\n    long[] result32 = new long[l1.length];\n\
    \    long[] result33 = new long[l1.length];\n    long[] result34 = new long[l1.length];\n",
  "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    if (l1.length < l2.length) \n  \
    \  {\n        foreach (long i; l1) \n        {\n            if (i in l2) \n  \
    \          {\n                result ~= i;\n            }\n        }\n    } \n\
    \    else \n    {\n        foreach (long i; l2) \n        {\n            if (i\
    \ in l1) \n            {\n                result ~= i;\n            }\n      \
    \  }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n\
    \    foreach(l; l1)\n    {\n        if(l2.count(l) != 0)\n        {\n        \
    \    result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            if(!result.canFind(l))\n            {\n              \
    \  result ~= l;\n            }\n        }\n    }\n    return result;\n}\n/*\n\
    Return sorted unique elements for two lists.\n    >>> unique([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [2, 3, 4, 7, 9, 34, 121]\n    >>> unique([5,\
    \ 3, 2, 8], [3, 2])\n    [5, 8]\n*/\nlong[] unique(long[] l1, long[] l2) \n{\n\
    \    long[] result = [];\n    foreach(l; l1)\n    {\n        if(!l2.canFind(l))\n\
    \        {\n            if(!result.canFind(l))\n            {\n              \
    \  result ~= l;\n            }\n        }\n    }\n    foreach(l; l2)\n    {\n\
    \        if(!l1.canFind(l))\n        {\n            if(!result.canFind(l))\n \
    \           {\n                result ~= l;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique elements for two lists.\n   \
    \ >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [2, 3,\
    \ 4, 7, 9, 34, 121]\n    >>> unique([5, 3, 2, 8], [3, 2])\n    [5, 8]\n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{\n    long[] result = [];\n    foreach(l; l1)\n\
    \    {\n        if(!l2.canFind(l))\n        {\n            if(!result.canFind(l))\n\
    \            {\n                result ~= l;\n            }\n        }\n    }\n\
    \    foreach(l; l2)\n    {\n        if(!", "{\n    long[] result = [];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n        {\n            if(!result.canFind(l))\n\
    \            {\n                result ~= l;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[0];\n    long[] l1_sorted\
    \ = l1.dup.sort;\n    long[] l2_sorted = l2.dup.sort;\n    long[] l1_unique =\
    \ l1_sorted.dup.unique;\n    long[] l2_unique = l2_sorted.dup.unique;\n    foreach(long\
    \ l1_elem; l1_unique)\n    {\n        foreach(long l2_elem; l2_unique)\n     \
    \   {\n            if(l1_elem == l2_elem)\n            {\n                result\
    \ ~= l1_elem;\n            }\n        }\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.count(l)\
    \ != 0)\n        {\n            result ~= l;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(l; l1_unique)\n    {\n        if(l2_unique.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    foreach(e; l1)\n    {\n        if(e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] temp;\n    foreach(e; l1)\n    {\n    \
    \    if(e in l2)\n        {\n            temp ~= e;\n        }\n    }\n    result\
    \ = temp.sort().uniq;\n    return result;\n}", "{\n    long[] res = new long[];\n\
    \    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n           \
    \ res ~= l;\n        }\n    }\n    return res.sort().uniq;\n}", "{\n    long[]\
    \ res = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n  \
    \      {\n            res ~= l;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result = [];\n    foreach(i; l1)\n    {\n        if(l2.count(i)\
    \ > 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    if (l1_unique.length < l2_unique.length) \n    {\n\
    \        result = l1_unique.filter!(a => l2_unique.canFind(a));\n    }\n    else\
    \ \n    {\n        result = l2_unique.filter!(a => l1_unique.canFind(a));\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n        {\n            if(!result.canFind(l))\n\
    \            {\n                result ~= l;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto s1 = set(l1);\n    auto s2 = set(l2);\n\
    \    return s1.intersection(s2).array;\n}", "{\n    auto s1 = l1.sort().uniq;\n\
    \    auto s2 = l2.sort().uniq;\n    long[] result;\n    foreach(e; s1)\n    {\n\
    \        if(s2.canFind(e))\n        {\n            result ~= e;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(long i;\
    \ l1)\n    {\n        foreach(long j; l2)\n        {\n            if(i == j)\n\
    \            {\n                result ~= i;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    auto l1_set = set(l1);\n    auto\
    \ l2_set = set(l2);\n    auto common_set = l1_set & l2_set;\n    return common_set.array;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; l1)\n    {\n   \
    \     if(l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n   \
    \ foreach(long i; l1)\n    {\n        foreach(long j; l2)\n        {\n       \
    \     if(i == j)\n            {\n                result ~= i;\n            }\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    auto s1 = l1.sort().uniq;\n\
    \    auto s2 = l2.sort().uniq;\n    long[] res;\n    foreach(e; s1) \n    {\n\
    \        if(e in s2)\n            res ~= e;\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach(e; l1)\n    {\n        if(e\
    \ in l2)\n        {\n            if(e !in result)\n            {\n           \
    \     result ~= e;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup.sort;\n    long[] l2_sorted\
    \ = l2.dup.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long i; l1_unique)\n    {\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
