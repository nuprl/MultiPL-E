name: HumanEval_158_find_max
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
  \ a list of strings.\n    The list contains different words. Return the word with\
  \ maximum number\n    of unique characters. If multiple strings have maximum number\
  \ of unique\n    characters, return the one which comes first in lexicographical\
  \ order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"\
  name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"\
  cc\"]) == \"\"aaaaaaa\"\n    \n*/\nstring find_max(string[] words) \n"
tests: "unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
  , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"])\
  \ == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) ==\
  \ \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n\
  }\nvoid main(){}"
completions: ["{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n   \
    \ foreach(string word; words) \n    {\n        int unique_chars = 0;\n       \
    \ foreach(char c; word) \n        {\n            if(word.count(c) == 1) \n   \
    \         {\n                unique_chars++;\n            }\n        }\n     \
    \   if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars) \n        {\n            if(word < max_word) \n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}\n/*\nWrite a function that accepts a list of strings.\n\
    \    The list contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.",
  "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!result.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    string max_word = \"\";\n    int max_unique_char\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_char = 0;\n      \
    \  foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n    \
    \        {\n                unique_char++;\n            }\n        }\n       \
    \ if(unique_char > max_unique_char)\n        {\n            max_unique_char =\
    \ unique_char;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string result = \"\";\n    foreach(string word; words)\n    {\n  \
    \      if(result.length == 0 || result.length < word.length)\n        {\n    \
    \        result = word;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n  \
    \  {\n        int unique_chars = 0;\n        foreach(char c; word)\n        {\n\
    \            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!result.canFind(c))\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max_unique)\n    \
    \    {\n            max_unique = unique;\n            result = word;\n       \
    \ }\n        else if(unique == max_unique)\n        {\n            result = min(result,\
    \ word);\n        }\n    }\n    return result;\n}", "{\n    string max = \"\"\
    ;\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n\
    \    foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(word.count(c) == 1)\n            {\n   \
    \             unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < result)\n            {\n                result = word;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n\
    \        foreach(char c; word)\n        {\n            if(count == 0)\n      \
    \      {\n                count++;\n            }\n            else\n        \
    \    {\n                if(word[0..count].count(c) == 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > maxCount)\n        {\n            maxCount = count;\n     \
    \       maxWord = word;\n        }\n    }\n    return maxWord;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words) \n \
    \   {\n        int unique_chars = 0;\n        foreach(char c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max = \"\
    \";\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char ch;\
    \ word)\n        {\n            if(!max_word.canFind(ch))\n            {\n   \
    \             unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max = word;\n           \
    \ max_unique = unique;\n        }\n        else if(unique == max_unique)\n   \
    \     {\n            if(word < max)\n                max = word;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max.canFind(c))\n            {\n                count++;\n  \
    \          }\n        }\n        if(count > max_count)\n        {\n          \
    \  max = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!result.canFind(c))\n            {\n                count++;\n  \
    \          }\n        }\n        if(count > max)\n        {\n            max =\
    \ count;\n            result = word;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words) \n    {\n        int count = 0;\n        foreach(c; word) \n        {\n\
    \            if(!c.canFindIn(max_word)) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max = \"\";\n    foreach(string word; words)\n\
    \    {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n        else if(word.length == max.length)\n        {\n          \
    \  if(word < max)\n            {\n                max = word;\n            }\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word;\n    int max_len = 0;\n    foreach(word;\
    \ words)\n    {\n        int len = word.length;\n        if(len > max_len)\n \
    \       {\n            max_len = len;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(c !in max_word)\n       \
    \     {\n                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!result.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words) \n    {\n        int count = 0;\n        foreach(char\
    \ c; word) \n        {\n            if(c !in max_word) \n            {\n     \
    \           count++;\n                max_word ~= c;\n            }\n        }\n\
    \        if(count > max_count) \n        {\n            max_count = count;\n \
    \           max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!result.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(!result.canFind(c))\n   \
    \         {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word =\
    \ \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(ch; word)\n        {\n            if(count == 0)\n   \
    \         {\n                count++;\n            }\n            else\n     \
    \       {\n                if(!ch.canFind(word[0..count]))\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max = \"\"\
    ;\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max = words[0];\n    foreach(string word; words)\n    {\n       \
    \ if(word.length > max.length)\n        {\n            max = word;\n        }\n\
    \        else if(word.length == max.length)\n        {\n            if(word <\
    \ max)\n            {\n                max = word;\n            }\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n\
    \        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n  \
    \  {\n        int unique_chars = 0;\n        foreach(char ch; word)\n        {\n\
    \            if(!ch in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max = \"\";\n    foreach(string word; words)\n\
    \    {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n        else if(word.length == max.length)\n        {\n          \
    \  if(word < max)\n            {\n                max = word;\n            }\n\
    \        }\n    }\n    return max;\n}", "{\n    string result = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < result)\n            {\n                result = word;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_unique_characters = 0;\n    foreach(word; words)\n    {\n       \
    \ int unique_characters = 0;\n        foreach(character; word)\n        {\n  \
    \          if(!max_word.canFind(character))\n            {\n                unique_characters++;\n\
    \            }\n        }\n        if(unique_characters > max_unique_characters)\n\
    \        {\n            max_unique_characters = unique_characters;\n         \
    \   max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char ch; word)\n      \
    \  {\n            if(word.count(ch) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string result\
    \ = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n\
    \            {\n                count = 1;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string maxWord = \"\";\n    int maxCount = 0;\n    foreach(string word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(count == 0) \n            {\n                count++;\n      \
    \      }\n            else if(word[0..count].count(c) == 0) \n            {\n\
    \                count++;\n            }\n        }\n        if(count > maxCount)\
    \ \n        {\n            maxCount = count;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n\
    \        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(c !in max_word)\n            {\n                unique_chars++;\n \
    \           }\n        }\n        if(unique_chars > max_unique_chars)\n      \
    \  {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_char\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_char = 0;\n      \
    \  foreach(char; word)\n        {\n            if(word.count(char) == 1)\n   \
    \         {\n                unique_char++;\n            }\n        }\n      \
    \  if(unique_char > max_unique_char)\n        {\n            max_unique_char =\
    \ unique_char;\n            max_word = word;\n        }\n        else if(unique_char\
    \ == max_unique_char)\n        {\n            if(word < max_word)\n          \
    \  {\n                max_word = word;\n            }\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n   \
    \ foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c !in max_word)\n            {\n       \
    \         count++;\n                max_word ~= c;\n            }\n        }\n\
    \        if(count > max_count)\n        {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(string word;\
    \ words) \n    {\n        int count = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(!max_word.canFind(c)) \n            {\n              \
    \  count++;\n            }\n        }\n        if(count > max_count) \n      \
    \  {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(word.length > max.length)\n        {\n           \
    \ max = word;\n        }\n        else if(word.length == max.length)\n       \
    \ {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    auto max = words[0];\n    foreach(word; words)\n    {\n\
    \        if(word.length > max.length)\n        {\n            max = word;\n  \
    \      }\n        else if(word.length == max.length)\n        {\n            if(word\
    \ < max)\n            {\n                max = word;\n            }\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                unique_chars++;\n            }\n        }\n   \
    \     if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max = \"\";\n    foreach(string word; words)\n\
    \    {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n        else if(word.length == max.length)\n        {\n          \
    \  if(word < max)\n            {\n                max = word;\n            }\n\
    \        }\n    }\n    return max;\n}", "{\n    string result = \"\";\n    int\
    \ max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c !in result)\n            {\n         \
    \       count++;\n                result ~= c;\n            }\n        }\n   \
    \     if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word =\
    \ \"\";\n    int max_unique_chars = 0;\n    foreach(string word; words)\n    {\n\
    \        int unique_chars = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(c !in max_word)\n            {\n                unique_chars++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!contains(max_word, c))\n            {\n          \
    \      unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max.canFind(c))\n            {\n         \
    \       count++;\n            }\n        }\n        if(count > max_count)\n  \
    \      {\n            max = word;\n            max_count = count;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string result = \"\";\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c !in max_word)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max_unique)\n    \
    \    {\n            max_unique = unique;\n            result = word;\n       \
    \ }\n        else if(unique == max_unique)\n        {\n            if(word < result)\n\
    \            {\n                result = word;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n\
    \    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c; word)\n\
    \        {\n            if(!max.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(char c; word)\n     \
    \   {\n            if(!max.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max_unique)\n    \
    \    {\n            max_unique = unique;\n            result = word;\n       \
    \ }\n        else if(unique == max_unique)\n        {\n            if(word < result)\n\
    \            {\n                result = word;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count == 0)\n            {\n           \
    \     count = 1;\n            }\n            else\n            {\n           \
    \     if(c != word[count-1])\n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n\
    \            if(!result.canFind(ch))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word;\n    int max_len = 0;\n    foreach(word;\
    \ words)\n    {\n        int len = word.length;\n        if(len > max_len)\n \
    \       {\n            max_len = len;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(c !in word[0..$-1])\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words) \n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word) \n        {\n            if(word.count(c) == 1) \n            {\n    \
    \            unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars) \n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n \
    \   int max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n   \
    \ foreach(word; words)\n    {\n        int count = 0;\n        foreach(c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(word;\
    \ words)\n    {\n        if(word.length > max.length)\n        {\n           \
    \ max = word;\n        }\n        else if(word.length == max.length)\n       \
    \ {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n            {\n                unique_chars++;\n  \
    \          }\n        }\n        if(unique_chars > max_unique_chars)\n       \
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!c.canFindIn(max_word))\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(string word; words) \n    {\n        int unique_chars = 0;\n    \
    \    foreach(char c; word) \n        {\n            if(word.count(c) == 1) \n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars) \n        {\n            if(word < max_word) \n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(c !in max_word)\n       \
    \     {\n                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = words[0];\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n   \
    \ foreach(word; words)\n    {\n        int count = 0;\n        foreach(ch; word)\n\
    \        {\n            if(!ch in max)\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n \
    \   foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!c.canFindIn(max_word))\n            {\n\
    \                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(count == 0)\n            {\n                count++;\n            }\n\
    \            else\n            {\n                if(word[0..count].count(c) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > max_count)\n        {\n           \
    \ max_count = count;\n            max_word = word;\n        }\n        else if(count\
    \ == max_count)\n        {\n            if(word < max_word)\n            {\n \
    \               max_word = word;\n            }\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(c; word) \n       \
    \ {\n            if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique) \n        {\n            if(word < result) \n     \
    \       {\n                result = word;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(c !in word[0..$-1])\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count(word, c) == 1)\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(c !in max_word)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n      \
    \      {\n                count++;\n            }\n            else\n        \
    \    {\n                if(word[0..count].canFind(c))\n                {\n   \
    \                 continue;\n                }\n                else\n       \
    \         {\n                    count++;\n                }\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max = \"\";\n    foreach(word; words)\n    {\n        if(max.length ==\
    \ 0 || word.length > max.length)\n        {\n            max = word;\n       \
    \ }\n        else if(word.length == max.length)\n        {\n            if(word\
    \ < max)\n            {\n                max = word;\n            }\n        }\n\
    \    }\n    return max;\n}", "{\n    string result = \"\";\n    int max = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c !in result)\n            {\n         \
    \       count++;\n                result ~= c;\n            }\n        }\n   \
    \     if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max = \"\"\
    ;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n    }\n    return max;\n}", "{\n    string max = \"\";\n\
    \    int max_unique = 0;\n    foreach(string word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max = word;\n            max_unique = unique;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!c.canFindIn(max_word))\n            {\n\
    \                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    auto max_word = \"\";\n    auto max_count = 0;\n    foreach(word; words)\n\
    \    {\n        auto count = 0;\n        foreach(c; word)\n        {\n       \
    \     if(!max_word.canFind(c))\n            {\n                count++;\n    \
    \        }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count(word, c) == 1)\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ return words.max!((a, b) => a.length.compare(b.length));\n}", "{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count(word, c) == 1)\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\n\
    \        {\n            max_word = min(max_word, word);\n        }\n    }\n  \
    \  return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count =\
    \ 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    int\
    \ max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(c; word)\n        {\n            if(!max.canFind(c))\n        \
    \    {\n                count++;\n            }\n        }\n        if(count >\
    \ max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count(word, c) == 1)\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string result = \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n \
    \       int count = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c !in max_word)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n   \
    \ foreach(word; words)\n    {\n        int count = 0;\n        foreach(c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n  \
    \          {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < result)\n            {\n                result = word;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char; word)\n        {\n            if(count == 0)\n \
    \           {\n                count++;\n            }\n            else\n   \
    \         {\n                if(word[0..count].count(char) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            max_word = min(max_word, word);\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words) \n    {\n        int unique = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(!result.canFind(c)) \n            {\n          \
    \      unique++;\n            }\n        }\n        if(unique > max_unique) \n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(c; word)\n        {\n            if(c !in max_word)\n         \
    \   {\n                max_word ~= c;\n                count++;\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = \"\";\n    foreach(word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string result\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string maxWord =\
    \ \"\";\n    int maxUnique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > maxUnique)\n        {\n            maxUnique = unique;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}", "{\n\
    \    string max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n  \
    \  {\n        int count = 0;\n        foreach(c; word)\n        {\n          \
    \  if(!max.canFind(c))\n            {\n                count++;\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}", "{\n \
    \   string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(count(word, c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int\
    \ max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count == max)\n            {\n         \
    \       if(result > word)\n                {\n                    result = word;\n\
    \                }\n            }\n            if(count > max)\n            {\n\
    \                max = count;\n                result = word;\n            }\n\
    \            count++;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n \
    \   {\n        int unique = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < result)\n       \
    \     {\n                result = word;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n\
    \    foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c;\
    \ word) \n        {\n            if(word.count(c) == 1) \n            {\n    \
    \            unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            result = word;\n\
    \        }\n        else if(unique == max_unique) \n        {\n            result\
    \ = min(result, word);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!c.canFindIn(max_word))\n            {\n\
    \                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(!contains(max_word, c))\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique_chars = 0;\n        foreach(char c;\
    \ word)\n        {\n            if(c !in max_word)\n            {\n          \
    \      unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n    {\n \
    \       int unique_chars = 0;\n        foreach(char c; word) \n        {\n   \
    \         if(!c.canFindIn(max_word)) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n \
    \   int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique =\
    \ 0;\n        foreach(ch; word)\n        {\n            if(word.count(ch) == 1)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word =\
    \ \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique_chars = 0;\n        foreach(char c; word)\n        {\n       \
    \     if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(string word; words)\n    {\n     \
    \   int unique_chars = 0;\n        foreach(char c; word)\n        {\n        \
    \    if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            max_word = min(max_word, word);\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max = \"\
    \";\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(!max_word.canFind(c))\n            {\n                count++;\n     \
    \       }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(!c.canFindIn(word[0..$-1]))\n                unique++;\n        }\n \
    \       if(unique > max_unique)\n        {\n            max = word;\n        \
    \    max_unique = unique;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max)\n                max = word;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max = \"\";\n    foreach(string word;\
    \ words)\n    {\n        if(word.length > max.length)\n        {\n           \
    \ max = word;\n        }\n        else if(word.length == max.length)\n       \
    \ {\n            if(word.compare(max) < 0)\n            {\n                max\
    \ = word;\n            }\n        }\n    }\n    return max;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(c !in max_word) \n            {\n                max_word\
    \ ~= c;\n                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars) \n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    int max_unique_char = 0;\n    string max_word = \"\";\n    foreach(string\
    \ word; words)\n    {\n        int unique_char = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique_char++;\n            }\n        }\n        if(unique_char > max_unique_char)\n\
    \        {\n            max_unique_char = unique_char;\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;\n}", "{\n    string result = \"\
    \";\n    int max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n\
    \        foreach(c; word)\n        {\n            if(!result.canFind(c))\n   \
    \         {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(result.indexOf(c) == -1)\n            {\n\
    \                count++;\n            }\n        }\n        if(count > max)\n\
    \        {\n            max = count;\n            result = word;\n        }\n\
    \    }\n    return result;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(c !in max_word)\n  \
    \          {\n                unique_chars++;\n            }\n        }\n    \
    \    if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count(word, c) == 1)\n            {\n  \
    \              unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n        else if(unique_chars == max_unique_chars)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            result = min(result, word);\n\
    \        }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n \
    \   int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max = \"\";\n    foreach(string word; words)\n\
    \    {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n        else if(word.length == max.length)\n        {\n          \
    \  if(word < max)\n            {\n                max = word;\n            }\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique_chars = 0;\n    foreach(word; words) \n    {\n        int unique_chars\
    \ = 0;\n        foreach(c; word) \n        {\n            if(word.count(c) ==\
    \ 1) \n            {\n                unique_chars++;\n            }\n       \
    \ }\n        if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars) \n        {\n            max_word = min(max_word, word);\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique_char = 0;\n    foreach(string word; words)\n    {\n      \
    \  int unique_char = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c.count(word) == 1)\n            {\n                unique_char++;\n   \
    \         }\n        }\n        if(unique_char > max_unique_char)\n        {\n\
    \            max_unique_char = unique_char;\n            max_word = word;\n  \
    \      }\n        else if(unique_char == max_unique_char)\n        {\n       \
    \     if(word < max_word)\n            {\n                max_word = word;\n \
    \           }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n  \
    \      int unique_chars = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(!c.in(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n   \
    \         {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n    }\n    return max;\n}", "{\n    string max_word = \"\
    \";\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique_chars = 0;\n        foreach(char c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n            {\n                unique_chars += 1;\n            }\n\
    \        }\n        if(unique_chars > max_unique_chars)\n        {\n         \
    \   max_unique_chars = unique_chars;\n            max_word = word;\n        }\n\
    \        else if(unique_chars == max_unique_chars)\n        {\n            if(word\
    \ < max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count == 0)\n\
    \            {\n                count++;\n            }\n            else\n  \
    \          {\n                if(word[0..count].count(c) == 0)\n             \
    \   {\n                    count++;\n                }\n            }\n      \
    \  }\n        if(count > max)\n        {\n            max = count;\n         \
    \   result = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words) \n    {\n \
    \       int unique_chars = 0;\n        foreach(char c; word) \n        {\n   \
    \         if(!max_word.canFind(c)) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n      \
    \      {\n                count = 1;\n            }\n            else\n      \
    \      {\n                if(word[0..count].canFind(c))\n                {\n \
    \                   continue;\n                }\n                else\n     \
    \           {\n                    count++;\n                }\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(c !in word[0..$-1])\n                count++;\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n        else if(count == max_count)\n        {\n       \
    \     max_word = min(max_word, word);\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max = \"\";\n    foreach(word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n            {\n             \
    \   unique_chars++;\n            }\n        }\n        if(unique_chars > max_unique_chars)\n\
    \        {\n            max_unique_chars = unique_chars;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars == max_unique_chars)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique_chars = 0;\n    foreach(word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(c; word) \n        {\n\
    \            if(count(word, c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars) \n        {\n  \
    \          if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
