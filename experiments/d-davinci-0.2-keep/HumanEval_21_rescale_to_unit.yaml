name: HumanEval_21_rescale_to_unit
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Given list of numbers (of at\
  \ least two elements), apply a linear transform to that list,\n    such that the\
  \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
  \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
  \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  }\nvoid main(){}"
completions: ["{\n    float min = min(numbers);\n    float max = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given a list of numbers, return a list of tuples,\
    \ where each tuple is of the form (number, index)\n    >>> enumerate([6, 0, 2])\n\
    \    [(6, 0), (0, 1), (2, 2)]\n*/\nTuple!(float, int)[] enumerate(float[] numbers)\
    \ \n{\n    Tuple!(float, int)[] result = new Tuple!(float, int)[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = tuple(numbers[i],\
    \ i);\n    }\n    return result;\n}\n/*\n Given a list of numbers, return a list\
    \ of tuples, where each tuple is of the form (number, index)\n    >>> enumerate([6,\
    \ 0, 2])\n    [(6, 0), (0, 1), (2, 2)]\n*/\nTuple!(float, int)[] enumerate(float[]\
    \ numbers) \n{\n    Tuple!(float, int)[] result = new Tuple!(float, int)[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = tuple(numbers[i],\
    \ i);\n    }\n    return result;\n}\n/*\n Given a list of tuples, return a list\
    \ of the first elements of each tuple\n    >>> firsts([(6, 0), (0, 1), (2, 2)])\n\
    \    [6, 0, 2]\n*/\nfloat[] firsts(Tuple!(float, int)[] tuples) \n{\n    float[]\
    \ result = new float[tuples.length];\n    for (int i = 0; i < tuples.length; i++)\n\
    \    {\n        result[i] = tuples[i", "{\n    float min = min(numbers);\n   \
    \ float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    foreach(i, number; numbers)\n    {\n        result[i]\
    \ = (number - min_value) / (max_value - min_value);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) \n    {\n        if (numbers[i] < min) \n        {\n\
    \            min = numbers[i];\n        }\n        if (numbers[i] > max) \n  \
    \      {\n            max = numbers[i];\n        }\n    }\n    for (int i = 0;\
    \ i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[];\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    foreach(n;\
    \ numbers)\n    {\n        result ~= (n - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers (of at\
    \ least two elements), apply a linear transform to that list,\n    such that the\
    \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    auto min_max = minmax(numbers);\n\
    \    auto min_value = min_max[0];\n    auto max_value = min_max[1];\n    auto\
    \ range = max_value - min_value;\n    return numbers.map!((x) => (x - min_value)\
    \ / range);\n}", "{\n    float min = minElement(numbers);\n    float max = maxElement(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_value = min(numbers);\n    float max_value = max(numbers);\n  \
    \  float range = max_value - min_value;\n    foreach(i, number; numbers)\n   \
    \ {\n        result[i] = (number - min_value) / range;\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(float number; numbers)\n    {\n        if(number < min)\n       \
    \     min = number;\n        if(number > max)\n            max = number;\n   \
    \ }\n    foreach(int i; 0 .. numbers.length)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_num = min(numbers);\n\
    \    float max_num = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_num)\
    \ / (max_num - min_num);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_num = min(numbers);\n\
    \    float max_num = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_num)\
    \ / (max_num - min_num);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float range = max_value - min_value;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_value) / range;\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    foreach(i, number; numbers)\n    {\n        result[i]\
    \ = (number - min_value) / (max_value - min_value);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_value = min(numbers);\n    float max_value = max(numbers);\n  \
    \  float range = max_value - min_value;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / range;\n    }\n\
    \    return result;\n}", "{\n    float min_val = min(numbers);\n    float max_val\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_val)\
    \ / (max_val - min_val);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float delta = max_value - min_value;\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min_value) / delta;\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float[] result =\
    \ new float[numbers.length];\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float delta = max_value - min_value;\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_value)\
    \ / delta;\n    }\n    return result;\n}\n/*\n Given list of numbers (of at least\
    \ two elements), apply a linear transform to that list,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float delta = max_value\
    \ - min_value;\n    for (int i = 0; i < numbers.length; i++) \n    {\n       \
    \ result[i] = (", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}\n/*\n Given list of\
    \ numbers (of at least two elements), apply a linear transform to that list,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n   \
    \ }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float range = max_number - min_number;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_number) / range;\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_number = min(numbers);\n    float max_number\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_number) / (max_number\
    \ - min_number);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float range = max_number - min_number;\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / range;\n    }\n    return result;\n}", "{\n    float min_val = min(numbers);\n\
    \    float max_val = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, val; numbers)\n    {\n        result[i] = (val - min_val) / (max_val\
    \ - min_val);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers (of\
    \ at least two elements), apply a linear transform to that list,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min_value = numbers[0];\n   \
    \ float max_value = numbers[0];\n    foreach(float number; numbers)\n    {\n \
    \       if(number < min_value)\n            min_value = number;\n        if(number\
    \ > max_value)\n            max_value = number;\n    }\n    float range = max_value\
    \ - min_value;\n    foreach(int i, float number; numbers)\n    {\n        result[i]\
    \ = (number - min_value) / range;\n    }\n    return result;\n}", "{\n    float\
    \ min_number = min(numbers);\n    float max_number = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_number) / (max_number -\
    \ min_number);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min_number = min(numbers);\n    float max_number = max(numbers);\n    float\
    \ range = max_number - min_number;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min_number) / range;\n    }\n    return\
    \ result;\n}\n/*\n Given a list of numbers, return a list of tuples, where each\
    \ tuple contains the original index of the number and the number itself\n    >>>\
    \ enumerate_list([1.0, 2.0, 3.0, 4.0, 5.0])\n    [(0, 1.0), (1, 2.0), (2, 3.0),\
    \ (3, 4.0), (4, 5.0)]\n*/\nTuple!(int, float)[] enumerate_list(float[] numbers)\
    \ \n{\n    Tuple!(int, float)[] result = new Tuple!(int, float)[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = tuple(i,\
    \ numbers[i]);\n    }\n    return result;\n}\n/*\n Given a list of tuples, return\
    \ a list of tuples, where each tuple contains the original index of the number\
    \ and the number itself\n    >>> enumerate_list([(1.0, 1.0), (2.0, 2.0), (3.0,\
    \ 3.0), (4.0, 4.0), (5.0, 5.0)])\n    [(0, 1.0), (1, 2.0), (2, 3.0), (3, 4.0),\
    \ (4, 5.0)]\n*/\nTuple!(int, float)[] enumerate_list(Tuple!(float, float)[] numbers)\
    \ \n{\n    Tuple!(int, float)[] result = new Tuple!(int, float)[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = tuple(i,\
    \ numbers[i].field1", "{\n    float min_n = min(numbers);\n    float max_n = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min_n) / (max_n - min_n);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}\n/*\n Given a list\
    \ of numbers, return a list of the same numbers, but with the largest number\n\
    \    replaced by 1, and the smallest replaced by 0\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit_2(float[]\
    \ numbers) \n{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ the same numbers, but with the largest number\n    replaced by 1, and the smallest\
    \ replaced by 0\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit_3(float[] numbers)\
    \ \n{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ the same numbers, but with the largest number\n    replaced by 1, and the smallest\
    \ replaced", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n        result[i]\
    \ = (n - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of\
    \ numbers (of at least two elements), apply a linear transform to that list,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    foreach(n; numbers)\n    {\n        if(n > max)\n\
    \            max = n;\n        if(n < min)\n            min = n;\n    }\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n   \
    \     result[i] = (n - min) / (max - min);\n    }\n    return result;\n}\n/*\n\
    \ Given list of numbers (of at least two elements), apply a linear transform to\
    \ that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float\
    \ min, float max) \n{\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n    }\n  \
    \  return result;\n}\n/*\n Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min, float max, float new_min, float new_max) \n{\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n   \
    \     result[i] = (n - min) / (max - min) * (new_max - new_min) + new_min;\n \
    \   }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that", "{\n    float min = min(numbers);\n    float\
    \ max = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ tuples, where each tuple contains the original index and the number\n    >>>\
    \ enumerate([1.0, 2.0, 3.0, 4.0, 5.0])\n    [(0, 1.0), (1, 2.0), (2, 3.0), (3,\
    \ 4.0), (4, 5.0)]\n*/\nTuple!(size_t, float)[] enumerate(float[] numbers) \n{\n\
    \    Tuple!(size_t, float)[] result = new Tuple!(size_t, float)[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = tuple(i, number);\n\
    \    }\n    return result;\n}\n/*\n Given a list of tuples, return a list of tuples,\
    \ where each tuple contains the original index and the number\n    >>> enumerate([(0,\
    \ 1.0), (1, 2.0), (2, 3.0), (3, 4.0), (4, 5.0)])\n    [(0, 1.0), (1, 2.0), (2,\
    \ 3.0), (3, 4.0), (4, 5.0)]\n*/\nTuple!(size_t, float)[] enumerate(Tuple!(size_t,\
    \ float)[] tuples) \n{\n    Tuple!(size_t, float)[] result = new Tuple!(size_t,\
    \ float)[tuples.length];\n    foreach(i, tuple; tuples)\n    {\n        result[i]\
    \ = tuple(i, tuple[1]);\n    }\n    return result;\n}\n/*\n Given a list of tuples,\
    \ return a list of tuples, where each tuple contains the original index and the\
    \ number\n    >>> enumerate([(0, 1.0), (1", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_val\
    \ = min(numbers);\n    float max_val = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n  \
    \  return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n; numbers)\n\
    \    {\n        if(n < min)\n            min = n;\n        if(n > max)\n     \
    \       max = n;\n    }\n    float range = max - min;\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min) / range;\n    }\n    return result;\n}",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n    \
    \    result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float range = max_value - min_value;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_value) / range;\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_value) / (max_value - min_value);\n    }\n    return result;\n}", "{\n\
    \    float[] result = new float[numbers.length];\n    float min_val = min(numbers);\n\
    \    float max_val = max(numbers);\n    float range = max_val - min_val;\n   \
    \ for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_val) / range;\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers) \n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, return\
    \ the mean (average) of those numbers\n    >>> mean([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    3.0\n*/\nfloat mean(float[] numbers) \n{\n    float sum = 0.0;\n    foreach(number;\
    \ numbers) \n    {\n        sum += number;\n    }\n    return sum / numbers.length;\n\
    }\n/*\n Given a list of numbers, return the median (middle) of those numbers\n\
    \    >>> median([1.0, 2.0, 3.0, 4.0, 5.0])\n    3.0\n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] sorted_numbers = numbers.dup.sort;\n    if(sorted_numbers.length\
    \ % 2 == 1) \n    {\n        return sorted_numbers[sorted_numbers.length / 2];\n\
    \    }\n    else \n    {\n        return (sorted_numbers[sorted_numbers.length\
    \ / 2 - 1] + sorted_numbers[sorted_numbers.length / 2]) / 2;\n    }\n}\n/*\n Given\
    \ a list of numbers, return the mode (most common) of those numbers\n    >>> mode([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    1.0\n*/\nfloat mode(float[] numbers) \n{\n    float[]\
    \ sorted_numbers = numbers.dup.sort;\n    float[] counts = new float[sorted_numbers.length];\n\
    \    foreach(i, number; sorted_numbers) \n    {\n        if(i == 0) \n       \
    \ {\n            counts[i] = 1;\n        }\n        else \n        {\n       \
    \     if(sorted_numbers[i] ==", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n   \
    \ float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_val = min(numbers);\n    float max_val = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, n; numbers)\n\
    \    {\n        result[i] = (n - min_val) / (max_val - min_val);\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = min(numbers);\n    float max = max(numbers);\n    float range = max -\
    \ min;\n    foreach(i, number; numbers) \n    {\n        result[i] = (number -\
    \ min) / range;\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_n = min(numbers);\n    float max_n = max(numbers);\n    float range\
    \ = max_n - min_n;\n    for (int i = 0; i < numbers.length; i++)\n    {\n    \
    \    result[i] = (numbers[i] - min_n) / range;\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}\n/*\n Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers)\
    \ \n{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    foreach(float number; numbers)\n\
    \    {\n        if(number < min)\n            min = number;\n        if(number\
    \ > max)\n            max = number;\n    }\n    float scale = 1.0f / (max - min);\n\
    \    foreach(int i, float number; numbers)\n    {\n        result[i] = (number\
    \ - min) * scale;\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers (of at\
    \ least two elements), apply a linear transform to that list,\n    such that the\
    \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min_num = min(numbers);\n   \
    \ float max_num = max(numbers);\n    float range = max_num - min_num;\n    foreach(i,\
    \ num; numbers)\n    {\n        result[i] = (num - min_num) / range;\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given a list of numbers, return a list of tuples, where each tuple is\
    \ a pair of numbers\n    >>> pairwise([1, 2, 3, 4])\n    [(1, 2), (2, 3), (3,\
    \ 4)]\n*/\nTuple!(float, float)[] pairwise(float[] numbers) \n{\n    Tuple!(float,\
    \ float)[] result = new Tuple!(float, float)[numbers.length - 1];\n    foreach(i,\
    \ number; numbers)\n    {\n        if (i > 0)\n        {\n            result[i\
    \ - 1] = tuple(numbers[i - 1], number);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a list of numbers, return a list of tuples, where each tuple is\
    \ a pair of numbers\n    >>> pairwise([1, 2, 3, 4])\n    [(1, 2), (2, 3), (3,\
    \ 4)]\n*/\nTuple!(float, float)[] pairwise(float[] numbers) \n{\n    Tuple!(float,\
    \ float)[] result = new Tuple!(float, float)[numbers.length - 1];\n    foreach(i,\
    \ number; numbers)\n    {\n        if (i > 0)\n        {\n            result[i\
    \ - 1] = tuple(numbers[i - 1], number);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a list of numbers, return a list of tuples, where each tuple is\
    \ a pair of numbers\n    >>> pairwise([1, 2, 3, 4])\n    [(1, 2), (2, 3), (3,\
    \ 4)]\n*/\nTuple!(float, float)[] pairwise(float[] numbers) \n{\n    Tuple!(float,\
    \ float)[] result = new Tuple!(float, float)[numbers.length - 1];", "{\n    float\
    \ min_value = min(numbers);\n    float max_value = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min_value) / (max_value - min_value);\n    }\n\
    \    return result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    assert(numbers.length >= 2);\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    assert(numbers.length >= 2);\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, apply\
    \ a linear transform to that list,\n    such that the smallest number will become\
    \ 0 and the", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n\
    \    float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float[] result;\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float scale = 1.0f / (max_value - min_value);\n\
    \    foreach(number; numbers) \n    {\n        result ~= (number - min_value)\
    \ * scale;\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min_value) / (max_value - min_value);\n    }\n    return result;\n}", "{\n\
    \    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float range = max_number - min_number;\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / range;\n    }\n    return\
    \ result;\n}", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min_number = min(numbers);\n    float max_number = max(numbers);\n    float\
    \ range = max_number - min_number;\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        result[i] = (numbers[i] - min_number) / range;\n    }\n   \
    \ return result;\n}", "{\n    float min_number = min(numbers);\n    float max_number\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_number) / (max_number\
    \ - min_number);\n    }\n    return result;\n}", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    foreach(float number; numbers)\n    {\n        if(number < min)\n       \
    \     min = number;\n        if(number > max)\n            max = number;\n   \
    \ }\n    float range = max - min;\n    foreach(int i; 0 .. numbers.length)\n \
    \   {\n        result[i] = (numbers[i] - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float range\
    \ = max - min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = (numbers[i] - min) / range;\n    }\n    return result;\n}\n/*\n Given a list\
    \ of numbers, apply a linear transform to that list,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return result;\n}\n/*\n Given a list of numbers,\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return result;\n}\n/*\n Given a list of numbers,\
    \ apply a linear transform to that list,\n    such", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float range\
    \ = max - min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = (numbers[i] - min) / range;\n    }\n    return result;\n}\n/*\n Given a list\
    \ of numbers, return a list of the same numbers, but with the largest number\n\
    \    first and the smallest number last.\n    >>> sort_by_magnitude([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    [5.0, 4.0, 3.0, 2.0, 1.0]\n*/\nfloat[] sort_by_magnitude(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float[] sorted\
    \ = numbers.dup;\n    sorted.sort;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = sorted[numbers.length - 1 - i];\n    }\n    return\
    \ result;\n}\n/*\n Given a list of numbers, return a list of the same numbers,\
    \ but with the largest number\n    first and the smallest number last.\n    >>>\
    \ sort_by_magnitude([1.0, 2.0, 3.0, 4.0, 5.0])\n    [5.0, 4.0, 3.0, 2.0, 1.0]\n\
    */\nfloat[] sort_by_magnitude(float[] numbers) \n{\n    float[] result = new float[numbers.length];\n\
    \    float[] sorted = numbers.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        result[i] = sorted[numbers.length - 1 -\
    \ i];\n    }\n    return result;\n}\n/*\n Given a list of numbers, return a list\
    \ of the same numbers, but with the largest number\n    first and the smallest\
    \ number last.\n    >>> sort_by_magnitude([1.0, 2.0,", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_val = min(numbers);\n    float max_val = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, val; numbers)\n\
    \    {\n        result[i] = (val - min_val) / (max_val - min_val);\n    }\n  \
    \  return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        result[i] = (numbers[i] - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n   \
    \ float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, n; numbers)\n    {\n        result[i] = (n - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min_val = min(numbers);\n    float\
    \ max_val = max(numbers);\n    float[] result = new float[numbers.length];\n \
    \   foreach(i, val; numbers)\n    {\n        result[i] = (val - min_val) / (max_val\
    \ - min_val);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, return\
    \ a list of tuples, where each tuple is a pair of numbers\n    >>> pairs([1, 2,\
    \ 3, 4])\n    [(1, 2), (2, 3), (3, 4)]\n*/\nTuple!(float, float)[] pairs(float[]\
    \ numbers) \n{\n    Tuple!(float, float)[] result = new Tuple!(float, float)[numbers.length\
    \ - 1];\n    foreach(i, number; numbers)\n    {\n        if (i < numbers.length\
    \ - 1)\n        {\n            result[i] = tuple(number, numbers[i + 1]);\n  \
    \      }\n    }\n    return result;\n}\n/*\n Given a list of tuples, return a\
    \ list of numbers, where each number is the average of the two numbers in the\
    \ tuple\n    >>> averages([(1, 2), (2, 3), (3, 4)])\n    [1.5, 2.5, 3.5]\n*/\n\
    float[] averages(Tuple!(float, float)[] tuples) \n{\n    float[] result = new\
    \ float[tuples.length];\n    foreach(i, tuple; tuples)\n    {\n        result[i]\
    \ = (tuple[0] + tuple[1]) / 2;\n    }\n    return result;\n}\n/*\n Given a list\
    \ of numbers, return a list of numbers, where each number is the average of the\
    \ two numbers in the tuple\n    >>> averages([1, 2, 3, 4])\n    [1.5, 2.5, 3.5]\n\
    */\nfloat[] averages(float[] numbers) \n{\n    return averages(pairs(numbers));\n\
    }\n/*\n Given a list of numbers, return a list of numbers, where each number is\
    \ the average of the two numbers in the tuple\n    >>> averages([1, 2, 3, 4])",
  "{\n    float min_val = min(numbers);\n    float max_val = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min_val) / (max_val - min_val);\n    }\n    return\
    \ result;\n}", "{\n    float min_value = min(numbers);\n    float max_value =\
    \ max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n       \
    \ result[i] = (number - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}", "{\n    float min_val = min(numbers);\n    float max_val = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min_number = min(numbers);\n   \
    \ float max_number = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_number)\
    \ / (max_number - min_number);\n    }\n    return result;\n}", "{\n    float min_val\
    \ = min(numbers);\n    float max_val = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n    {\n\
    \        result[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n  \
    \  return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_number\
    \ = min(numbers);\n    float max_number = max(numbers);\n    float[] result =\
    \ new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n      \
    \  result[i] = (number - min_number) / (max_number - min_number);\n    }\n   \
    \ return result;\n}", "{\n    float max = numbers[0];\n    float min = numbers[0];\n\
    \    foreach(n; numbers) \n    {\n        if (n > max) \n        {\n         \
    \   max = n;\n        }\n        if (n < min) \n        {\n            min = n;\n\
    \        }\n    }\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ n; numbers) \n    {\n        result[i] = (n - min) / (max - min);\n    }\n \
    \   return result;\n}", "{\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_value = min(numbers);\n    float max_value = max(numbers);\n  \
    \  float range = max_value - min_value;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / range;\n    }\n\
    \    return result;\n}", "{\n    float min = minElement(numbers);\n    float max\
    \ = maxElement(numbers);\n    float[] result = new float[numbers.length];\n  \
    \  foreach(i, number; numbers)\n    {\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers, return\
    \ a list of tuples, where each tuple is a pair of numbers\n    >>> pairwise([1,\
    \ 2, 3, 4])\n    [(1, 2), (2, 3), (3, 4)]\n*/\nTuple!(float, float)[] pairwise(float[]\
    \ numbers) \n{\n    Tuple!(float, float)[] result = new Tuple!(float, float)[numbers.length\
    \ - 1];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n        {\n\
    \            result[i - 1] = tuple(numbers[i - 1], number);\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a list of numbers, return a list of tuples,\
    \ where each tuple is a pair of numbers\n    >>> pairwise([1, 2, 3, 4])\n    [(1,\
    \ 2), (2, 3), (3, 4)]\n*/\nTuple!(float, float)[] pairwise(float[] numbers) \n\
    {\n    Tuple!(float, float)[] result = new Tuple!(float, float)[numbers.length\
    \ - 1];\n    foreach(i, number; numbers)\n    {\n        if (i > 0)\n        {\n\
    \            result[i - 1] = tuple(numbers[i - 1], number);\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a list of numbers, return a list of tuples,\
    \ where each tuple is a pair of numbers\n    >>> pairwise([1, 2, 3, 4])\n    [(1,\
    \ 2), (2, 3), (3, 4)]\n*/\nTuple!(float, float)[] pairwise(float[] numbers) \n\
    {\n    Tuple!(float, float)[] result = new Tuple!(float, float)[numbers.length\
    \ -", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n    \
    \    result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers) \n    {\n    \
    \    result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    foreach(n; numbers)\n    {\n        if(n > max)\n\
    \            max = n;\n        if(n < min)\n            min = n;\n    }\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, n; numbers)\n    {\n   \
    \     result[i] = (n - min) / (max - min);\n    }\n    return result;\n}", "{\n\
    \    float[] result = new float[numbers.length];\n    float min_val = min(numbers);\n\
    \    float max_val = max(numbers);\n    float range = max_val - min_val;\n   \
    \ for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_val) / range;\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float[] result =\
    \ new float[numbers.length];\n    float min_val = min(numbers);\n    float max_val\
    \ = max(numbers);\n    float range = max_val - min_val;\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min_val) /\
    \ range;\n    }\n    return result;\n}\n/*\n Given list of numbers (of at least\
    \ two elements), apply a linear transform to that list,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min_val\
    \ = min(numbers);\n    float max_val = max(numbers);\n    float range = max_val\
    \ - min_val;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = (numbers[", "{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,", "{\n  \
    \  float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}",
  "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers) \n\
    {\n    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n     \
    \   result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    /*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers) \n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n\
    \    float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers,\
    \ return a list of tuples, where each tuple contains the original index of the\
    \ number,\n    the number itself, and the number of times the number appears in\
    \ the list\n    >>> list_with_counts([1, 2, 3, 1, 2, 1, 1, 2, 3, 3, 3, 4, 5, 4,\
    \ 6])\n    [(0, 1, 4), (1, 2, 3), (2, 3, 3), (3, 4, 2), (4, 5, 1), (5, 6, 1)]\n\
    */\nTuple!(int, float, int)[] list_with_counts(float[] numbers) \n{\n    Tuple!(int,\
    \ float, int)[] result = new Tuple!(int, float, int)[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        int count = 0;\n     \
    \   for (int j = 0; j < numbers.length; j++) \n        {\n            if (numbers[i]\
    \ == numbers[j]) \n            {\n                count++;\n            }\n  \
    \      }\n        result[i] = tuple(i, numbers[i], count);\n    }\n    return\
    \ result;\n}\n/*\n Given a list of numbers, return a list of tuples, where each\
    \ tuple contains the original index of the number,\n    the number itself, and\
    \ the number of times the number appears in the list\n    >>> list_with_counts([1,\
    \ 2, 3, 1, 2, 1, 1, 2, 3, 3, 3, 4, 5, 4, 6])\n    [(0, 1, 4), (1, 2, 3), (2, 3,\
    \ 3), (3, 4, 2), (4, 5, 1), (5, 6, 1)]\n*/\nT", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float[] result;\n    float\
    \ max = max(numbers);\n    float min = min(numbers);\n    float range = max -\
    \ min;\n    foreach(i, number; numbers)\n    {\n        result ~= (number - min)\
    \ / range;\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n   \
    \ }\n    return result;\n}\n/*\n Given a list of numbers, return a list of the\
    \ same numbers, but with the first element moved to the end.\n    >>> rotate_list([1,\
    \ 2, 3, 4, 5])\n    [2, 3, 4, 5, 1]\n*/\nfloat[] rotate_list(float[] numbers)\
    \ \n{\n    float[] result = new float[numbers.length];\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        result[i] = numbers[(i + 1) % numbers.length];\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ the same numbers, but with the first element moved to the end.\n    >>> rotate_list([1,\
    \ 2, 3, 4, 5])\n    [2, 3, 4, 5, 1]\n*/\nfloat[] rotate_list(float[] numbers)\
    \ \n{\n    float[] result = new float[numbers.length];\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        result[i] = numbers[(i + 1) % numbers.length];\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ the same numbers, but with the first element moved to the end.\n    >>> rotate_list([1,\
    \ 2, 3, 4, 5])\n    [2, 3, 4, 5, 1]\n*/\nfloat[] rotate_list(float[] numbers)\
    \ \n{\n    float[] result = new float[numbers.length];\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        result[i] = numbers[(i + 1) % numbers.length];\n\
    \    }\n    return result;\n}\n/*\n Given a list", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min_value = min(numbers);\n    float max_value\
    \ = max(numbers);\n    float range = max_value - min_value;\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_value)\
    \ / range;\n    }\n    return result;\n}\n/*\n Given a list of numbers, return\
    \ a list of the same numbers, but with the first element moved to the end of the\
    \ list.\n    >>> rotate_list([1, 2, 3, 4, 5])\n    [2, 3, 4, 5, 1]\n*/\nfloat[]\
    \ rotate_list(float[] numbers) \n{\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = numbers[(i\
    \ + 1) % numbers.length];\n    }\n    return result;\n}\n/*\n Given a list of\
    \ numbers, return a list of the same numbers, but with the first element moved\
    \ to the end of the list.\n    >>> rotate_list([1, 2, 3, 4, 5])\n    [2, 3, 4,\
    \ 5, 1]\n*/\nfloat[] rotate_list(float[] numbers) \n{\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) \n    {\n\
    \        result[i] = numbers[(i + 1) % numbers.length];\n    }\n    return result;\n\
    }\n/*\n Given a list of numbers, return a list of the same numbers, but with the\
    \ first element moved to the end of the list.\n    >>> rotate_list([1, 2, 3, 4,\
    \ 5])\n    [2, 3, 4, 5, 1]\n*/\nfloat[] rotate_list(float[] numbers) \n{\n   \
    \ float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = numbers[(i + 1) % numbers", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    foreach(i, number; numbers)\n    {\n        if(number\
    \ < min)\n            min = number;\n        if(number > max)\n            max\
    \ = number;\n    }\n    float range = max - min;\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n   ", "{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n    \
    \    result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\n/*\n Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float\
    \ min, float max) \n{\n    float[] result = new float[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers, float[] min, float[] max)\
    \ \n{\n    float[] result = new float[numbers.length];\n    for (int i = 0; i\
    \ < numbers.length; i++) \n    {\n        result[i] =", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return result;\n}\n/*\n Given a list of numbers,\
    \ return a list of the same numbers,\n    but with the largest number in the list\
    \ at the front\n    >>> move_largest_to_front([1.0, 2.0, 3.0, 4.0, 5.0])\n   \
    \ [5.0, 1.0, 2.0, 3.0, 4.0]\n*/\nfloat[] move_largest_to_front(float[] numbers)\
    \ \n{\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    int index = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n   \
    \     if (numbers[i] == max)\n        {\n            index = i;\n        }\n \
    \   }\n    result[0] = max;\n    int j = 1;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (i != index)\n        {\n            result[j] = numbers[i];\n\
    \            j++;\n        }\n    }\n    return result;\n}\n/*\n Given a list\
    \ of numbers, return a list of the same numbers,\n    but with the largest number\
    \ in the list at the back\n    >>> move_largest_to_back([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [1.0, 2.0, 3.0, 4.0, 5.0]\n*/\nfloat[] move_largest_to_back(float[] numbers)\
    \ \n{\n    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    int index = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n   \
    \     if (numbers[i] == max)", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return result;\n}", "{\n    float min_val = min(numbers);\n\
    \    float max_val = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_val) / (max_val - min_val);\n    }\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = min(numbers);\n    float\
    \ max = max(numbers);\n    float range = max - min;\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    for (int i = 0; i < numbers.length; i++)\n    {\n     \
    \   result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min = min(numbers);\n    float max = max(numbers);\n    float[]\
    \ result = new float[numbers.length];\n    foreach(i, number; numbers)\n    {\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_value) / (max_value - min_value);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
