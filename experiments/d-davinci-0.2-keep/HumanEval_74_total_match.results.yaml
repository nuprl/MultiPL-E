name: HumanEval_74_total_match
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwfjad7ky.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpwfjad7ky.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpwfjad7ky.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xf750f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwgxeqnva.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpwgxeqnva.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpwgxeqnva.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xf4245554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0mogioxi.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp0mogioxi.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp0mogioxi.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xca7db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz3j5gne_.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpz3j5gne_.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpz3j5gne_.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xfe92b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppnpb1tvk.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmppnpb1tvk.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmppnpb1tvk.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x6bbc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzofwax_0.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpzofwax_0.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpzofwax_0.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x8d583554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpenako_rw.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpenako_rw.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpenako_rw.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb6f2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpslzph0nc.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpslzph0nc.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpslzph0nc.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x8ef95554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyl729juj.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpyl729juj.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpyl729juj.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x45c55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsxy2_l2e.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpsxy2_l2e.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpsxy2_l2e.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x409cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    return sum1 < sum2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy892m5ko.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpy892m5ko.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpy892m5ko.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x7ae1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ == lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ < lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n       \
    \ return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_6y2nw3s.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp_6y2nw3s.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp_6y2nw3s.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x25b3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphe8nu9yf.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmphe8nu9yf.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmphe8nu9yf.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xce90e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp62ft7jq0.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp62ft7jq0.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp62ft7jq0.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x867fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppr1t34b2.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmppr1t34b2.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmppr1t34b2.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd5640554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3airovpn.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp3airovpn.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp3airovpn.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xa5aee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmx9ds5ov.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpmx9ds5ov.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpmx9ds5ov.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x894fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdbd_57m1.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpdbd_57m1.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpdbd_57m1.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xaf25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6zyv_fly.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6zyv_fly.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp6zyv_fly.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x568cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk89zegjm.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpk89zegjm.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpk89zegjm.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xe7fa5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx3grzrcj.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpx3grzrcj.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpx3grzrcj.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xb9127554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc17ygasc.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpc17ygasc.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpc17ygasc.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x25d70554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 > sum2)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwxyo3em5.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpwxyo3em5.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpwxyo3em5.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x20950554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqlacanij.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpqlacanij.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpqlacanij.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xf9764554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvgdwx81l.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpvgdwx81l.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpvgdwx81l.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xb0d6d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\n/*\n    Create a function that takes a string and returns a string in\
    \ which each character is repeated once.\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy3jtaepw.d(43): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3jtaepw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcni6b8jg.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpcni6b8jg.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpcni6b8jg.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xfcde3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj6xw5_jt.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpj6xw5_jt.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpj6xw5_jt.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x15a09554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total >\
    \ lst2_total)\n    {\n        return lst2;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpud14z_0y.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpud14z_0y.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpud14z_0y.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x3ab50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphd5aghq5.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmphd5aghq5.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmphd5aghq5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x578cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptr7caw_t.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmptr7caw_t.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmptr7caw_t.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x42fc5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5936th6k.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp5936th6k.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp5936th6k.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x30f0b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn7yopagy.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpn7yopagy.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpn7yopagy.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xf9bfa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm2h9xrgr.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpm2h9xrgr.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpm2h9xrgr.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe6fd3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbne877m9.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpbne877m9.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpbne877m9.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5c860554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptf3qyahj.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmptf3qyahj.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmptf3qyahj.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x2a041554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_chars = 0;\n    int lst2_total_chars = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        lst1_total_chars += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        lst2_total_chars += s.length;\n\
    \    }\n    return lst1_total_chars < lst2_total_chars ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv95ks9uo.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpv95ks9uo.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpv95ks9uo.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xc8122554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_len = 0;\n    int lst2_len = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_len += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_len += s.length;\n    }\n    return lst1_len < lst2_len\
    \ ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvd5isx7n.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpvd5isx7n.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpvd5isx7n.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x8e9b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8enqs5co.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp8enqs5co.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp8enqs5co.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x67a2a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = 0;\n    int lst2Total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1Total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2Total += s.length;\n    }\n    if(lst1Total == lst2Total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst1Total < lst2Total)\n    {\n\
    \        return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeb5ae6hi.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpeb5ae6hi.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpeb5ae6hi.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x1040554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6x0_t1wa.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6x0_t1wa.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp6x0_t1wa.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xfdc83554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4_qzbzqs.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp4_qzbzqs.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp4_qzbzqs.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xea5c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3gvz30c8.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp3gvz30c8.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp3gvz30c8.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9f703554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        total1 += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        total2 += str.length;\n    }\n    if(total1 > total2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ < lst2_total)\n    {\n        return lst1;\n    }\n    return lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoyfmovf7.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpoyfmovf7.__unittest_L36_C1()\
    \ [0x428464]\\n??:? void tmpoyfmovf7.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x44f20554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqra3b1gb.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpqra3b1gb.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpqra3b1gb.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x9fbc7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq3gl33ta.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpq3gl33ta.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpq3gl33ta.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xd8e4d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqnof5d5b.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpqnof5d5b.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpqnof5d5b.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xbfc92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi_5k9qq5.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpi_5k9qq5.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpi_5k9qq5.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xf8e3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe6dretcg.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpe6dretcg.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpe6dretcg.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe1f14554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxfh50d72.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpxfh50d72.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpxfh50d72.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x82013554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa41odg9v.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpa41odg9v.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpa41odg9v.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x48cd8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0__ekf6w.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp0__ekf6w.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp0__ekf6w.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x4588f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl4hbv7b_.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpl4hbv7b_.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpl4hbv7b_.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xfb22e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5oijeoh9.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp5oijeoh9.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp5oijeoh9.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x3af7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum2 < sum1)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 > sum2)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ i; lst1)\n    {\n        lst1_total += i.length;\n    }\n    foreach(string\
    \ i; lst2)\n    {\n        lst2_total += i.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ae6i2a9.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6ae6i2a9.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp6ae6i2a9.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc21c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = 0;\n    int lst2Total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1Total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2Total += s.length;\n    }\n    return lst1Total <\
    \ lst2Total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwkmal1zm.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpwkmal1zm.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpwkmal1zm.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5769e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ld7bmcx.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp7ld7bmcx.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp7ld7bmcx.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc27c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgk0gu036.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpgk0gu036.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpgk0gu036.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x12384554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsamrtrvc.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpsamrtrvc.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpsamrtrvc.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x761d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy65fk2fl.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpy65fk2fl.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpy65fk2fl.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x3570a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_sum = 0;\n    int lst2_sum = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_sum += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_sum += s.length;\n    }\n    if(lst1_sum < lst2_sum)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoc5ammzl.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpoc5ammzl.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpoc5ammzl.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xda689554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3swjg7fe.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp3swjg7fe.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp3swjg7fe.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x9b087554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpapkom4o3.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpapkom4o3.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpapkom4o3.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xf4825554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeaclxg_w.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpeaclxg_w.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpeaclxg_w.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x820c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ == lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ item; lst1)\n    {\n        lst1_total += item.length;\n    }\n    foreach(string\
    \ item; lst2)\n    {\n        lst2_total += item.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpczv9jhdi.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpczv9jhdi.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpczv9jhdi.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x63825554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp27i1xr8w.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp27i1xr8w.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp27i1xr8w.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x6ede9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1sowjo34.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp1sowjo34.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp1sowjo34.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x2d53e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxox8lbh6.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpxox8lbh6.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpxox8lbh6.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x4c73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt25_wykz.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpt25_wykz.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpt25_wykz.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x6e255554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    return sum1 < sum2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdsy7nxxm.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpdsy7nxxm.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpdsy7nxxm.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xff95c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnsi60o4j.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpnsi60o4j.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpnsi60o4j.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x667f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd0w55iop.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpd0w55iop.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpd0w55iop.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xed99d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvxtvvzbb.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpvxtvvzbb.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpvxtvvzbb.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xaaeab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyiob0w3j.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpyiob0w3j.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpyiob0w3j.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x4ac6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb2kqp58m.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpb2kqp58m.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpb2kqp58m.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x175f7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw_zwujb7.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpw_zwujb7.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpw_zwujb7.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x39e2e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcs5afmhj.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpcs5afmhj.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpcs5afmhj.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb5da1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmeqk2stf.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpmeqk2stf.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpmeqk2stf.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x43a8c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpybcbp5q4.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpybcbp5q4.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpybcbp5q4.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xca0fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph5tsllrk.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmph5tsllrk.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmph5tsllrk.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x1f26c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtky9sns.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpjtky9sns.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpjtky9sns.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2d60f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp17yi42yg.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp17yi42yg.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp17yi42yg.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5ab19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr6htwgw4.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpr6htwgw4.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpr6htwgw4.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x2a70b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsb809iw7.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpsb809iw7.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpsb809iw7.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x97bcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw98lbo2u.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpw98lbo2u.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpw98lbo2u.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xfa929554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0g260pc1.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp0g260pc1.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp0g260pc1.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x239c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbop_if4b.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpbop_if4b.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpbop_if4b.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x23ade554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ < lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n       \
    \ return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwmwjki03.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpwmwjki03.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpwmwjki03.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xe04fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpodpbpueg.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpodpbpueg.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpodpbpueg.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x4628e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp800w59gp.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp800w59gp.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp800w59gp.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x399c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo1pyp1aq.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpo1pyp1aq.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpo1pyp1aq.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x17ac9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1r_zr7da.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp1r_zr7da.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp1r_zr7da.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb3f72554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphrhwetme.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmphrhwetme.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmphrhwetme.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x14daf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 > sum2)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpym_1imhh.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpym_1imhh.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpym_1imhh.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x24fa4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpch_0fwjs.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpch_0fwjs.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpch_0fwjs.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xc0b07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg8mx6kqn.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpg8mx6kqn.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpg8mx6kqn.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x28bc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ <= lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdrcllgbl.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpdrcllgbl.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpdrcllgbl.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x693a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = 0;\n    int lst2Total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1Total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2Total += s.length;\n    }\n    if(lst1Total < lst2Total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_0uh5dfz.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp_0uh5dfz.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp_0uh5dfz.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa4a46554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2wrw8ncl.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmp2wrw8ncl.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmp2wrw8ncl.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x336f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4ps29nu.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpt4ps29nu.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpt4ps29nu.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb2321554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpksisnzfb.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpksisnzfb.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpksisnzfb.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9c1ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_chars = 0;\n    int lst2_total_chars = 0;\n  \
    \  foreach(string s; lst1)\n    {\n        lst1_total_chars += s.length;\n   \
    \ }\n    foreach(string s; lst2)\n    {\n        lst2_total_chars += s.length;\n\
    \    }\n    if(lst1_total_chars < lst2_total_chars)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb2cmx70c.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpb2cmx70c.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpb2cmx70c.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x9ad9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe9nb5kih.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpe9nb5kih.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpe9nb5kih.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x814f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc2aepfbr.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpc2aepfbr.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpc2aepfbr.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc8b6d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn4ahhjis.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpn4ahhjis.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpn4ahhjis.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xda46c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvchzand_.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpvchzand_.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpvchzand_.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5c0ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ == lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnj7btgz6.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpnj7btgz6.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpnj7btgz6.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x568d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    return sum1 < sum2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiepqtm9h.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpiepqtm9h.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpiepqtm9h.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xa6932554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8aotlvfw.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp8aotlvfw.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp8aotlvfw.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x55f30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpca7p5nmk.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpca7p5nmk.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpca7p5nmk.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x35505554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphw9bk5x_.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmphw9bk5x_.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmphw9bk5x_.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x706fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsvqgckiv.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpsvqgckiv.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpsvqgckiv.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x58e58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ i; lst1)\n    {\n        lst1_total += i.length;\n    }\n    foreach(string\
    \ i; lst2)\n    {\n        lst2_total += i.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy6rqo6rn.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpy6rqo6rn.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpy6rqo6rn.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa5453554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe6nc8y2x.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpe6nc8y2x.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpe6nc8y2x.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xae3f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo1cxb4wb.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpo1cxb4wb.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpo1cxb4wb.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0xb3e98554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcwxf52a0.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpcwxf52a0.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpcwxf52a0.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x79c56554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total ==\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxm99bo4n.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpxm99bo4n.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpxm99bo4n.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x37a67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total > lst2_total)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6hs_t6et.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmp6hs_t6et.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmp6hs_t6et.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc186a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_length = 0;\n    int lst2_length = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_length += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_length += s.length;\n    }\n    if(lst1_length\
    \ == lst2_length)\n    {\n        return lst1;\n    }\n    else if(lst1_length\
    \ < lst2_length)\n    {\n        return lst1;\n    }\n    else\n    {\n      \
    \  return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total\
    \ == lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfh5_0cdh.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpfh5_0cdh.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpfh5_0cdh.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x19ddb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbfkvvr76.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpbfkvvr76.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpbfkvvr76.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xc9f51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu_jjx0jc.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294dd]\\n??:? void tmpu_jjx0jc.__unittest_L39_C1()\
    \ [0x428464]\\n??:? void tmpu_jjx0jc.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429236]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac65]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acf4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abf1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42920d]\\n??:? runModuleUnitTests [0x42db8d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42992c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298b3]\\n??:? _d_run_main [0x42981e]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0x66da8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpigvi3i68.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294d5]\\n??:? void tmpigvi3i68.__unittest_L32_C1()\
    \ [0x428460]\\n??:? void tmpigvi3i68.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ddaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42922e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ac5d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42acec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42abe9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429205]\\n??:? runModuleUnitTests [0x42db85]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429924]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298ab]\\n??:? _d_run_main [0x429816]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x5660f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \    total_match([], []) \u279E []\n    total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin',\
    \ 'project']) \u279E ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI',\
    \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3',\
    \ '4', '5']) \u279E ['4']\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
