name: HumanEval_29_filter_by_prefix
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpey398jl0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey398jl0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkib9p1ns.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkib9p1ns.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1mqcbkov.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mqcbkov.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0bqfr3s.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0bqfr3s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp238n0dmn.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp238n0dmn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgcm6tp_.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgcm6tp_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjeac3k_a.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjeac3k_a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jygwkuo.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jygwkuo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0z8f9qc.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0z8f9qc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphpo2_yjy.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpo2_yjy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfym6doxc.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfym6doxc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4wiws19x.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4wiws19x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiotlvi4c.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiotlvi4c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfn5r6_9.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfn5r6_9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8gr55p0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8gr55p0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjls0yhw.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjls0yhw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcd7uab6p.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcd7uab6p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02ncnycq.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02ncnycq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb1q6kiui.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1q6kiui.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34hk5j_n.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34hk5j_n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkorfiwvp.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkorfiwvp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphfb9jc_l.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfb9jc_l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6gobcyf.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6gobcyf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpirw02gw1.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpirw02gw1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuzmrtesa.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzmrtesa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bhwth6w.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bhwth6w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix_lambda(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_lambda_2(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda_2(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_lambda_3(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda_3(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_lambda_4(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda_4(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_lambda_5(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda_5(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\n/*\n    >>>\
    \ filter_by_prefix_lambda_6(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc',\
    \ 'array']\n*/\nstring[] filter_by_prefix_lambda_6(string[] strings, string prefix)\
    \ \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6mt3dc0i.d(60): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6mt3dc0i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkx_wjvce.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkx_wjvce.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvk1mydqn.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvk1mydqn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48qvxyl7.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48qvxyl7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadsypn0i.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpadsypn0i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxg159l_.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxg159l_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprx46jbg8.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx46jbg8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3gvpabvq.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3gvpabvq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpifch1_f1.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifch1_f1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqil9maog.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqil9maog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0j_0k1vy.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0j_0k1vy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqkk9se30.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkk9se30.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzc7ukom8.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc7ukom8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp941q83xv.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp941q83xv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix_2([], 'a')\n    []\n    >>> filter_by_prefix_2(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_3([], 'a')\n    []\n    >>> filter_by_prefix_3(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_4([], 'a')\n    []\n    >>> filter_by_prefix_4(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix_5([], 'a')\n    []\n    >>> filter_by_prefix_5(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_6([], 'a')\n    []\n    >>> filter_by_prefix_6(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvs6ivoa.d(62): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvs6ivoa.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvuqxrx7.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvuqxrx7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq08z14hd.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpq08z14hd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxtipb1q.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxtipb1q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphr2h624w.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphr2h624w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeigaauka.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeigaauka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjkd44v3.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjkd44v3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo557nw14.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpo557nw14.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5rgccxrk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rgccxrk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbn_5mwy.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbn_5mwy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzyd2nsil.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpzyd2nsil.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm12mvpx.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm12mvpx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb27glwgr.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb27glwgr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp58sk99pz.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp58sk99pz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphf4kpi8o.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmphf4kpi8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivl3xoho.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpivl3xoho.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeglw6ocf.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeglw6ocf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqesf5rf.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpyqesf5rf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqcq4rl40.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcq4rl40.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpym3j9_g7.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpym3j9_g7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm3cbmirb.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3cbmirb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxfyfytfn.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfyfytfn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi73uj31r.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi73uj31r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5rwv7er.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpa5rwv7er.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0uzsygk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0uzsygk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ucd7x54.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ucd7x54.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0b496rh.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0b496rh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9o7w32kr.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9o7w32kr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp20pufgm.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp20pufgm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79k5zcs6.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79k5zcs6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnywyv1y.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnywyv1y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp92cithi.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp92cithi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1mjzdlaz.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mjzdlaz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr9iytyg9.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9iytyg9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8cmd7om.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8cmd7om.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpagd2vvq9.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagd2vvq9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0jdjxig_.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jdjxig_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqd8bha8h.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd8bha8h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptk690cun.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptk690cun.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpva4aterw.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva4aterw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxj7za8o.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxj7za8o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzbahf643.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpzbahf643.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe67gga8h.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe67gga8h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm9utjfai.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9utjfai.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).retro;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).save;\n\
    }\n/*\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppq6o79li.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppq6o79li.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mkqctkm.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mkqctkm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoa1by_tp.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa1by_tp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvp0zhkd.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvp0zhkd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(x => x.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiekdhtys.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiekdhtys.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(x => x.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxew92ezg.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxew92ezg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49mo96q7.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49mo96q7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nup2s17.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nup2s17.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_68l9nz.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_68l9nz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7wpfj3j.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7wpfj3j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzapzl5rm.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzapzl5rm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejv5ixna.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpejv5ixna.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9kz0im_.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9kz0im_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphq4gaayv.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmphq4gaayv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ak62kbg.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ak62kbg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg1m1uzjh.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1m1uzjh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyjsponm.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjsponm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmyhgsatt.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyhgsatt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zdnd0zi.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zdnd0zi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnzywvgvk.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpnzywvgvk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4h5jsi3.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4h5jsi3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdqbp_nw8.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqbp_nw8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnaopj2l5.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpnaopj2l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjwuv7cbp.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwuv7cbp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp540iqwi1.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp540iqwi1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbzlw6_zy.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbzlw6_zy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyaw_kji3.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyaw_kji3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0n6uo7v.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0n6uo7v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91t3hogz.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91t3hogz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    */\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8flebqpl.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8flebqpl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsvdz_pzg.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvdz_pzg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7473hje.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7473hje.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix))();\n\
    }\n/*\n    >>> filter_by_prefix\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphh8zyl38.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh8zyl38.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptfg9lzet.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptfg9lzet.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4az5fkk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4az5fkk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp50dbjsa0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50dbjsa0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8t6yg2fc.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t6yg2fc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9so4_9g.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpf9so4_9g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tf6i3qe.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tf6i3qe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf5moau_j.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5moau_j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57gpro7h.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57gpro7h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\n/*\n    >>> filter_by_prefix_lambda([], 'a')\n\
    \    []\n    >>> filter_by_prefix_lambda(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_2([], 'a')\n    []\n    >>> filter_by_prefix_lambda_2(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_3([], 'a')\n    []\n    >>> filter_by_prefix_lambda_3(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_4([], 'a')\n    []\n    >>> filter_by_prefix_lambda_4(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_5([], 'a')\n    []\n   \nunittest\n{\n\
    \    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4jy33ra.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4jy33ra.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s\nunittest\n{\n\
    \    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxk5dc71z.d(64): Error: found `unittest` when expecting `)` following\
    \ template argument list\\n/tmp/tmpxk5dc71z.d(65): Error: found `{` when expecting\
    \ `;` following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpxk5dc71z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg797hthb.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpg797hthb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19kyu7fp.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19kyu7fp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb2yd6eat.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2yd6eat.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4mbft9f.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4mbft9f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s\nunittest\n{\n\
    \    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7549y2u4.d(64): Error: found `unittest` when expecting `)` following\
    \ template argument list\\n/tmp/tmp7549y2u4.d(65): Error: found `{` when expecting\
    \ `;` following `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp7549y2u4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvbjpf1lo.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbjpf1lo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjazkibfx.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjazkibfx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyi_gm9vz.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi_gm9vz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix_lambda([], 'a')\n    []\n    >>> filter_by_prefix_lambda(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_2([], 'a')\n    []\n    >>> filter_by_prefix_lambda_2(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_3([], 'a')\n    []\n    >>> filter_by_prefix_lambda_3(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_4([], 'a')\n    []\n    >>> filter_by_prefix_lambda_4(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_lambda_4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_5([], 'a')\n    []\n    >>> filter_by_prefix_lambda_5(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix_\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4yckkai.d(62): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4yckkai.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppf6nji39.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmppf6nji39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0c7i7x7w.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0c7i7x7w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsjalxw5n.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjalxw5n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_vdvye1l.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vdvye1l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings) \n    {\n\
    \        if (s.startsWith(prefix)) \n        {\n            result ~= s;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnluvtcm_.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnluvtcm_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xr5pu2e.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xr5pu2e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_eb6xcog.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eb6xcog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n    {\n \
    \       if(s.startsWith(prefix))\n        {\n            result ~= s;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15hn6p2g.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15hn6p2g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1juqqs9k.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1juqqs9k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2sfvz95.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2sfvz95.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidam2e01.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidam2e01.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwypoq2sk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwypoq2sk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_oqxyna.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_oqxyna.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn80nrpx0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn80nrpx0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings) \n    {\n\
    \        if (s.startsWith(prefix)) \n        {\n            result ~= s;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5a1w_2nw.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5a1w_2nw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1qx_llgv.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qx_llgv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj22jq1rk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj22jq1rk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5t86c7z4.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5t86c7z4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppng4mrf9.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmppng4mrf9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6sa6l4dk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sa6l4dk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxbm_im9w.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbm_im9w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6crma949.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6crma949.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4n7oib0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4n7oib0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ba_w8qw.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ba_w8qw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxclclfft.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxclclfft.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6spiboy.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6spiboy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85ic08x0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85ic08x0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_b3crfnm.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_b3crfnm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvgngi5zh.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgngi5zh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaj4wdaku.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaj4wdaku.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrlej6fa.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrlej6fa.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnm0uel5x.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm0uel5x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    Filter an input list of strings only for ones that start with a given prefix.\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n   \nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5luel8c.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5luel8c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6c7n6xt.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6c7n6xt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02o43qs_.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02o43qs_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdqn5qs70.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqn5qs70.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6yxfngw.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6yxfngw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zhrtvxp.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zhrtvxp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd95s1kfn.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd95s1kfn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3fnn12wz.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp3fnn12wz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprpj63ky5.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprpj63ky5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8jvo8i0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8jvo8i0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqx7cg81.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqx7cg81.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mh7cm6a.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mh7cm6a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4z_q65p8.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp4z_q65p8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpehv69umn.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehv69umn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8qb82s52.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qb82s52.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18aa988f.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18aa988f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcehavkt2.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcehavkt2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n\
    \    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd',\
    \ 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix3(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix4(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix5(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n*/\nstring[] filter_by_prefix6(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwyidlizt.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyidlizt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zclibj1.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp1zclibj1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzyqlflu5.d(13): Error: template instance `filter!((a) => a.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpzyqlflu5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaim75akk.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaim75akk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjcz1apxc.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcz1apxc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyie00tu.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyie00tu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp125a3kz0.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp125a3kz0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc78sbqrz.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc78sbqrz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxqiw965.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`\
    \ template `filter` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpsxqiw965.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5k_kvzid.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k_kvzid.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result;\n    foreach(string s; strings) \n    {\n\
    \        if (s.startsWith(prefix)) \n        {\n            result ~= s;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0s_wto9v.d(16): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0s_wto9v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx_huwysh.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_huwysh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwg7x179.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwg7x179.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdmn3wff.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdmn3wff.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2z8jscc.d(13): Error: no property `filter` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2z8jscc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
