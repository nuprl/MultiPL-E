name: HumanEval_78_hex_key
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6jvmrm77.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmp6jvmrm77.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmp6jvmrm77.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0x9ad5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5m2yoq5y.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp5m2yoq5y.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp5m2yoq5y.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xff1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0qvxm_um.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp0qvxm_um.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp0qvxm_um.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x354c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0fcdbbxn.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp0fcdbbxn.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp0fcdbbxn.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xa8149554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        long key = c.to!long(16);\n        if(primes.canFind(key))\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppn6y4ilh.d(28): Error: no property `to` for type `char`\\n/tmp/tmppn6y4ilh.d(29):\
    \ Error: no property `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppn6y4ilh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num) \n    {\n        long v = 0;\n \
    \       if(c >= '0' && c <= '9')\n            v = c - '0';\n        else if(c\
    \ >= 'A' && c <= 'F')\n            v = c - 'A' + 10;\n        result = result\
    \ * 16 + v;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\"\
    ) == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_bm7fdnf.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmp_bm7fdnf.__unittest_L36_C1()\
    \ [0x427ad6]\\n??:? void tmp_bm7fdnf.__modtest() [0x427bc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bd7]\\\
    n??:? __libc_start_main [0xb08b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            result\
    \ += primes[c - '0'];\n        }\n        else if(c >= 'A' && c <= 'F')\n    \
    \    {\n            result += primes[c - 'A' + 10];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpo1nmnfxs.d(34): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428266]\\n??:? long tmpo1nmnfxs.hex_key(immutable(char)[])\
    \ [0x427df2]\\n??:? void tmpo1nmnfxs.__unittest_L39_C1() [0x427e2f]\\n??:? void\
    \ tmpo1nmnfxs.__modtest() [0x427f34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c213]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430239]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b07d]\\n??:? runModuleUnitTests [0x42bfe9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428678]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ff]\\n??:? _d_run_main [0x42856a]\\n??:? main [0x427f47]\\\
    n??:? __libc_start_main [0xb2ba1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += (c >=\
    \ 'A') ? (c - 'A' + 10) : (c - '0');\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpypm9o1kz.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpypm9o1kz.__unittest_L31_C1()\
    \ [0x427a9e]\\n??:? void tmpypm9o1kz.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0xb0a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_s1ig7hp.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp_s1ig7hp.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp_s1ig7hp.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x65cf6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0dqr1hj5.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp0dqr1hj5.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp0dqr1hj5.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x4ade2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfhqxwue6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpfhqxwue6.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpfhqxwue6.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xc3965554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9afz8cb9.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp9afz8cb9.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp9afz8cb9.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x33423554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(char c; num)\n    {\n        key = key * 16 +\
    \ c;\n    }\n    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2arl0cfd.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dfd]\\n??:? void tmp2arl0cfd.__unittest_L31_C1()\
    \ [0x427a92]\\n??:? void tmp2arl0cfd.__modtest() [0x427b80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a98d]\\n??:? runModuleUnitTests [0x42b8f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42824c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281d3]\\n??:? _d_run_main [0x42813e]\\n??:? main [0x427b93]\\\
    n??:? __libc_start_main [0xf7361554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c >=\
    \ 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg9rrm6_c.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmpg9rrm6_c.__unittest_L31_C1()\
    \ [0x427b02]\\n??:? void tmpg9rrm6_c.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0x90372554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpect9fqyc.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpect9fqyc.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpect9fqyc.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xf2356554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ >= 'A' && c <= 'F')\n            result += 1 << (c - 'A' + 10);\n        else\n\
    \            result += 1 << (c - '0');\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9oub8bhd.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp9oub8bhd.__unittest_L34_C1()\
    \ [0x427aba]\\n??:? void tmp9oub8bhd.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0x229ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= 'A' && c <= 'F')\n        {\n            if(c ==\
    \ 'A')\n            {\n                if(primes.canFind(10))\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \     else if(c == 'B')\n            {\n                if(primes.canFind(11))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'C')\n            {\n                if(primes.canFind(12))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'D')\n            {\n                if(primes.canFind(13))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'E')\n            {\n                if(primes.canFind(14))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'F')\n            {\n                if(primes.canFind(15))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        else\n        {\n            if(primes.canFind(to!long(c)))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbo68c_tz.d(32): Error: no property `canFind` for type `long[]`\\\
    n/tmp/tmpbo68c_tz.d(39): Error: no property `canFind` for type `long[]`\\n/tmp/tmpbo68c_tz.d(46):\
    \ Error: no property `canFind` for type `long[]`\\n/tmp/tmpbo68c_tz.d(53): Error:\
    \ no property `canFind` for type `long[]`\\n/tmp/tmpbo68c_tz.d(60): Error: no\
    \ property `canFind` for type `long[]`\\n/tmp/tmpbo68c_tz.d(67): Error: no property\
    \ `canFind` for type `long[]`\\n/tmp/tmpbo68c_tz.d(75): Error: no property `canFind`\
    \ for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbo68c_tz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long res = 0;\n    foreach(i, c; num)\n    {\n        res += (c >= 'A' ?\
    \ c - 'A' + 10 : c - '0') * pow(16, i);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd60p90zy.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427efd]\\n??:? void tmpd60p90zy.__unittest_L31_C1()\
    \ [0x427afa]\\n??:? void tmpd60p90zy.__modtest() [0x427c80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa8d]\\n??:? runModuleUnitTests [0x42b9f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42834c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d3]\\n??:? _d_run_main [0x42823e]\\n??:? main [0x427c93]\\\
    n??:? __libc_start_main [0x1beb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp80rgbbrm.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp80rgbbrm.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp80rgbbrm.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xe6292554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable char c; num)\n    {\n        key = key\
    \ * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9te3sm0o.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmp9te3sm0o.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmp9te3sm0o.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x4da5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv8pl_amk.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpv8pl_amk.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpv8pl_amk.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x8c616554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0i2o9myt.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp0i2o9myt.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp0i2o9myt.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xb86bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = (key <<\
    \ 4) | (c <= '9' ? c - '0' : c - 'A' + 10);\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoipiv7jq.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpoipiv7jq.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpoipiv7jq.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xabbe7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(c; num)\n    {\n        result += c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppvu_utyc.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmppvu_utyc.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmppvu_utyc.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x3f9c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps2p4swlt.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmps2p4swlt.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmps2p4swlt.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xeb26a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] hex_keys = [0,1,2,3,4,5,6,7,8,9,11,13,17,19,23,29];\n\
    \    foreach(char c; num)\n    {\n        result += hex_keys[c - '0'];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpyxn7qmua.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428256]\\n??:? long tmpyxn7qmua.hex_key(immutable(char)[])\
    \ [0x427de9]\\n??:? void tmpyxn7qmua.__unittest_L32_C1() [0x427e23]\\n??:? void\
    \ tmpyxn7qmua.__modtest() [0x427f28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c203]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b096]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430229]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b06d]\\n??:? runModuleUnitTests [0x42bfd9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428668]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ef]\\n??:? _d_run_main [0x42855a]\\n??:? main [0x427f3b]\\\
    n??:? __libc_start_main [0x1a2aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ = result * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgg2s_i62.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpgg2s_i62.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpgg2s_i62.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xa2be0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9pyngpkn.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp9pyngpkn.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp9pyngpkn.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xfdd7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long res = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c ==\
    \ 'B' || c == 'D' || c == 'E')\n            res++;\n        else if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7')\n            res++;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcwvikm7u.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpcwvikm7u.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpcwvikm7u.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xef591554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        long key = num[i];\n        if(key >= 'A')\n\
    \            key -= 'A' - 10;\n        else\n            key -= '0';\n       \
    \ if(key in primes)\n            result++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2s6edaqr.d(33): Error: incompatible types for `(key) in (primes)`:\
    \ `long` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s6edaqr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        switch(c)\n\
    \        {\n            case 'A':\n            case 'B':\n            case 'D':\n\
    \            case 'E':\n            case 'F':\n                result++;\n   \
    \             break;\n            default:\n                if(c.to!long > 1 &&\
    \ isPrime(c.to!long))\n                    result++;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprg0v5ni8.d(37): Error: no property `to` for type `immutable(char)`\\\
    n/tmp/tmprg0v5ni8.d(37): Error: undefined identifier `isPrime`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprg0v5ni8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += (c -\
    \ '0') * pow(16, num.length - 1);\n        num = num[1 .. $];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptq0ynl_g.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmptq0ynl_g.__unittest_L32_C1()\
    \ [0x427b2e]\\n??:? void tmptq0ynl_g.__modtest() [0x427cb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427cc7]\\\
    n??:? __libc_start_main [0x9b2e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long n = num.length;\n    foreach(i, c; num)\n    {\n\
    \        long key = 0;\n        if(c >= '0' && c <= '9')\n            key = c\
    \ - '0';\n        else if(c >= 'A' && c <= 'F')\n            key = c - 'A' + 10;\n\
    \        result += key * pow(16, n - i - 1);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpujtj7bxp.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpujtj7bxp.__unittest_L37_C1()\
    \ [0x427b2e]\\n??:? void tmpujtj7bxp.__modtest() [0x427cb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430130]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aac5]\\n??:? runModuleUnitTests [0x42ba31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428384]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42830b]\\n??:? _d_run_main [0x428276]\\n??:? main [0x427cc7]\\\
    n??:? __libc_start_main [0x427f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        switch(c)\n        {\n\
    \            case '2':\n            case '3':\n            case '5':\n       \
    \     case '7':\n            case 'B':\n            case 'D':\n              \
    \  count++;\n                break;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpip3u4kdv.d(27): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpip3u4kdv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy_tlslh7.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpy_tlslh7.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpy_tlslh7.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xca8a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable char c; num)\n    {\n        key = key\
    \ * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmpyrv2cl.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpmpyrv2cl.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpmpyrv2cl.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xf1cdd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(char c; num)\n    {\n        switch(c)\n     \
    \   {\n            case 'A':\n                key += 10;\n                break;\n\
    \            case 'B':\n                key += 11;\n                break;\n \
    \           case 'C':\n                key += 12;\n                break;\n  \
    \          case 'D':\n                key += 13;\n                break;\n   \
    \         case 'E':\n                key += 14;\n                break;\n    \
    \        case 'F':\n                key += 15;\n                break;\n     \
    \       default:\n                key += c - '0';\n                break;\n  \
    \      }\n    }\n    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9mq13o7j.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmp9mq13o7j.__unittest_L54_C1()\
    \ [0x427ade]\\n??:? void tmp9mq13o7j.__modtest() [0x427bcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427bdf]\\\
    n??:? __libc_start_main [0x60ac7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long i = 0;\n    long len = num.length;\n    long n\
    \ = 0;\n    long m = 0;\n    long k = 0;\n    long l = 0;\n    long p = 0;\n \
    \   long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u\
    \ = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n \
    \   long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n \
    \   long j = 0;\n    long o = 0;\n    long[] arr = new long[len];\n    long[]\
    \ arr1 = new long[len];\n    long[] arr2 = new long[len];\n    long[] arr3 = new\
    \ long[len];\n    long[] arr4 = new long[len];\n    long[] arr5 = new long[len];\n\
    \    long[] arr6 = new long[len];\n    long[] arr7 = new long[len];\n    long[]\
    \ arr8 = new long[len];\n    long[] arr9 = new long[len];\n    long[] arr10 =\
    \ new long[len];\n    long[] arr11 = new long[len];\n    long[] arr12 = new long[len];\n\
    \    long[] arr13 = new long[len];\n    long[] arr14 = new long[len];\n    long[]\
    \ arr15 = new long[len];\n    long[] arr16 = new long[len];\n    long[] arr17\
    \ = new long[len];\n    long[] arr18 = new long[len];\n    long[] arr19 = new\
    \ long[len];\n    long[] arr20 = new long[len];\n    long[] arr21 = new long[len];\n\
    \    long[] arr22 = new long[len];\n    long[] arr23 = new long[len];\n    long[]\
    \ arr24 = new long[len];\n    long[] arr25 = new long[len];\n\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0kzhluir.d(79): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kzhluir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplmm9z1cc.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmplmm9z1cc.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmplmm9z1cc.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x719f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + c;\n    }\n    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfrscc6f9.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dfd]\\n??:? void tmpfrscc6f9.__unittest_L31_C1()\
    \ [0x427a92]\\n??:? void tmpfrscc6f9.__modtest() [0x427b80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a98d]\\n??:? runModuleUnitTests [0x42b8f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42824c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281d3]\\n??:? _d_run_main [0x42813e]\\n??:? main [0x427b93]\\\
    n??:? __libc_start_main [0xb6b08554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzd74a_2h.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpzd74a_2h.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpzd74a_2h.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xf762e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable char c; num)\n    {\n        key +=\
    \ c;\n    }\n    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy3p_gh0_.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpy3p_gh0_.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpy3p_gh0_.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x9d0bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= 'A' && c <= 'F')\n        {\n            if(c ==\
    \ 'A')\n            {\n                if(primes.canFind(10))\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \     else if(c == 'B')\n            {\n                if(primes.canFind(11))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'C')\n            {\n                if(primes.canFind(12))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'D')\n            {\n                if(primes.canFind(13))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'E')\n            {\n                if(primes.canFind(14))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'F')\n            {\n                if(primes.canFind(15))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        else\n        {\n            if(primes.canFind(to!long(c)))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyzbnujej.d(32): Error: no property `canFind` for type `long[]`\\\
    n/tmp/tmpyzbnujej.d(39): Error: no property `canFind` for type `long[]`\\n/tmp/tmpyzbnujej.d(46):\
    \ Error: no property `canFind` for type `long[]`\\n/tmp/tmpyzbnujej.d(53): Error:\
    \ no property `canFind` for type `long[]`\\n/tmp/tmpyzbnujej.d(60): Error: no\
    \ property `canFind` for type `long[]`\\n/tmp/tmpyzbnujej.d(67): Error: no property\
    \ `canFind` for type `long[]`\\n/tmp/tmpyzbnujej.d(75): Error: no property `canFind`\
    \ for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzbnujej.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpto3f5ew3.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmpto3f5ew3.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmpto3f5ew3.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0xc7178554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwvd5zbuq.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmpwvd5zbuq.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmpwvd5zbuq.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0xf88f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ = result * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptgw5togz.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmptgw5togz.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmptgw5togz.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x8dcb1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(char c; num)\n    {\n        key += c;\n    }\n\
    \    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz0d6hvpe.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpz0d6hvpe.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpz0d6hvpe.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x66c20554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa0_re5dr.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpa0_re5dr.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpa0_re5dr.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xa1170554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c >=\
    \ 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpujgpa8zw.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmpujgpa8zw.__unittest_L31_C1()\
    \ [0x427b02]\\n??:? void tmpujgpa8zw.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0x26535554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpze6o7p9v.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmpze6o7p9v.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmpze6o7p9v.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0x82c97554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ (c >= 'A' && c <= 'F') ? c - 'A' + 10 : c - '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxe_us2ye.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpxe_us2ye.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpxe_us2ye.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x601f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] hex_key = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(num[i] >= 'A' && num[i] <= 'F')\n      \
    \  {\n            result += hex_key[num[i] - 'A' + 10];\n        }\n        else\
    \ if(num[i] >= '0' && num[i] <= '9')\n        {\n            result += hex_key[num[i]\
    \ - '0'];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp8jz297sb.d(30): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42832e]\\n??:? long tmp8jz297sb.hex_key(immutable(char)[])\
    \ [0x427e08]\\n??:? void tmp8jz297sb.__unittest_L39_C1() [0x427ef7]\\n??:? void\
    \ tmp8jz297sb.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b16e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430301]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43028d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b145]\\n??:? runModuleUnitTests [0x42c0b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428740]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286c7]\\n??:? _d_run_main [0x428632]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x4fbc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe5tesacz.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmpe5tesacz.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmpe5tesacz.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0x8ea6d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ == 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_e8lti5.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpx_e8lti5.__unittest_L32_C1()\
    \ [0x427aa2]\\n??:? void tmpx_e8lti5.__modtest() [0x427b90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427ba3]\\\
    n??:? __libc_start_main [0x8903f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbiox1uex.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpbiox1uex.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpbiox1uex.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x22521554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq8mt9vwt.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpq8mt9vwt.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpq8mt9vwt.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x476f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpordk2b2t.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpordk2b2t.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpordk2b2t.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x273e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph1hlh720.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmph1hlh720.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmph1hlh720.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x2db9e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n\
    \    {\n        if(num[i] in ['2','3','5','7','B','D'])\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpatctflpc.d(28): Error: incompatible types for `(num[i]) in ([\\\
    '2\\', \\'3\\', \\'5\\', \\'7\\', \\'B\\', \\'D\\'])`: `immutable(char)` and `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatctflpc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            result += c - '0';\n        else if(c >= 'A' && c <=\
    \ 'F')\n            result += c - 'A' + 10;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpspm_rxj7.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmpspm_rxj7.__unittest_L34_C1()\
    \ [0x427aba]\\n??:? void tmpspm_rxj7.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0xa0f86554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c-'0'\
    \ in primes)\n                count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'F')\n        {\n            if(c-'A'+10 in primes)\n                count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg3oek932.d(30): Error: incompatible types for `(cast(int)c -\
    \ cast(int)\\'0\\') in (primes)`: `int` and `long[]`\\n/tmp/tmpg3oek932.d(35):\
    \ Error: incompatible types for `(cast(int)c - cast(int)\\'A\\' + 10) in (primes)`:\
    \ `int` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3oek932.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c >= '0' && c\
    \ <= '9')\n            result += c - '0';\n        else if(c >= 'A' && c <= 'F')\n\
    \            result += c - 'A' + 10;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxwgeidtg.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmpxwgeidtg.__unittest_L34_C1()\
    \ [0x427aba]\\n??:? void tmpxwgeidtg.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0xdc09e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c -\
    \ '0' in primes)\n                count++;\n        }\n        else if(c >= 'A'\
    \ && c <= 'F')\n        {\n            if(c - 'A' + 10 in primes)\n          \
    \      count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkvu_x9_.d(30): Error: incompatible types for `(cast(int)c -\
    \ cast(int)\\'0\\') in (primes)`: `int` and `long[]`\\n/tmp/tmpwkvu_x9_.d(35):\
    \ Error: incompatible types for `(cast(int)c - cast(int)\\'A\\' + 10) in (primes)`:\
    \ `int` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkvu_x9_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg_ooku_d.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpg_ooku_d.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpg_ooku_d.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x91409554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(char c; num)\n    {\n        if(c >= '0' && c\
    \ <= '9')\n            key = key * 16 + c - '0';\n        else if(c >= 'A' &&\
    \ c <= 'F')\n            key = key * 16 + c - 'A' + 10;\n    }\n    return key;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq73545h_.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpq73545h_.__unittest_L34_C1()\
    \ [0x427ad6]\\n??:? void tmpq73545h_.__modtest() [0x427bc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bd7]\\\
    n??:? __libc_start_main [0x1e350554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long hex_key = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            hex_key = c - '0';\n\
    \        }\n        else if(c >= 'A' && c <= 'F')\n        {\n            hex_key\
    \ = c - 'A' + 10;\n        }\n        else\n        {\n            continue;\n\
    \        }\n        if(hex_key == 2 || hex_key == 3 || hex_key == 5 || hex_key\
    \ == 7 || hex_key == 11 || hex_key == 13)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiy0a3u0h.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpiy0a3u0h.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpiy0a3u0h.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xf94e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if (c\
    \ == 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0htq6vnp.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp0htq6vnp.__unittest_L32_C1()\
    \ [0x427aa2]\\n??:? void tmp0htq6vnp.__modtest() [0x427b90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427ba3]\\\
    n??:? __libc_start_main [0xd26bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpns_i_bfk.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpns_i_bfk.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpns_i_bfk.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x52299554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ (c >= 'A' && c <= 'F') ? c - 'A' + 10 : c - '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyvltjguy.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpyvltjguy.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpyvltjguy.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x235d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c -\
    \ '0' in primes)\n                count++;\n        }\n        else if(c >= 'A'\
    \ && c <= 'F')\n        {\n            if(c - 'A' + 10 in primes)\n          \
    \      count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0rjige3.d(30): Error: incompatible types for `(cast(int)c -\
    \ cast(int)\\'0\\') in (primes)`: `int` and `long[]`\\n/tmp/tmpi0rjige3.d(35):\
    \ Error: incompatible types for `(cast(int)c - cast(int)\\'A\\' + 10) in (primes)`:\
    \ `int` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0rjige3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa0z_2xgu.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpa0z_2xgu.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpa0z_2xgu.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x3df81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num) \n    {\n        result += (c >=\
    \ 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphztcqkaz.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmphztcqkaz.__unittest_L31_C1()\
    \ [0x427b02]\\n??:? void tmphztcqkaz.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0x112d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7kr0jncd.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmp7kr0jncd.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmp7kr0jncd.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0xccef0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if (c\
    \ >= 'A')\n            result += 1 << (c - 'A' + 10);\n        else\n        \
    \    result += 1 << (c - '0');\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2sq9_9xb.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmp2sq9_9xb.__unittest_L34_C1()\
    \ [0x427ab2]\\n??:? void tmp2sq9_9xb.__modtest() [0x427ba0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427bb3]\\\
    n??:? __libc_start_main [0x34058554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(num[i] >= 'A' && num[i] <= 'F')\n      \
    \  {\n            result += primes[num[i] - 'A' + 10];\n        }\n        else\n\
    \        {\n            result += primes[num[i] - '0'];\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpaqfh_zap.d(30): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4282ce]\\n??:? long tmpaqfh_zap.hex_key(immutable(char)[])\
    \ [0x427e08]\\n??:? void tmpaqfh_zap.__unittest_L39_C1() [0x427e9b]\\n??:? void\
    \ tmpaqfh_zap.__modtest() [0x427fa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c27b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b10e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43022d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0e5]\\n??:? runModuleUnitTests [0x42c051]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428667]\\n??:? _d_run_main [0x4285d2]\\n??:? main [0x427fb3]\\\
    n??:? __libc_start_main [0x7b454554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1tltqgph.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp1tltqgph.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp1tltqgph.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x2c4de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c == 'A'\
    \ || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n  \
    \          result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuqx1zgga.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpuqx1zgga.__unittest_L34_C1()\
    \ [0x427aae]\\n??:? void tmpuqx1zgga.__modtest() [0x427b9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427baf]\\\
    n??:? __libc_start_main [0x40343554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c >= '0' && c <=\
    \ '9')\n        {\n            if(c == '2' || c == '3' || c == '5' || c == '7')\n\
    \                count++;\n        }\n        else if(c >= 'A' && c <= 'F')\n\
    \        {\n            if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n   \
    \             count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpseiv_v1_.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpseiv_v1_.__unittest_L40_C1()\
    \ [0x427ada]\\n??:? void tmpseiv_v1_.__modtest() [0x427bc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bdb]\\\
    n??:? __libc_start_main [0x40493554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz5p4893y.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpz5p4893y.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpz5p4893y.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x2ce48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp954r3ya3.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp954r3ya3.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp954r3ya3.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x422b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps0s53e22.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmps0s53e22.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmps0s53e22.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0x6a9e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n            result += c - '0';\n        else if(c >= 'A' && c\
    \ <= 'F')\n            result += c - 'A' + 10;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp813vle9n.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp813vle9n.__unittest_L34_C1()\
    \ [0x427aba]\\n??:? void tmp813vle9n.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0x23fd0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long res = 0;\n    foreach(i, c; num)\n    {\n        res += (long)c;\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n   \
    \ assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_535fds.d(27): Error: C style cast illegal, use `cast(long)c`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_535fds.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppose36a0.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmppose36a0.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmppose36a0.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0x957af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdkk_hn_6.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpdkk_hn_6.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpdkk_hn_6.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x19538554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69bna2im.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmp69bna2im.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmp69bna2im.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0xa5ebb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + c;\n    }\n    return key;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcio8vi7n.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dfd]\\n??:? void tmpcio8vi7n.__unittest_L31_C1()\
    \ [0x427a92]\\n??:? void tmpcio8vi7n.__modtest() [0x427b80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb23]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb49]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a98d]\\n??:? runModuleUnitTests [0x42b8f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42824c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281d3]\\n??:? _d_run_main [0x42813e]\\n??:? main [0x427b93]\\\
    n??:? __libc_start_main [0xcf59c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += (c >=\
    \ 'A') ? (c - 'A' + 10) : (c - '0');\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfnvqr2wa.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmpfnvqr2wa.__unittest_L31_C1()\
    \ [0x427a9e]\\n??:? void tmpfnvqr2wa.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x40840554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long hex_val = 0;\n    long hex_key = 0;\n    long\
    \ hex_key_val = 0;\n    long hex_key_val_sum = 0;\n    long hex_key_val_sum_count\
    \ = 0;\n    long hex_key_val_sum_count_result = 0;\n    long hex_key_val_sum_count_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result = 0;\n    long hex_key_val_sum_count_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result = 0;\n\
    \    long hex_key_val_sum_count_result_result_result_result_result_result = 0;\n\
    \    long hex_key_val_sum_count_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppml4snh1.d(45): Error: semicolon expected, not `unittest`\\n/tmp/tmppml4snh1.d(45):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppml4snh1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(primes.canFind(c\
    \ - '0'))\n                count++;\n        }\n        else if(c >= 'A' && c\
    \ <= 'F')\n        {\n            if(primes.canFind(c - 'A' + 10))\n         \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp9vmypy8.d(30): Error: no property `canFind` for type `long[]`\\\
    n/tmp/tmpp9vmypy8.d(35): Error: no property `canFind` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9vmypy8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if (c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if (c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdu1pb83a.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpdu1pb83a.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpdu1pb83a.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x9e0de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0nnsse3s.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp0nnsse3s.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp0nnsse3s.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xa2616554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n\
    \    {\n        if(num[i] in ['2','3','5','7','B','D'])\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxuhzyxz6.d(28): Error: incompatible types for `(num[i]) in ([\\\
    '2\\', \\'3\\', \\'5\\', \\'7\\', \\'B\\', \\'D\\'])`: `immutable(char)` and `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuhzyxz6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else\n        {\n            long n = c.to!long;\n\
    \            if(n > 1 && isPrime(n))\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphcl55ocj.d(33): Error: no property `to` for type `immutable(char)`\\\
    n/tmp/tmphcl55ocj.d(34): Error: undefined identifier `isPrime`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcl55ocj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgxf2h07i.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpgxf2h07i.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpgxf2h07i.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x42ac2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if (c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if (c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5jn2g0dt.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp5jn2g0dt.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp5jn2g0dt.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x5ccbd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvagdvx15.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpvagdvx15.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpvagdvx15.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x4ab54554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c ==\
    \ 'A' || c == 'B' || c == 'D' || c == 'E') ? 1 : 0;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppnev7_ff.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmppnev7_ff.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmppnev7_ff.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xd5126554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c - '0';\n                break;\n         \
    \   case 'A':\n            case 'B':\n            case 'C':\n            case\
    \ 'D':\n            case 'E':\n            case 'F':\n                result +=\
    \ c - 'A' + 10;\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphyu2pkyv.d(27): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphyu2pkyv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F') ? 1 :\
    \ 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpapcoarv1.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmpapcoarv1.__unittest_L31_C1()\
    \ [0x427ab6]\\n??:? void tmpapcoarv1.__modtest() [0x427ba4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bb7]\\\
    n??:? __libc_start_main [0xfa08b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp_iq0x6_.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpp_iq0x6_.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpp_iq0x6_.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x2790554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0wwjgu6b.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp0wwjgu6b.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp0wwjgu6b.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xe611b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ == 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0lepvunq.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp0lepvunq.__unittest_L32_C1()\
    \ [0x427aa2]\\n??:? void tmp0lepvunq.__modtest() [0x427b90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427ba3]\\\
    n??:? __libc_start_main [0x4fc3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps7c8r6lx.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmps7c8r6lx.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmps7c8r6lx.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x1446d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c >=\
    \ 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp222k_12x.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmp222k_12x.__unittest_L31_C1()\
    \ [0x427b02]\\n??:? void tmp222k_12x.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0x45033554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long hex_key = 0;\n    long hex_value = 0;\n    long\
    \ hex_value_sum = 0;\n    long hex_value_sum_total = 0;\n    long hex_value_sum_total_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  \
    \  long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long\
    \ hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ws63mhm.d(45): Error: semicolon expected, not `unittest`\\n/tmp/tmp4ws63mhm.d(45):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4ws63mhm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppse56tmm.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ef5]\\n??:? void tmppse56tmm.__unittest_L31_C1()\
    \ [0x427aee]\\n??:? void tmppse56tmm.__modtest() [0x427c74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa85]\\n??:? runModuleUnitTests [0x42b9f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428344]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282cb]\\n??:? _d_run_main [0x428236]\\n??:? main [0x427c87]\\\
    n??:? __libc_start_main [0xe74a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if (c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if (c\
    \ == 'C')\n            result += 2;\n        else if (c == 'F')\n            result\
    \ += 3;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5xp4fdyt.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp5xp4fdyt.__unittest_L36_C1()\
    \ [0x427aba]\\n??:? void tmp5xp4fdyt.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0x2827c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(immutable\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            result\
    \ += primes[c - '0'];\n        }\n        else if(c >= 'A' && c <= 'F')\n    \
    \    {\n            result += primes[c - 'A' + 10];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1edbqh_t.d(34): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428266]\\n??:? long tmp1edbqh_t.hex_key(immutable(char)[])\
    \ [0x427df2]\\n??:? void tmp1edbqh_t.__unittest_L39_C1() [0x427e2f]\\n??:? void\
    \ tmp1edbqh_t.__modtest() [0x427f34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c213]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430239]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b07d]\\n??:? runModuleUnitTests [0x42bfe9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428678]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ff]\\n??:? _d_run_main [0x42856a]\\n??:? main [0x427f47]\\\
    n??:? __libc_start_main [0xb2889554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long key = 0;\n    foreach(char c; num)\n    {\n  \
    \      if(c == 'A')\n            key = 10;\n        else if(c == 'B')\n      \
    \      key = 11;\n        else if(c == 'C')\n            key = 12;\n        else\
    \ if(c == 'D')\n            key = 13;\n        else if(c == 'E')\n           \
    \ key = 14;\n        else if(c == 'F')\n            key = 15;\n        else\n\
    \            key = c - '0';\n        result = result * 16 + key;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb69omgqe.d(50): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpb69omgqe.__unittest_L46_C1()\
    \ [0x427b0a]\\n??:? void tmpb69omgqe.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x9b8bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += (c >= 'A') ? (c - 'A' + 10) : (c - '0');\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1yu5y6f4.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp1yu5y6f4.__unittest_L31_C1()\
    \ [0x427a9e]\\n??:? void tmp1yu5y6f4.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x75055554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable char c; num)\n    {\n        key = key\
    \ * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmxae1_of.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpmxae1_of.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpmxae1_of.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0xcc4d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i ==\
    \ '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c ==\
    \ 'A' || c == 'B' || c == 'D' || c == 'E') ? 1 : 0;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5qszkx33.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmp5qszkx33.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmp5qszkx33.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x903af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] hex_primes = [2, 3, 5, 7, 11, 13];\n    foreach(char\
    \ c; num)\n    {\n        if(c in hex_primes)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3uac6zcs.d(28): Error: incompatible types for `(c) in (hex_primes)`:\
    \ `char` and `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uac6zcs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph7xw19cv.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmph7xw19cv.__unittest_L34_C1()\
    \ [0x427aae]\\n??:? void tmph7xw19cv.__modtest() [0x427b9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427baf]\\\
    n??:? __libc_start_main [0x2e28c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n            result += c - '0';\n        else if(c >= 'A' && c\
    \ <= 'F')\n            result += c - 'A' + 10;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") ==\
    \ 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1pmouyjk.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp1pmouyjk.__unittest_L34_C1()\
    \ [0x427aba]\\n??:? void tmp1pmouyjk.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0x46c7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c ==\
    \ 'A' || c == 'B' || c == 'D' || c == 'E') ? 1 : 0;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnkqkwl78.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpnkqkwl78.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpnkqkwl78.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x62bb3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptou3upcl.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmptou3upcl.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmptou3upcl.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x65463554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c >=\
    \ 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8a7z5yow.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmp8a7z5yow.__unittest_L31_C1()\
    \ [0x427b02]\\n??:? void tmp8a7z5yow.__modtest() [0x427c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c9b]\\\
    n??:? __libc_start_main [0x31167554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long res = 0;\n    foreach(i, c; num)\n    {\n        if (c == 'A' || c ==\
    \ 'B' || c == 'D' || c == 'E')\n            res++;\n        else if (c == '2'\
    \ || c == '3' || c == '5' || c == '7')\n            res++;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_b3itoda.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp_b3itoda.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmp_b3itoda.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0xad23e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long key = 0;\n    foreach(immutable c; num)\n    {\n        key = key *\
    \ 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcs0reso2.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e15]\\n??:? void tmpcs0reso2.__unittest_L31_C1()\
    \ [0x427aaa]\\n??:? void tmpcs0reso2.__modtest() [0x427b98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb61]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9a5]\\n??:? runModuleUnitTests [0x42b911]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281eb]\\n??:? _d_run_main [0x428156]\\n??:? main [0x427bab]\\\
    n??:? __libc_start_main [0x6b9a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        long digit = 0;\n        if(c >= '0' && c <= '9')\n            digit\
    \ = c - '0';\n        else if(c >= 'A' && c <= 'F')\n            digit = c - 'A'\
    \ + 10;\n        else\n            assert(0);\n        result += digit;\n    \
    \    if(digit == 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 ||\
    \ digit == 13)\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i,c; num)\n    {\n        result += (c >= 'A')\
    \ ? (c - 'A' + 10) : (c - '0');\n        result *= 16;\n    }\n    return result\
    \ / 16;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ucx56fv.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp9ucx56fv.__unittest_L32_C1()\
    \ [0x427ab6]\\n??:? void tmp9ucx56fv.__modtest() [0x427ba4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bb7]\\\
    n??:? __libc_start_main [0xfd2b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptgwdhe6q.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmptgwdhe6q.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmptgwdhe6q.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x1c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long key = 0;\n    long hex_value = 0;\n    long hex_key_value\
    \ = 0;\n    long hex_key_value_2 = 0;\n    long hex_key_value_3 = 0;\n    long\
    \ hex_key_value_4 = 0;\n    long hex_key_value_5 = 0;\n    long hex_key_value_6\
    \ = 0;\n    long hex_key_value_7 = 0;\n    long hex_key_value_8 = 0;\n    long\
    \ hex_key_value_9 = 0;\n    long hex_key_value_10 = 0;\n    long hex_key_value_11\
    \ = 0;\n    long hex_key_value_12 = 0;\n    long hex_key_value_13 = 0;\n    long\
    \ hex_key_value_14 = 0;\n    long hex_key_value_15 = 0;\n    long hex_key_value_16\
    \ = 0;\n    long hex_key_value_17 = 0;\n    long hex_key_value_18 = 0;\n    long\
    \ hex_key_value_19 = 0;\n    long hex_key_value_20 = 0;\n    long hex_key_value_21\
    \ = 0;\n    long hex_key_value_22 = 0;\n    long hex_key_value_23 = 0;\n    long\
    \ hex_key_value_24 = 0;\n    long hex_key_value_25 = 0;\n    long hex_key_value_26\
    \ = 0;\n    long hex_key_value_27 = 0;\n    long hex_key_value_28 = 0;\n    long\
    \ hex_key_value_29 = 0;\n    long hex_key_value_30 = 0;\n    long hex_key_value_31\
    \ = 0;\n    long hex_key_value_32 = 0;\n    long hex_key_value_33 = 0;\n    long\
    \ hex_key_value_34 = 0;\n    long hex_key_value_35 = 0;\n    long hex_key_value_36\
    \ = 0;\n    long hex_key_value_37 = 0;\n    long hex_key_value\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_qk2s91.d(65): Error: semicolon expected, not `unittest`\\n/tmp/tmpf_qk2s91.d(65):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf_qk2s91.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb90cja9c.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmpb90cja9c.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmpb90cja9c.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0x926b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long len = num.length;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \ \nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_fx_em_m.d(93): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_fx_em_m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c == 'A'\
    \ || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n  \
    \          result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsxhtlcai.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpsxhtlcai.__unittest_L34_C1()\
    \ [0x427aae]\\n??:? void tmpsxhtlcai.__modtest() [0x427b9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427baf]\\\
    n??:? __libc_start_main [0xfd0cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    long hex_key = 0;\n    foreach(i, c; num)\n    {\n\
    \        if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n\
    \        {\n            hex_key = c - 'A' + 10;\n        }\n        else\n   \
    \     {\n            hex_key = c - '0';\n        }\n        result += hex_key\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi_3o4hkb.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpi_3o4hkb.__unittest_L40_C1()\
    \ [0x427b32]\\n??:? void tmpi_3o4hkb.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc5b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc81]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430130]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc0d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aac5]\\n??:? runModuleUnitTests [0x42ba31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428384]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42830b]\\n??:? _d_run_main [0x428276]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xed220554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp858_zhpw.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmp858_zhpw.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmp858_zhpw.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x1428e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(hex; num)\n    {\n        if(hex == '2' || hex\
    \ == '3' || hex == '5' || hex == '7' || hex == 'B' || hex == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        long v = 0;\n  \
    \      if(c >= '0' && c <= '9')\n            v = c - '0';\n        else if(c >=\
    \ 'A' && c <= 'F')\n            v = c - 'A' + 10;\n        result = result * 16\
    \ + v;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf95jvag2.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e45]\\n??:? void tmpf95jvag2.__unittest_L36_C1()\
    \ [0x427ad6]\\n??:? void tmpf95jvag2.__modtest() [0x427bc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9d5]\\n??:? runModuleUnitTests [0x42b941]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428294]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42821b]\\n??:? _d_run_main [0x428186]\\n??:? main [0x427bd7]\\\
    n??:? __libc_start_main [0xfd190554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c.to!long\
    \ in primes)\n                count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'F')\n        {\n            if(c.to!long - 'A'.to!long + 10 in primes)\n\
    \                count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n  \
    \  assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") ==\
    \ 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqgvmeojw.d(30): Error: no property `to` for type `char`\\n/tmp/tmpqgvmeojw.d(35):\
    \ Error: no property `to` for type `char`\\n/tmp/tmpqgvmeojw.d(35): Error: no\
    \ property `to` for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqgvmeojw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(immutable\
    \ c; num)\n    {\n        if(c in ['A','B','C','D','E','F'])\n        {\n    \
    \        if(primes.canFind(c - 'A' + 10))\n                count++;\n        }\n\
    \        else\n        {\n            if(primes.canFind(c - '0'))\n          \
    \      count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3curhmvm.d(28): Error: incompatible types for `(c) in ([\\'A\\\
    ', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\'])`: `immutable(char)` and `char[]`\\\
    n/tmp/tmp3curhmvm.d(30): Error: no property `canFind` for type `long[]`\\n/tmp/tmp3curhmvm.d(35):\
    \ Error: no property `canFind` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3curhmvm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
    ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
    ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
    ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4san3uj4.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e3d]\\n??:? void tmp4san3uj4.__unittest_L38_C1()\
    \ [0x427ace]\\n??:? void tmp4san3uj4.__modtest() [0x427bbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb63]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb89]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9cd]\\n??:? runModuleUnitTests [0x42b939]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42828c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428213]\\n??:? _d_run_main [0x42817e]\\n??:? main [0x427bcf]\\\
    n??:? __libc_start_main [0xc4977554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n\
    \    {\n        if(num[i] in ['2','3','5','7','B','D'])\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5fgfubxm.d(28): Error: incompatible types for `(num[i]) in ([\\\
    '2\\', \\'3\\', \\'5\\', \\'7\\', \\'B\\', \\'D\\'])`: `immutable(char)` and `char[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fgfubxm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(c; num)\n    {\n        result += c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp7sr5c0j.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpp7sr5c0j.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpp7sr5c0j.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x5b932554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpilzck70k.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpilzck70k.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpilzck70k.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x9edb6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppm8e37on.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmppm8e37on.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmppm8e37on.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0x986ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpipq9i9cp.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpipq9i9cp.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpipq9i9cp.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xf38e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"\
    AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"\
    ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"\
    123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpexax92bi.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpexax92bi.__unittest_L34_C1()\
    \ [0x427abe]\\n??:? void tmpexax92bi.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x3d25d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = hex_key;\n\n\
    \    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = hex_key;\n\
    \n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n\
    \    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") ==\
    \ 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvwwysuaw.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427df5]\\n??:? void tmpvwwysuaw.__unittest_L31_C1()\
    \ [0x427a86]\\n??:? void tmpvwwysuaw.__modtest() [0x427b74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42facd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a985]\\n??:? runModuleUnitTests [0x42b8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428244]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281cb]\\n??:? _d_run_main [0x428136]\\n??:? main [0x427b87]\\\
    n??:? __libc_start_main [0xe0fba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"\
    1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should\
    \ be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num\
    \ = \"2020\" the output should be 2.\n    \n*/\nlong hex_key(string num) \n{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c >= 'A')\n\
    \            result += c - 'A' + 10;\n        else\n            result += c -\
    \ '0';\n        result *= 16;\n    }\n    return result / 16;\n}\nunittest\n{\n\
    \    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"\
    1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"\
    2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb4_gt2_p.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmpb4_gt2_p.__unittest_L35_C1()\
    \ [0x427aba]\\n??:? void tmpb4_gt2_p.__modtest() [0x427ba8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bbb]\\\
    n??:? __libc_start_main [0x12fbf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
