name: HumanEval_54_same_chars
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppv4h8pg1.d(24): Error: no property `sort` for type `char[]`\\\
    n/tmp/tmppv4h8pg1.d(25): Error: no property `sort` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv4h8pg1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.to!(dchar[]);\n    auto c1 = s1.to!(dchar[]);\n  \
    \  auto c0_count = c0.count;\n    auto c1_count = c1.count;\n    if (c0_count\
    \ != c1_count) return false;\n    auto c0_sorted = c0.sort;\n    auto c1_sorted\
    \ = c1.sort;\n    for (int i = 0; i < c0_count; i++)\n    {\n        if (c0_sorted[i]\
    \ != c1_sorted[i]) return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jfll2h4.d(22): Error: no property `to` for type `string`\\n/tmp/tmp8jfll2h4.d(23):\
    \ Error: no property `to` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8jfll2h4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp55wcew9d.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp55wcew9d.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp55wcew9d.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55wcew9d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\n/*\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyqz3f9uo.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyqz3f9uo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7ttz014.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpb7ttz014.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7ttz014.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ybq8vp1.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp0ybq8vp1.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ybq8vp1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfobbdn3u.d(24): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpfobbdn3u.d(25): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfobbdn3u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach\
    \ (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv30xsawn.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282c5]\\n??:? void tmpv30xsawn.__unittest_L33_C1()\
    \ [0x427eb5]\\n??:? void tmpv30xsawn.__modtest() [0x428048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b132]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b109]\\n??:? runModuleUnitTests [0x42c075]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428788]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42870f]\\n??:? _d_run_main [0x42867a]\\n??:? main [0x42805b]\\\
    n??:? __libc_start_main [0xc05f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkelmfhq1.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpkelmfhq1.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpkelmfhq1.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkelmfhq1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpspl457kl.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpspl457kl.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspl457kl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjr0c9p5t.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpjr0c9p5t.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpjr0c9p5t.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xaa000554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_xgf11bb.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp_xgf11bb.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp_xgf11bb.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xgf11bb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4pt7vl7z.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp4pt7vl7z.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4pt7vl7z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphouk4821.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmphouk4821.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphouk4821.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfjd8e6m1.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpfjd8e6m1.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmpfjd8e6m1.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xf1b8a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwr2caewx.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpwr2caewx.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpwr2caewx.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwr2caewx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyjsf5oi_.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpyjsf5oi_.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpyjsf5oi_.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjsf5oi_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[char] c0 = s0.count;\n    int[char] c1 = s1.count;\n    return\
    \ c0.length == c1.length && c0.all!(c => c1[c] == c0[c]);\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7sg08izx.d(22): Error: no property `count` for type `string`\\\
    n/tmp/tmp7sg08izx.d(23): Error: no property `count` for type `string`\\n/tmp/tmp7sg08izx.d(24):\
    \ Error: no property `all` for type `int[char]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7sg08izx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkahecbu.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpkkahecbu.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpkkahecbu.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkahecbu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpotlcdcec.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpotlcdcec.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmpotlcdcec.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x4f5d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqg8pacb1.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpqg8pacb1.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpqg8pacb1.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xc186554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc313pra3.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpc313pra3.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpc313pra3.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xfa382554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjhvngdv8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpjhvngdv8.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpjhvngdv8.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xce6ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.chars;\n    auto c1 = s1.chars;\n    auto c0_count\
    \ = c0.length;\n    auto c1_count = c1.length;\n    if (c0_count != c1_count)\n\
    \        return false;\n    auto c0_sorted = c0.dup.sort;\n    auto c1_sorted\
    \ = c1.dup.sort;\n    for (size_t i = 0; i < c0_count; i++)\n    {\n        if\
    \ (c0_sorted[i] != c1_sorted[i])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9qociv6.d(22): Error: no property `chars` for type `string`\\\
    n/tmp/tmpe9qociv6.d(23): Error: no property `chars` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9qociv6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length) \n    {\n        return false;\n  \
    \  }\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mpjmm0b.d(28): Error: no property `sort` for type `char[]`\\\
    n/tmp/tmp3mpjmm0b.d(29): Error: no property `sort` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mpjmm0b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzr_lzmm5.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpzr_lzmm5.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpzr_lzmm5.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr_lzmm5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zni5xv9.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp1zni5xv9.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zni5xv9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi3m47u76.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpi3m47u76.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpi3m47u76.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3m47u76.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.count;\n    auto c1 = s1.count;\n    foreach (c; c0)\n    {\n        if\
    \ (c0[c] != c1[c])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjjqdex9.d(24): Error: no property `count` for type `string`\\\
    n/tmp/tmppjjqdex9.d(25): Error: no property `count` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjjqdex9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsut_eftq.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpsut_eftq.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsut_eftq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5i3jrag.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpw5i3jrag.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpw5i3jrag.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5i3jrag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjx1tdg8.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjjx1tdg8.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjx1tdg8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbprkeoe6.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpbprkeoe6.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpbprkeoe6.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbprkeoe6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(ch;\
    \ c0.keys)\n    {\n        if(c0[ch] != c1[ch])\n            return false;\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp30s947df.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp30s947df.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30s947df.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw04rcj2t.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpw04rcj2t.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw04rcj2t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxbnegnez.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpxbnegnez.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbnegnez.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (k; c0.keys)\n    {\n\
    \        if (c0[k] != c1[k])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8d_bxso8.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp8d_bxso8.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8d_bxso8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr420wbw.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpxr420wbw.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr420wbw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1i063ovr.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp1i063ovr.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp1i063ovr.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i063ovr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    // Count the number of each character in s0.\n    auto c0 = new\
    \ uint[256];\n    foreach (c; s0)\n        c0[c]++;\n    // Count the number of\
    \ each character in s1.\n    auto c1 = new uint[256];\n    foreach (c; s1)\n \
    \       c1[c]++;\n    // Check if the two arrays are the same.\n    foreach (i;\
    \ 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2_r8zwe6.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmp2_r8zwe6.__unittest_L36_C1()\
    \ [0x428065]\\n??:? void tmp2_r8zwe6.__modtest() [0x4281f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c337]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430455]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430904]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1a1]\\n??:? runModuleUnitTests [0x42c10d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288bf]\\n??:? _d_run_main [0x42882a]\\n??:? main [0x42820b]\\\
    n??:? __libc_start_main [0xa5cb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx1mp4aib.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpx1mp4aib.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmpx1mp4aib.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xb6d7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7o7owxy.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpo7o7owxy.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7o7owxy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps097ykzw.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmps097ykzw.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmps097ykzw.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps097ykzw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    // Count the number of each character in s0\n    auto c0 = count_chars(s0);\n\
    \    // Count the number of each character in s1\n    auto c1 = count_chars(s1);\n\
    \    // Check if c0 and c1 have the same keys\n    if (c0.keys != c1.keys)\n \
    \       return false;\n    // Check if c0 and c1 have the same values\n    foreach\
    \ (i, k; c0.keys)\n        if (c0[k] != c1[k])\n            return false;\n  \
    \  return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6wxk_j7.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6wxk_j7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\n/*\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqk50997g.d(28): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqk50997g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqkj59hts.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpqkj59hts.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmpqkj59hts.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x6259f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(a => c1.count(a) == c0.count(a));\n}\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0im4vla5.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp0im4vla5.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0im4vla5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    // If the lengths are different, the words cannot have the same\
    \ characters.\n    if (s0.length != s1.length)\n        return false;\n    //\
    \ Create a map of character counts for each string.\n    auto m0 = count(s0);\n\
    \    auto m1 = count(s1);\n    // If the maps have different sizes, the words\
    \ cannot have the same characters.\n    if (m0.length != m1.length)\n        return\
    \ false;\n    // Check if the maps have the same keys and values.\n    foreach\
    \ (k; m0.keys)\n    {\n        if (!m1.keys.canFind(k) || m0[k] != m1[k])\n  \
    \          return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4idj0hs.d(39): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4idj0hs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknelg6oc.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpknelg6oc.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknelg6oc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwbn0ghy9.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpwbn0ghy9.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpwbn0ghy9.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbn0ghy9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap();\n    auto c1 = s1.countMap();\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkijb1p5h.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpkijb1p5h.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkijb1p5h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8ngdna0t.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp8ngdna0t.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp8ngdna0t.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xd306554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpacbtvyob.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpacbtvyob.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacbtvyob.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8gdxrfar.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp8gdxrfar.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp8gdxrfar.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gdxrfar.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaw1uqui9.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpaw1uqui9.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpaw1uqui9.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaw1uqui9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(k;\
    \ c0.keys)\n    {\n        if(c0[k] != c1[k])\n            return false;\n   \
    \ }\n    return true;\n}\n/*\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \n*/\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpyv4b3r.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpgpyv4b3r.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpyv4b3r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1x79av5t.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp1x79av5t.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp1x79av5t.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xc2432554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    if (c0.length\
    \ != c1.length)\n        return false;\n    foreach (i, v; c0)\n    {\n      \
    \  if (c1[i] != v)\n            return false;\n    }\n    return true;\n}\n/*\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6n_cb6_q.d(33): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n_cb6_q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyp9dpo_.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpxyp9dpo_.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpxyp9dpo_.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyp9dpo_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5e1d_w10.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp5e1d_w10.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp5e1d_w10.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x23313554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0\
    \ == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe6d6gzcy.d(26): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpe6d6gzcy.d(27): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe6d6gzcy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.countMap;\n\
    \    auto c1 = s1.countMap;\n    foreach (c; c0.keys) {\n        if (c0[c] !=\
    \ c1[c]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujvoqg92.d(23): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpujvoqg92.d(24): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujvoqg92.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(c;\
    \ c0.keys)\n    {\n        if(c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqgy7ult.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpsqgy7ult.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqgy7ult.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(c => c1.count(c.key) == c.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjf91pbl.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmppjf91pbl.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjf91pbl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a.value == c1[a.key])(c0);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjq096u8k.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjq096u8k.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpjq096u8k.d(24):\
    \ Error: template instance `all!((a) => a.value == c1[a.key])` template `all`\
    \ is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjq096u8k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tfqzme6.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp0tfqzme6.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp0tfqzme6.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tfqzme6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(c => c1.count(c.key) == c.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbit606nw.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpbit606nw.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbit606nw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (ch; s0) \n    {\n        c0[ch]++;\n    }\n    foreach (ch; s1) \n    {\n \
    \       c1[ch]++;\n    }\n    foreach (i; 0 .. 256) \n    {\n        if (c0[i]\
    \ != c1[i]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4ggn2toh.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282c5]\\n??:? void tmp4ggn2toh.__unittest_L41_C1()\
    \ [0x427eb5]\\n??:? void tmp4ggn2toh.__modtest() [0x428048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b132]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b109]\\n??:? runModuleUnitTests [0x42c075]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428788]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42870f]\\n??:? _d_run_main [0x42867a]\\n??:? main [0x42805b]\\\
    n??:? __libc_start_main [0x8564f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph2ocjskp.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmph2ocjskp.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmph2ocjskp.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x5e945554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.countMap;\n\
    \    auto c1 = s1.countMap;\n    foreach (c; c0.keys)\n    {\n        if (c0[c]\
    \ != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0a67xzzi.d(23): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp0a67xzzi.d(24): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a67xzzi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(c;\
    \ c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0z_lw7mn.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp0z_lw7mn.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z_lw7mn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_t3qec2a.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp_t3qec2a.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmp_t3qec2a.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x98ccf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    if (c0.length\
    \ != c1.length)\n        return false;\n    foreach (i, c; c0)\n    {\n      \
    \  if (c1[i] != c)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc6lu8o9u.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpc6lu8o9u.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6lu8o9u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a.value == c1[a.key])(c0);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3tkgufe.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpe3tkgufe.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpe3tkgufe.d(24):\
    \ Error: template instance `all!((a) => a.value == c1[a.key])` template `all`\
    \ is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3tkgufe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbuxptxbn.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpbuxptxbn.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpbuxptxbn.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x7979e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(k => c1.count(k) == c0.count(k));\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlhygiix.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmptlhygiix.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlhygiix.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmxks0tc.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjmxks0tc.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmxks0tc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqkr5uj1y.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpqkr5uj1y.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpqkr5uj1y.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x8a73e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(k,\
    \ v; c0)\n    {\n        if(c1[k] != v)\n            return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfgtrxkph.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpfgtrxkph.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgtrxkph.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_xihn_m.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpm_xihn_m.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_xihn_m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpukc5ld0q.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpukc5ld0q.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukc5ld0q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[char] c0 = new int[char];\n    int[char] c1 = new int[char];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    foreach (c; c0.keys)\n        if (c0[c] != c1[c])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpem8xtvgc.d(22): Error: need size of rightmost array, not type\
    \ `char`\\n/tmp/tmpem8xtvgc.d(23): Error: need size of rightmost array, not type\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpem8xtvgc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqf64avou.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpqf64avou.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpqf64avou.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf64avou.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_d70jw3d.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp_d70jw3d.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_d70jw3d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkuaxc3k.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpbkuaxc3k.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkuaxc3k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (c; c0.keys)\n    {\n\
    \        if (c0[c] != c1[c])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl6vp04mm.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpl6vp04mm.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6vp04mm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpllu7u6d0.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpllu7u6d0.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllu7u6d0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length) \n    {\n        return false;\n  \
    \  }\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1v82bgi0.d(32): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1v82bgi0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp02lhvyvb.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp02lhvyvb.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp02lhvyvb.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xa13f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4cdzadb.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpa4cdzadb.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpa4cdzadb.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4cdzadb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3f5h7pmb.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp3f5h7pmb.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp3f5h7pmb.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f5h7pmb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ohazurz.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp3ohazurz.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ohazurz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] counts0 = new int[256];\n    int[] counts1 = new int[256];\n\
    \    foreach (c; s0)\n        counts0[c]++;\n    foreach (c; s1)\n        counts1[c]++;\n\
    \    return counts0 == counts1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzktmzdbw.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpzktmzdbw.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpzktmzdbw.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x6dadc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnsrbjd2f.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpnsrbjd2f.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpnsrbjd2f.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsrbjd2f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp5y4l7hc.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpp5y4l7hc.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5y4l7hc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2nlzc4f6.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp2nlzc4f6.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp2nlzc4f6.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nlzc4f6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    if (c0.length\
    \ != c1.length)\n        return false;\n    foreach (i, v; c0)\n    {\n      \
    \  if (c1[i] != v)\n            return false;\n    }\n    return true;\n}\n/*\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg614sm8h.d(33): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg614sm8h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8wx9fp8l.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp8wx9fp8l.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp8wx9fp8l.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wx9fp8l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzbkjlvhq.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpzbkjlvhq.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpzbkjlvhq.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbkjlvhq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpniioqojf.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpniioqojf.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpniioqojf.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x65275554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hb3dflt.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp4hb3dflt.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hb3dflt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn_bsbm75.d(24): Error: no property `sort` for type `char[]`\\\
    n/tmp/tmpn_bsbm75.d(25): Error: no property `sort` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_bsbm75.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmh1u88bt.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpmh1u88bt.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpmh1u88bt.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xd8305554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuvrvsc8w.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpuvrvsc8w.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpuvrvsc8w.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xce74b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (c; c0.keys)\n    {\n\
    \        if (c0[c] != c1[c])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43nf1zl0.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp43nf1zl0.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43nf1zl0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr0ipwpu9.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpr0ipwpu9.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0ipwpu9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqi4vmdz.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpmqi4vmdz.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqi4vmdz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4m6bgd0.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpe4m6bgd0.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4m6bgd0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp592d94oc.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp592d94oc.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp592d94oc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8h93ued.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpl8h93ued.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpl8h93ued.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8h93ued.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9tabwkp_.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp9tabwkp_.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9tabwkp_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv8821k_g.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpv8821k_g.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8821k_g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0\
    \ == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnjw9ny8.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnjw9ny8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzjdux10f.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpzjdux10f.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpzjdux10f.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjdux10f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjpmzx99x.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjpmzx99x.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpmzx99x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto m0 = char_map(s0);\n    auto m1 = char_map(s1);\n    return\
    \ m0 == m1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bnev19c.d(22): Error: undefined identifier `char_map`\\n/tmp/tmp8bnev19c.d(23):\
    \ Error: undefined identifier `char_map`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8bnev19c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(k;\
    \ c0.keys)\n    {\n        if(c0[k] != c1[k])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphn8mf3ll.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmphn8mf3ll.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn8mf3ll.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq3knc8rv.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpq3knc8rv.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3knc8rv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\n/*\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88pol8rj.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88pol8rj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphb7pimu7.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmphb7pimu7.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb7pimu7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2zaeljgb.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp2zaeljgb.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp2zaeljgb.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xbb92c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] counts0 = new int[256];\n    int[] counts1 = new int[256];\n\
    \    foreach (c; s0)\n        counts0[c]++;\n    foreach (c; s1)\n        counts1[c]++;\n\
    \    return counts0 == counts1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimrmahn1.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimrmahn1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7j9j7is.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpx7j9j7is.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7j9j7is.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(c => c1.count(c.key) == c.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptufgxd0k.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmptufgxd0k.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptufgxd0k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96me5sa4.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp96me5sa4.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96me5sa4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpic4oz6qc.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpic4oz6qc.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpic4oz6qc.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xbe2d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsq855ww6.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpsq855ww6.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpsq855ww6.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x1d54b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5wena807.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5wena807.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    if (c0 != c1)\
    \ return false;\n    foreach (i; 0 .. c0)\n    {\n        if (s0[i] != s1[i])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ghdo_uw.d(22): Error: no property `count` for type `string`\\\
    n/tmp/tmp0ghdo_uw.d(23): Error: no property `count` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ghdo_uw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zjvb2og.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp2zjvb2og.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp2zjvb2og.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zjvb2og.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (k, v; c0)\n    {\n\
    \        if (c1[k] != v)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7f_egf4.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmps7f_egf4.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7f_egf4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfuux6vke.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpfuux6vke.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfuux6vke.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqg7dabnm.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpqg7dabnm.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg7dabnm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzogn0evb.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpzogn0evb.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpzogn0evb.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzogn0evb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return c0\
    \ == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4f3okwk.d(26): Error: no property `sort` for type `char[]`\\\
    n/tmp/tmps4f3okwk.d(27): Error: no property `sort` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4f3okwk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    // TODO\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphzz9ty56.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmphzz9ty56.__unittest_L25_C1()\
    \ [0x427a5d]\\n??:? void tmphzz9ty56.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0x55802554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (c; c0.keys)\n    {\n\
    \        if (c0[c] != c1[c])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_k7d61_a.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp_k7d61_a.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k7d61_a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2bx6c_3x.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp2bx6c_3x.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp2bx6c_3x.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x462eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy19xzdo9.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpy19xzdo9.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy19xzdo9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3i81_v68.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp3i81_v68.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp3i81_v68.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3i81_v68.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp254wrvma.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp254wrvma.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp254wrvma.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstqh29nh.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpstqh29nh.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstqh29nh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach (k, v; c0)\n    {\n\
    \        if (c1[k] != v)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknyz3xz0.d(24): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpknyz3xz0.d(25): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknyz3xz0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ss7xj4b.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp_ss7xj4b.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp_ss7xj4b.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ss7xj4b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcq6dv7mf.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpcq6dv7mf.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq6dv7mf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplt_rxn_f.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmplt_rxn_f.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmplt_rxn_f.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplt_rxn_f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length) return false;\n    auto c0 = s0.dup;\n\
    \    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return c0 == c1;\n}\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpecdwzvkh.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpecdwzvkh.d(26): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpecdwzvkh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpks1yrw3u.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpks1yrw3u.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks1yrw3u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakbc88gj.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpakbc88gj.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakbc88gj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jj58gld.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp7jj58gld.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jj58gld.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdny0zjkk.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpdny0zjkk.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdny0zjkk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppk1_dukt.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmppk1_dukt.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmppk1_dukt.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppk1_dukt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjinw8suy.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjinw8suy.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjinw8suy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi8txyqav.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpi8txyqav.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpi8txyqav.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi8txyqav.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpipx8nb1t.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpipx8nb1t.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipx8nb1t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\n/*\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt51yvvjy.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt51yvvjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_w2dd6np.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp_w2dd6np.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp_w2dd6np.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xe3e08554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqwla8w6c.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpqwla8w6c.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpqwla8w6c.d(24):\
    \ Error: template instance `all!((a) => c0[a] == c1[a])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwla8w6c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfcdsx9m0.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpfcdsx9m0.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcdsx9m0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2gpvzy5z.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp2gpvzy5z.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gpvzy5z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprso4nrpt.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmprso4nrpt.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprso4nrpt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0r0yfez.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpu0r0yfez.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0r0yfez.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxb67sqa2.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpxb67sqa2.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpxb67sqa2.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x2dd2a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n}\n/*\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaqmobpqp.d(26): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqmobpqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.countOf(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprsm4c25c.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmprsm4c25c.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprsm4c25c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwv9rleyx.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpwv9rleyx.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwv9rleyx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto counts0 = new int[256];\n    auto counts1 = new int[256];\n\
    \    foreach (c; s0)\n        counts0[c]++;\n    foreach (c; s1)\n        counts1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (counts0[i] != counts1[i])\n          \
    \  return false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpffqziaqr.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282c5]\\n??:? void tmpffqziaqr.__unittest_L33_C1()\
    \ [0x427eb5]\\n??:? void tmpffqziaqr.__modtest() [0x428048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b132]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b109]\\n??:? runModuleUnitTests [0x42c075]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428788]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42870f]\\n??:? _d_run_main [0x42867a]\\n??:? main [0x42805b]\\\
    n??:? __libc_start_main [0x8e9e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotqc__cr.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpotqc__cr.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotqc__cr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk48q84sh.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpk48q84sh.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpk48q84sh.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x293a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(c0[i] == c1[i])(c0.keys);\n}\nunittest\n{\n \
    \   alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8_4mjbn.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpb8_4mjbn.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmpb8_4mjbn.d(24):\
    \ Error: template instance `all!(c0[i] == c1[i])` template `all` is not defined\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8_4mjbn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] count0 = new int[256];\n    int[] count1 = new int[256];\n\
    \    foreach (c; s0)\n        count0[c]++;\n    foreach (c; s1)\n        count1[c]++;\n\
    \    return count0 == count1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbquti_qb.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpbquti_qb.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpbquti_qb.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x96dcf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_lsn8dkd.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp_lsn8dkd.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lsn8dkd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(a => c1.count(a.key) == a.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpai6nzkrp.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpai6nzkrp.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpai6nzkrp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[char] char_counts;\n    foreach(c; s0)\n        char_counts[c]++;\n\
    \    foreach(c; s1)\n        char_counts[c]--;\n    foreach(c; char_counts)\n\
    \        if(char_counts[c] != 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnicoxgg9.d(28): Error: cannot implicitly convert expression `c`\
    \ of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpnicoxgg9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(c;\
    \ c0.keys)\n    {\n        if(c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjc3dmbii.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpjc3dmbii.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc3dmbii.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach(c;\
    \ c0.keys)\n    {\n        if(c1.count(c) != c0.count(c))\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fl04fti.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp4fl04fti.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fl04fti.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphtp1qect.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmphtp1qect.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtp1qect.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0ho7xte8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp0ho7xte8.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp0ho7xte8.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x71c52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppymjbg94.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmppymjbg94.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppymjbg94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptv8h_k3j.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmptv8h_k3j.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmptv8h_k3j.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x18e12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap();\n    auto c1 = s1.countMap();\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoh4e6l34.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpoh4e6l34.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoh4e6l34.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4mewbx_.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpj4mewbx_.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4mewbx_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    if (s0.length != s1.length)\n        return false;\n    auto c0\
    \ = s0.count;\n    auto c1 = s1.count;\n    foreach (c; s0)\n    {\n        if\
    \ (c0[c] != c1[c])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcilkmd6b.d(24): Error: no property `count` for type `string`\\\
    n/tmp/tmpcilkmd6b.d(25): Error: no property `count` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcilkmd6b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3qinork.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpe3qinork.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3qinork.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm479kw73.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpm479kw73.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpm479kw73.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x1c9fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr450kcoa.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr450kcoa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7mhiwjtj.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp7mhiwjtj.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp7mhiwjtj.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x148e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg5dvqqhw.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpg5dvqqhw.__unittest_L28_C1()\
    \ [0x427f5d]\\n??:? void tmpg5dvqqhw.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xc9342554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx1xtizf4.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpx1xtizf4.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1xtizf4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp153felog.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmp153felog.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmp153felog.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0xb2019554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8ycva09.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428405]\\n??:? void tmpz8ycva09.__unittest_L30_C1()\
    \ [0x427f5d]\\n??:? void tmpz8ycva09.__modtest() [0x428188]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3df]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b272]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430489]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b249]\\n??:? runModuleUnitTests [0x42c1b5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884f]\\n??:? _d_run_main [0x4287ba]\\n??:? main [0x42819b]\\\
    n??:? __libc_start_main [0x1cd4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6mkv1bvf.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmp6mkv1bvf.d(23): Error: no property `countMap` for type `string`\\n/tmp/tmp6mkv1bvf.d(24):\
    \ Error: template instance `all!((a) => a[1] == c1[a[0]])` template `all` is not\
    \ defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6mkv1bvf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    return\
    \ c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0gs6zzv2.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gs6zzv2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppliya7ch.d(24): Error: no property `sort` for type `char[]`\\\
    n/tmp/tmppliya7ch.d(25): Error: no property `sort` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppliya7ch.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.all!(c => c1.count(c.key) == c.value);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpua7r1t8z.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpua7r1t8z.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpua7r1t8z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto m0 = new int[256];\n    auto m1 = new int[256];\n    foreach\
    \ (c; s0)\n        m0[c]++;\n    foreach (c; s1)\n        m1[c]++;\n    foreach\
    \ (i; 0 .. 256)\n        if (m0[i] != m1[i])\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp04mvia49.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282c5]\\n??:? void tmp04mvia49.__unittest_L33_C1()\
    \ [0x427eb5]\\n??:? void tmp04mvia49.__modtest() [0x428048]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b132]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430349]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b109]\\n??:? runModuleUnitTests [0x42c075]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428788]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42870f]\\n??:? _d_run_main [0x42867a]\\n??:? main [0x42805b]\\\
    n??:? __libc_start_main [0x42c76554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    int[] counts0 = new int[256];\n    int[] counts1 = new int[256];\n\
    \    foreach (c; s0)\n        counts0[c]++;\n    foreach (c; s1)\n        counts1[c]++;\n\
    \    return counts0 == counts1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp66v9rv_2.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66v9rv_2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc92hk92f.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpc92hk92f.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc92hk92f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfgborfi.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmppfgborfi.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfgborfi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \n*/\nbool same_chars(string s0, string\
    \ s1) \n{\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    return\
    \ c0.length == c1.length && c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngawm6fx.d(22): Error: no property `countMap` for type `string`\\\
    n/tmp/tmpngawm6fx.d(23): Error: no property `countMap` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngawm6fx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
