name: HumanEval_99_closest_integer
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ takes a value (string) representing a number\n    and returns the closest integer\
  \ to it. If the number is equidistant\n    from two integers, round it away from\
  \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"\
  15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given\
  \ number is equidistant\n    from two integers, the one you should return is the\
  \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
  ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \n\
  */\nlong closest_integer(string value) \n"
tests: "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
  10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
  -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
  0\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    return cast(long) round(to!double(value));\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    // convert string to double\n    double d = to!double(value);\n  \
    \  // round to nearest integer\n    return round(d);\n}", "{\n    auto val = to!double(value);\n\
    \    return cast(long)round(val);\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto val = to!double(value);\n\
    \    return cast(long)round(val);\n}", "{\n    auto val = to!double(value);\n\
    \    return cast(long)val;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return round(to!real(value));\n}", "{\n    auto x = to!double(value);\n\
    \    return cast(long)round(x);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long)round(d);\n}", "{\n    double d = to!double(value);\n    return cast(long)\
    \ round(d);\n}", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    double d_int = to!double(to!long(d));\n \
    \   double d_int_plus = to!double(to!long(d) + 1);\n    if (abs(d - d_int) < abs(d\
    \ - d_int_plus))\n        result = to!long(d_int);\n    else\n        result =\
    \ to!long(d_int_plus);\n    return result;\n}", "{\n    // TODO: Implement me!\n\
    \    return 0;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    long l = to!long(value);\n    if\
    \ (d - l > 0.5)\n        return l + 1;\n    else\n        return l;\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    long num = to!long(value);\n   \
    \ return num + (num < 0 ? -1 : 1) * (abs(num) % 1 >= 0.5);\n}", "{\n    auto val\
    \ = to!double(value);\n    return cast(long)round(val);\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double intpart = 0;\n    double\
    \ fractpart = modf(d, &intpart);\n    if (fractpart >= 0.5)\n        result =\
    \ cast(long)ceil(d);\n    else\n        result = cast(long)floor(d);\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  if (d < 0)\n    {\n        result = cast(long)floor(d);\n        if (d - result\
    \ > 0.5)\n            result++;\n    }\n    else\n    {\n        result = cast(long)ceil(d);\n\
    \        if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    //return cast(long)value.to!double;\n\
    \    return cast(long)value.to!double.round;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto num = to!double(value);\n    return cast(long)round(num);\n}",
  "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d +\
    \ 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long) ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long) floor(d);\n    }\n    return result;\n}",
  "{\n    double d = to!double(value);\n    long l = to!long(value);\n    double diff\
    \ = d - l;\n    if (diff > 0.5)\n        return l + 1;\n    else if (diff < -0.5)\n\
    \        return l - 1;\n    else\n        return l;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    long l = cast(long)d;\n    if (d\
    \ - l > 0.5)\n        return l + 1;\n    else if (d - l < -0.5)\n        return\
    \ l - 1;\n    else\n        return l;\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f < c - d)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d1\
    \ = ceil(d);\n    double d2 = floor(d);\n    if (d1 - d < d - d2)\n        result\
    \ = cast(long)d1;\n    else\n        result = cast(long)d2;\n    return result;\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    auto val =\
    \ to!double(value);\n    return cast(long)round(val);\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    // TODO: Implement me\n    return\
    \ 0;\n}", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    long l = to!long(value);\n    if (d - l\
    \ > 0.5)\n        result = l + 1;\n    else if (d - l < -0.5)\n        result\
    \ = l - 1;\n    else\n        result = l;\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n     \
    \   result = cast(long) floor(d);\n        if (d - result > 0.5)\n           \
    \ result++;\n    }\n    else\n    {\n        result = cast(long) ceil(d);\n  \
    \      if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    double d = to!double(value);\n    return cast(long) round(d);\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    double d1 = floor(d);\n\
    \    double d2 = ceil(d);\n    if (d1 == d2)\n        return cast(long)d1;\n \
    \   else\n    {\n        double d3 = abs(d1 - d);\n        double d4 = abs(d2\
    \ - d);\n        if (d3 < d4)\n            return cast(long)d1;\n        else\n\
    \            return cast(long)d2;\n    }\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    long l = to!long(value);\n    if(d - l > 0.5)\n     \
    \   return l + 1;\n    else if(d - l < -0.5)\n        return l - 1;\n    else\n\
    \        return l;\n}", "{\n    return round(to!double(value));\n}", "{\n    double\
    \ d = to!double(value);\n    return cast(long)round(d);\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    // TODO: Implement\n    return 0;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n   \
    \ double d = to!double(value);\n    return cast(long) round(d);\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    auto result = to!double(value);\n    return cast(long)result;\n}", "{\n \
    \   long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else if (d < 0)\n    {\n    \
    \    result = cast(long)floor(d);\n    }\n    else\n    {\n        result = 0;\n\
    \    }\n    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    double d = to!double(value);\n    return cast(long) round(d);\n}", "{\n \
    \   long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long) ceil(d);\n    }\n    else\n    {\n        result = cast(long) floor(d);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double dbl = to!double(value);\n    if (dbl\
    \ == 0)\n        return result;\n    if (dbl < 0)\n        dbl = -dbl;\n    double\
    \ fraction = dbl - cast(long)dbl;\n    if (fraction == 0)\n        return cast(long)dbl;\n\
    \    if (fraction > 0.5)\n        result = cast(long)dbl + 1;\n    else\n    \
    \    result = cast(long)dbl;\n    if (value[0] == '-')\n        result = -result;\n\
    \    return result;\n}", "{\n    // TODO: implement\n    return 0;\n}", "{\n \
    \   return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    // TODO: Write code here\n    return 0;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}",
  "{\n    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    double d = to!double(value);\n    return\
    \ round(d);\n}", "{\n    return round(to!double(value));\n}", "{\n    double d\
    \ = to!double(value);\n    return cast(long) round(d);\n}", "{\n    double d =\
    \ to!double(value);\n    return cast(long)round(d);\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long int_part = 0;\n    long frac_part\
    \ = 0;\n    long frac_part_abs = 0;\n    long frac_part_abs_int = 0;\n    long\
    \ frac_part_abs_frac = 0;\n    long frac_part_abs_frac_int = 0;\n    long frac_part_abs_frac_frac\
    \ = 0;\n    long frac_part_abs_frac_frac_int = 0;\n    long frac_part_abs_frac_frac_frac\
    \ = 0;\n    long frac_part_abs_frac_frac_frac_int = 0;\n    long frac_part_abs_frac_frac_frac_frac\
    \ = 0;\n    long frac_part_abs_frac_frac_frac_frac_int = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac\
    \ = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac_int = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac_frac\
    \ = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac_frac_int = 0;\n    long\
    \ frac_part_abs_frac_frac_frac_frac_frac_frac_frac = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac_frac_frac_int\
    \ = 0;\n    long frac_part_abs_frac_frac_frac_frac_frac_frac_frac_frac = 0;\n\
    \    long frac_part_abs_frac_frac_frac_frac_frac_frac_frac_frac_int = 0;\n   \
    \ long frac_part_abs_frac_frac_frac_frac_frac_frac_frac_frac_frac = 0;\n    long\
    \ frac_part_abs_frac_frac_frac_frac_frac_frac_frac_frac_frac_int = 0;\n    long\
    \ frac_part_abs_frac_frac_frac_frac_frac_frac_frac_frac_frac_frac = 0;\n    long\
    \ frac_part_abs_frac_", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)d;\n        if (d - result\
    \ >= 0.5)\n            result++;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \        if (d - result <= -0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n\
    \    if (d - result > 0.5)\n        result++;\n    return result;\n}", "{\n  \
    \  return cast(long)round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    result = cast(long)d;\n    if (d -\
    \ result >= 0.5)\n        result++;\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return to!long(value);\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    double floor = std.math.floor(d);\n    double\
    \ ceil = std.math.ceil(d);\n    if (d - floor > ceil - d)\n        result = cast(long)\
    \ ceil;\n    else\n        result = cast(long) floor;\n    return result;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long) round(d);\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = floor + 1;\n    auto diff_floor\
    \ = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return diff_floor\
    \ < diff_ceil ? floor : ceil;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    long result = 0;\n  \
    \  double d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  if (d < 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n \
    \   {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double val = to!double(value);\n    if (val > 0)\n    {\n        result =\
    \ cast(long)ceil(val);\n    }\n    else\n    {\n        result = cast(long)floor(val);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    if(value.length\
    \ > 0)\n    {\n        double d = to!double(value);\n        if(d > 0)\n     \
    \   {\n            result = cast(long)ceil(d);\n        }\n        else\n    \
    \    {\n            result = cast(long)floor(d);\n        }\n    }\n    return\
    \ result;\n}", "{\n    // convert the string to a double\n    double d = to!double(value);\n\
    \    // round the double to the nearest integer\n    long l = round(d);\n    //\
    \ return the rounded integer\n    return l;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto val = to!double(value);\n\
    \    return cast(long)round(val);\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    // TODO: Implement this function\n    return 0;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    double fractional = d - cast(long)d;\n\
    \    if (fractional == 0.5)\n    {\n        result = cast(long)d;\n        if\
    \ (result < 0)\n            result--;\n        else\n            result++;\n \
    \   }\n    else\n    {\n        result = cast(long)d;\n        if (fractional\
    \ > 0.5)\n            result++;\n        else if (fractional < -0.5)\n       \
    \     result--;\n    }\n    return result;\n}", "{\n    // TODO: implement\n \
    \   return 0;\n}", "{\n    auto result = to!long(value);\n    auto diff = abs(result\
    \ - to!long(value));\n    if (diff >= 0.5)\n    {\n        if (result > 0)\n \
    \           result++;\n        else\n            result--;\n    }\n    return\
    \ result;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n  \
    \  return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    long l = cast(long)d;\n    if (abs(d - l) >= 0.5)\n        l += (d > 0) ?\
    \ 1 : -1;\n    return l;\n}", "{\n    return round(to!real(value));\n}", "{\n\
    \    auto val = to!double(value);\n    auto int_val = cast(long) val;\n    if\
    \ (val - int_val >= 0.5)\n        return int_val + 1;\n    else\n        return\
    \ int_val;\n}", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double dbl = to!double(value);\n    if (dbl > 0)\n    {\n        result\
    \ = cast(long)ceil(dbl);\n    }\n    else\n    {\n        result = cast(long)floor(dbl);\n\
    \    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
