name: HumanEval_88_sort_array
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2,\
  \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6])\
  \ => [6, 5, 4, 3, 2, 1, 0]\n    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: ["{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long sum = array[0] + array[array.length -\
    \ 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n \
    \   }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool odd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (odd)\n    {\n        array.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long[] result = new long[array.length];\n\
    \        long first = array[0];\n        long last = array[array.length - 1];\n\
    \        long sum = first + last;\n        if (sum % 2 == 0)\n        {\n    \
    \        sort(array);\n            reverse(array);\n            return array;\n\
    \        }\n        else\n        {\n            sort(array);\n            return\
    \ array;\n        }\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long[] sortedArray = new long[array.length];\n    int index = 0;\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        for (int i = array.length - 1; i >= 0; i--)\n        {\n      \
    \      sortedArray[index] = array[i];\n            index++;\n        }\n    }\n\
    \    else\n    {\n        for (int i = 0; i < array.length; i++)\n        {\n\
    \            sortedArray[index] = array[i];\n            index++;\n        }\n\
    \    }\n    return sortedArray;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    bool isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    long[] result = new long[array.length];\n    if(array.length == 0)\n\
    \        return result;\n    if(array.length == 1)\n        return array;\n  \
    \  if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        sort(array);\n\
    \        reverse(array);\n        return array;\n    }\n    else\n    {\n    \
    \    sort(array);\n        return array;\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b\
    \ - a);\n    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        // descending\n        array.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        // ascending\n        array.sort!((a, b) => a\
    \ - b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n      \
    \  return array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    bool isOdd = (first + last) % 2 == 1;\n    if (isOdd)\n    {\n  \
    \      array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else\n    {\n        long[] result = array.dup;\n        bool isOdd = (array[0]\
    \ + array[$ - 1]) % 2 == 1;\n        if (isOdd)\n            result.sort!((a,\
    \ b) => a > b);\n        else\n            result.sort!((a, b) => a < b);\n  \
    \      return result;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        long[] temp = array.dup;\n        temp.sort;\n\
    \        temp.reverse;\n        return temp;\n    }\n    else\n    {\n       \
    \ long[] temp = array.dup;\n        temp.sort;\n        return temp;\n    }\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 ==\
    \ 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n \
    \       array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    long[] ret = array.dup;\n    if ((ret[0] + ret[ret.length\
    \ - 1]) % 2 == 0)\n    {\n        ret.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        ret.sort!((a, b) => a - b);\n    }\n    return ret;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long sum = array[0] +\
    \ array[array.length - 1];\n        if (sum % 2 == 0)\n        {\n           \
    \ array.sort!((a, b) => b - a);\n            return array;\n        }\n      \
    \  else\n        {\n            array.sort!((a, b) => a - b);\n            return\
    \ array;\n        }\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long[] result = new long[array.length];\n\
    \    long first = array[0];\n    long last = array[array.length - 1];\n    bool\
    \ isOdd = (first + last) % 2 == 1;\n    if (isOdd)\n    {\n        array.sort();\n\
    \        return array;\n    }\n    else\n    {\n        array.sort();\n      \
    \  array.reverse();\n        return array;\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long\
    \ sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n  \
    \      sort(array.ptr, array.ptr + array.length, (a, b) => a > b);\n    }\n  \
    \  else\n    {\n        sort(array.ptr, array.ptr + array.length, (a, b) => a\
    \ < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n      \
    \  return array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b > a);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a > b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long tmp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = tmp;\n        }\n        return array;\n\
    \    }\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        sort(array);\n    }\n    else\n    {\n        sort(array,\
    \ (a, b) => b - a);\n    }\n    return array;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    int i = 0;\n    int j = array.length - 1;\n    int\
    \ k = 0;\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n  \
    \  while (i <= j)\n    {\n        if (isOdd)\n        {\n            if (array[i]\
    \ % 2 == 1)\n            {\n                result[k] = array[i];\n          \
    \      i++;\n            }\n            else\n            {\n                result[k]\
    \ = array[j];\n                j--;\n            }\n        }\n        else\n\
    \        {\n            if (array[i] % 2 == 1)\n            {\n              \
    \  result[k] = array[j];\n                j--;\n            }\n            else\n\
    \            {\n                result[k] = array[i];\n                i++;\n\
    \            }\n        }\n        k++;\n    }\n    return result;\n}", "{\n \
    \   if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    \n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    long sum = first + last;\n    bool isOdd = (sum % 2 == 1);\n    \n\
    \    if (isOdd)\n        return array.sort();\n    else\n        return array.sort!((a,\
    \ b) => b - a);\n}", "{\n    long[] result = new long[array.length];\n    int\
    \ i = 0;\n    int j = array.length - 1;\n    int k = 0;\n    if(array.length ==\
    \ 0)\n        return result;\n    if(array.length == 1)\n        return array;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        while(i\
    \ <= j)\n        {\n            if(array[i] % 2 == 0)\n            {\n       \
    \         result[k] = array[i];\n                i++;\n                k++;\n\
    \            }\n            if(array[j] % 2 == 0)\n            {\n           \
    \     result[k] = array[j];\n                j--;\n                k++;\n    \
    \        }\n            if(array[i] % 2 != 0)\n            {\n               \
    \ i++;\n            }\n            if(array[j] % 2 != 0)\n            {\n    \
    \            j--;\n            }\n        }\n        return result;\n    }\n \
    \   else\n    {\n        while(i <= j)\n        {\n            if(array[i] % 2\
    \ != 0)\n            {\n                result[k] = array[i];\n              \
    \  i++;\n                k++;\n            }\n            if(array[j] % 2 != 0)\n\
    \            {\n                result[k] = array[j];\n                j--;\n\
    \                k++;\n            }\n            if(array[i] % 2 == 0)\n    \
    \        {\n                i++;\n            }\n            if(array[j] % 2 ==\
    \ 0)\n            {\n                j--;\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] result = array.dup;\n    if(array.length\
    \ == 0)\n        return result;\n    if(array.length == 1)\n        return result;\n\
    \    if(array[0] + array[array.length - 1] % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long[] sortedArray = new long[array.length];\n\
    \    long[] oddArray = new long[array.length];\n    long[] evenArray = new long[array.length];\n\
    \    long[] oddSortedArray = new long[array.length];\n    long[] evenSortedArray\
    \ = new long[array.length];\n    long[] oddSortedArray2 = new long[array.length];\n\
    \    long[] evenSortedArray2 = new long[array.length];\n    long[] oddSortedArray3\
    \ = new long[array.length];\n    long[] evenSortedArray3 = new long[array.length];\n\
    \    long[] oddSortedArray4 = new long[array.length];\n    long[] evenSortedArray4\
    \ = new long[array.length];\n    long[] oddSortedArray5 = new long[array.length];\n\
    \    long[] evenSortedArray5 = new long[array.length];\n    long[] oddSortedArray6\
    \ = new long[array.length];\n    long[] evenSortedArray6 = new long[array.length];\n\
    \    long[] oddSortedArray7 = new long[array.length];\n    long[] evenSortedArray7\
    \ = new long[array.length];\n    long[] oddSortedArray8 = new long[array.length];\n\
    \    long[] evenSortedArray8 = new long[array.length];\n    long[] oddSortedArray9\
    \ = new long[array.length];\n    long[] evenSortedArray9 = new long[array.length];\n\
    \    long[] oddSortedArray10 = new long[array.length];\n    long[] evenSortedArray10\
    \ = new long[array.length];\n    long[] oddSortedArray11 = new long[array.length];\n\
    \    long[] evenSortedArray11 = new long[array", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    bool isOdd = sum % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n    }\n    else\n   \
    \ {\n        array.sort!((a, b) => a > b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0) return array;\n    if (array.length == 1) return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[array.length - 1])\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    long[] result = new long[array.length];\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        foreach (i, v; array)\n\
    \            result[i] = v;\n        sort(result);\n        reverse(result);\n\
    \    }\n    else\n    {\n        foreach (i, v; array)\n            result[i]\
    \ = v;\n        sort(result);\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long[]\
    \ result = new long[array.length];\n    if ((array[0] + array[array.length - 1])\
    \ % 2 == 0)\n    {\n        long[] temp = array.dup;\n        temp.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n        {\n            result[i]\
    \ = temp[array.length - 1 - i];\n        }\n    }\n    else\n    {\n        long[]\
    \ temp = array.dup;\n        temp.sort(std.numeric.comparison);\n        for (int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = temp[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    if (array.length == 0) return\
    \ array;\n    if (array.length == 1) return array;\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        int i\
    \ = 0;\n        for (int j = array.length - 1; j >= 0; j--)\n        {\n     \
    \       result[i] = array[j];\n            i++;\n        }\n    }\n    else\n\
    \    {\n        result = array;\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    bool\
    \ isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else\n    {\n        long[] array_copy = array.dup;\n        if ((array_copy[0]\
    \ + array_copy[array_copy.length - 1]) % 2 == 0)\n            array_copy.sort!((a,\
    \ b) => b - a);\n        else\n            array_copy.sort!((a, b) => a - b);\n\
    \        return array_copy;\n    }\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] odd = new long[array.length];\n    long[] even = new long[array.length];\n\
    \    int odd_index = 0;\n    int even_index = 0;\n    foreach(i; array)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            even[even_index] = i;\n      \
    \      even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = i;\n            odd_index++;\n        }\n    }\n    sort(odd[0..odd_index]);\n\
    \    sort(even[0..even_index]);\n    if(array.length > 0 && (array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        even = even[0..even_index].reverse;\n    }\n\
    \    int index = 0;\n    foreach(i; odd[0..odd_index])\n    {\n        result[index]\
    \ = i;\n        index++;\n    }\n    foreach(i; even[0..even_index])\n    {\n\
    \        result[index] = i;\n        index++;\n    }\n    return result;\n}",
  "{\n    long[] ret = array.dup;\n    if (array.length == 0)\n        return ret;\n\
    \    if (array.length == 1)\n        return ret;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        ret.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        ret.sort!((a, b) => a < b);\n    }\n    return ret;\n}", "{\n\
    \    if (array.length == 0) return array;\n    if (array.length == 1) return array;\n\
    \    if (array.length == 2) return (array[0] > array[1]) ? array : array.reverse();\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n       \
    \ array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    bool\
    \ isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    long[] ret = array.dup;\n\
    \    if (array.length == 0)\n        return ret;\n    if (array.length == 1)\n\
    \        return ret;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n \
    \   {\n        ret.sort!((a, b) => b - a);\n    }\n    else\n    {\n        ret.sort!((a,\
    \ b) => a - b);\n    }\n    return ret;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b > a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] temp = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    long[] temp3 = new long[array.length];\n    long[] temp4 = new long[array.length];\n\
    \    long[] temp5 = new long[array.length];\n    long[] temp6 = new long[array.length];\n\
    \    long[] temp7 = new long[array.length];\n    long[] temp8 = new long[array.length];\n\
    \    long[] temp9 = new long[array.length];\n    long[] temp10 = new long[array.length];\n\
    \    long[] temp11 = new long[array.length];\n    long[] temp12 = new long[array.length];\n\
    \    long[] temp13 = new long[array.length];\n    long[] temp14 = new long[array.length];\n\
    \    long[] temp15 = new long[array.length];\n    long[] temp16 = new long[array.length];\n\
    \    long[] temp17 = new long[array.length];\n    long[] temp18 = new long[array.length];\n\
    \    long[] temp19 = new long[array.length];\n    long[] temp20 = new long[array.length];\n\
    \    long[] temp21 = new long[array.length];\n    long[] temp22 = new long[array.length];\n\
    \    long[] temp23 = new long[array.length];\n    long[] temp24 = new long[array.length];\n\
    \    long[] temp25 = new long[array.length];\n    long[] temp26 = new long[array.length];\n\
    \    long[] temp27 = new long[array.length];\n    long[] temp28 = new long[array.length];\n\
    \    long[] temp29 = new long[array.length];\n    long[] temp30 = new long[array.length];\n\
    \    long[] temp31 = new long[array.length];\n    long[] temp32 = new long[array.length];\n\
    \    long[] temp33 = new long[array.length];\n    long[] temp34 = new long[array.length];\n\
    \    long[] temp35 = new long[array.length];\n    long[] temp36 = new", "{\n \
    \   if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    bool isEven = (array[0] + array[array.length - 1])\
    \ % 2 == 0;\n    if (isEven)\n    {\n        array.sort!((a, b) => a > b);\n \
    \   }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isEven = (array[0] + array[array.length - 1])\
    \ % 2 == 0;\n    if (isEven)\n    {\n        array.sort!((a, b) => b - a);\n \
    \   }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => a < b);\n        return array;\n    }\n\
    \    else\n    {\n        array.sort!((a, b) => a > b);\n        return array;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long[] result = new long[array.length];\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        for (int i = 0; i < array.length;\
    \ i++)\n        {\n            result[i] = array[array.length - 1 - i];\n    \
    \    }\n    }\n    else\n    {\n        for (int i = 0; i < array.length; i++)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => a < b);\n        return array;\n    }\n\
    \    else\n    {\n        array.sort!((a, b) => a > b);\n        return array;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => b - a);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a - b);\n    }\n    return array;\n}", "{\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n       \
    \ array.sort(std.numeric.comparisonFunctor!(\"a > b\"));\n    }\n    else\n  \
    \  {\n        array.sort(std.numeric.comparisonFunctor!(\"a < b\"));\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    long[] sorted = array.dup;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        sorted.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        sorted.sort!((a, b) => a < b);\n    }\n    return sorted;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    long[] result = array.dup;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) => a < b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    return result;\n}",
  "{\n    long[] result = array.dup;\n    if (result.length == 0)\n        return\
    \ result;\n    if (result.length == 1)\n        return result;\n    if (result[0]\
    \ + result[result.length - 1] % 2 == 0)\n    {\n        result.sort!((a, b) =>\
    \ b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n  \
    \  }\n    return result;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n            result[i] = array[array.length\
    \ - 1 - i];\n    }\n    else\n    {\n        array.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    long sum = array[0] + array[array.length - 1];\n \
    \   if(sum % 2 == 0)\n    {\n        array.sort(std.numeric.cmp.greater);\n  \
    \      return array;\n    }\n    else\n    {\n        array.sort(std.numeric.cmp.less);\n\
    \        return array;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        sort(array.ptr, array.ptr + array.length);\n\
    \    }\n    else\n    {\n        sort(array.ptr, array.ptr + array.length, std.numeric.comparison.greater!long);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long[] result = new long[array.length];\n    long[]\
    \ left = new long[array.length / 2];\n    long[] right = new long[array.length\
    \ - array.length / 2];\n    for (int i = 0; i < array.length / 2; i++)\n     \
    \   left[i] = array[i];\n    for (int i = array.length / 2; i < array.length;\
    \ i++)\n        right[i - array.length / 2] = array[i];\n    left = sort_array(left);\n\
    \    right = sort_array(right);\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    while (i < left.length && j < right.length)\n    {\n        if (left[i] <\
    \ right[j])\n        {\n            result[k] = left[i];\n            i++;\n \
    \       }\n        else\n        {\n            result[k] = right[j];\n      \
    \      j++;\n        }\n        k++;\n    }\n    while (i < left.length)\n   \
    \ {\n        result[k] = left[i];\n        i++;\n        k++;\n    }\n    while\
    \ (j < right.length)\n    {\n        result[k] = right[j];\n        j++;\n   \
    \     k++;\n    }\n    if ((result[0] + result[result.length - 1]) % 2 == 0)\n\
    \    {\n        for (int l = 0; l < result.length / 2; l++)\n        {\n     \
    \       long temp = result[l];\n            result[l] = result[result.length -\
    \ 1 - l];\n            result[result.length - 1 - l] = temp;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    bool odd = (first + last) % 2 == 1;\n    if (odd)\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    bool isOdd\
    \ = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n    {\n  \
    \      array.sort!((a, b) => a > b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\
    \ return array;\n    if (array.length == 1) return array;\n    if (array.length\
    \ == 2) return (array[0] > array[1]) ? array : array.reverse();\n    if (array[0]\
    \ + array[$ - 1] % 2 == 0) return array.sort(std.math.cmp);\n    return array.sort(std.math.cmp).reverse();\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   bool isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        array.sort();\n\
    \    }\n    else\n    {\n        array.sort(std.comparisonFunctor!(\">\"));\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    long[] result = array.dup;\n  \
    \  bool odd = (array[0] + array[$ - 1]) % 2 == 1;\n    if (odd)\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        sort(array);\n        for (int i = 0; i < array.length;\
    \ i++)\n            result[i] = array[array.length - 1 - i];\n    }\n    else\n\
    \    {\n        sort(array);\n        for (int i = 0; i < array.length; i++)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    else if (array.length == 1)\n\
    \        return array;\n    else\n    {\n        long sum = array[0] + array[array.length\
    \ - 1];\n        if (sum % 2 == 0)\n        {\n            array.sort!((a, b)\
    \ => b - a);\n            return array;\n        }\n        else\n        {\n\
    \            array.sort!((a, b) => a - b);\n            return array;\n      \
    \  }\n    }\n}", "{\n    if (array.length == 0) return array;\n    if (array.length\
    \ == 1) return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort(std.numeric.cmp.greater);\n     \
    \   return array;\n    }\n    else\n    {\n        array.sort(std.numeric.cmp.less);\n\
    \        return array;\n    }\n}", "{\n    auto result = array.dup;\n    if (array.length\
    \ == 0)\n        return result;\n    if (array.length == 1)\n        return result;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n       \
    \ sort(result, (a, b) => a < b);\n    }\n    else\n    {\n        sort(result,\
    \ (a, b) => a > b);\n    }\n    return result;\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    bool\
    \ isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n   \
    \ {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b\
    \ - a);\n    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ long[] result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if (array.length == 1)\n        return result;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}",
  "{\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n\
    \    if (sum % 2 == 0)\n    {\n        long[] result = new long[array.length];\n\
    \        for (int i = 0; i < array.length; i++)\n        {\n            result[i]\
    \ = array[array.length - 1 - i];\n        }\n        return result;\n    }\n \
    \   else\n    {\n        long[] result = new long[array.length];\n        for\
    \ (int i = 0; i < array.length; i++)\n        {\n            result[i] = array[i];\n\
    \        }\n        return result;\n    }\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b\
    \ < a);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        for (int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = array[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        for (int i = 0; i < array.length;\
    \ i++)\n        {\n            result[i] = array[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isEven = (array[0] + array[array.length - 1])\
    \ % 2 == 0;\n    if (isEven)\n    {\n        array.sort!((a, b) => a < b);\n \
    \   }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long\
    \ sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n  \
    \      array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if (array.length == 0)\n        return result;\n    if (array.length == 1)\n\
    \        return array;\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        foreach (i, v; array)\n            result[i] = v;\n        sort(result);\n\
    \        reverse(result);\n    }\n    else\n    {\n        foreach (i, v; array)\n\
    \            result[i] = v;\n        sort(result);\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return array;\n\
    }", "{\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    if (odd_index >\
    \ 0)\n    {\n        sort(odd[0..odd_index]);\n    }\n    if (even_index > 0)\n\
    \    {\n        sort(even[0..even_index]);\n        reverse(even[0..even_index]);\n\
    \    }\n    int j = 0;\n    for (int i = 0; i < odd_index; i++)\n    {\n     \
    \   result[j] = odd[i];\n        j++;\n    }\n    for (int i = 0; i < even_index;\
    \ i++)\n    {\n        result[j] = even[i];\n        j++;\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n            result[i] = array[array.length\
    \ - 1 - i];\n    }\n    else\n    {\n        array.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    \n    bool isAscending = (array[0] + array[$ - 1]) % 2 == 1;\n \
    \   if (isAscending)\n        return array.sort();\n    else\n        return array.sort!((a,\
    \ b) => b - a);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   auto sum = array[0] + array[$ - 1];\n    if (sum % 2 == 0)\n        return\
    \ array.sort!((a, b) => b < a);\n    else\n        return array.sort!((a, b) =>\
    \ a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0) return array;\n    if (array.length\
    \ == 1) return array;\n    if (array.length == 2)\n    {\n        if ((array[0]\
    \ + array[1]) % 2 == 0)\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long[] result = new long[array.length];\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        long[] temp = array.dup;\n\
    \        temp.sort(std.math.cmp(a, b) => b - a);\n        result = temp;\n   \
    \ }\n    else\n    {\n        long[] temp = array.dup;\n        temp.sort(std.math.cmp(a,\
    \ b) => a - b);\n        result = temp;\n    }\n    return result;\n}", "{\n \
    \   if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long sum = array[0] + array[array.length - 1];\n    bool isOdd = sum\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    long sum = first + last;\n    bool isOdd = sum % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort();\n    }\n    else\n    {\n        array.sort();\n\
    \        array.reverse();\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b\
    \ < a);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    bool is_odd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (is_odd)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    long[] result = array.dup;\n    if (result.length == 0)\n\
    \        return result;\n    bool isOdd = (result[0] + result[$-1]) % 2 == 1;\n\
    \    if (isOdd)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n  \
    \          long temp = array[0];\n            array[0] = array[1];\n         \
    \   array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a\
    \ > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        sort(array);\n        return array;\n    }\n    else\n\
    \    {\n        sort(array);\n        reverse(array);\n        return array;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array = array.sort();\n        array = array.reverse();\n\
    \    }\n    else\n    {\n        array = array.sort();\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    bool isOdd = (first + last) % 2 == 1;\n    if (isOdd)\n    {\n  \
    \      array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] temp = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    long[] temp3 = new long[array.length];\n    long[] temp4 = new long[array.length];\n\
    \    long[] temp5 = new long[array.length];\n    long[] temp6 = new long[array.length];\n\
    \    long[] temp7 = new long[array.length];\n    long[] temp8 = new long[array.length];\n\
    \    long[] temp9 = new long[array.length];\n    long[] temp10 = new long[array.length];\n\
    \    long[] temp11 = new long[array.length];\n    long[] temp12 = new long[array.length];\n\
    \    long[] temp13 = new long[array.length];\n    long[] temp14 = new long[array.length];\n\
    \    long[] temp15 = new long[array.length];\n    long[] temp16 = new long[array.length];\n\
    \    long[] temp17 = new long[array.length];\n    long[] temp18 = new long[array.length];\n\
    \    long[] temp19 = new long[array.length];\n    long[] temp20 = new long[array.length];\n\
    \    long[] temp21 = new long[array.length];\n    long[] temp22 = new long[array.length];\n\
    \    long[] temp23 = new long[array.length];\n    long[] temp24 = new long[array.length];\n\
    \    long[] temp25 = new long[array.length];\n    long[] temp26 = new long[array.length];\n\
    \    long[] temp27 = new long[array.length];\n    long[] temp28 = new long[array.length];\n\
    \    long[] temp29 = new long[array.length];\n    long[] temp30 = new long[array.length];\n\
    \    long[] temp31 = new long[array.length];\n    long[] temp32 = new long[array.length];\n\
    \    long[] temp33 = new long[array.length];\n    long[] temp34 = new long[array.length];\n\
    \    long[] temp35 = new long[array.length];\n    long[] temp36 = new", "{\n \
    \   if (array.length == 0) return array;\n    if (array.length == 1) return array;\n\
    \    bool isOdd = (array[0] + array[$-1]) % 2 == 1;\n    auto sorted = array.dup;\n\
    \    if (isOdd)\n    {\n        sorted.sort!((a, b) => a < b);\n    }\n    else\n\
    \    {\n        sorted.sort!((a, b) => a > b);\n    }\n    return sorted;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 ==\
    \ 0)\n    {\n        array.sort(std.numeric.comparisonFunctor!(\"a > b\"));\n\
    \    }\n    else\n    {\n        array.sort(std.numeric.comparisonFunctor!(\"\
    a < b\"));\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        long[] temp = array.dup;\n        temp.sort;\n        temp.reverse;\n\
    \        return temp;\n    }\n    else\n    {\n        array.sort;\n        return\
    \ array;\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    bool isOdd = ((array[0] + array[array.length\
    \ - 1]) % 2 == 1);\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long[] result = new long[array.length];\n\
    \    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        result = array.sort();\n    }\n    else\n    {\n        result\
    \ = array.sort(std.numeric.comparisonFunctor!(\"a > b\"));\n    }\n    return\
    \ result;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   bool isOdd = sum % 2 != 0;\n    if (isOdd)\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    else\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    long sum = array[0]\
    \ + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    if (array.length == 2) return (array[0]\
    \ > array[1]) ? array : array.reverse();\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        return array.sort( (a, b) => a > b ? -1 : 1 );\n\
    \    }\n    else\n    {\n        return array.sort( (a, b) => a < b ? -1 : 1 );\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        sort(array);\n    }\n    else\n  \
    \  {\n        sort(array.dup.reverse);\n    }\n    return array;\n}", "{\n   \
    \ if (array.length == 0) return array;\n    if (array.length == 1) return array;\n\
    \    if (array.length == 2)\n    {\n        if ((array[0] + array[1]) % 2 == 0)\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    long[]\
    \ odd = array.filter!(x => x % 2 != 0).sort!((a, b) => a > b ? 1 : -1);\n    long[]\
    \ even = array.filter!(x => x % 2 == 0).sort!((a, b) => a < b ? 1 : -1);\n   \
    \ return array.map!(x => x % 2 == 0 ? even.popFront() : odd.popFront()).array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool odd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (odd)\n    {\n        array.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    long[] result = array.dup;\n    if (array.length == 0) return result;\n\
    \    if (array.length == 1) return result;\n    long sum = array[0] + array[$-1];\n\
    \    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long[] result = array.dup;\n    if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n \
    \   }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long first = array[0];\n    long last = array[array.length\
    \ - 1];\n    bool isEven = (first + last) % 2 == 0;\n    if (isEven)\n    {\n\
    \        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        sort(array);\n        reverse(array);\n        return array;\n\
    \    }\n    else\n    {\n        sort(array);\n        return array;\n    }\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long first = array[0];\n\
    \        long last = array[array.length - 1];\n        long sum = first + last;\n\
    \        if (sum % 2 == 0)\n        {\n            array.sort!((a, b) => b < a);\n\
    \            return array;\n        }\n        else\n        {\n            array.sort!((a,\
    \ b) => a < b);\n            return array;\n        }\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long\
    \ first = array[0];\n    long last = array[array.length - 1];\n    if ((first\
    \ + last) % 2 == 0)\n    {\n        array.sort!((a, b) => a < b);\n    }\n   \
    \ else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        long[] result = new long[array.length];\n        int index = 0;\n\
    \        for (int i = array.length - 1; i >= 0; i--)\n        {\n            result[index]\
    \ = array[i];\n            index++;\n        }\n        return result;\n    }\n\
    \    else\n    {\n        long[] result = new long[array.length];\n        int\
    \ index = 0;\n        for (int i = 0; i < array.length; i++)\n        {\n    \
    \        result[index] = array[i];\n            index++;\n        }\n        return\
    \ result;\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a - b);\n    }\n    return array;\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long first = array[0];\n    long last = array[array.length - 1];\n\
    \    bool isOdd = (first + last) % 2 == 1;\n    if (isOdd)\n    {\n        sort(array);\n\
    \    }\n    else\n    {\n        sort(array, std.greater!long());\n    }\n   \
    \ return array;\n}", "{\n    long[] result = new long[array.length];\n    if(array.length\
    \ == 0)\n        return result;\n    if(array.length == 1)\n        return array;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        long[]\
    \ temp = array.dup;\n        temp.sort;\n        temp.reverse;\n        return\
    \ temp;\n    }\n    else\n    {\n        long[] temp = array.dup;\n        temp.sort;\n\
    \        return temp;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    long[] result\
    \ = array.dup;\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n\
    \        result.sort!((a, b) => b - a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a - b);\n    }\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    bool isOdd = sum % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort();\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => b - a)();\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else\n    {\n        long[] result = array.dup;\n        if ((array[0] +\
    \ array[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n      \
    \  else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long sum = array[0] + array[array.length -\
    \ 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n \
    \   }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n    \
    \    else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   bool isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    else if (array.length == 1)\n        return array;\n    else\n \
    \   {\n        long[] result = new long[array.length];\n        long first = array[0];\n\
    \        long last = array[array.length - 1];\n        long sum = first + last;\n\
    \        if (sum % 2 == 0)\n        {\n            array.sort(std.numeric.cmp.greater);\n\
    \            return array;\n        }\n        else\n        {\n            array.sort(std.numeric.cmp.less);\n\
    \            return array;\n        }\n    }\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    bool\
    \ even = (array[0] + array[array.length - 1]) % 2 == 0;\n    if (even)\n    {\n\
    \        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a\
    \ > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    long[] result = array.dup;\n\
    \    if ((array[0] + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    else\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array = array.sort(std.numeric.comparisonFunctor!(\"\
    a > b\"));\n    }\n    else\n    {\n        array = array.sort(std.numeric.comparisonFunctor!(\"\
    a < b\"));\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n   \
    \     return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n  \
    \          long temp = array[0];\n            array[0] = array[1];\n         \
    \   array[1] = temp;\n        }\n        return array;\n    }\n    bool isOdd\
    \ = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n    {\n  \
    \      sort(array);\n    }\n    else\n    {\n        sort(array, std.greater!long());\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    bool odd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (odd)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    long[] result = array.dup;\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) =>\
    \ b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n  \
    \  }\n    return result;\n}", "{\n    if (array.length == 0) return array;\n \
    \   if (array.length == 1) return array;\n    if (array.length == 2) return (array[0]\
    \ + array[1]) % 2 == 0 ? array.reverse() : array;\n    long[] result = array.dup;\n\
    \    if ((result[0] + result[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b - a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  \n    long[] result = array.dup;\n    if ((array[0] + array[$-1]) % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a - b);\n    }\n    return result;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array.length == 2)\n    {\n        if (array[0] >\
    \ array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n    }\n    else\n   \
    \ {\n        array.sort!((a, b) => a > b);\n    }\n    return array;\n}", "{\n\
    \    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new", "{\n    long[] result = new long[array.length];\n \
    \   if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        for(int i = 0; i < array.length; i++)\n            result[i] =\
    \ array[array.length - i - 1];\n    }\n    else\n    {\n        for(int i = 0;\
    \ i < array.length; i++)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    long sum =\
    \ array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(array);\n    }\n   \
    \ return array;\n}", "{\n    long[] result = array.dup;\n    if(result.length\
    \ == 0)\n        return result;\n    if(result.length == 1)\n        return result;\n\
    \    if((result[0] + result[result.length - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    bool isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    auto\
    \ result = array.dup;\n    if ((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => b - a);\n    else\n        result.sort!((a, b) => a - b);\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    long[] sorted\
    \ = array.dup;\n    sorted.sort;\n    if (array.length == 0)\n        return result;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        for (int i = 0; i < array.length; i++)\n    \
    \        result[i] = sorted[array.length - 1 - i];\n    }\n    else\n    {\n \
    \       for (int i = 0; i < array.length; i++)\n            result[i] = sorted[i];\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a < b);\n        return\
    \ array;\n    }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    \
    \    return array;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => a < b);\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    long[] result = new long[array.length];\n    int i = 0;\n\
    \    int j = array.length - 1;\n    bool isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 == 1;\n    while (i <= j)\n    {\n        if (isOdd)\n        {\n\
    \            if (array[i] % 2 == 1)\n            {\n                result[i]\
    \ = array[i];\n                i++;\n            }\n            else\n       \
    \     {\n                result[j] = array[i];\n                j--;\n       \
    \     }\n        }\n        else\n        {\n            if (array[i] % 2 == 1)\n\
    \            {\n                result[j] = array[i];\n                j--;\n\
    \            }\n            else\n            {\n                result[i] = array[i];\n\
    \                i++;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = array.dup;\n    if (array.length == 0)\n        return result;\n  \
    \  if (array.length == 1)\n        return result;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        sort(array);\n        reverse(array);\n        return array;\n\
    \    }\n    else\n    {\n        sort(array);\n        return array;\n    }\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    bool odd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (odd)\n    {\n        array.sort!((a, b) => a < b);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a > b);\n    }\n    return array;\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 ==\
    \ 0)\n    {\n        array.sort(std.numeric.comparison);\n        return array;\n\
    \    }\n    else\n    {\n        array.sort(std.numeric.comparison);\n       \
    \ array.reverse();\n        return array;\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long\
    \ sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n  \
    \      array.sort!((a, b) => a > b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n \
    \   {\n        result.sort!((a, b) => b - a);\n    }\n    else\n    {\n      \
    \  result.sort!((a, b) => a - b);\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array.length\
    \ == 2) return array[0] > array[1] ? array : array.reverse();\n    long sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        long[]\
    \ temp = new long[array.length];\n        for (int i = 0; i < array.length; i++)\n\
    \            temp[i] = array[i];\n        sort(temp);\n        for (int i = 0;\
    \ i < array.length; i++)\n            result[i] = temp[array.length - 1 - i];\n\
    \    }\n    else\n    {\n        long[] temp = new long[array.length];\n     \
    \   for (int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n\
    \        sort(temp);\n        for (int i = 0; i < array.length; i++)\n       \
    \     result[i] = temp[i];\n    }\n    return result;\n}", "{\n    long sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n\
    \    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if (array.length == 0)\n        return result;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort(std.numeric.comparison);\n\
    \        return array;\n    }\n    else\n    {\n        array.sort(std.numeric.comparison);\n\
    \        for (int i = 0; i < array.length; i++)\n        {\n            result[i]\
    \ = array[array.length - i - 1];\n        }\n        return result;\n    }\n}",
  "{\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return result;\n    if(array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        result.sort!((a, b) => a < b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  array = array.sort(std.numeric.comparisonFunctor!(\"a > b\"));\n    }\n   \
    \ else\n    {\n        array = array.sort(std.numeric.comparisonFunctor!(\"a <\
    \ b\"));\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n     \
    \   return array;\n    if (array.length == 1)\n        return array;\n    \n \
    \   long[] result = array.dup;\n    if ((result[0] + result[$-1]) % 2 == 0)\n\
    \        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b)\
    \ => a < b);\n    return result;\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    long[] result = new long[array.length];\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => b < a);\n    }\n    else\n    {\n\
    \        result = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n\
    \    return result;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n\
    \    if (sum % 2 == 0)\n    {\n        array = array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        array = array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}", "{\n    if (array.length == 0) return array;\n    if (array.length\
    \ == 1) return array;\n    if (array.length == 2) return array[0] > array[1] ?\
    \ array : array.reverse();\n    long sum = array[0] + array[array.length - 1];\n\
    \    if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n\
    \    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isEven = (array[0] + array[array.length - 1])\
    \ % 2 == 0;\n    if (isEven)\n    {\n        long[] sorted = array.dup;\n    \
    \    sorted.sort(std.math.greater);\n        return sorted;\n    }\n    else\n\
    \    {\n        long[] sorted = array.dup;\n        sorted.sort();\n        return\
    \ sorted;\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        sort(array);\n        return array;\n    }\n    sort(array);\n\
    \    reverse(array);\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    bool odd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    if (odd)\n        return array.sort!((a, b) => a > b);\n    else\n\
    \        return array.sort!((a, b) => a < b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    long\
    \ sum = array[0] + array[array.length - 1];\n    bool isOdd = sum % 2 == 1;\n\
    \    if (isOdd)\n    {\n        array.sort();\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => b - a)();\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            long temp = array[0];\n            array[0] = array[1];\n   \
    \         array[1] = temp;\n        }\n        return array;\n    }\n    bool\
    \ isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n   \
    \ {\n        array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        sort(array);\n        reverse(array);\n        return array;\n\
    \    }\n    else\n    {\n        sort(array);\n        return array;\n    }\n}",
  "{\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new", "{\n    if (array.length == 0) return array;\n    if\
    \ (array.length == 1) return array;\n    long[] result = array.dup;\n    bool\
    \ isOdd = (array[0] + array[$ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n       \
    \ result.sort!((a, b) => a < b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long[] result\
    \ = new long[array.length];\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        for (int i = 0; i < array.length; i++)\n        {\n  \
    \          result[i] = array[array.length - 1 - i];\n        }\n    }\n    else\n\
    \    {\n        for (int i = 0; i < array.length; i++)\n        {\n          \
    \  result[i] = array[i];\n        }\n    }\n    return result;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array.length == 2)\n    {\n        if (array[0] >\
    \ array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b - a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    \n    if (array.length == 1)\n        return array;\n\
    \    \n    long sum = array[0] + array[array.length - 1];\n    bool isEven = (sum\
    \ % 2 == 0);\n    \n    if (isEven)\n        return array.sort!((a, b) => b -\
    \ a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if (array.length == 0)\n        return\
    \ result;\n    if (array.length == 1)\n        return array;\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b\
    \ < a);\n        return array;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n        return array;\n    }\n}", "{\n    long[] result = new\
    \ long[array.length];\n    long[] odd = new long[array.length];\n    long[] even\
    \ = new long[array.length];\n    int odd_index = 0;\n    int even_index = 0;\n\
    \    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i] % 2 ==\
    \ 0)\n        {\n            even[even_index] = array[i];\n            even_index++;\n\
    \        }\n        else\n        {\n            odd[odd_index] = array[i];\n\
    \            odd_index++;\n        }\n    }\n    even = even[0..even_index];\n\
    \    odd = odd[0..odd_index];\n    even.sort();\n    odd.sort();\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        even.reverse();\n    }\n\
    \    else\n    {\n        odd.reverse();\n    }\n    int index = 0;\n    for (int\
    \ i = 0; i < odd.length; i++)\n    {\n        result[index] = odd[i];\n      \
    \  index++;\n    }\n    for (int i = 0; i < even.length; i++)\n    {\n       \
    \ result[index] = even[i];\n        index++;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    if (array.length\
    \ > 0)\n    {\n        if ((array[0] + array[array.length - 1]) % 2 == 0)\n  \
    \      {\n            sort(even);\n            sort(odd);\n            for (int\
    \ i = 0; i < odd_index; i++)\n            {\n                result[i] = odd[i];\n\
    \            }\n            for (int i = 0; i < even_index; i++)\n           \
    \ {\n                result[odd_index + i] = even[i];\n            }\n       \
    \ }\n        else\n        {\n            sort(even);\n            sort(odd);\n\
    \            for (int i = 0; i < odd_index; i++)\n            {\n            \
    \    result[i] = odd[odd_index - i - 1];\n            }\n            for (int\
    \ i = 0; i < even_index; i++)\n            {\n                result[odd_index\
    \ + i] = even[even_index - i - 1];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0)\n        return result;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            result[0] = array[1];\n            result[1] = array[0];\n  \
    \      }\n        else\n        {\n            result[0] = array[0];\n       \
    \     result[1] = array[1];\n        }\n        return result;\n    }\n    if\
    \ ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => a > b);\n        return array;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n        return array;\n    }\n}", "{\n    long[] result = array.dup;\n\
    \    if(result.length == 0)\n        return result;\n    if(result.length == 1)\n\
    \        return result;\n    if((result[0] + result[result.length - 1]) % 2 ==\
    \ 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n \
    \   long sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n   \
    \ {\n        return array.sort(a => a).reverse();\n    }\n    else\n    {\n  \
    \      return array.sort(a => a);\n    }\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    bool isOdd = sum % 2\
    \ == 1;\n    if (isOdd)\n    {\n        result = array.sort();\n    }\n    else\n\
    \    {\n        result = array.sort!((a, b) => b - a);\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a < b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a > b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n    }\n \
    \   else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n    {\n        array.sort!((a, b) => a > b);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n      \
    \  array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if (array.length == 0)\n        return\
    \ result;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.dup;\n       \
    \ result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => b - a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n    }\n    return array;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
