name: HumanEval_122_add_elements
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long[] arr_copy = arr.dup;\n    arr_copy.sort;\n    foreach(i;\
    \ 0..k)\n    {\n        if(arr_copy[i] < 100)\n        {\n            sum += arr_copy[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4farz69.d(22): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4farz69.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    for (long i = 0; i < k; i++)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n     \
    \   {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n     \
    \   {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    // 1.\
    \ Create a new array of size k\n    long[] new_arr = new long[k];\n    // 2. Copy\
    \ the first k elements of arr into new_arr\n    new_arr[] = arr[0..k];\n    //\
    \ 3. Create a new array of size k\n    long[] new_arr2 = new long[k];\n    //\
    \ 4. Iterate through new_arr and copy the elements with at most two digits into\
    \ new_arr2\n    foreach(i; 0..k)\n    {\n        if(new_arr[i] < 100)\n      \
    \  {\n            new_arr2[i] = new_arr[i];\n        }\n    }\n    // 5. Return\
    \ the sum of the elements in new_arr2\n    return new_arr2.sum;\n}\nunittest\n\
    {\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L,\
    \ 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L,\
    \ 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkrcxwxdx.d(35): Error: no property `sum` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrcxwxdx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    for (long i = 0; i < k; i++) \n    {\n        if (arr[i] < 100)\
    \ \n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    for (long i = 0; i < k; i++)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n     \
    \   {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(idx, val; arr)\n    {\n        if(idx < k)\n        {\n\
    \            if(val < 100)\n            {\n                sum += val;\n     \
    \       }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n     \
    \   {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ result = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n     \
    \   {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        // if the number is less than\
    \ 100, add it to the sum\n        if(arr[i] < 100)\n        {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    foreach(e; arr)\n    {\n        if(i >= k)\n\
    \            break;\n        if(e < 100)\n            sum += e;\n        i++;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k) {\n        if (arr[i] < 100) {\n\
    \            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(idx, val; arr)\n    {\n        if(idx == k)\n        \
    \    break;\n        if(val < 100)\n            sum += val;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k) {\n        long num = arr[i];\n\
    \        if (num < 100) {\n            sum += num;\n        }\n        i++;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    while (i < k)\n    {\n        if (arr[i] < 100)\n\
    \        {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n      \
    \  Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of\
    \ 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <=\
    \ k <= len(arr)\n    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
