name: HumanEval_20_find_closest_elements
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    float min = float.max;\n    float first = 0.0;\n    float second\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                first = numbers[i];\n                second = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(first, second);\n}", "{\n \
    \   float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n   \
    \ for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = float.max;\n    float min_1 = 0.0;\n    float min_2 = 0.0;\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    min_1 = number;\n                 \
    \   min_2 = number2;\n                }\n            }\n        }\n    }\n   \
    \ return tuple(min_1, min_2);\n}", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                result = tuple(numbers[i], numbers[j]);\n            }\n    \
    \    }\n    }\n    return result;\n}\n/*\n    Given a list of numbers (of length\
    \ at least two) return the two numbers that are furthest apart from each\n   \
    \ other.\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n   \
    \ (1.0, 5.0)\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    (1.0, 5.0)\n*/\nTuple!(float, float) find_furthest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float max_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff > max_diff) \n            {\n         \
    \       max_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n    Given a list\
    \ of numbers (of length at least two) return the two numbers that are closest\
    \ to", "{\n    float min_diff = float.infinity;\n    float min_a = 0;\n    float\
    \ min_b = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n  \
    \  float min_diff = numbers[1] - numbers[0];\n    float min_diff_index = 0;\n\
    \    for (int i = 1; i < numbers.length - 1; i++)\n    {\n        float diff =\
    \ numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\n        {\n    \
    \        min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n\
    \    return tuple(numbers[min_diff_index], numbers[min_diff_index + 1]);\n}",
  "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length >= 2);\n \
    \   float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) result\
    \ = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                result = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float\
    \ min = float.infinity;\n    float a = 0.0;\n    float b = 0.0;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float[] result = new float[2];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                result[0] = numbers[i];\n\
    \                result[1] = numbers[j];\n            }\n        }\n    }\n  \
    \  return tuple(result[0], result[1]);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (size_t i = 0; i < numbers.length; i++)\n\
    \    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n        {\n \
    \           float diff = abs(numbers[i] - numbers[j]);\n            if (diff <\
    \ min_diff)\n            {\n                min_diff = diff;\n               \
    \ min_a = numbers[i];\n                min_b = numbers[j];\n            }\n  \
    \      }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (size_t i = 0; i <\
    \ numbers.length; i++) \n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    result[0] = number;\n             \
    \       result[1] = number2;\n                }\n            }\n        }\n  \
    \  }\n    return tuple(result[0], result[1]);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = numbers[i-1];\n\
    \            max = numbers[i];\n        }\n        if (diff > max_diff)\n    \
    \    {\n            max_diff = diff;\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n  \
    \  float min_diff = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n\
    \    {\n        if(i == 0)\n            continue;\n        float diff = abs(number\
    \ - numbers[i-1]);\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = min(number, numbers[i-1]);\n            max = max(number,\
    \ numbers[i-1]);\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n      \
    \  if (diff > max_diff)\n        {\n            max_diff = diff;\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n    float b\
    \ = 0.0;\n    foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(x - y);\n                if(diff < min)\n                {\n         \
    \           min = diff;\n                    a = x;\n                    b = y;\n\
    \                }\n            }\n        }\n    }\n    return tuple(a, b);\n\
    }", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    foreach(i, number; numbers)\n    {\n        foreach(j,\
    \ other; numbers)\n        {\n            if(i != j)\n            {\n        \
    \        float diff = abs(number - other);\n                if(diff < min)\n \
    \               {\n                    min = diff;\n                    a = number;\n\
    \                    b = other;\n                }\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min_diff = float.infinity;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   a = numbers[i];\n                b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i, number;\
    \ numbers)\n    {\n        foreach(j, other; numbers)\n        {\n           \
    \ if(i != j)\n            {\n                float diff = abs(number - other);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = number;\n                    b = other;\n   \
    \             }\n            }\n        }\n    }\n    return tuple(a, b);\n}",
  "{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = n;\n                    result[1] = m;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff) \n            {\n          \
    \      minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }", "{\n    float[] sorted = numbers.dup;\n    sorted.sort;\n    float min = sorted[1]\
    \ - sorted[0];\n    float min1 = sorted[0];\n    float min2 = sorted[1];\n   \
    \ for (int i = 1; i < sorted.length - 1; i++)\n    {\n        float diff = sorted[i\
    \ + 1] - sorted[i];\n        if (diff < min)\n        {\n            min = diff;\n\
    \            min1 = sorted[i];\n            min2 = sorted[i + 1];\n        }\n\
    \    }\n    return tuple(min1, min2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          result = tuple(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_a = numbers[0];\n\
    \    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float first = numbers[0];\n    float second = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                first = numbers[i];\n                second = numbers[j];\n \
    \           }\n        }\n    }\n    return tuple(first, second);\n}", "{\n  \
    \  float min = float.max;\n    float min1 = float.max;\n    float min2 = float.max;\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n        {\n     \
    \       min1 = number;\n            continue;\n        }\n        if(i == 1)\n\
    \        {\n            min2 = number;\n            continue;\n        }\n   \
    \     float diff = abs(number - numbers[i-1]);\n        if(diff < min)\n     \
    \   {\n            min = diff;\n            min1 = numbers[i-1];\n           \
    \ min2 = number;\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n  \
    \  float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_distance = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ closest_elements = tuple(numbers[0], numbers[1]);\n    for (size_t i = 0; i\
    \ < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float distance = abs(numbers[i] - numbers[j]);\n\
    \            if (distance < min_distance) \n            {\n                min_distance\
    \ = distance;\n                closest_elements = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_elements;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    foreach(float num; numbers) \n    {\n        if (num < min)\
    \ \n        {\n            min = num;\n        }\n        if (num > max) \n  \
    \      {\n            max = num;\n        }\n        if (num != min) \n      \
    \  {\n            float diff = abs(num - min);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n            }\n        }\n\
    \    }\n    return tuple(min, min + min_diff);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n    float min1 =\
    \ numbers[0];\n    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff)\n            {\n                minDiff = diff;\n               \
    \ min1 = numbers[i];\n                min2 = numbers[j];\n            }\n    \
    \    }\n    }\n    return tuple(min1, min2);\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n\
    \            if (i != j)\n            {\n                float diff = abs(a -\
    \ b);\n                if (diff < min_diff)\n                {\n             \
    \       min_diff = diff;\n                    min_a = a;\n                   \
    \ min_b = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float\
    \ min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float minDiff = numbers[1] - numbers[0];\n \
    \   foreach(i, number; numbers)\n    {\n        if(number < min)\n        {\n\
    \            min = number;\n        }\n        if(number > max)\n        {\n \
    \           max = number;\n        }\n        if(i > 0)\n        {\n         \
    \   float diff = abs(number - numbers[i-1]);\n            if(diff < minDiff)\n\
    \            {\n                minDiff = diff;\n            }\n        }\n  \
    \  }\n    return tuple(min, max);\n}", "{\n    float min = float.max;\n    float\
    \ a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n        foreach(j,\
    \ y; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(x - y);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    a = x;\n          \
    \          b = y;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    foreach(i, number; numbers) \n    {\n        if (number <\
    \ min) \n        {\n            min = number;\n        }\n        if (number >\
    \ max) \n        {\n            max = number;\n        }\n        if (i > 0) \n\
    \        {\n            float diff = abs(number - numbers[i - 1]);\n         \
    \   if (diff < min_diff) \n            {\n                min_diff = diff;\n \
    \           }\n            if (diff > max_diff) \n            {\n            \
    \    max_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff =\
    \ float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n    foreach(i, a;\
    \ numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if (i\
    \ != j)\n            {\n                float diff = abs(a - b);\n           \
    \     if (diff < min_diff)\n                {\n                    min_diff =\
    \ diff;\n                    min_a = a;\n                    min_b = b;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n  \
    \  float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   a = numbers[i];\n                b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n    float[]\
    \ result = new float[2];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n  \
    \          {\n                min = diff;\n                result[0] = numbers[i];\n\
    \                result[1] = numbers[j];\n            }\n        }\n    }\n  \
    \  return tuple(result[0], result[1]);\n}", "{\n    float min = float.max;\n \
    \   float min_a = 0;\n    float min_b = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                min_a =\
    \ numbers[i];\n                min_b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(min_a, min_b);\n}", "{\n    float min = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n \
    \       foreach(j, y; numbers)\n        {\n            if(i != j)\n          \
    \  {\n                float diff = abs(x - y);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = x;\n\
    \                    b = y;\n                }\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}", "{\n    float[] sorted = numbers.dup;\n    sorted.sort;\n\
    \    float min = sorted[1] - sorted[0];\n    float min1 = sorted[0];\n    float\
    \ min2 = sorted[1];\n    for (int i = 1; i < sorted.length - 1; i++)\n    {\n\
    \        float diff = sorted[i + 1] - sorted[i];\n        if (diff < min)\n  \
    \      {\n            min = diff;\n            min1 = sorted[i];\n           \
    \ min2 = sorted[i + 1];\n        }\n    }\n    return tuple(min1, min2);\n}",
  "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n \
    \   float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ if (abs(numbers[i] - numbers[j]) < min)\n            {\n                min\
    \ = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n         \
    \       b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float[] sorted = numbers.dup;\n    sorted.sort;\n\
    \    float minDiff = sorted[1] - sorted[0];\n    float min1 = sorted[0];\n   \
    \ float min2 = sorted[1];\n    for (int i = 1; i < sorted.length - 1; i++)\n \
    \   {\n        float diff = sorted[i + 1] - sorted[i];\n        if (diff < minDiff)\n\
    \        {\n            minDiff = diff;\n            min1 = sorted[i];\n     \
    \       min2 = sorted[i + 1];\n        }\n    }\n    return tuple(min1, min2);\n\
    }", "{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff =\
    \ float.infinity;\n    float min_diff_first = 0.0;\n    float min_diff_second\
    \ = 0.0;\n    foreach(i, number; numbers)\n    {\n        if(i == 0)\n       \
    \     continue;\n        float diff = abs(number - numbers[i-1]);\n        if(diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_first\
    \ = numbers[i-1];\n            min_diff_second = number;\n        }\n    }\n \
    \   return tuple(min_diff_first, min_diff_second);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, num; numbers)\n    {\n        if(num < min)\n        {\n     \
    \       min = num;\n        }\n        if(num > max)\n        {\n            max\
    \ = num;\n        }\n        if(i > 0)\n        {\n            float diff = abs(num\
    \ - numbers[i-1]);\n            if(diff < min_diff)\n            {\n         \
    \       min_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min = float.max;\n    float[] result = new float[2];\n\
    \    foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(n - m);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    result[0] = n;\n                    result[1] = m;\n\
    \                }\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    // TODO: implement this function\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float temp = abs(number\
    \ - number2);\n                if(temp < min)\n                {\n           \
    \         min = temp;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = numbers[j]\
    \ - numbers[i];\n            if (diff < min_diff)\n            {\n           \
    \     min_diff = diff;\n                min = numbers[i];\n                max\
    \ = numbers[j];\n            }\n            if (diff > max_diff)\n           \
    \ {\n                max_diff = diff;\n                min = numbers[i];\n   \
    \             max = numbers[j];\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min_diff = float.max;\n    float min_diff_a = 0.0;\n\
    \    float min_diff_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_diff_a =\
    \ numbers[i];\n                min_diff_b = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\
    \ \n            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                first = numbers[i];\n                second = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(first, second);\n}", "{\n \
    \   float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float diff = numbers[0] - numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < diff)\n            {\n                diff = abs(numbers[i] - numbers[j]);\n\
    \                min = numbers[i];\n                max = numbers[j];\n      \
    \      }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n    float diff;\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (i <\
    \ numbers.length - 1)\n        {\n            diff = numbers[i + 1] - numbers[i];\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n            if (diff > max_diff)\n            {\n            \
    \    max_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min_diff = float.infinity;\n    float min_diff_a =\
    \ 0;\n    float min_diff_b = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j,\
    \ b; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(a - b);\n                if(diff < min_diff)\n         \
    \       {\n                    min_diff = diff;\n                    min_diff_a\
    \ = a;\n                    min_diff_b = b;\n                }\n            }\n\
    \        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min_diff\
    \ = float.infinity;\n    float min_a = 0.0;\n    float min_b = 0.0;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min = numbers[i];\n                max = numbers[j];\n            }\n    \
    \    }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_a\
    \ = numbers[0];\n    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length\
    \ - 1; i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n \
    \       {\n            float diff = abs(numbers[i] - numbers[j]);\n          \
    \  if (diff < min_diff) \n            {\n                min_diff = diff;\n  \
    \              min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    float min = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach(a; numbers)\n    {\n        foreach(b; numbers)\n        {\n    \
    \        if(a != b)\n            {\n                float diff = abs(a - b);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min_a = a;\n                    min_b = b;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min = float.max;\n    float min_a = 0.0;\n    float min_b =\
    \ 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n  \
    \  assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float\
    \ min = numbers[0] - numbers[1];\n    float min1 = numbers[0];\n    float min2\
    \ = numbers[1];\n    foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(n - m);\n                if(diff < min)\n                {\n         \
    \           min = diff;\n                    min1 = n;\n                    min2\
    \ = m;\n                }\n            }\n        }\n    }\n    return tuple(min1,\
    \ min2);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    float min_diff_index = 0;\n    foreach(i, number; numbers)\n\
    \    {\n        if(i > 0)\n        {\n            float diff = abs(number - numbers[i-1]);\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_index = i-1;\n            }\n        }\n    }\n    return\
    \ tuple(numbers[min_diff_index], numbers[min_diff_index+1]);\n}", "{\n    float[]\
    \ sorted = numbers.dup;\n    sorted.sort;\n    float min = sorted[1] - sorted[0];\n\
    \    float min1 = sorted[0];\n    float min2 = sorted[1];\n    for (int i = 1;\
    \ i < sorted.length - 1; i++)\n    {\n        float diff = sorted[i + 1] - sorted[i];\n\
    \        if (diff < min)\n        {\n            min = diff;\n            min1\
    \ = sorted[i];\n            min2 = sorted[i + 1];\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n    float\
    \ min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ foreach(float i; numbers)\n    {\n        if(i < min)\n        {\n         \
    \   min = i;\n        }\n        if(i > max)\n        {\n            max = i;\n\
    \        }\n        if(i != min && i != max)\n        {\n            float diff\
    \ = abs(i - min);\n            if(diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ min + min_diff);\n}", "{\n    float min = std.math.fabs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = std.math.fabs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min_diff = 1.0e10;\n    float min_diff_a = 0.0;\n   \
    \ float min_diff_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j,\
    \ b; numbers)\n        {\n            if (i == j) continue;\n            float\
    \ diff = abs(a - b);\n            if (diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_diff_a = a;\n               \
    \ min_diff_b = b;\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    for (size_t i = 1; i < numbers.length; i++)\n    {\n    \
    \    float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i - 1];\n\
    \            max = numbers[i];\n        }\n        if (diff > max_diff)\n    \
    \    {\n            max_diff = diff;\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first = numbers[i];\n               \
    \ second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}", "{\n    float min = float.max;\n    float[] result = new float[2];\n\
    \    foreach(i, v; numbers)\n    {\n        foreach(j, w; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(v - w);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    result[0] = v;\n                    result[1] = w;\n\
    \                }\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    foreach(i, number; numbers)\n    {\n        foreach(j,\
    \ number2; numbers)\n        {\n            if(i != j)\n            {\n      \
    \          float diff = abs(number - number2);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = number;\n\
    \                    b = number2;\n                }\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n    float\
    \ a = 0.0;\n    float b = 0.0;\n    foreach(i, v; numbers)\n    {\n        foreach(j,\
    \ w; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(v - w);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    a = v;\n          \
    \          b = w;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0]\
    \ - numbers[1];\n    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min)\n            {\n                min = distance;\n                a =\
    \ numbers[i];\n                b = numbers[j];\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n    float a\
    \ = 0;\n    float b = 0;\n    foreach(i, number; numbers)\n    {\n        foreach(j,\
    \ number2; numbers)\n        {\n            if(i != j)\n            {\n      \
    \          float diff = abs(number - number2);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = number;\n\
    \                    b = number2;\n                }\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n  \
    \  float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float,\
    \ float) result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   result = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    float min = float.max;\n    float[] result =\
    \ new float[2];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n            {\n\
    \                min = diff;\n                result[0] = numbers[i];\n      \
    \          result[1] = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(result[0], result[1]);\n}", "{\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float closest_1 = numbers[0];\n    float closest_2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_1 = numbers[i];\n           \
    \     closest_2 = numbers[j];\n            }\n        }\n    }\n    return tuple(closest_1,\
    \ closest_2);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                first = numbers[i];\n                second = numbers[j];\n \
    \           }\n        }\n    }\n    return tuple(first, second);\n}", "{\n  \
    \  assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(float i; numbers)\n    {\n        if(i < min)\n        {\n      \
    \      min = i;\n        }\n        if(i > max)\n        {\n            max =\
    \ i;\n        }\n    }\n    foreach(float i; numbers)\n    {\n        if(abs(i\
    \ - min) < min_diff)\n        {\n            min_diff = abs(i - min);\n      \
    \  }\n        if(abs(i - max) < max_diff)\n        {\n            max_diff = abs(i\
    \ - max);\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min\
    \ = float.max;\n    float[] result;\n    foreach(i, number; numbers)\n    {\n\
    \        foreach(j, other; numbers)\n        {\n            if(i != j)\n     \
    \       {\n                float diff = abs(number - other);\n               \
    \ if(diff < min)\n                {\n                    min = diff;\n       \
    \             result = [number, other];\n                }\n            }\n  \
    \      }\n    }\n    return tuple(result[0], result[1]);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         min_a = numbers[i];\n                min_b = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length - 1; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_distance\
    \ = abs(numbers[0] - numbers[1]);\n    float min_distance_element1 = numbers[0];\n\
    \    float min_distance_element2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float distance = abs(numbers[i] - numbers[j]);\n           \
    \ if (distance < min_distance) \n            {\n                min_distance =\
    \ distance;\n                min_distance_element1 = numbers[i];\n           \
    \     min_distance_element2 = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(min_distance_element1, min_distance_element2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n;\
    \ numbers)\n    {\n        if(n < min)\n            min = n;\n        if(n > max)\n\
    \            max = n;\n    }\n    float min_diff = max - min;\n    float min_a\
    \ = min;\n    float min_b = max;\n    foreach(a; numbers)\n    {\n        foreach(b;\
    \ numbers)\n        {\n            if(a != b)\n            {\n               \
    \ float diff = abs(a - b);\n                if(diff < min_diff)\n            \
    \    {\n                    min_diff = diff;\n                    min_a = a;\n\
    \                    min_b = b;\n                }\n            }\n        }\n\
    \    }\n    return tuple(min_a, min_b);\n}", "{\n    float min_diff = float.max;\n\
    \    float min_diff_a = 0.0;\n    float min_diff_b = 0.0;\n    for (size_t i =\
    \ 0; i < numbers.length; i++)\n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}",
  "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min) \n            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n \
    \   float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) \n    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n        if (i < numbers.length - 1) \n        {\n            float\
    \ diff = numbers[i + 1] - numbers[i];\n            if (diff < min_diff) \n   \
    \         {\n                min_diff = diff;\n            }\n            if (diff\
    \ > max_diff) \n            {\n                max_diff = diff;\n            }\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min = float.max;\n\
    \    float a = 0;\n    float b = 0;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n    float min_b\
    \ = numbers[1];\n    for (size_t i = 0; i < numbers.length; i++) \n    {\n   \
    \     for (size_t j = i + 1; j < numbers.length; j++) \n        {\n          \
    \  float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = x;\n                    b = y;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min =\
    \ float.max;\n    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min) \n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                num1 = numbers[i];\n                num2 = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(num1, num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ diff = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float temp = abs(numbers[i] - numbers[j]);\n            if (temp\
    \ < diff)\n            {\n                diff = temp;\n                min =\
    \ numbers[i];\n                max = numbers[j];\n            }\n        }\n \
    \   }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff = float.infinity;\n\
    \    float min_a = 0.0, min_b = 0.0;\n    foreach (a; numbers)\n    {\n      \
    \  foreach (b; numbers)\n        {\n            if (a == b)\n                continue;\n\
    \            float diff = abs(a - b);\n            if (diff < min_diff)\n    \
    \        {\n                min_diff = diff;\n                min_a = a;\n   \
    \             min_b = b;\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n        {\n            min = number;\n        }\n        if(number\
    \ > max)\n        {\n            max = number;\n        }\n    }\n    float min_diff\
    \ = max - min;\n    float min_num = min;\n    float max_num = max;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for(int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num = min(numbers[i], numbers[j]);\n                max_num\
    \ = max(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ tuple(min_num, max_num);\n}", "{\n    float min = float.max;\n    float min1\
    \ = 0.0;\n    float min2 = 0.0;\n    foreach(i, number1; numbers)\n    {\n   \
    \     foreach(j, number2; numbers)\n        {\n            if (i != j)\n     \
    \       {\n                float diff = abs(number1 - number2);\n            \
    \    if (diff < min)\n                {\n                    min = diff;\n   \
    \                 min1 = number1;\n                    min2 = number2;\n     \
    \           }\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}", "{\n    float\
    \ min_diff = float.max;\n    float min_diff_a = 0.0;\n    float min_diff_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float\
    \ a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min)\n            {\n        \
    \        min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float minDiff =\
    \ abs(numbers[0] - numbers[1]);\n    float min1 = numbers[0];\n    float min2\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) \n   \
    \         {\n                minDiff = diff;\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    float min = float.max;\n    float a = 0;\n \
    \   float b = 0;\n    foreach(i, number; numbers)\n    {\n        foreach(j, number2;\
    \ numbers)\n        {\n            if(i != j)\n            {\n               \
    \ float diff = abs(number - number2);\n                if(diff < min)\n      \
    \          {\n                    min = diff;\n                    a = number;\n\
    \                    b = number2;\n                }\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    float min = float.max;\n    float[]\
    \ closest = new float[2];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n  \
    \          {\n                min = diff;\n                closest[0] = numbers[i];\n\
    \                closest[1] = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(closest[0], closest[1]);\n}", "{\n    assert(numbers.length >=\
    \ 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ smallestDiff = float.max;\n    float first = 0.0;\n    float second = 0.0;\n\
    \    foreach(i, number; numbers)\n    {\n        if(i < numbers.length - 1)\n\
    \        {\n            float currentDiff = abs(number - numbers[i + 1]);\n  \
    \          if(currentDiff < smallestDiff)\n            {\n                smallestDiff\
    \ = currentDiff;\n                first = number;\n                second = numbers[i\
    \ + 1];\n            }\n        }\n    }\n    return tuple(first, second);\n}",
  "{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n \
    \       foreach(j, y; numbers)\n        {\n            if(i != j)\n          \
    \  {\n                float diff = abs(x - y);\n                if(diff < min_diff)\n\
    \                {\n                    min_diff = diff;\n                   \
    \ a = x;\n                    b = y;\n                }\n            }\n     \
    \   }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    foreach(i, a; numbers[0 .. $ - 1])\n    {\n\
    \        float b = numbers[i + 1];\n        float diff = abs(a - b);\n       \
    \ if (diff < min_diff)\n        {\n            min_diff = diff;\n            min_a\
    \ = a;\n            min_b = b;\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }", "{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n \
    \       foreach(j, y; numbers)\n        {\n            if(i != j)\n          \
    \  {\n                float diff = abs(x - y);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = x;\n\
    \                    b = y;\n                }\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x;\
    \ numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = x;\n                    b = y;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = numbers[i-1];\n\
    \            max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float diff = numbers[0]\
    \ - numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ if (numbers[i] < min)\n        {\n            min = numbers[i];\n        }\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (abs(numbers[i] - numbers[i+1]) < diff)\n        {\n     \
    \       diff = abs(numbers[i] - numbers[i+1]);\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n    float b =\
    \ 0.0;\n    foreach(i, val; numbers)\n    {\n        foreach(j, val2; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(val - val2);\n                if(diff < min)\n                {\n    \
    \                min = diff;\n                    a = val;\n                 \
    \   b = val2;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          min_a = numbers[i];\n                min_b = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    foreach(i, number; numbers)\n    {\n        foreach(j, number2; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(number - number2);\n                if(diff < min)\n                {\n\
    \                    min = diff;\n                    a = number;\n          \
    \          b = number2;\n                }\n            }\n        }\n    }\n\
    \    return tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_num1 = numbers[0];\n\
    \    float min_diff_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_num1 = numbers[i];\n                min_diff_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_num1, min_diff_num2);\n\
    }", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float diff = numbers[0]\
    \ - numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ temp = numbers[i] - numbers[j];\n            if (abs(temp) < abs(diff)) \n \
    \           {\n                diff = temp;\n                min = numbers[i];\n\
    \                max = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    float min = float.max;\n    float min_a = 0.0;\n\
    \    float min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j,\
    \ b; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(a - b);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    min_a = a;\n      \
    \              min_b = b;\n                }\n            }\n        }\n    }\n\
    \    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n \
    \   float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) result\
    \ = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                result = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_diff_1 = numbers[0];\n    float min_diff_2 = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_1 = numbers[i];\n         \
    \       min_diff_2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_1, min_diff_2);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    for (int i = 0; i < numbers.length; i++) \n    {\n     \
    \   for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) \n  \
    \          {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ > 1);\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float minDiff = float.max;\n    float min1 = 0.0;\n\
    \    float min2 = 0.0;\n    foreach(i, number; numbers)\n    {\n        if(i ==\
    \ 0)\n            continue;\n        float diff = abs(number - numbers[i-1]);\n\
    \        if(diff < minDiff)\n        {\n            minDiff = diff;\n        \
    \    min1 = numbers[i-1];\n            min2 = number;\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    auto min = numbers[0];\n    auto max = numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(number < min)\n          \
    \  min = number;\n        if(number > max)\n            max = number;\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    foreach(i, number; numbers)\n\
    \    {\n        if(number < min)\n        {\n            min = number;\n     \
    \   }\n        if(number > max)\n        {\n            max = number;\n      \
    \  }\n    }\n    float min_diff = max - min;\n    float min_num = min;\n    float\
    \ max_num = max;\n    foreach(i, number; numbers)\n    {\n        foreach(j, other_number;\
    \ numbers)\n        {\n            if(i != j)\n            {\n               \
    \ float diff = abs(number - other_number);\n                if(diff < min_diff)\n\
    \                {\n                    min_diff = diff;\n                   \
    \ min_num = min(number, other_number);\n                    max_num = max(number,\
    \ other_number);\n                }\n            }\n        }\n    }\n    return\
    \ tuple(min_num, max_num);\n}", "{\n    float minDiff = abs(numbers[0] - numbers[1]);\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[1];\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < minDiff)\n            {\n                minDiff = diff;\n\
    \                min1 = numbers[i];\n                min2 = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min) \n       \
    \     {\n                min = diff;\n                a = numbers[i];\n      \
    \          b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n\
    \        if(i == 0)\n            continue;\n        float diff = number - numbers[i-1];\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min = numbers[i-1];\n            max = number;\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    float min_diff_a = numbers[0];\n    float\
    \ min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_diff_a =\
    \ numbers[i];\n                min_diff_b = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    float min_diff\
    \ = float.infinity;\n    float min_num1 = 0;\n    float min_num2 = 0;\n    foreach(i,\
    \ num1; numbers)\n    {\n        foreach(j, num2; numbers)\n        {\n      \
    \      if(i != j)\n            {\n                float diff = abs(num1 - num2);\n\
    \                if(diff < min_diff)\n                {\n                    min_diff\
    \ = diff;\n                    min_num1 = num1;\n                    min_num2\
    \ = num2;\n                }\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    auto min = numbers[0];\n    auto max = numbers[0];\n\
    \    foreach(n; numbers)\n    {\n        if(n < min)\n            min = n;\n \
    \       if(n > max)\n            max = n;\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n;\
    \ numbers)\n    {\n        if(n < min)\n            min = n;\n        if(n > max)\n\
    \            max = n;\n    }\n    float min_diff = max - min;\n    float min_a\
    \ = min;\n    float min_b = max;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        for(int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   a = numbers[i];\n                b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(float\
    \ n; numbers)\n    {\n        if(n < min)\n        {\n            min = n;\n \
    \       }\n        if(n > max)\n        {\n            max = n;\n        }\n \
    \       if(numbers.length > 1)\n        {\n            foreach(float m; numbers)\n\
    \            {\n                if(m != n)\n                {\n              \
    \      float diff = abs(m - n);\n                    if(diff < min_diff)\n   \
    \                 {\n                        min_diff = diff;\n              \
    \          min = min(n, m);\n                        max = max(n, m);\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    float min_diff = float.max;\n    float min_diff_a\
    \ = 0;\n    float min_diff_b = 0;\n    for (int i = 0; i < numbers.length - 1;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n     \
    \       }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n\
    \    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n  \
    \  float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n  \
    \          {\n                min = diff;\n                a = numbers[i];\n \
    \               b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = float.max;\n    float[] result = new float[2];\n\
    \    foreach(i, v; numbers)\n    {\n        foreach(j, w; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(v - w);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    result[0] = v;\n                    result[1] = w;\n\
    \                }\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float,\
    \ float) result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                result =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min = min(numbers[i], numbers[j]);\n\
    \                max = max(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ closest_pair = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    closest_pair = tuple(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return closest_pair;\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float\
    \ a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min)\n            {\n        \
    \        min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    int min_index = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                min_index\
    \ = i;\n            }\n        }\n    }\n    return tuple(numbers[min_index],\
    \ numbers[min_index + 1]);\n}", "{\n    float min_diff = float.max;\n    float\
    \ min_a = 0.0;\n    float min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n  \
    \      foreach(j, b; numbers)\n        {\n            if (i != j)\n          \
    \  {\n                float diff = abs(a - b);\n                if (diff < min_diff)\n\
    \                {\n                    min_diff = diff;\n                   \
    \ min_a = a;\n                    min_b = b;\n                }\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n    Tuple!(float,\
    \ float) result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff)\n            {\n                minDiff = diff;\n               \
    \ result = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n \
    \   return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
