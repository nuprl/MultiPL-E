name: HumanEval_78_hex_key
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
  \ a function that receives \n    a hexadecimal number as a string and counts the\
  \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
  \ is a natural number \n    greater than 1 that is not a product of two smaller\
  \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
  \ B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
  \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11),\
  \ D (=decimal 13).\n    Note: you may assume the input is always correct or empty\
  \ string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n \
  \   For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output\
  \ should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num\
  \ = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output\
  \ should be 2.\n    \n*/\nlong hex_key(string num) \n"
tests: "unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
  ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
  ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
  ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
  }\nvoid main(){}"
completions: ["{\n    long result = 0;\n    foreach(i, c; num)\n    {\n        result\
    \ += (c - '0') * pow(16, num.length - i - 1);\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ char c; num)\n    {\n        result += c;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ += c;\n    }\n    return result;\n}", "{\n    long count = 0;\n    long[] primes\
    \ = [2,3,5,7,11,13];\n    foreach(char c; num)\n    {\n        long key = c.to!long(16);\n\
    \        if(primes.canFind(key))\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, c; num) \n    {\n        long v = 0;\n        if(c >= '0'\
    \ && c <= '9')\n            v = c - '0';\n        else if(c >= 'A' && c <= 'F')\n\
    \            v = c - 'A' + 10;\n        result = result * 16 + v;\n    }\n   \
    \ return result;\n}", "{\n    long result = 0;\n    long[] primes = [2, 3, 5,\
    \ 7, 11, 13];\n    foreach(char c; num)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            result += primes[c - '0'];\n        }\n        else if(c\
    \ >= 'A' && c <= 'F')\n        {\n            result += primes[c - 'A' + 10];\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += (c >=\
    \ 'A') ? (c - 'A' + 10) : (c - '0');\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'D' || c == 'E')\n            result++;\n        else if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7')\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' ||\
    \ c == 'E')\n            result++;\n        else if(c == '2' || c == '3' || c\
    \ == '5' || c == '7')\n            result++;\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n           \
    \ result++;\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n \
    \           result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' ||\
    \ c == 'E')\n            result++;\n        else if(c == '2' || c == '3' || c\
    \ == '5' || c == '7')\n            result++;\n    }\n    return result;\n}", "{\n\
    \    long key = 0;\n    foreach(char c; num)\n    {\n        key = key * 16 +\
    \ c;\n    }\n    return key;\n}", "{\n    long count = 0;\n    foreach(char c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n \
    \   long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c >= 'A'\
    \ ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' ||\
    \ c == 'E')\n            result++;\n        else if(c == '2' || c == '3' || c\
    \ == '5' || c == '7')\n            result++;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        if(c\
    \ >= 'A' && c <= 'F')\n            result += 1 << (c - 'A' + 10);\n        else\n\
    \            result += 1 << (c - '0');\n    }\n    return result;\n}", "{\n  \
    \  long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c;\
    \ num)\n    {\n        if(c >= 'A' && c <= 'F')\n        {\n            if(c ==\
    \ 'A')\n            {\n                if(primes.canFind(10))\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \     else if(c == 'B')\n            {\n                if(primes.canFind(11))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'C')\n            {\n                if(primes.canFind(12))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'D')\n            {\n                if(primes.canFind(13))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'E')\n            {\n                if(primes.canFind(14))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'F')\n            {\n                if(primes.canFind(15))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        else\n        {\n            if(primes.canFind(to!long(c)))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long res = 0;\n    foreach(i, c; num)\n    {\n \
    \       res += (c >= 'A' ? c - 'A' + 10 : c - '0') * pow(16, i);\n    }\n    return\
    \ res;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n       \
    \ if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n \
    \           count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n     \
    \   if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        result += c;\n    }\n    return result;\n\
    }", "{\n    long key = 0;\n    foreach(immutable char c; num)\n    {\n       \
    \ key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n\
    }", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A'\
    \ || c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else if(c\
    \ == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    foreach(immutable c; num)\n\
    \    {\n        result += c;\n    }\n    return result;\n}", "{\n    long key\
    \ = 0;\n    foreach(immutable c; num)\n    {\n        key = (key << 4) | (c <=\
    \ '9' ? c - '0' : c - 'A' + 10);\n    }\n    return key;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(c;\
    \ num)\n    {\n        result += c;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'D' || c == 'E')\n            result++;\n        else if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7')\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(i; num)\n    {\n        if(i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long[] hex_keys = [0,1,2,3,4,5,6,7,8,9,11,13,17,19,23,29];\n\
    \    foreach(char c; num)\n    {\n        result += hex_keys[c - '0'];\n    }\n\
    \    return result;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(immutable char c; num)\n    {\n        result\
    \ = result * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n        result +=\
    \ c;\n    }\n    return result;\n}", "{\n    long res = 0;\n    foreach(i, c;\
    \ num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n    \
    \        res++;\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n\
    \            res++;\n    }\n    return res;\n}", "{\n    long result = 0;\n  \
    \  long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(i; 0 .. num.length)\n  \
    \  {\n        long key = num[i];\n        if(key >= 'A')\n            key -= 'A'\
    \ - 10;\n        else\n            key -= '0';\n        if(key in primes)\n  \
    \          result++;\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c\
    \ == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        switch(c)\n        {\n            case 'A':\n      \
    \      case 'B':\n            case 'D':\n            case 'E':\n            case\
    \ 'F':\n                result++;\n                break;\n            default:\n\
    \                if(c.to!long > 1 && isPrime(c.to!long))\n                   \
    \ result++;\n                break;\n        }\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    foreach(char c; num)\n    {\n        result += (c\
    \ - '0') * pow(16, num.length - 1);\n        num = num[1 .. $];\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long n = num.length;\n    foreach(i,\
    \ c; num)\n    {\n        long key = 0;\n        if(c >= '0' && c <= '9')\n  \
    \          key = c - '0';\n        else if(c >= 'A' && c <= 'F')\n           \
    \ key = c - 'A' + 10;\n        result += key * pow(16, n - i - 1);\n    }\n  \
    \  return result;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n \
    \       switch(c)\n        {\n            case '2':\n            case '3':\n \
    \           case '5':\n            case '7':\n            case 'B':\n        \
    \    case 'D':\n                count++;\n                break;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    foreach(immutable c; num)\n    {\n        result += c;\n  \
    \  }\n    return result;\n}", "{\n    long key = 0;\n    foreach(immutable char\
    \ c; num)\n    {\n        key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n\
    \    }\n    return key;\n}", "{\n    long key = 0;\n    foreach(char c; num)\n\
    \    {\n        switch(c)\n        {\n            case 'A':\n                key\
    \ += 10;\n                break;\n            case 'B':\n                key +=\
    \ 11;\n                break;\n            case 'C':\n                key += 12;\n\
    \                break;\n            case 'D':\n                key += 13;\n \
    \               break;\n            case 'E':\n                key += 14;\n  \
    \              break;\n            case 'F':\n                key += 15;\n   \
    \             break;\n            default:\n                key += c - '0';\n\
    \                break;\n        }\n    }\n    return key;\n}", "{\n    long result\
    \ = 0;\n    long i = 0;\n    long len = num.length;\n    long n = 0;\n    long\
    \ m = 0;\n    long k = 0;\n    long l = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long j = 0;\n\
    \    long o = 0;\n    long[] arr = new long[len];\n    long[] arr1 = new long[len];\n\
    \    long[] arr2 = new long[len];\n    long[] arr3 = new long[len];\n    long[]\
    \ arr4 = new long[len];\n    long[] arr5 = new long[len];\n    long[] arr6 = new\
    \ long[len];\n    long[] arr7 = new long[len];\n    long[] arr8 = new long[len];\n\
    \    long[] arr9 = new long[len];\n    long[] arr10 = new long[len];\n    long[]\
    \ arr11 = new long[len];\n    long[] arr12 = new long[len];\n    long[] arr13\
    \ = new long[len];\n    long[] arr14 = new long[len];\n    long[] arr15 = new\
    \ long[len];\n    long[] arr16 = new long[len];\n    long[] arr17 = new long[len];\n\
    \    long[] arr18 = new long[len];\n    long[] arr19 = new long[len];\n    long[]\
    \ arr20 = new long[len];\n    long[] arr21 = new long[len];\n    long[] arr22\
    \ = new long[len];\n    long[] arr23 = new long[len];\n    long[] arr24 = new\
    \ long[len];\n    long[] arr25 = new long[len];\n", "{\n    long result = 0;\n\
    \    foreach(immutable char c; num)\n    {\n        result += c;\n    }\n    return\
    \ result;\n}", "{\n    long key = 0;\n    foreach(immutable c; num)\n    {\n \
    \       key = key * 16 + c;\n    }\n    return key;\n}", "{\n    long count =\
    \ 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c ==\
    \ '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n      \
    \  if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n \
    \       else if(c == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long key = 0;\n    foreach(immutable char\
    \ c; num)\n    {\n        key += c;\n    }\n    return key;\n}", "{\n    long\
    \ count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c; num)\n\
    \    {\n        if(c >= 'A' && c <= 'F')\n        {\n            if(c == 'A')\n\
    \            {\n                if(primes.canFind(10))\n                {\n  \
    \                  count++;\n                }\n            }\n            else\
    \ if(c == 'B')\n            {\n                if(primes.canFind(11))\n      \
    \          {\n                    count++;\n                }\n            }\n\
    \            else if(c == 'C')\n            {\n                if(primes.canFind(12))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'D')\n            {\n                if(primes.canFind(13))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'E')\n            {\n                if(primes.canFind(14))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n            else if(c == 'F')\n            {\n                if(primes.canFind(15))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        else\n        {\n            if(primes.canFind(to!long(c)))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n\
    \        result += (c - '0') * pow(16, num.length - i - 1);\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(immutable char c; num)\n    {\n        if(c == '2' || c == '3' ||\
    \ c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n      \
    \  result += (c - '0') * pow(16, num.length - i - 1);\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(immutable char c; num)\n    {\n    \
    \    result = result * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long key = 0;\n \
    \   foreach(char c; num)\n    {\n        key += c;\n    }\n    return key;\n}",
  "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n      \
    \  if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n\
    \        {\n            result++;\n        }\n        else if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7')\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7'\
    \ || c == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n   \
    \ {\n        result += (c >= 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length\
    \ - i - 1);\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(immutable c; num)\n    {\n        result += (c >= 'A'\
    \ && c <= 'F') ? c - 'A' + 10 : c - '0';\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long[] hex_key = [2, 3, 5, 7, 11, 13];\n    foreach(i;\
    \ 0 .. num.length)\n    {\n        if(num[i] >= 'A' && num[i] <= 'F')\n      \
    \  {\n            result += hex_key[num[i] - 'A' + 10];\n        }\n        else\
    \ if(num[i] >= '0' && num[i] <= '9')\n        {\n            result += hex_key[num[i]\
    \ - '0'];\n        }\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        result += (c - '0') * pow(16, num.length\
    \ - i - 1);\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ char c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n\
    \            result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'E' || c == 'F')\n        {\n            result++;\n      \
    \  }\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ key = 0;\n    foreach(immutable c; num)\n    {\n        key = key * 16 + (c\
    \ >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return key;\n}", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n            result++;\n\
    \        }\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c\
    \ == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n       \
    \     result++;\n        }\n        else if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n\
    \    {\n        if(num[i] in ['2','3','5','7','B','D'])\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(char c; num)\n    {\n        if(c >= '0' && c <= '9')\n         \
    \   result += c - '0';\n        else if(c >= 'A' && c <= 'F')\n            result\
    \ += c - 'A' + 10;\n    }\n    return result;\n}", "{\n    long count = 0;\n \
    \   foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' ||\
    \ c == '7' || c == 'B' || c == 'D')\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c-'0'\
    \ in primes)\n                count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'F')\n        {\n            if(c-'A'+10 in primes)\n                count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n            result += c -\
    \ '0';\n        else if(c >= 'A' && c <= 'F')\n            result += c - 'A' +\
    \ 10;\n    }\n    return result;\n}", "{\n    long count = 0;\n    long[] primes\
    \ = [2,3,5,7,11,13];\n    foreach(char c; num)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n        {\n            if(c - '0' in primes)\n                count++;\n\
    \        }\n        else if(c >= 'A' && c <= 'F')\n        {\n            if(c\
    \ - 'A' + 10 in primes)\n                count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long key = 0;\n    foreach(immutable c; num)\n    {\n  \
    \      key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n    }\n    return\
    \ key;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n   \
    \ }\n    return count;\n}", "{\n    long key = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            key = key * 16 + c - '0';\n\
    \        else if(c >= 'A' && c <= 'F')\n            key = key * 16 + c - 'A' +\
    \ 10;\n    }\n    return key;\n}", "{\n    long result = 0;\n    long hex_key\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c >= '0' && c <= '9')\n  \
    \      {\n            hex_key = c - '0';\n        }\n        else if(c >= 'A'\
    \ && c <= 'F')\n        {\n            hex_key = c - 'A' + 10;\n        }\n  \
    \      else\n        {\n            continue;\n        }\n        if(hex_key ==\
    \ 2 || hex_key == 3 || hex_key == 5 || hex_key == 7 || hex_key == 11 || hex_key\
    \ == 13)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A'\
    \ || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n  \
    \          result++;\n        }\n        else if(c == '2' || c == '3' || c ==\
    \ '5' || c == '7')\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    foreach(immutable char c; num)\n\
    \    {\n        if (c == 'A' || c == 'B' || c == 'D' || c == 'E')\n          \
    \  result++;\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c ==\
    \ 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n            result++;\n\
    \        }\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        result += (c >= 'A' && c <= 'F') ? c - 'A' + 10 : c\
    \ - '0';\n    }\n    return result;\n}", "{\n    long count = 0;\n    long[] primes\
    \ = [2,3,5,7,11,13];\n    foreach(char c; num)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n        {\n            if(c - '0' in primes)\n                count++;\n\
    \        }\n        else if(c >= 'A' && c <= 'F')\n        {\n            if(c\
    \ - 'A' + 10 in primes)\n                count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n      \
    \  if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n\
    \        {\n            result++;\n        }\n        else if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7')\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num) \n    {\n        result += (c >= 'A' ? c - 'A' + 10 : c - '0') * pow(16,\
    \ num.length - i - 1);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(i, c; num)\n    {\n        result += (c - '0') * pow(16, num.length\
    \ - i - 1);\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ char c; num)\n    {\n        if (c >= 'A')\n            result += 1 << (c -\
    \ 'A' + 10);\n        else\n            result += 1 << (c - '0');\n    }\n   \
    \ return result;\n}", "{\n    long result = 0;\n    long[] primes = [2, 3, 5,\
    \ 7, 11, 13];\n    foreach(i; 0 .. num.length)\n    {\n        if(num[i] >= 'A'\
    \ && num[i] <= 'F')\n        {\n            result += primes[num[i] - 'A' + 10];\n\
    \        }\n        else\n        {\n            result += primes[num[i] - '0'];\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(char\
    \ c; num)\n    {\n        result += c;\n    }\n    return result;\n}", "{\n  \
    \  long result = 0;\n    foreach(immutable c; num)\n    {\n        if(c == 'A'\
    \ || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n  \
    \          result++;\n        }\n    }\n    return result;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c >= '0' && c <= '9')\n       \
    \ {\n            if(c == '2' || c == '3' || c == '5' || c == '7')\n          \
    \      count++;\n        }\n        else if(c >= 'A' && c <= 'F')\n        {\n\
    \            if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n              \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(char c; num)\n    {\n        result += c;\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == 'A' || c == 'B' || c == 'D' || c == 'E')\n \
    \           result++;\n        else if(c == '2' || c == '3' || c == '5' || c ==\
    \ '7')\n            result++;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0') * pow(16, num.length\
    \ - i - 1);\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n            result += c -\
    \ '0';\n        else if(c >= 'A' && c <= 'F')\n            result += c - 'A' +\
    \ 10;\n    }\n    return result;\n}", "{\n    long res = 0;\n    foreach(i, c;\
    \ num)\n    {\n        res += (long)c;\n    }\n    return res;\n}", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0') * pow(16,\
    \ num.length - i - 1);\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    foreach(immutable c; num)\n    {\n        if(c == '2' || c == '3' || c ==\
    \ '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long key = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n\
    \    }\n    return key;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        result += (c - '0') * pow(16, num.length - i - 1);\n    }\n  \
    \  return result;\n}", "{\n    long key = 0;\n    foreach(immutable c; num)\n\
    \    {\n        key = key * 16 + c;\n    }\n    return key;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c; num)\n    {\n        result += (c >= 'A') ?\
    \ (c - 'A' + 10) : (c - '0');\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long hex_val = 0;\n    long hex_key = 0;\n    long hex_key_val = 0;\n\
    \    long hex_key_val_sum = 0;\n    long hex_key_val_sum_count = 0;\n    long\
    \ hex_key_val_sum_count_result = 0;\n    long hex_key_val_sum_count_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result = 0;\n    long hex_key_val_sum_count_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result = 0;\n\
    \    long hex_key_val_sum_count_result_result_result_result_result_result = 0;\n\
    \    long hex_key_val_sum_count_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = 0;\n    long hex_key_val_sum_count_result_result_result_result_result_result_result",
  "{\n    long count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            if(primes.canFind(c\
    \ - '0'))\n                count++;\n        }\n        else if(c >= 'A' && c\
    \ <= 'F')\n        {\n            if(primes.canFind(c - 'A' + 10))\n         \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num)\n    {\n        if (c == 'A' || c == 'B' || c == 'D' || c == 'E')\n\
    \            result++;\n        else if (c == '2' || c == '3' || c == '5' || c\
    \ == '7')\n            result++;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n    }\n\
    \    return result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n \
    \   {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n\
    \    {\n        if(num[i] in ['2','3','5','7','B','D'])\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i\
    \ == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F')\n        {\n            result++;\n        }\n        else\n     \
    \   {\n            long n = c.to!long;\n            if(n > 1 && isPrime(n))\n\
    \            {\n                result++;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    long result = 0;\n    foreach(char c; num)\n \
    \   {\n        result += c;\n    }\n    return result;\n}", "{\n    long count\
    \ = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num)\n    {\n        if (c == 'A' || c == 'B' || c == 'D' || c == 'E')\n\
    \            result++;\n        else if (c == '2' || c == '3' || c == '5' || c\
    \ == '7')\n            result++;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n  \
    \  {\n        result += (c == 'A' || c == 'B' || c == 'D' || c == 'E') ? 1 : 0;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        switch(c)\n        {\n            case '0':\n      \
    \      case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c - '0';\n\
    \                break;\n            case 'A':\n            case 'B':\n      \
    \      case 'C':\n            case 'D':\n            case 'E':\n            case\
    \ 'F':\n                result += c - 'A' + 10;\n                break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(i;\
    \ num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(immutable c; num)\n    {\n        result +=\
    \ (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F') ? 1 :\
    \ 0;\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        result += c;\n    }\n    return result;\n}", "{\n  \
    \  long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num)\n    {\n        result += c;\n    }\n    return result;\n}", "{\n  \
    \  long result = 0;\n    foreach(immutable char c; num)\n    {\n        if(c ==\
    \ 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n    }\n   \
    \ return result;\n}", "{\n    long result = 0;\n    foreach(immutable c; num)\n\
    \    {\n        result += c;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, c; num)\n    {\n        result += (c >= 'A' ? c - 'A' +\
    \ 10 : c - '0') * pow(16, num.length - i - 1);\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    long hex_key = 0;\n    long hex_value = 0;\n    long\
    \ hex_value_sum = 0;\n    long hex_value_sum_total = 0;\n    long hex_value_sum_total_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  \
    \  long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long\
    \ hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    long hex_value_sum_total_sum_sum_sum_sum_sum_sum_sum_sum", "{\n  \
    \  long result = 0;\n    foreach(i, c; num)\n    {\n        result += (c - '0')\
    \ * pow(16, num.length - i - 1);\n    }\n    return result;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n   \
    \ }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        if (c == 'A' || c == 'B' || c == 'D' || c == 'E')\n          \
    \  result++;\n        else if (c == 'C')\n            result += 2;\n        else\
    \ if (c == 'F')\n            result += 3;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13];\n    foreach(immutable\
    \ c; num)\n    {\n        if(c >= '0' && c <= '9')\n        {\n            result\
    \ += primes[c - '0'];\n        }\n        else if(c >= 'A' && c <= 'F')\n    \
    \    {\n            result += primes[c - 'A' + 10];\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long key = 0;\n    foreach(char c;\
    \ num)\n    {\n        if(c == 'A')\n            key = 10;\n        else if(c\
    \ == 'B')\n            key = 11;\n        else if(c == 'C')\n            key =\
    \ 12;\n        else if(c == 'D')\n            key = 13;\n        else if(c ==\
    \ 'E')\n            key = 14;\n        else if(c == 'F')\n            key = 15;\n\
    \        else\n            key = c - '0';\n        result = result * 16 + key;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(immutable\
    \ char c; num)\n    {\n        result += (c >= 'A') ? (c - 'A' + 10) : (c - '0');\n\
    \    }\n    return result;\n}", "{\n    long key = 0;\n    foreach(immutable char\
    \ c; num)\n    {\n        key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n\
    \    }\n    return key;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3' || i\
    \ == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; num)\n    {\n        result += (c == 'A' || c == 'B' || c == 'D' || c ==\
    \ 'E') ? 1 : 0;\n    }\n    return result;\n}", "{\n    long count = 0;\n    long[]\
    \ hex_primes = [2, 3, 5, 7, 11, 13];\n    foreach(char c; num)\n    {\n      \
    \  if(c in hex_primes)\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' ||\
    \ c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(immutable c; num)\n    {\n        if(c >= '0' && c <= '9')\n\
    \            result += c - '0';\n        else if(c >= 'A' && c <= 'F')\n     \
    \       result += c - 'A' + 10;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, c; num)\n    {\n        result += (c == 'A' || c == 'B'\
    \ || c == 'D' || c == 'E') ? 1 : 0;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'D' || c == 'E')\n            result++;\n        else if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7')\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n    {\n     \
    \   result += (c >= 'A' ? c - 'A' + 10 : c - '0') * pow(16, num.length - i - 1);\n\
    \    }\n    return result;\n}", "{\n    long res = 0;\n    foreach(i, c; num)\n\
    \    {\n        if (c == 'A' || c == 'B' || c == 'D' || c == 'E')\n          \
    \  res++;\n        else if (c == '2' || c == '3' || c == '5' || c == '7')\n  \
    \          res++;\n    }\n    return res;\n}", "{\n    long key = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        key = key * 16 + (c >= 'A' ? c - 'A' + 10 : c - '0');\n\
    \    }\n    return key;\n}", "{\n    long count = 0;\n    foreach(immutable char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n\
    \        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        long digit = 0;\n\
    \        if(c >= '0' && c <= '9')\n            digit = c - '0';\n        else\
    \ if(c >= 'A' && c <= 'F')\n            digit = c - 'A' + 10;\n        else\n\
    \            assert(0);\n        result += digit;\n        if(digit == 2 || digit\
    \ == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13)\n          \
    \  count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i,c;\
    \ num)\n    {\n        result += (c >= 'A') ? (c - 'A' + 10) : (c - '0');\n  \
    \      result *= 16;\n    }\n    return result / 16;\n}", "{\n    long result\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == 'A' || c == 'B' || c\
    \ == 'D' || c == 'E')\n            result++;\n        else if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7')\n            result++;\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n         \
    \   count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    long key = 0;\n    long hex_value = 0;\n    long hex_key_value\
    \ = 0;\n    long hex_key_value_2 = 0;\n    long hex_key_value_3 = 0;\n    long\
    \ hex_key_value_4 = 0;\n    long hex_key_value_5 = 0;\n    long hex_key_value_6\
    \ = 0;\n    long hex_key_value_7 = 0;\n    long hex_key_value_8 = 0;\n    long\
    \ hex_key_value_9 = 0;\n    long hex_key_value_10 = 0;\n    long hex_key_value_11\
    \ = 0;\n    long hex_key_value_12 = 0;\n    long hex_key_value_13 = 0;\n    long\
    \ hex_key_value_14 = 0;\n    long hex_key_value_15 = 0;\n    long hex_key_value_16\
    \ = 0;\n    long hex_key_value_17 = 0;\n    long hex_key_value_18 = 0;\n    long\
    \ hex_key_value_19 = 0;\n    long hex_key_value_20 = 0;\n    long hex_key_value_21\
    \ = 0;\n    long hex_key_value_22 = 0;\n    long hex_key_value_23 = 0;\n    long\
    \ hex_key_value_24 = 0;\n    long hex_key_value_25 = 0;\n    long hex_key_value_26\
    \ = 0;\n    long hex_key_value_27 = 0;\n    long hex_key_value_28 = 0;\n    long\
    \ hex_key_value_29 = 0;\n    long hex_key_value_30 = 0;\n    long hex_key_value_31\
    \ = 0;\n    long hex_key_value_32 = 0;\n    long hex_key_value_33 = 0;\n    long\
    \ hex_key_value_34 = 0;\n    long hex_key_value_35 = 0;\n    long hex_key_value_36\
    \ = 0;\n    long hex_key_value_37 = 0;\n    long hex_key_value", "{\n    long\
    \ result = 0;\n    foreach(i, c; num)\n    {\n        if(c == 'A' || c == 'B'\
    \ || c == 'C' || c == 'D' || c == 'E' || c == 'F')\n        {\n            result++;\n\
    \        }\n        else if(c == '2' || c == '3' || c == '5' || c == '7')\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    long len = num.length;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long ii = 0;\n\
    \    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long\
    \ nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee =\
    \ 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n\
    \    long vvv = 0;\n   ", "{\n    long result = 0;\n    foreach(immutable c; num)\n\
    \    {\n        if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long hex_key = 0;\n    foreach(i, c; num)\n\
    \    {\n        if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F')\n        {\n            hex_key = c - 'A' + 10;\n        }\n     \
    \   else\n        {\n            hex_key = c - '0';\n        }\n        result\
    \ += hex_key * pow(16, num.length - i - 1);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    foreach(char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(hex; num)\n\
    \    {\n        if(hex == '2' || hex == '3' || hex == '5' || hex == '7' || hex\
    \ == 'B' || hex == 'D')\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n \
    \       if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        long v = 0;\n        if(c >= '0' && c <= '9')\n            v =\
    \ c - '0';\n        else if(c >= 'A' && c <= 'F')\n            v = c - 'A' + 10;\n\
    \        result = result * 16 + v;\n    }\n    return result;\n}", "{\n    long\
    \ count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(char c; num)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            if(c.to!long\
    \ in primes)\n                count++;\n        }\n        else if(c >= 'A' &&\
    \ c <= 'F')\n        {\n            if(c.to!long - 'A'.to!long + 10 in primes)\n\
    \                count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    long[] primes = [2,3,5,7,11,13];\n    foreach(immutable c; num)\n\
    \    {\n        if(c in ['A','B','C','D','E','F'])\n        {\n            if(primes.canFind(c\
    \ - 'A' + 10))\n                count++;\n        }\n        else\n        {\n\
    \            if(primes.canFind(c - '0'))\n                count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(i, c; num)\n\
    \    {\n        if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F')\n        {\n            result++;\n        }\n        else if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    long[]\
    \ primes = [2,3,5,7,11,13];\n    foreach(i;0..num.length)\n    {\n        if(num[i]\
    \ in ['2','3','5','7','B','D'])\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(c; num)\n\
    \    {\n        result += c;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, c; num)\n    {\n        result += c;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    foreach(immutable c; num)\n    {\n\
    \        result += c;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(char c; num)\n    {\n        result += c;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ 'A' || c == 'B' || c == 'D' || c == 'E')\n            result++;\n        else\
    \ if(c == '2' || c == '3' || c == '5' || c == '7')\n            result++;\n  \
    \  }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    foreach(immutable char c; num)\n    {\n        result += c;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(char c;\
    \ num)\n    {\n        if(c >= 'A')\n            result += c - 'A' + 10;\n   \
    \     else\n            result += c - '0';\n        result *= 16;\n    }\n   \
    \ return result / 16;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
