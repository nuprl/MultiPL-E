name: HumanEval_133_sum_squares
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += ceil(f) * ceil(f);\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += ceil(i) * ceil(i);\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)*cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long result =\
    \ 0;\n    foreach(float num; lst)\n    {\n        result += cast(long)ceil(num)\
    \ * cast(long)ceil(num);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += (long)ceil(i) * (long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqo2wwin.d(22): Error: C style cast illegal, use `cast(long)ceil(i)`\\\
    n/tmp/tmpiqo2wwin.d(22): Error: C style cast illegal, use `cast(long)ceil(i)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqo2wwin.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long result =\
    \ 0;\n    foreach(float f; lst)\n    {\n        result += cast(long)ceil(f) *\
    \ cast(long)ceil(f);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += ceil(e) * ceil(e);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += (long)ceil(f) * (long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjd1gh58c.d(22): Error: C style cast illegal, use `cast(long)ceil(f)`\\\
    n/tmp/tmpjd1gh58c.d(22): Error: C style cast illegal, use `cast(long)ceil(f)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjd1gh58c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst) \n    {\n        sum += (long)ceil(e) * (long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6voa1gn.d(22): Error: C style cast illegal, use `cast(long)ceil(e)`\\\
    n/tmp/tmpq6voa1gn.d(22): Error: C style cast illegal, use `cast(long)ceil(e)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6voa1gn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(item; lst)\n    {\n        sum += cast(long)ceil(item) * cast(long)ceil(item);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f)*cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)*cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += ceil(e) * ceil(e);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += ceil(e) * ceil(e);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(var i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_t9bo90j.d(20): Error: undefined identifier `var`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t9bo90j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float n; lst)\n    {\n        sum += cast(long)ceil(n) * cast(long)ceil(n);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += ceil(i) * ceil(i);\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += ceil(e) * ceil(e);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float item; lst)\n    {\n        sum += cast(long)ceil(item) * cast(long)ceil(item);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += (long)ceil(f) * (long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_f597mf8.d(22): Error: C style cast illegal, use `cast(long)ceil(f)`\\\
    n/tmp/tmp_f597mf8.d(22): Error: C style cast illegal, use `cast(long)ceil(f)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_f597mf8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)^2;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9hlyb3sl.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428705]\\n??:? void tmp9hlyb3sl.__unittest_L26_C1()\
    \ [0x42805e]\\n??:? void tmp9hlyb3sl.__modtest() [0x428488]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c84f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430875]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430801]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6b9]\\n??:? runModuleUnitTests [0x42c625]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428b54]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428adb]\\n??:? _d_run_main [0x428a46]\\n??:? main [0x42849b]\\\
    n??:? __libc_start_main [0xed094554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long result =\
    \ 0;\n    foreach(e; lst)\n    {\n        result += cast(long)(ceil(e) * ceil(e));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i) * cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float num; lst)\n    {\n        sum += cast(long)ceil(num) * cast(long)ceil(num);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += (long)ceil(i) * (long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpeb2hk8.d(22): Error: C style cast illegal, use `cast(long)ceil(i)`\\\
    n/tmp/tmpxpeb2hk8.d(22): Error: C style cast illegal, use `cast(long)ceil(i)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpeb2hk8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float i; lst)\n    {\n        sum += cast(long)ceil(i)*cast(long)ceil(i);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e) * cast(long)ceil(e);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(float f; lst)\n    {\n        sum += cast(long)ceil(f) * cast(long)ceil(f);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output\
    \ should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst =\
    \ [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should\
    \ be 6\n    \n\n    \n*/\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n\
    \    foreach(x; lst)\n    {\n        sum += cast(long)ceil(x) * cast(long)ceil(x);\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
