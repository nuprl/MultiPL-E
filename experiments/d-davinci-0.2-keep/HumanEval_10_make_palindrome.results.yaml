name: HumanEval_10_make_palindrome
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    string prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbe0pxx21.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    n/tmp/tmpbe0pxx21.d(19): Error: `string` is used as a type\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbe0pxx21.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzghhc9pw.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzghhc9pw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    return string ~ string[0..$-palindrome_suffix].dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87_glc20.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87_glc20.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9xhy5n1.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9xhy5n1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix('')\n    ''\n    >>> longest_palindrome_suffix('cat')\n\
    \    ''\n    >>> longest_palindrome_suffix('cata')\n    'a'\n    >>> longest_palindrome_suffix('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix('catacata')\n    'atacata'\n*/\n\
    string longest_palindrome_suffix(string string) \n{\n    auto length = string.length;\n\
    \    for (int i = 0; i < length; i++) \n    {\n        if (is_palindrome(string[i..$]))\
    \ \n        {\n            return string[i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n\
    \    true\n    >>> is_palindrome('ab')\n    false\n    >>> is_palindrome('aba')\n\
    \    true\n    >>> is_palindrome('abba')\n    true\n    >>> is_palindrome('abbc')\n\
    \    false\n*/\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8xyfl_c5.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8xyfl_c5.d(40):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8xyfl_c5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n}\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2l2gljmp.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2l2gljmp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string[0 .. $/2];\n    auto postfix = string[$/2\
    \ .. $];\n    auto reversed_prefix = postfix.dup;\n    reversed_prefix.reverse;\n\
    \    auto longest_palindrome_suffix = longest_common_substring(postfix, reversed_prefix);\n\
    \    return string ~ reversed_prefix[$ - longest_palindrome_suffix .. $];\n}\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj4nkmu1f.d(21): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpj4nkmu1f.d(22):\
    \ Error: undefined identifier `longest_common_substring`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4nkmu1f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6gh4gw_1.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gh4gw_1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_yet1d6.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_yet1d6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0)\n      \
    \  return string;\n    auto longest_palindrome_length = longest_palindrome_length_at(string,\
    \ length - 1);\n    auto prefix = string[0 .. length - longest_palindrome_length];\n\
    \    return string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdq6tkke9.d(21): Error: undefined identifier `longest_palindrome_length_at`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdq6tkke9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacb')\n    1\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    auto length = string.length;\n\
    \    if (length <= 1)\n        return 0;\n    auto longest_palindrome_suffix_length\
    \ = 0;\n    for (auto i = 0; i < length; i++) \n    {\n        if (is_palindrome(string[i..$]))\
    \ \n        {\n            longest_palindrome_suffix_length = length - i;\n  \
    \          break;\n        }\n    }\n    return longest_palindrome_suffix_length;\n\
    }\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n\
    \    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n    true\n\
    \    >>> is_palindrome('aba')\n    true\n    >>> is_palindrome('abba')\n    true\n\
    \    >>> is_palindrome('ab')\n    false\n    >>> is_palindrome('abc')\n    false\n\
    */\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1606o5dx.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp1606o5dx.d(43):\
    \ Error: undefined identifier `is_palindrome`\\n/tmp/tmp1606o5dx.d(45): Error:\
    \ cannot implicitly convert expression `length - cast(ulong)i` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1606o5dx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    return string ~ reverse(string[0..$-longest_palindrome_suffix.length]);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8jmiazd.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8jmiazd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp579fia6t.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp579fia6t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'catacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'catacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n \
    \   'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'catacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'catacatacatacatac'\n    >>> longest\nunittest\n{\n    alias candidate =\
    \ make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo88ki3wz.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo88ki3wz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpunqx0bs4.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunqx0bs4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp0phlx6n.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0phlx6n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n*/\nstring\
    \ longest_palindrome_suffix_of(string string) \n{\n    auto length = string.length;\n\
    \    foreach (i; 0..length) \n    {\n        if (is_palindrome(string[$-i..$]))\
    \ \n        {\n            return string[$-i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('cat')\n    false\n    >>> is_palindrome('cata')\n\
    \    false\n    >>> is_palindrome('cattac')\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpub6bh45r.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpub6bh45r.d(36):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpub6bh45r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a supplied string.\n    >>> longest_palindrome_suffix_length('')\n    0\n\
    \    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacac')\n    6\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    auto string_length\
    \ = string.length;\n    if (string_length == 0)\n        return 0;\n    if (string_length\
    \ == 1)\n        return 1;\n    auto longest_palindrome_suffix_length = 0;\n \
    \   for (auto i = 0; i < string_length; i++) \n    {\n        auto is_palindrome\
    \ = true;\n        for (auto j = 0; j < i; j++) \n        {\n            if (string[j]\
    \ != string[string_length - i + j]) \n            {\n                is_palindrome\
    \ = false;\n                break;\n            }\n        }\n        if (is_palindrome)\
    \ \n        {\n            longest_palindrome_suffix_length = i;\n        }\n\
    \    }\n    return longest_palindrome_suffix_length;\n}\n/*\n Find the length\
    \ of the longest palindromic prefix of a supplied string.\n    >>> longest_palindrome_prefix_length('')\n\
    \    0\n    >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    1\n    >>> longest_palindrome_prefix_length('catac')\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdubgs3yr.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdubgs3yr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9t5lbxp8.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9t5lbxp8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8t7aq900.d(19): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t7aq900.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnbjm0e80.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmpnbjm0e80.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnbjm0e80.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n \
    \   if (string.length < 2)\n        return string;\n    auto longest_palindrome_suffix_of_prefix\
    \ = longest_palindrome_suffix_of(string[0..$-1]);\n    if (string[$-1] == string[$-1-longest_palindrome_suffix_of_prefix.length])\n\
    \        return string[$-1-longest_palindrome_suffix_of_prefix.length..$-1] ~\
    \ longest_palindrome_suffix_of_prefix;\n    else\n        return longest_palindrome_suffix_of_prefix;\n\
    }\n/*\n Find the longest palindrome prefix of a string.\n    >>> longest_palindrome_prefix_of('')\n\
    \    ''\n    >>> longest_palindrome_prefix_of('cat')\n    'c'\n    >>> longest_palindrome_prefix_of('cata')\n\
    \    'ca'\n    >>> longest_palindrome_prefix_of('catac')\n    'catac'\n    >>>\
    \ longest_palindrome_prefix_of('cataca')\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiamau60p.d(49): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiamau60p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6g4mkegh.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g4mkegh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeso_xnag.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeso_xnag.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpids30zx_.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpids30zx_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest palindromic suffix.\n    auto suffix =\
    \ string.dup;\n    auto suffix_len = string.length;\n    while (suffix_len > 0)\
    \ {\n        if (suffix.isPalindrome) {\n            break;\n        }\n     \
    \   suffix.popFront;\n        --suffix_len;\n    }\n    // Append reverse of the\
    \ prefix to the end of the string.\n    auto prefix = string[0 .. $ - suffix_len].dup;\n\
    \    prefix.reverse;\n    return string ~ prefix;\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_oy3xh1w.d(22): Error: no property `isPalindrome` for type `char[]`\\\
    n/tmp/tmp_oy3xh1w.d(25): Error: no property `popFront` for type `char[]`\\n/tmp/tmp_oy3xh1w.d(30):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp_oy3xh1w.d(31):\
    \ Error: cannot implicitly convert expression `cast(const(char)[])string ~ prefix`\
    \ of type `char[]` to `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_oy3xh1w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto suffix = longest_palindromic_suffix(string);\n    auto\
    \ prefix = string[0..$-suffix.length];\n    return prefix ~ reverse(prefix) ~\
    \ suffix;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxeobv7ek.d(18): Error: undefined identifier `longest_palindromic_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxeobv7ek.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5hsfohb.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5hsfohb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. i])) {\n                return s[0 ..\
    \ i];\n            }\n        }\n        return \"\";\n    };\n    if (string.length\
    \ == 0) {\n        return \"\";\n    }\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    if (palindrome_suffix.length == string.length) {\n        return string;\n\
    \    }\n    auto palindrome_prefix = longest_palindrome_prefix(string[0 .. $ -\
    \ palindrome_suffix.length]);\n    return string ~ palindrome_prefix.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo4c7l2m.d(18): Error: `string` is used as a type\\n/tmp/tmpvo4c7l2m.d(21):\
    \ Error: `string` is used as a type\\n/tmp/tmpvo4c7l2m.d(29): Error: `string`\
    \ is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo4c7l2m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto suffix = string[0 .. len];\n    while (!is_palindrome(suffix))\n\
    \        suffix = suffix[1 .. $];\n    return string ~ reverse(string[0 .. len\
    \ - suffix.length]);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph29qwdsz.d(22): Error: undefined identifier `is_palindrome`\\\
    n/tmp/tmph29qwdsz.d(24): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph29qwdsz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7np0emvs.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7np0emvs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len <= 1)\n        return\
    \ string;\n    auto suffix = string[0..len];\n    while (suffix.length > 0)\n\
    \    {\n        if (is_palindrome(suffix))\n            break;\n        suffix\
    \ = suffix[1..$];\n    }\n    auto prefix = string[0..len - suffix.length];\n\
    \    return string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_4ey0rc.d(24): Error: undefined identifier `is_palindrome`\\\
    n/tmp/tmp0_4ey0rc.d(29): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_4ey0rc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4otokv9n.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4otokv9n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacatac')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    7\n    >>> longest_palindrome_suffix_length('catacatacatac')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    11\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatac')\n \
    \   15\n    >>> longest_palindrome_suffix_length('catacatacatacatacataca')\n \
    \   15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatacat')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatacatac')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatac\nunittest\n{\n  \
    \  alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\"\
    );\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\"\
    ) == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqn2hbe1.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqn2hbe1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpytbegk0w.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytbegk0w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto palindrome_suffix = longest_palindrome_suffix(string);\n    if (palindrome_suffix.length\
    \ == string.length) {\n        return string;\n    }\n    return string ~ string[0\
    \ .. $ - palindrome_suffix.length].dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vg1ypy3.d(18): Error: `string` is used as a type\\n/tmp/tmp8vg1ypy3.d(21):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8vg1ypy3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto suffix = longest_palindromic_suffix(string);\n    auto\
    \ prefix = string[0..$-suffix.length];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43wvs6hg.d(18): Error: undefined identifier `longest_palindromic_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43wvs6hg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result;\n    int length = string.length;\n    int i\
    \ = 0;\n    int j = length - 1;\n    while (i < j) \n    {\n        if (string[i]\
    \ != string[j]) \n        {\n            break;\n        }\n        i++;\n   \
    \     j--;\n    }\n    if (i >= j) \n    {\n        return string;\n    }\n  \
    \  result = string[0..i] + string[j..$];\n    result = result.reverse;\n    result\
    \ ~= string;\n    return result;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn4j6dv6k.d(18): Error: `string` is used as a type\\n/tmp/tmpn4j6dv6k.d(19):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4j6dv6k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_postfix = longest_palindrome_substring(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_postfix.length];\n    return\
    \ string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome substring in a\
    \ string.\n    >>> longest_palindrome_substring('')\n    ''\n    >>> longest_palindrome_substring('cat')\n\
    \    'c'\n    >>> longest_palindrome_substring('cata')\n    'ata'\n    >>> longest_palindrome_substring('catac')\n\
    \    'catac'\n    >>> longest_palindrome_substring('catacata')\n    'atacata'\n\
    \    >>> longest_palindrome_substring('catacatac')\n    'catacatac'\n    >>> longest_palindrome_substring('catacataca')\n\
    \    'atacataca'\n    >>> longest_palindrome_substring('catacatacat')\n    'atacataca'\n\
    \    >>> longest_palindrome_substring('catacatacata')\n    'atacatacata'\n   \
    \ >>> longest_palindrome_substring('catacatacatac')\n    'atacatacata'\n    >>>\
    \ longest_palindrome_substring('catacatacataca')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_substring('catacatacatacat')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_substring('catacatacatacata')\n    'atacatacatacata'\n  \
    \  >>> longest_palindrome_substring('catacatacatacatac')\n    'atacatacatacata'\n\
    \    >>> longest_palindrome_substring('catacatacatacataca')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_substring('catacatacatacatacat')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_substring('catacatacatac\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48_1aas_.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48_1aas_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz69la1wn.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz69la1wn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest palindromic suffix.\n    auto suffix =\
    \ longest_palindromic_suffix(string);\n    // Append the reverse of the prefix\
    \ to the end of the string.\n    return string ~ reverse(string[0 .. $ - suffix.length]);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpig6gviq5.d(19): Error: undefined identifier `longest_palindromic_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpig6gviq5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ \"\";\n    auto prefix = string[0 .. len / 2];\n    auto suffix = string[len\
    \ / 2 .. len];\n    if (prefix == suffix[$ - 1 .. $])\n        return string;\n\
    \    auto longest_palindrome = longest_palindrome_suffix(suffix);\n    return\
    \ string ~ suffix[0 .. longest_palindrome].reverse;\n}\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4aqnyiek.d(25): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4aqnyiek.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfc1m819.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfc1m819.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n}\n\
    /*\n Find the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    5\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacataca')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    9\n    >>> longest_palindrome_suffix_length('catacatacatac')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacataca')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacat')\n    13\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacataca')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n   \
    \ 17\n    >>> longest_palindrome_suffix_length('catacatacatacatacatac')\n    19\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatacataca')\n    19\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatacatacat')\n    21\n\
    \    >>> longest_palindrome_suffix_length('catacatacat\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcntgwf_f.d(21): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcntgwf_f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfk16cs51.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfk16cs51.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return string;\n    }\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == length) \n    {\n        return string;\n\
    \    }\n    return string ~ string[0..$-longest_palindrome_suffix].reverse;\n\
    }\n/*\n    Find the length of the longest palindromic suffix of a string.\n  \
    \  >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0) \n    {\n        return 0;\n \
    \   }\n    auto half_length = length / 2;\n    for (size_t i = 0; i < half_length;\
    \ i++) \n    {\n        if (string[i] != string[$-i - 1]) \n        {\n      \
    \      return i;\n        }\n    }\n    return length;\n}\n/*\n    Find the length\
    \ of the longest palindromic prefix of a string.\n    >>> longest_palindrome_prefix_length('')\n\
    \    0\n    >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    0\n    >>> longest_palindrome_prefix_length('catac')\n    2\n*/\nsize_t longest_palindrome_prefix_length(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return 0;\n    }\n    auto half_length = length / 2;\n    for (size_t\
    \ i = 0; i < half_length; i++) \n    {\n        if\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtopzpz7.d(80): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpdtopzpz7.d(90): Error: found `void` when expecting `)`\\n/tmp/tmpdtopzpz7.d(90):\
    \ Error: found `{` when expecting `;` following statement\\n/tmp/tmpdtopzpz7.d(90):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtopzpz7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86rkunjs.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86rkunjs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return string;\n    }\n    auto prefix_length = length;\n    while (prefix_length\
    \ > 0) \n    {\n        if (string[0 .. prefix_length] == string[$ - prefix_length\
    \ .. $]) \n        {\n            break;\n        }\n        prefix_length--;\n\
    \    }\n    return string ~ string[$ - prefix_length .. $].idup.reverse;\n}\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3a9r8fa.d(32): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph3a9r8fa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0) \n    {\n    \
    \    return string;\n    }\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0 .. len - longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacataca')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    11\n  \
    \  >>> longest_palindrome_suffix_length('catacatacataca')\n    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    15\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnkzgllpj.d(27): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkzgllpj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_b2udeli.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_b2udeli.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string rev = string.dup.reverse;\n    string rev_prefix = rev[0..$-1];\n\
    \    string prefix = string[0..$-1];\n    string postfix = string[$-1..$];\n \
    \   string postfix_rev = postfix.dup.reverse;\n    while (prefix.length > 0 &&\
    \ postfix_rev != prefix) \n    {\n        postfix = postfix ~ postfix_rev[0..1];\n\
    \        postfix_rev = postfix_rev[1..$];\n        prefix = prefix[0..$-1];\n\
    \    }\n    return string ~ rev_prefix[$-postfix.length..$];\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vz1vuti.d(18): Error: `string` is used as a type\\n/tmp/tmp8vz1vuti.d(18):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8vz1vuti.d(19):\
    \ Error: `string` is used as a type\\n/tmp/tmp8vz1vuti.d(20): Error: `string`\
    \ is used as a type\\n/tmp/tmp8vz1vuti.d(21): Error: `string` is used as a type\\\
    n/tmp/tmp8vz1vuti.d(22): Error: `string` is used as a type\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vz1vuti.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. $ - i])) {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n        return \"\";\n    };\n    return\
    \ string ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\n/*\n\
    \ Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome('')\n   \
    \ ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n*/\nstring make_longest_palindrome(string string) \n{\n  \
    \  auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n   \
    \ };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i; 0\
    \ .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n              \
    \  return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. $ - i])) {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9o9rj_nt.d(72): Error: found `unittest` instead of statement\\\
    n/tmp/tmp9o9rj_nt.d(82): Error: semicolon expected following auto declaration,\
    \ not `void`\\n/tmp/tmp9o9rj_nt.d(82): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp9o9rj_nt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.length == 0) \n    {\n        return string;\n \
    \   }\n    auto palindrome_length = longest_palindrome_length(string);\n    auto\
    \ prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86pr5eyh.d(22): Error: undefined identifier `longest_palindrome_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86pr5eyh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix('')\n    ''\n    >>> longest_palindrome_suffix('cat')\n\
    \    ''\n    >>> longest_palindrome_suffix('cata')\n    'a'\n    >>> longest_palindrome_suffix('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix('cataca')\n    'aca'\n    >>>\
    \ longest_palindrome_suffix('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix('catacata')\n\
    \    'atacat'\n*/\nstring longest_palindrome_suffix(string string) \n{\n    if\
    \ (string.length < 2) \n    {\n        return \"\";\n    }\n    auto length =\
    \ string.length;\n    auto half_length = length / 2;\n    auto first_half = string[0..half_length];\n\
    \    auto second_half = string[$-half_length..$];\n    if (first_half == reverse(second_half))\
    \ \n    {\n        return string;\n    }\n    auto first_suffix = longest_palindrome_suffix(first_half);\n\
    \    auto second_suffix = longest_palindrome_suffix(second_half);\n    return\
    \ first_suffix.length > second_suffix.length ? first_suffix : second_suffix;\n\
    }\n/*\n Find the longest palindromic prefix of a string.\n    >>> longest_palindrome_prefix('')\n\
    \    ''\n    >>> longest_palindrome_prefix('cat')\n    ''\n    >>> longest_palindrome_prefix('acta')\n\
    \    'a'\n    >>> longest_palindrome_prefix('catac')\n    'catac'\n    >>> longest_palindrome_prefix('acataca')\n\
    \    'aca'\n    >>> longest_pal\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqnzyp8hr.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnzyp8hr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto suffix = string[0 .. len];\n    while (suffix.length > 0)\n\
    \    {\n        if (suffix == suffix.dup.reverse)\n            break;\n      \
    \  suffix = suffix[1 .. $];\n    }\n    return string ~ suffix.dup.reverse[0 ..\
    \ len - suffix.length];\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8d_yz4m.d(24): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpm8d_yz4m.d(28):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8d_yz4m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = string;\n    size_t length = string.length;\n\
    \    if (length == 0)\n        return result;\n    size_t suffix_length = length;\n\
    \    while (suffix_length > 0) {\n        if (is_palindrome(string[0 .. suffix_length]))\n\
    \            break;\n        --suffix_length;\n    }\n    result ~= reverse(string[suffix_length\
    \ .. length]);\n    return result;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcjsh5tb.d(18): Error: `string` is used as a type\\n/tmp/tmpwcjsh5tb.d(24):\
    \ Error: undefined identifier `is_palindrome`\\n/tmp/tmpwcjsh5tb.d(28): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcjsh5tb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7anmkgk9.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7anmkgk9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_8f84pvp.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8f84pvp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto max_len = len;\n    for (int i = 0; i < len; i++)\n    {\n\
    \        if (string[i..$] == string[$-i..$])\n        {\n            max_len =\
    \ i;\n            break;\n        }\n    }\n    return string ~ string[$-max_len..$].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpye4852r_.d(30): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpye4852r_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n    Find the longest suffix of a string that\
    \ is a palindrome.\n    >>> longest_palindrome_suffix_of('')\n    ''\n    >>>\
    \ longest_palindrome_suffix_of('cat')\n    't'\n    >>> longest_palindrome_suffix_of('cata')\n\
    \    'ata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n    auto\
    \ length = string.length;\n    for (auto i = length; i > 0; i--) \n    {\n   \
    \     auto suffix = string[$-i..$];\n        if (is_palindrome(suffix)) \n   \
    \     {\n            return suffix;\n        }\n    }\n    return \"\";\n}\n/*\n\
    \    Check if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n\
    \    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('cat')\n    false\n\
    \    >>> is_palindrome('cata')\n    true\n*/\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsqnz2bw.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpzsqnz2bw.d(37):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzsqnz2bw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzixsum8h.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzixsum8h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjs8gfm5o.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjs8gfm5o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0) return string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == len) return string;\n    return string ~\
    \ string[0..$-longest_palindrome_suffix].dup.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwi8dypw.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwi8dypw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4qymf58k.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qymf58k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == len)\n        return string;\n    auto prefix\
    \ = string[0..$-longest_palindrome_suffix];\n    return string ~ reverse(prefix);\n\
    }\n/*\n Find the length of the longest palindromic suffix of a string.\n    >>>\
    \ longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacataca')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    7\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ len = string.length;\n    if (len == 0)\n        return 0;\n    auto i = len\
    \ - 1;\n    while (i > 0) \n    {\n        if (string[0..i] == reverse(string[$-i..$]))\n\
    \            return i;\n        i--;\n    }\n    return 0;\n}\n/*\n Find the longest\
    \ palindromic substring in a string.\n    >>> longest_palindrome_substring('')\n\
    \    ''\n    >>> longest_palindrome_substring('cat')\n    'c'\n   \nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpidriwf4t.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidriwf4t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = string;\n    auto length = string.length;\n\
    \    if (length <= 1)\n        return result;\n    // Find the longest palindromic\
    \ suffix.\n    auto suffix = string[$-length..$];\n    while (suffix.length >\
    \ 0) \n    {\n        if (is_palindrome(suffix))\n            break;\n       \
    \ suffix = suffix[1..$];\n    }\n    // Append the reverse of the prefix to the\
    \ end of the string.\n    result ~= string[0..$-suffix.length].dup.reverse;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1vr81ha.d(18): Error: `string` is used as a type\\n/tmp/tmpn1vr81ha.d(26):\
    \ Error: undefined identifier `is_palindrome`\\n/tmp/tmpn1vr81ha.d(31): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1vr81ha.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_tuple(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix[1]];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix_tuple('')\n    (0, 0)\n    >>> longest_palindrome_suffix_tuple('cat')\n\
    \    (0, 0)\n    >>> longest_palindrome_suffix_tuple('cata')\n    (1, 3)\n   \
    \ >>> longest_palindrome_suffix_tuple('catac')\n    (1, 3)\n    >>> longest_palindrome_suffix_tuple('cataca')\n\
    \    (1, 3)\n    >>> longest_palindrome_suffix_tuple('catacat')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacata')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatac')\n\
    \    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacataca')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacatacat')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacata')\n\
    \    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacatac')\n    (3,\
    \ 5)\n    >>> longest_palindrome_suffix_tuple('catacatacataca')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacatacatacat')\n    (3, 5)\n    >>>\
    \ longest_palindrome_suffix_tuple('catacatacatacata')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacatacatac')\n\
    \    (3, 5)\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8n1agz1e.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8n1agz1e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    if (longest_palindrome_suffix.length\
    \ < string.length)\n    {\n        auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \        result ~= prefix.reverse;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp320pabp2.d(18): Error: `string` is used as a type\\n/tmp/tmp320pabp2.d(19):\
    \ Error: undefined identifier `longest_palindrome_suffix_length`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp320pabp2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6nqqnsz.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6nqqnsz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n    Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('cataca')\n    5\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacata')\n    7\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    9\n    >>> longest_palindrome_suffix_length('catacataca')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    11\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    13\n \
    \   >>> longest_palindrome_suffix_length('catacatacataca')\n    13\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    15\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    17\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    17\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    19\n    >>> longest_palindrome_suffix_length('catacatacatacatacata')\n  \
    \  19\n    >>>\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptironlg3.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptironlg3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto suffix = string.dup;\n    auto prefix = string.dup;\n\
    \    reverse(prefix);\n    int i = 0;\n    for (; i < suffix.length; ++i) {\n\
    \        if (suffix[i..$] == prefix[0..$-i]) {\n            break;\n        }\n\
    \    }\n    return string ~ prefix[0..$-i];\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4sazo2s1.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4sazo2s1.d(27):\
    \ Error: cannot implicitly convert expression `cast(const(char)[])string ~ prefix[0..__dollar\
    \ - cast(ulong)i]` of type `char[]` to `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4sazo2s1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len <= 1) return string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    return string ~ string[0 .. len - longest_palindrome_suffix].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7enpuy7.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7enpuy7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    auto prefix_length = length;\n\
    \    while (prefix_length > 0) \n    {\n        if (string[0 .. prefix_length]\
    \ == string[$ - prefix_length .. $].retro) \n        {\n            break;\n \
    \       }\n        prefix_length--;\n    }\n    return string ~ string[$ - prefix_length\
    \ .. $].retro;\n}\n/*\n Find the shortest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n*/\nstring make_palindrome(string string) \n{\n    auto length\
    \ = string.length;\n    auto prefix_length = length;\n    while (prefix_length\
    \ > 0) \n    {\n        if (string[0 .. prefix_length] == string[$ - prefix_length\
    \ .. $].retro) \n        {\n            break;\n        }\n        prefix_length--;\n\
    \    }\n    return string ~ string[$ - prefix_length .. $].retro;\n}\n/*\n Find\
    \ the shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    auto prefix_length = length;\n\
    \    while (prefix_length > 0) \n    {\n        if (string[0 .. prefix_\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9whuf01m.d(77): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmp9whuf01m.d(87): Error: found `void` when expecting `,`\\n/tmp/tmp9whuf01m.d(87):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp9whuf01m.d(87): Error: expression\
    \ expected, not `}`\\n/tmp/tmp9whuf01m.d(87): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp9whuf01m.d(87): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp9whuf01m.d(87): Error: found `End of File` when expecting `)`\\\
    n/tmp/tmp9whuf01m.d(87): Error: found `End of File` instead of statement\\n/tmp/tmp9whuf01m.d(87):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp9whuf01m.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9whuf01m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_length = longest_palindrome_length(string);\n\
    \    auto prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3v_n0sbf.d(18): Error: undefined identifier `longest_palindrome_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v_n0sbf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprnkft22.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprnkft22.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto suffix = string[$-len..$];\n    auto prefix = string[0..$-len];\n\
    \    auto palindrome = suffix;\n    for (auto i = 0; i < len; i++)\n    {\n  \
    \      if (suffix[i..$] == prefix[0..$-i])\n        {\n            palindrome\
    \ = suffix[0..i] ~ prefix[$-i..$];\n            break;\n        }\n    }\n   \
    \ return string ~ palindrome[$-1..0];\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmptf5cn1_p.d(26): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4281e6]\\n??:? immutable(char)[] tmptf5cn1_p.make_palindrome(immutable(char)[])\
    \ [0x427b8e]\\n??:? void tmptf5cn1_p.__unittest_L34_C1() [0x427d36]\\n??:? void\
    \ tmptf5cn1_p.__modtest() [0x427eb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bf9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aeaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fe79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430328]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fe05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ae81]\\n??:? runModuleUnitTests [0x42bd71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42857f]\\n??:? _d_run_main [0x4284ea]\\n??:? main [0x427ecb]\\\
    n??:? __libc_start_main [0x5024e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp517ur0ew.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp517ur0ew.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjadzufsc.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjadzufsc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix('')\n    ''\n    >>> longest_palindrome_suffix('cat')\n\
    \    ''\n    >>> longest_palindrome_suffix('cata')\n    'a'\n    >>> longest_palindrome_suffix('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix('cataca')\n    'aca'\n    >>>\
    \ longest_palindrome_suffix('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix('catacata')\n\
    \    'atacat'\n    >>> longest_palindrome_suffix('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix('catacataca')\n    'atacataca'\n    >>> longest_palindrome_suffix('catacatacat')\n\
    \    'atacatacat'\n    >>> longest_palindrome_suffix('catacatacata')\n    'atacatacat'\n\
    \    >>> longest_palindrome_suffix('catacatacatac')\n    'catacatacatac'\n   \
    \ >>> longest_palindrome_suffix('catacatacataca')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacat')\n    'atacatacatacat'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacata')\n    'atacatacatacat'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacatac')\n    'catacatacatacatac'\n  \
    \  >>> longest_palindrome_suffix('catacatacatacataca')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_suffix('\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9pfadbz3.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pfadbz3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxvvf2xir.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvvf2xir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzr380u_c.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr380u_c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    auto prefix = string[0 ..\
    \ length / 2];\n    auto suffix = string[length / 2 .. $];\n    auto reversed_prefix\
    \ = suffix.dup;\n    reversed_prefix.reverse;\n    if (suffix.length > prefix.length)\n\
    \    {\n        suffix = suffix[1 .. $];\n    }\n    if (suffix == reversed_prefix)\n\
    \    {\n        return string;\n    }\n    else\n    {\n        return string\
    \ ~ reversed_prefix;\n    }\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl213d115.d(22): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpl213d115.d(33):\
    \ Error: cannot implicitly convert expression `cast(const(char)[])string ~ reversed_prefix`\
    \ of type `char[]` to `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl213d115.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto result = string;\n    auto longest_palindrome_suffix =\
    \ longest_palindrome_suffix_of(string);\n    auto prefix_to_append = string[0..$-longest_palindrome_suffix.length];\n\
    \    result ~= prefix_to_append.reverse;\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprz5b_xk7.d(19): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprz5b_xk7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. i])) {\n                return s[0 ..\
    \ i];\n            }\n        }\n        return \"\";\n    };\n    return string\
    \ ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\n/*\n    >>>\
    \ make_palindrome_2('')\n    ''\n    >>> make_palindrome_2('cat')\n    'catac'\n\
    \    >>> make_palindrome_2('cata')\n    'catac'\n*/\nstring make_palindrome_2(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. i])) {\n                return s[0 ..\
    \ i];\n            }\n        }\n        return \"\";\n    };\n    return string\
    \ ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\n/*\n    >>>\
    \ make_palindrome_3('')\n    ''\n    >>> make_palindrome_3('cat')\n    'catac'\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprvbkug61.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvbkug61.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvx08dut0.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvx08dut0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    auto suffix_length = n;\n    while\
    \ (suffix_length > 0) \n    {\n        auto prefix_length = n - suffix_length;\n\
    \        auto suffix = string[prefix_length .. n];\n        if (suffix == suffix.reverse)\
    \ \n        {\n            return string ~ string[0 .. prefix_length].reverse;\n\
    \        }\n        suffix_length--;\n    }\n    return string;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgckuf6pi.d(24): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgckuf6pi.d(26):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpgckuf6pi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0imtsg_r.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0imtsg_r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto l = string.length;\n    if (l <= 1) \n    {\n        return\
    \ string;\n    }\n    auto prefix = string[0 .. l / 2];\n    auto suffix = string[l\
    \ / 2 .. $];\n    if (suffix.length > prefix.length) \n    {\n        suffix =\
    \ suffix[1 .. $];\n    }\n    auto suffix_palindrome = longest_palindrome(suffix);\n\
    \    return string ~ suffix_palindrome.reverse ~ suffix_palindrome;\n}\n/*\n Find\
    \ the longest palindrome in a string.\n    >>> longest_palindrome('')\n    ''\n\
    \    >>> longest_palindrome('a')\n    'a'\n    >>> longest_palindrome('aa')\n\
    \    'aa'\n    >>> longest_palindrome('ab')\n    'a'\n    >>> longest_palindrome('aba')\n\
    \    'aba'\n    >>> longest_palindrome('abba')\n    'abba'\n    >>> longest_palindrome('abbba')\n\
    \    'abbba'\n    >>> longest_palindrome('abbbba')\n    'abbbba'\n    >>> longest_palindrome('abbbbba')\n\
    \    'abbbbba'\n    >>> longest_palindrome('abbbbbba')\n    'abbbbbba'\n    >>>\
    \ longest_palindrome('abbbbbbba')\n    'abbbbbbba'\n    >>> longest_palindrome('abbbbbbbba')\n\
    \    'abbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbba')\n    'abbbbbbbbba'\n\
    \    >>> longest_palindrome('abbbbbbbbbba')\n    'abbbbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbbbba')\n\
    \    'abbbbbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbbbbba')\n    'abbbbbbbbbbbba'\n\
    \    >>> longest_palindrome('abbbbbbbbbbbbba')\n    'abbbbbbbbbbbbba'\n    >>>\
    \ longest_palindrome('abbbbbbbbbbbbbba')\n    '\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_a8cpgh.d(32): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_a8cpgh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1u13obcd.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1u13obcd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    return string ~ string[0..$-palindrome_suffix].dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqukm2ng6.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqukm2ng6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('cataca')\n    5\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacata')\n    7\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    9\n    >>> longest_palindrome_suffix_length('catacataca')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    9\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    13\n \
    \   >>> longest_palindrome_suffix_length('catacatacataca')\n    13\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    13\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    15\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    17\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    17\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    17\n    >>> longest_pal\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp77mykovp.d(25): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77mykovp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string rev = string.dup.reverse;\n    string result = string;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        if(rev[i .. $] == string[0\
    \ .. string.length - i]) \n        {\n            result ~= rev[0 .. i];\n   \
    \         break;\n        }\n    }\n    return result;\n}\n/*\n    Find the longest\
    \ palindromic substring of a supplied string.\n    >>> longest_palindrome('')\n\
    \    ''\n    >>> longest_palindrome('cat')\n    'c'\n    >>> longest_palindrome('cata')\n\
    \    'ata'\n    >>> longest_palindrome('catac')\n    'atac'\n    >>> longest_palindrome('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome('catacatac')\n    'atacata'\n    >>>\
    \ longest_palindrome('catacatacatac')\n    'atacatacata'\n    >>> longest_palindrome('catacatacatacatac')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatac')\n\
    \    'atacatacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatacatac')\n\
    \    'atacatacatacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatacatacatac')\n\
    \    'atacatacatacatacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatacatacatacatac')\n\
    \    'atacatacatacatacatacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatacatacatacatacatac')\n\
    \    'atacatacatacatacatacatacatacatacata'\n    >>> longest_palindrome('catacatacatacatacatacatacatacatacatacatac')\n\
    \    'atacatacat\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsk45ga_.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsk45ga_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto suffix =\
    \ string[$-longest_palindrome_suffix..$];\n    return string ~ reverse(prefix);\n\
    }\n/*\n    Find the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacat')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatac')\n    11\n*/\nsize_t longest_palindrome_suffix_length(string\
    \ string) \n{\n    if (string.length < 2) \n    {\n        return 0;\n    }\n\
    \    auto reversed = reverse(string);\n    auto longest_common_prefix_length =\
    \ longest_common_prefix_length(string, reversed);\n    return string.length -\
    \ longest_common_prefix_length;\n}\n/*\n    Find the longest common prefix of\
    \ two strings.\n    >>> longest_common_prefix_length('', '')\n    0\n    >>> longest_common_prefix_length('',\
    \ 'a')\n    0\n    >>> longest_common_prefix_length('a', '')\n    0\n    >>> longest_common_prefix_length('a',\
    \ 'a')\n    1\n    >>> longest_common_prefix_length('a', 'b')\n    0\n    >>>\
    \ longest_common_prefix_length('ab', 'a')\n    1\n    >>> longest_common_prefix_length('\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfchzsfrd.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfchzsfrd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string.take(string.length - string.find_last_of(string.dropOne));\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjw9m0qs8.d(18): Error: no property `take` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjw9m0qs8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. $ - i])) {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n        return \"\";\n    };\n    return\
    \ string ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zf5sewz.d(18): Error: `string` is used as a type\\n/tmp/tmp2zf5sewz.d(21):\
    \ Error: `string` is used as a type\\n/tmp/tmp2zf5sewz.d(29): Error: `string`\
    \ is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zf5sewz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty) \n    {\n        return string;\n    }\n\
    \    auto suffix = string.suffixArray;\n    auto lcp = string.lcpArray;\n    auto\
    \ max_lcp = 0;\n    auto max_lcp_index = 0;\n    for (size_t i = 0; i < lcp.length;\
    \ i++) \n    {\n        if (lcp[i] > max_lcp) \n        {\n            max_lcp\
    \ = lcp[i];\n            max_lcp_index = i;\n        }\n    }\n    auto prefix\
    \ = string[0 .. $ - max_lcp];\n    return string ~ prefix.reverse;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphd9kb8ry.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmphd9kb8ry.d(22): Error: no property `suffixArray` for type `string`\\\
    n/tmp/tmphd9kb8ry.d(23): Error: no property `lcpArray` for type `string`\\n/tmp/tmphd9kb8ry.d(31):\
    \ Error: cannot implicitly convert expression `i` of type `ulong` to `int`\\n/tmp/tmphd9kb8ry.d(35):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmphd9kb8ry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzt7i5_te.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzt7i5_te.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmi8o_0l.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmptmi8o_0l.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmi8o_0l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpljv2y1vy.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljv2y1vy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n    Find the longest palindrome suffix of\
    \ a string.\n    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n*/\nstring\
    \ longest_palindrome_suffix_of(string string) \n{\n    auto length = string.length;\n\
    \    if (length == 0) \n    {\n        return \"\";\n    }\n    auto suffix_length\
    \ = length;\n    while (suffix_length > 0) \n    {\n        auto suffix = string[$-suffix_length..$];\n\
    \        if (is_palindrome(suffix)) \n        {\n            return suffix;\n\
    \        }\n        suffix_length--;\n    }\n    return \"\";\n}\n/*\n    Check\
    \ if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n    >>> is_palindrome('cat')\n\
    \    false\n    >>> is_palindrome('cata')\n    false\n    >>> is_palindrome('civic')\n\
    \    true\n    >>> is_palindrome('racecar')\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov05wtb8.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpov05wtb8.d(42):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpov05wtb8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string rev = string.dup.reverse;\n    string palindrome = string\
    \ ~ rev;\n    string longest_palindrome = \"\";\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        string suffix = palindrome[i .. $];\n        if(suffix.isPalindrome)\
    \ \n        {\n            longest_palindrome = suffix;\n        }\n    }\n  \
    \  return string ~ longest_palindrome.dup.reverse[string.length .. $];\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqwb9rg4.d(18): Error: `string` is used as a type\\n/tmp/tmpcqwb9rg4.d(18):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpcqwb9rg4.d(19):\
    \ Error: `string` is used as a type\\n/tmp/tmpcqwb9rg4.d(20): Error: `string`\
    \ is used as a type\\n/tmp/tmpcqwb9rg4.d(23): Error: `string` is used as a type\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqwb9rg4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string postfix = string.dup;\n    string prefix = \"\";\n \
    \   while(!is_palindrome(postfix))\n    {\n        prefix = postfix[0] ~ prefix;\n\
    \        postfix = postfix[1..$];\n    }\n    return string ~ prefix;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcd772jab.d(18): Error: `string` is used as a type\\n/tmp/tmpcd772jab.d(19):\
    \ Error: `string` is used as a type\\n/tmp/tmpcd772jab.d(20): Error: undefined\
    \ identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcd772jab.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string longest_palindrome = longest_palindrome_postfix(string);\n\
    \    return string ~ longest_palindrome.idup;\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7utw5w5y.d(18): Error: `string` is used as a type\\n/tmp/tmp7utw5w5y.d(18):\
    \ Error: undefined identifier `longest_palindrome_postfix`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7utw5w5y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix.length].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf092rjhg.d(19): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf092rjhg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    int n = string.length;\n    if (n == 0)\n        return string;\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n            break;\n        i++;\n        j--;\n    }\n    if\
    \ (i == j)\n        return string;\n    string prefix = string[0..i];\n    string\
    \ suffix = string[i..$];\n    return prefix ~ make_palindrome(suffix) ~ prefix.dup.retro;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp43ngb6at.d(18): Error: cannot implicitly convert expression `string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp43ngb6at.d(32): Error: `string` is used as\
    \ a type\\n/tmp/tmp43ngb6at.d(33): Error: `string` is used as a type\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43ngb6at.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto suffix_length = longest_palindromic_suffix(string);\n\
    \    auto prefix = string[0..$-suffix_length];\n    return string ~ reverse(prefix);\n\
    }\n/*\n Find the length of the longest palindromic suffix of a string.\n    >>>\
    \ longest_palindromic_suffix('')\n    0\n    >>> longest_palindromic_suffix('cat')\n\
    \    0\n    >>> longest_palindromic_suffix('cata')\n    1\n    >>> longest_palindromic_suffix('catac')\n\
    \    3\n    >>> longest_palindromic_suffix('catacata')\n    3\n*/\nsize_t longest_palindromic_suffix(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) return 0;\n\
    \    auto suffix_length = 0;\n    for (auto i = 0; i < length; i++) \n    {\n\
    \        if (string[0..$-i] == reverse(string[i..$])) \n        {\n          \
    \  suffix_length = i;\n            break;\n        }\n    }\n    return suffix_length;\n\
    }\n/*\n Find the length of the longest palindromic prefix of a string.\n    >>>\
    \ longest_palindromic_prefix('')\n    0\n    >>> longest_palindromic_prefix('cat')\n\
    \    0\n    >>> longest_palindromic_prefix('cata')\n    0\n    >>> longest_palindromic_prefix('catac')\n\
    \    2\n    >>> longest_palindromic_prefix('catacata')\n    2\n*/\nsize_t longest_palindromic_prefix(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) return 0;\n\
    \    auto prefix_length = 0;\n    for (auto i = 0; i < length; i++) \n    {\n\
    \        if (string[i..$] == reverse(string[0..$-i])) \n        {\n          \
    \  prefix_length = i;\n            break;\n        }\n    }\n    return prefix_length;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpihtvbech.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpihtvbech.d(42):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpihtvbech.d(70):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpihtvbech.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprq6jxp3.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprq6jxp3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s)\n    {\n        return s ==\
    \ s.dup.reverse;\n    };\n    auto longest_palindrome_suffix = (string s)\n  \
    \  {\n        foreach (i; 0 .. s.length)\n        {\n            if (is_palindrome(s[i\
    \ .. $]))\n            {\n                return s[i .. $];\n            }\n \
    \       }\n        return \"\";\n    };\n    auto longest_palindrome_prefix =\
    \ (string s)\n    {\n        foreach (i; 0 .. s.length)\n        {\n         \
    \   if (is_palindrome(s[0 .. $ - i]))\n            {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n        return \"\";\n    };\n    return\
    \ string ~ longest_palindrome_suffix(string).dup.reverse;\n}\n/*\n Find the shortest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto is_palindrome = (string s)\n    {\n        return s ==\
    \ s.dup.reverse;\n    };\n    auto longest_palindrome_suffix = (string s)\n  \
    \  {\n        foreach (i; 0 .. s.length)\n        {\n            if (is_palindrome(s[i\
    \ .. $]))\n            {\n                return s[i .. $];\n            }\n \
    \       }\n        return \"\";\n    };\n    auto longest_palindrome_prefix =\
    \ (string s)\n    {\n        foreach (i; 0 .. s.length)\n        {\n         \
    \   if (is_palindrome(s[0 .. $ - i]))\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpata2813j.d(81): Error: found `unittest` instead of statement\\\
    n/tmp/tmpata2813j.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpata2813j.d(91): Error: semicolon expected following\
    \ auto declaration, not `End of File`\\n/tmp/tmpata2813j.d(91): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpata2813j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto suffix =\
    \ string[$-longest_palindrome_suffix..$];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvh4j6hw.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvh4j6hw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz_w08nj8.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_w08nj8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string.take(string.length / 2);\n    auto suffix\
    \ = string.drop(string.length / 2 + string.length % 2);\n    auto suffix_reverse\
    \ = suffix.reverse;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(suffix);\n\
    \    return string ~ suffix_reverse.take(suffix.length - longest_palindrome_suffix);\n\
    }\n/*\n Find the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacatac')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacataca')\n    7\n    >>> longest_palindrome_suffix_length('catacatacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatac')\n    11\n    >>> longest_palindrome_suffix_length('catacatacataca')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacata')\n    11\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacataca')\n\
    \    15\n    >>> longest_palindrome_suffix_length('cat\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphd93br49.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd93br49.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjl9im6oj.d(19): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjl9im6oj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2dgyb5c.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2dgyb5c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpolxiys.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpolxiys.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = string;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        if(is_palindrome(string[i .. $]))\n        {\n            result\
    \ ~= string[0 .. i].idup.reverse;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0o3qr1di.d(18): Error: `string` is used as a type\\n/tmp/tmp0o3qr1di.d(21):\
    \ Error: undefined identifier `is_palindrome`\\n/tmp/tmp0o3qr1di.d(23): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o3qr1di.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto reverse = string.dup.idup;\n    reverse.reverse;\n   \
    \ auto longest_palindrome = longest_palindrome_suffix(string);\n    auto prefix\
    \ = string[0..$-longest_palindrome.length];\n    return string ~ reverse[prefix.length..$];\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknh3g0oz.d(19): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpknh3g0oz.d(20):\
    \ Error: undefined identifier `longest_palindrome_suffix`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknh3g0oz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    auto prefix = string[0 .. len\
    \ / 2];\n    auto suffix = string[len / 2 + len % 2 .. $];\n    auto rev_prefix\
    \ = reverse(prefix);\n    auto rev_suffix = reverse(suffix);\n    auto prefix_len\
    \ = rev_suffix.length;\n    auto suffix_len = rev_prefix.length;\n    auto max_prefix_len\
    \ = min(prefix_len, suffix_len);\n    auto max_suffix_len = max_prefix_len;\n\
    \    while (max_prefix_len > 0) \n    {\n        if (rev_suffix[0 .. max_prefix_len]\
    \ == rev_prefix[suffix_len - max_prefix_len .. $]) \n        {\n            break;\n\
    \        }\n        max_prefix_len--;\n    }\n    return string ~ rev_suffix[max_prefix_len\
    \ .. $];\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4dou5cgg.d(21): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4dou5cgg.d(22):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4dou5cgg.d(25):\
    \ Error: undefined identifier `min`, did you mean function `main`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dou5cgg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    // The idea is to use the fact that if we have a palindrome, then\n    //\
    \ we can find the longest palindromic suffix by simply reversing the string\n\
    \    // and finding the longest common prefix of the reversed string and the original\
    \ string.\n    // This is O(n) operation.\n    string reversed = string.dup.reverse;\n\
    \    string longest_palindromic_suffix = string.lcp(reversed);\n    // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    // This is O(n) operation.\n    return string ~ string.idup[0..$\
    \ - longest_palindromic_suffix.length].reverse;\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmcj5skpm.d(23): Error: `string` is used as a type\\n/tmp/tmpmcj5skpm.d(23):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpmcj5skpm.d(24):\
    \ Error: `string` is used as a type\\n/tmp/tmpmcj5skpm.d(24): Error: no property\
    \ `lcp` for type `string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpmcj5skpm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix that is a palindrome.\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_substring(string);\n    // Reverse\
    \ the prefix that comes before the palindromic suffix.\n    auto reversed_prefix\
    \ = string[0..$-longest_palindrome_suffix.length].dup.reverse;\n    // Append\
    \ the reversed prefix to the end of the string.\n    return string ~ reversed_prefix;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2sciuj1y.d(19): Error: undefined identifier `longest_palindrome_substring`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sciuj1y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy13cgjnv.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy13cgjnv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf13pf3w4.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf13pf3w4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$ - longest_palindrome_suffix].dup.reverse;\n\
    }\n/*\n    Find the length of the longest palindromic suffix of a string.\n  \
    \  >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacataca')\n    5\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    5\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    7\n   \
    \ >>> longest_palindrome_suffix_length('catacatacataca')\n    7\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    7\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    9\n    >>> longest_palindrome_suffix_length('cat\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7_y4ibwp.d(23): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_y4ibwp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbc2_px49.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbc2_px49.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0) return string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngkxuo01.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngkxuo01.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_et093bu.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_et093bu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix_length = string.length;\n    auto suffix_length\
    \ = string.length;\n    while (suffix_length > 0) \n    {\n        if (string[0\
    \ .. prefix_length] == string[suffix_length .. $]) \n        {\n            break;\n\
    \        }\n        --suffix_length;\n    }\n    return string ~ string[0 .. prefix_length\
    \ - suffix_length].reverse;\n}\n/*\n Find the shortest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n\
    \    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome_2(string\
    \ string) \n{\n    auto prefix_length = string.length;\n    auto suffix_length\
    \ = string.length;\n    while (suffix_length > 0) \n    {\n        if (string[0\
    \ .. prefix_length] == string[suffix_length .. $]) \n        {\n            break;\n\
    \        }\n        --suffix_length;\n    }\n    return string ~ string[0 .. prefix_length\
    \ - suffix_length].reverse;\n}\n/*\n Find the shortest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n\
    \    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome_3(string\
    \ string) \n{\n    auto prefix_length = string.length;\n    auto suffix_length\
    \ = string.length;\n    while (suffix_length > 0\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcgbc6bp.d(75): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpwcgbc6bp.d(85): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcgbc6bp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0) \n    {\n    \
    \    return \"\";\n    }\n    auto prefix = string[0 .. len / 2];\n    auto suffix\
    \ = string[len / 2 .. len];\n    auto suffix_len = suffix.length;\n    auto prefix_len\
    \ = prefix.length;\n    auto suffix_palindrome_len = 0;\n    for (int i = 0; i\
    \ < suffix_len; i++) \n    {\n        if (suffix[i] == suffix[suffix_len - i -\
    \ 1]) \n        {\n            suffix_palindrome_len++;\n        } \n        else\
    \ \n        {\n            break;\n        }\n    }\n    if (suffix_palindrome_len\
    \ == suffix_len) \n    {\n        return string;\n    }\n    auto prefix_palindrome_len\
    \ = 0;\n    for (int i = 0; i < prefix_len; i++) \n    {\n        if (prefix[i]\
    \ == prefix[prefix_len - i - 1]) \n        {\n            prefix_palindrome_len++;\n\
    \        } \n        else \n        {\n            break;\n        }\n    }\n\
    \    if (prefix_palindrome_len == prefix_len) \n    {\n        return string;\n\
    \    }\n    if (prefix_palindrome_len > suffix_palindrome_len) \n    {\n     \
    \   return string ~ string[0 .. prefix_palindrome_len - 1].reverse;\n    } \n\
    \    else \n    {\n        return string ~ string[suffix_palindrome_len .. len\
    \ - 1].reverse;\n    }\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zdzkula.d(61): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp2zdzkula.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zdzkula.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    string postfix = longest_palindrome_postfix(string);\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string ~ postfix.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp740c7wq1.d(22): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmp740c7wq1.d(23): Error: found `{` when expecting `;` following\
    \ `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp740c7wq1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp03n9wfhu.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03n9wfhu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2fuegiq0.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fuegiq0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    auto prefix_len = len;\n   \
    \ for (; prefix_len > 0; --prefix_len) \n    {\n        if (string[0 .. prefix_len]\
    \ == string[$ - prefix_len .. $]) \n        {\n            break;\n        }\n\
    \    }\n    return string ~ string[$ - prefix_len .. $].reverse;\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6tp8d0n.d(27): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6tp8d0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0)\n      \
    \  return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt9camfds.d(21): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9camfds.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string.take(string.length / 2);\n    auto suffix\
    \ = string.drop(string.length / 2 + string.length % 2);\n    auto suffix_palindrome\
    \ = suffix.take(suffix.length - suffix.findLast(prefix.reverse));\n    return\
    \ string ~ suffix_palindrome.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40w_9j91.d(18): Error: no property `take` for type `string`\\\
    n/tmp/tmp40w_9j91.d(19): Error: no property `drop` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40w_9j91.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9n_ef805.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9n_ef805.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1xaqa36.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1xaqa36.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4f1svqo_.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4f1svqo_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9gtg878.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9gtg878.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'atacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'atacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'atacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n  \
    \  'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'atacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'atacatacatacatac'\n    >>> longest\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghry4z1_.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghry4z1_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacata')\n    7\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    9\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    if\
    \ (string.length == 0) \n    {\n        return 0;\n    }\n    else \n    {\n \
    \       auto reversed_string = reverse(string);\n        auto reversed_prefix\
    \ = reversed_string[0..$-1];\n        auto prefix = string[0..$-1];\n        auto\
    \ common_prefix_length = common_prefix_length(prefix, reversed_prefix);\n    \
    \    return 2 * common_prefix_length + 1;\n    }\n}\n/*\n Find the length of the\
    \ longest common prefix of two strings.\n    >>> common_prefix_length('', '')\n\
    \    0\n    >>> common_prefix_length('', 'cat')\n    0\n    >>> common_prefix_length('cat',\
    \ '')\n    0\n    >>> common_prefix_length('cat', 'cat')\n    3\n    >>> common_prefix_length('cat',\
    \ 'cats')\n    3\n    >>> common_prefix_length('cat', 'caterpillar')\n    3\n\
    \    >>> common_prefix_length('caterpillar', 'cat')\n    3\n    >>> common_prefix_length('caterpillar',\
    \ 'caterpillar')\n    11\n    >>> common_prefix_length('caterpillar', 'caterpillars')\n\
    \    11\n    >>> common_\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp90723665.d(52): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90723665.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reversed = string.dup.reverse;\n    string prefix =\
    \ string.idup.take(string.length / 2).idup;\n    string suffix = string.idup.drop(string.length\
    \ / 2).idup;\n    string reversed_prefix = reversed.idup.take(string.length /\
    \ 2).idup;\n    string reversed_suffix = reversed.idup.drop(string.length / 2).idup;\n\
    \    string result;\n    if (prefix == reversed_suffix) \n    {\n        result\
    \ = string ~ reversed_prefix;\n    } \n    else if (suffix == reversed_prefix)\
    \ \n    {\n        result = reversed_suffix ~ string;\n    } \n    else \n   \
    \ {\n        result = string ~ reversed_prefix;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkbzioxhk.d(18): Error: `string` is used as a type\\n/tmp/tmpkbzioxhk.d(18):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpkbzioxhk.d(19):\
    \ Error: `string` is used as a type\\n/tmp/tmpkbzioxhk.d(19): Error: no property\
    \ `take` for type `string`\\n/tmp/tmpkbzioxhk.d(20): Error: `string` is used as\
    \ a type\\n/tmp/tmpkbzioxhk.d(20): Error: no property `drop` for type `string`\\\
    n/tmp/tmpkbzioxhk.d(21): Error: `string` is used as a type\\n/tmp/tmpkbzioxhk.d(22):\
    \ Error: `string` is used as a type\\n/tmp/tmpkbzioxhk.d(23): Error: `string`\
    \ is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbzioxhk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_length = longest_palindrome_length(string);\n\
    \    auto prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxga1uw3e.d(18): Error: undefined identifier `longest_palindrome_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxga1uw3e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0)\n        return 0;\n    if (length\
    \ == 1)\n        return 1;\n    auto half_length = length / 2;\n    for (size_t\
    \ i = 0; i < half_length; i++) \n    {\n        if (string[i] != string[$-1-i])\n\
    \            return 0;\n    }\n    return length;\n}\n/*\n Find the longest palindromic\
    \ substring of a string.\n    >>> longest_palindrome_substring('')\n    ''\n \
    \   >>> longest_palindrome_substring('cat')\n    'c'\n    >>> longest_palindrome_substring('cata')\n\
    \    'ata'\n    >>> longest_palindrome_substring('catac')\n    'catac'\n    >>>\
    \ longest_palindrome_substring('catacata')\n    'catacata'\n    >>> longest_palindrome_substring('catacatac')\n\
    \    'catacatac'\n*/\nstring longest_palindrome_substring(string string) \n{\n\
    \    auto length = string.length;\n    if (length == 0)\n        return \"\";\n\
    \    if (length == 1)\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp53wjwfbb.d(73): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53wjwfbb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto prefix_len = len;\n    while (prefix_len > 0)\n    {\n   \
    \     auto prefix = string[0 .. prefix_len];\n        auto suffix = string[len\
    \ - prefix_len .. len];\n        if (prefix == suffix)\n            break;\n \
    \       prefix_len--;\n    }\n    return string ~ string[prefix_len .. len].reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprpkxw7ry.d(30): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmprpkxw7ry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcsio3zoj.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsio3zoj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8tr0yshu.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tr0yshu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpki_0e4n0.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki_0e4n0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ii95sxg.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ii95sxg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return string;\n \
    \   auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n        if\
    \ (suffix == suffix.reverse) break;\n        suffix = suffix[1 .. $];\n    }\n\
    \    return string ~ suffix.reverse[0 .. n - suffix.length];\n}\n/*\n Find the\
    \ shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return string;\n \
    \   auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n        if\
    \ (suffix == suffix.reverse) break;\n        suffix = suffix[1 .. $];\n    }\n\
    \    return string ~ suffix.reverse[0 .. n - suffix.length];\n}\n/*\n Find the\
    \ shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return string;\n \
    \   auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n        if\
    \ (suffix == suffix.reverse) break;\n        suffix = suffix[1 ..\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0427rrmi.d(72): Error: expression expected, not `unittest`\\\
    n/tmp/tmp0427rrmi.d(73): Error: found `{` when expecting `,`\\n/tmp/tmp0427rrmi.d(74):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp0427rrmi.d(74): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp0427rrmi.d(74): Error: expression expected,\
    \ not `=`\\n/tmp/tmp0427rrmi.d(74): Error: found `make_palindrome` when expecting\
    \ `,`\\n/tmp/tmp0427rrmi.d(74): Error: expression expected, not `;`\\n/tmp/tmp0427rrmi.d(76):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp0427rrmi.d(76): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp0427rrmi.d(77): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp0427rrmi.d(78): Error: found `;` when expecting `,`\\n/tmp/tmp0427rrmi.d(79):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp0427rrmi.d(80): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp0427rrmi.d(81): Error: expression expected, not\
    \ `}`\\n/tmp/tmp0427rrmi.d(82): Error: found `void` when expecting `,`\\n/tmp/tmp0427rrmi.d(82):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp0427rrmi.d(82): Error: expression\
    \ expected, not `}`\\n/tmp/tmp0427rrmi.d(82): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp0427rrmi.d(82): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp0427rrmi.d(82): Error: found `End of File` when expecting `;`\
    \ following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0427rrmi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp775qgni9.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp775qgni9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphmqzs2el.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmphmqzs2el.d(20): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmqzs2el.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix that is a palindrome.\n    auto\
    \ postfix = string.dup;\n    while (!is_palindrome(postfix)) {\n        postfix.popFront();\n\
    \    }\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    return string ~ reverse(string[0 ..\
    \ $ - postfix.length]);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzsklj30.d(20): Error: undefined identifier `is_palindrome`\\\
    n/tmp/tmppzsklj30.d(21): Error: no property `popFront` for type `char[]`\\n/tmp/tmppzsklj30.d(24):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmppzsklj30.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqqj_2pr.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqqj_2pr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpccfj9cix.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpccfj9cix.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    return string ~ reverse(string[0..$-longest_palindrome_suffix]);\n}\nunittest\n\
    {\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkror5een.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkror5een.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_ke84ot.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmpg_ke84ot.d(20): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_ke84ot.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    string postfix = longest_palindrome_postfix(string);\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string ~ postfix.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8lym8br2.d(22): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmp8lym8br2.d(23): Error: found `{` when expecting `;` following\
    \ `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8lym8br2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0)\n      \
    \  return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfj958kk1.d(21): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfj958kk1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkfy8z330.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfy8z330.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = string;\n    size_t length = string.length;\n\
    \    size_t i = 0;\n    size_t j = length - 1;\n    size_t k = length - 1;\n \
    \   while (i < j) \n    {\n        if (string[i] == string[j]) \n        {\n \
    \           i++;\n            j--;\n        }\n        else \n        {\n    \
    \        i = 0;\n            k--;\n            j = k;\n        }\n    }\n    result\
    \ += string[0..k].dup.reverse;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0atuu7d7.d(18): Error: `string` is used as a type\\n/tmp/tmp0atuu7d7.d(37):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp0atuu7d7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    string postfix = longest_palindrome_postfix(string);\n    // Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string ~ reverse(string[0 .. $ - postfix.length]);\n}\n\
    unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9e2fzqf.d(19): Error: `string` is used as a type\\n/tmp/tmpc9e2fzqf.d(19):\
    \ Error: undefined identifier `longest_palindrome_postfix`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9e2fzqf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto suffix = string[0 .. len];\n    while (suffix.length > 0)\
    \ \n    {\n        if (suffix == suffix.dup.reverse)\n            break;\n   \
    \     suffix = suffix[1 .. $];\n    }\n    return string ~ suffix.dup.reverse[0\
    \ .. len - suffix.length];\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2cylqn6.d(24): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpd2cylqn6.d(28):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(char[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2cylqn6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return string;\n    }\n    // Find the longest palindromic suffix.\n\
    \    // If the string is already a palindrome, the suffix is the whole string.\n\
    \    // Otherwise, the suffix is the longest palindromic suffix of the string\
    \ without the first character.\n    auto suffix = string;\n    while (!is_palindrome(suffix))\
    \ \n    {\n        suffix = suffix[1 .. $];\n    }\n    // Append the reverse\
    \ of the prefix to the end of the string.\n    return string ~ reverse(string[0\
    \ .. $ - suffix.length]);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojcubo40.d(27): Error: undefined identifier `is_palindrome`\\\
    n/tmp/tmpojcubo40.d(32): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpojcubo40.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcsaw_iv1.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsaw_iv1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzb353q96.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzb353q96.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0)\n      \
    \  return string;\n    auto suffix = string.dup;\n    auto prefix = string.dup;\n\
    \    auto prefix_length = length;\n    while (prefix_length > 0)\n    {\n    \
    \    if (suffix.startsWith(prefix))\n            break;\n        suffix.popFront;\n\
    \        prefix.popBack;\n        --prefix_length;\n    }\n    if (prefix_length\
    \ == 0)\n        return string ~ string.dup.reverse;\n    return string ~ string[0..$-prefix_length].reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_e7_4pcm.d(26): Error: no property `startsWith` for type `char[]`\\\
    n/tmp/tmp_e7_4pcm.d(28): Error: no property `popFront` for type `char[]`\\n/tmp/tmp_e7_4pcm.d(29):\
    \ Error: no property `popBack` for type `char[]`\\n/tmp/tmp_e7_4pcm.d(33): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp_e7_4pcm.d(34):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_e7_4pcm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_postfix = longest_palindrome_postfix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_postfix.length];\n    return\
    \ string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzytoibtr.d(18): Error: undefined identifier `longest_palindrome_postfix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzytoibtr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    auto suffix_palindrome = string[0\
    \ .. n].dup;\n    for (int i = 0; i < n; i++) \n    {\n        if (suffix_palindrome[0\
    \ .. n - i] == suffix_palindrome[i .. n].dup.retro) \n        {\n            return\
    \ string ~ string[0 .. n - i].dup.retro;\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp336ti6iz.d(22): Error: no property `retro` for type `char[]`\\\
    n/tmp/tmp336ti6iz.d(24): Error: no property `retro` for type `char[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp336ti6iz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n   \
    \ auto longest_palindrome_suffix = string;\n    for (size_t i = 0; i < string.length;\
    \ i++) \n    {\n        if (is_palindrome(string[i..$])) \n        {\n       \
    \     longest_palindrome_suffix = string[i..$];\n            break;\n        }\n\
    \    }\n    return longest_palindrome_suffix;\n}\n/*\n Check if a string is a\
    \ palindrome.\n    >>> is_palindrome('')\n    true\n    >>> is_palindrome('a')\n\
    \    true\n    >>> is_palindrome('aa')\n    true\n    >>> is_palindrome('aba')\n\
    \    true\n    >>> is_palindrome('abba')\n    true\n    >>> is_palindrome('ab')\n\
    \    false\n    >>> is_palindrome('abc')\n    false\n*/\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmza0axix.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpmza0axix.d(38):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmza0axix.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    5\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    auto length = string.length;\n\
    \    if (length == 0) \n    {\n        return 0;\n    }\n    auto result = 0;\n\
    \    for (auto i = 0; i < length; i++) \n    {\n        if (is_palindrome(string[i..$]))\
    \ \n        {\n            result = length - i;\n            break;\n        }\n\
    \    }\n    return result;\n}\n/*\n Find the length of the longest palindromic\
    \ prefix of a string.\n    >>> longest_palindrome_prefix_length('')\n    0\n \
    \   >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    2\n    >>> longest_palindrome_prefix_length('catac')\n    3\n    >>> longest_palindrome_prefix_length('catacata')\n\
    \    3\n*/\nsize_t longest_palindrome_prefix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0) \n    {\n        return 0;\n \
    \   }\n    auto result = 0;\n    for (auto i = 0; i < length; i++) \n    {\n \
    \       if (is_palindrome(string[0..$-i])) \n        {\nunittest\n{\n    alias\
    \ candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2nl9iwl.d(78): Error: found `unittest` instead of statement\\\
    n/tmp/tmp_2nl9iwl.d(88): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_2nl9iwl.d(88): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_2nl9iwl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbgj7k0l.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbgj7k0l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto suffix_len = longest_palindrome_suffix(string);\n    return\
    \ string ~ string[0..$-suffix_len].dup.reverse;\n}\nunittest\n{\n    alias candidate\
    \ = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpmvr125.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpmvr125.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return \"\";\n    }\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == length) \n    {\n        return string;\n\
    \    }\n    auto prefix = string[0 .. length - longest_palindrome_suffix];\n \
    \   return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9seoekz5.d(23): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9seoekz5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string.take(string.length - longest_palindromic_suffix(string).length);\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm2vwc4ss.d(18): Error: no property `take` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2vwc4ss.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result;\n    int length = string.length;\n    int i\
    \ = 0;\n    int j = length - 1;\n    while (i < j) \n    {\n        if (string[i]\
    \ != string[j]) \n        {\n            break;\n        }\n        i++;\n   \
    \     j--;\n    }\n    if (i == j) \n    {\n        return string;\n    }\n  \
    \  if (i == 0) \n    {\n        return string[0 .. $] ~ string[1 .. $];\n    }\n\
    \    result = string[i .. $];\n    result ~= string[0 .. i];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjoto2on.d(18): Error: `string` is used as a type\\n/tmp/tmpcjoto2on.d(19):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjoto2on.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0)\n      \
    \  return string;\n    auto prefix_length = length;\n    while (prefix_length\
    \ > 0)\n    {\n        if (is_palindrome(string[0 .. prefix_length]))\n      \
    \      break;\n        prefix_length--;\n    }\n    return string ~ string[prefix_length\
    \ .. $].reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpww6jmlec.d(24): Error: undefined identifier `is_palindrome`\\\
    n/tmp/tmpww6jmlec.d(28): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpww6jmlec.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix].idup.reverse;\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpck3p574g.d(19): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck3p574g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string postfix = string.dup;\n    string prefix = \"\";\n \
    \   string result = \"\";\n    while(postfix.length > 0) \n    {\n        if(postfix.isPalindrome)\
    \ \n        {\n            result = postfix ~ prefix;\n            break;\n  \
    \      }\n        prefix ~= postfix[0];\n        postfix = postfix[1..$];\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqzuy2j_.d(18): Error: `string` is used as a type\\n/tmp/tmpeqzuy2j_.d(19):\
    \ Error: `string` is used as a type\\n/tmp/tmpeqzuy2j_.d(20): Error: `string`\
    \ is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqzuy2j_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpan8y_uuc.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan8y_uuc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjrrdqy6d.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrrdqy6d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9cyidqm.d(21): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9cyidqm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto prefix = string[0 .. len / 2];\n    auto suffix = string[len\
    \ / 2 .. len];\n    if (suffix.length > prefix.length)\n        suffix = suffix[1\
    \ .. $];\n    auto suffix_len = suffix.length;\n    auto prefix_len = prefix.length;\n\
    \    auto suffix_palindrome_len = 0;\n    for (int i = 0; i < suffix_len; i++)\n\
    \    {\n        if (suffix[i] == suffix[suffix_len - i - 1])\n            suffix_palindrome_len++;\n\
    \        else\n            break;\n    }\n    if (suffix_palindrome_len == suffix_len)\n\
    \        return string;\n    auto prefix_palindrome_len = 0;\n    for (int i =\
    \ 0; i < prefix_len; i++)\n    {\n        if (prefix[i] == prefix[prefix_len -\
    \ i - 1])\n            prefix_palindrome_len++;\n        else\n            break;\n\
    \    }\n    if (prefix_palindrome_len == prefix_len)\n        return string ~\
    \ string[prefix_len .. $].reverse;\n    auto suffix_palindrome = suffix[0 .. suffix_palindrome_len];\n\
    \    auto prefix_palindrome = prefix[prefix_len - prefix_palindrome_len .. $];\n\
    \    if (suffix_palindrome_len > prefix_palindrome_len)\n        return string\
    \ ~ suffix_palindrome.reverse;\n    else\n        return string ~ prefix_palindrome.reverse;\n\
    }\n/*\n Find the shortest palindrome that begins with a supplied string.\n   \
    \ Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpff4oldh4.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpff4oldh4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto len = string.length;\n    if (len == 0)\n        return\
    \ string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcp99xjws.d(21): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp99xjws.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfic7mn3p.d(18): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfic7mn3p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_length = longest_palindrome_length(string);\n\
    \    auto prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_wkvh6s.d(18): Error: undefined identifier `longest_palindrome_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_wkvh6s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto string_length = string.length;\n    if (string_length\
    \ == 0)\n        return string;\n    auto longest_palindrome_suffix_length = longest_palindrome_suffix_length_naive(string);\n\
    \    auto prefix_length = string_length - longest_palindrome_suffix_length;\n\
    \    return string ~ string[0..prefix_length].dup.reverse;\n}\nunittest\n{\n \
    \   alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\"\
    );\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\"\
    ) == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvo7904vs.d(21): Error: undefined identifier `longest_palindrome_suffix_length_naive`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo7904vs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return \"\";\n   \
    \ auto suffix = string[n - 1 .. $];\n    auto prefix = string[0 .. n - 1];\n \
    \   while (suffix.length > 0) \n    {\n        if (suffix == prefix) break;\n\
    \        suffix = suffix[1 .. $];\n        prefix = prefix[0 .. $ - 1];\n    }\n\
    \    return string ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf2nomw8o.d(28): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2nomw8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_postfix = longest_palindrome_suffix(string);\n  \
    \  // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string ~ reverse(string[0 .. $ - longest_palindrome_postfix]);\n\
    }\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lu3vrbv.d(19): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lu3vrbv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('catacata')\n    'atacata'\n\
    */\nstring longest_palindrome_suffix_of(string string) \n{\n    auto length =\
    \ string.length;\n    foreach (i; 0..length) \n    {\n        if (is_palindrome(string[$-i..$]))\
    \ \n        {\n            return string[$-i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n\
    \    true\n    >>> is_palindrome('aba')\n    true\n    >>> is_palindrome('abba')\n\
    \    true\n    >>> is_palindrome('abc')\n    false\n    >>> is_palindrome('abca')\n\
    \    false\n*/\nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmqg6n7n.d(20): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpsmqg6n7n.d(40):\
    \ Error: undefined identifier `is_palindrome`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsmqg6n7n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'atacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'atacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'atacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n  \
    \  'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'atacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'atacatacatacatac'\n    >>> longest\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8enw5te.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8enw5te.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqe3qc3rh.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe3qc3rh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6d096ae3.d(18): Error: no property `empty` for type `string`\\\
    n/tmp/tmp6d096ae3.d(20): Error: undefined identifier `longest_palindrome_suffix_of`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d096ae3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}\nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_dc8f8l.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_dc8f8l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjzxdh71.d(18): Error: undefined identifier `longest_palindrome_suffix`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjzxdh71.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n \
    \   auto length = string.length;\n    if (length == 0)\n        return \"\";\n\
    \    auto half_length = (length + 1) / 2;\n    auto longest_palindrome_suffix\
    \ = string[$-1..$];\n    foreach (i; 0..half_length) \n    {\n        auto suffix\
    \ = string[$-i..$];\n        auto prefix = string[0..i];\n        if (suffix ==\
    \ prefix.reverse)\n            longest_palindrome_suffix = suffix;\n    }\n  \
    \  return longest_palindrome_suffix;\n}\n/*\n Find the longest palindrome prefix\
    \ of a string.\n    >>> longest_palindrome_prefix_of('')\n    ''\n    >>> longest_palindrome_prefix_of('cat')\n\
    \    'c'\n    >>> longest_palindrome_prefix_of('cata')\n    'ca'\n    >>> longest_palindrome_prefix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_prefix_of('cataca')\n    'cataca'\n \
    \  \nunittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"\
    xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6x99txcd.d(55): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x99txcd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplixnjsde.d(18): Error: undefined identifier `longest_palindrome_suffix_length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplixnjsde.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'catacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'catacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n \
    \   'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'catacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'catacatacatacatac'\n    >>> longest\nunittest\n{\n    alias candidate =\
    \ make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"\
    xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnn9mhct.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnn9mhct.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    auto prefix = string[0 ..\
    \ length / 2];\n    auto suffix = string[length / 2 .. $];\n    auto reversed_prefix\
    \ = reverse(prefix);\n    auto palindrome_suffix = suffix.find(reversed_prefix);\n\
    \    if (palindrome_suffix.empty)\n    {\n        return string ~ reversed_prefix;\n\
    \    }\n    else\n    {\n        return string ~ reversed_prefix[palindrome_suffix.length\
    \ .. $];\n    }\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\n  \
    \  assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vqfgth2.d(21): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp0vqfgth2.d(22):\
    \ Error: no property `find` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0vqfgth2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    // Find the longest palindromic suffix.\n    // If the string\
    \ is a palindrome, return it.\n    int length = string.length;\n    if (length\
    \ == 0)\n        return string;\n    if (length == 1)\n        return string ~\
    \ string;\n    if (length == 2)\n        return string[0] == string[1] ? string\
    \ ~ string : string ~ string[0];\n    int i = length - 1;\n    while (i >= 0)\
    \ \n    {\n        if (string[0..i] == string[$-i..$])\n            break;\n \
    \       i--;\n    }\n    // Append reverse of the string prefix to the end of\
    \ the string.\n    return string ~ string[0..$-i].reverse;\n}\nunittest\n{\n \
    \   alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\"\
    );\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\"\
    ) == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptqwrw1ey.d(20): Error: cannot implicitly convert expression `string.length`\
    \ of type `ulong` to `int`\\n/tmp/tmptqwrw1ey.d(35): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string)`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptqwrw1ey.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto prefix = string.take(string.length - string.longest_palindromic_suffix.length);\n\
    \    return string ~ prefix.reverse;\n}\nunittest\n{\n    alias candidate = make_palindrome;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n\
    \    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") ==\
    \ \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtvcesbu.d(18): Error: no property `take` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtvcesbu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == string.length)\n        return string;\n\
    \    auto prefix = string[0 .. $ - longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    if\
    \ (string.length <= 1)\n        return 0;\n    auto last_index = string.length\
    \ - 1;\n    for (size_t i = 0; i < last_index; i++) \n    {\n        if (string[i]\
    \ == string[last_index]) \n        {\n            auto is_palindrome = true;\n\
    \            for (size_t j = 1; i + j < last_index - j; j++) \n            {\n\
    \                if (string[i + j] != string[last_index - j]) \n             \
    \   {\n                    is_palindrome = false;\n                    break;\n\
    \                }\n            }\n            if (is_palindrome)\n          \
    \      return last_index - i + 1;\n        }\n    }\n    return 0;\n}\n/*\n Find\
    \ the longest palindromic substring of a string.\n    >>> longest_palindrome_substring('')\n\
    \    ''\n    >>> longest_palindrome_substring('cat')\n    'c'\n    >>> longest_palindrome_substring('cata')\n\
    \    'ata'\n    >>> longest_palindrome_substring('catac')\n   \nunittest\n{\n\
    \    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\"\
    );\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"\
    xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
    jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptrms9i0n.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrms9i0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
