name: HumanEval_23_strlen
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i;\n    for (i = 0; string[i]; i++)\n        ;\n    return i;\n}\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jfjt0ys.d(14): Error: use `{ }` for an empty statement, not\
    \ `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jfjt0ys.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpa0d_a83u.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpa0d_a83u.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpa0d_a83u.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpa0d_a83u.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x3bb16554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4j9zn28j.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp4j9zn28j.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp4j9zn28j.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp4j9zn28j.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xee380554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmqcol0le.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpmqcol0le.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpmqcol0le.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpmqcol0le.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x65491554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i])\n        i++;\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_b147x6x.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp_b147x6x.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp_b147x6x.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmp_b147x6x.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x7aee3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpagngenz3.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpagngenz3.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpagngenz3.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpagngenz3.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xe3248554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(ch; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    while(string[len])\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpr28o9rwh.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpr28o9rwh.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpr28o9rwh.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpr28o9rwh.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x6b629554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    foreach(c; string)\n        i++;\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(wstring string) \n\
    {\n    return string.length;\n}\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(dstring string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpumil8k1t.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpumil8k1t.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpumil8k1t.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpumil8k1t.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x1d919554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpjl3phdkj.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpjl3phdkj.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpjl3phdkj.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpjl3phdkj.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xd0e38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp22zkqd90.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp22zkqd90.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp22zkqd90.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp22zkqd90.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xb2b79554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i]) \n        i++;\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpn45c300f.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpn45c300f.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpn45c300f.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpn45c300f.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xd2477554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp96kaa42g.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp96kaa42g.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp96kaa42g.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp96kaa42g.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x8bbc6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) {\n        length++;\n    }\n\
    \    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n    {\n        len++;\n    }\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp46cf45pi.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp46cf45pi.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp46cf45pi.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp46cf45pi.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xd7ebe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcc_eu_b0.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpcc_eu_b0.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpcc_eu_b0.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpcc_eu_b0.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xea2b1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i;\n    for (i = 0; string[i]; i++) {}\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_8cx8t32.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e06]\\n??:? long tmp_8cx8t32.strlen(immutable(char)[])\
    \ [0x427a24]\\n??:? void tmp_8cx8t32.__unittest_L16_C1() [0x427a54]\\n??:? void\
    \ tmp_8cx8t32.__modtest() [0x427ad4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baef]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a982]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb15]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a959]\\n??:? runModuleUnitTests [0x42b8c5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428218]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819f]\\n??:? _d_run_main [0x42810a]\\n??:? main [0x427ae7]\\\
    n??:? __libc_start_main [0x1dac7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpi5363abt.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpi5363abt.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpi5363abt.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpi5363abt.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x5eced554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmps09tzsxf.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmps09tzsxf.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmps09tzsxf.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmps09tzsxf.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x30cbf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp49pclxie.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp49pclxie.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp49pclxie.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp49pclxie.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x7b21554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    while (string[len] != '\\0')\n        len++;\n    return\
    \ len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6zjjg4ut.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp6zjjg4ut.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp6zjjg4ut.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmp6zjjg4ut.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x57d40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpawll3k_m.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpawll3k_m.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpawll3k_m.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpawll3k_m.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x5927554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpauwh8ksd.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpauwh8ksd.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpauwh8ksd.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpauwh8ksd.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x4c4b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpnqxl_5vq.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpnqxl_5vq.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpnqxl_5vq.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpnqxl_5vq.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x33684554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbs2g7rne.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpbs2g7rne.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpbs2g7rne.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpbs2g7rne.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x1ac0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkifbwpso.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpkifbwpso.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpkifbwpso.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpkifbwpso.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xbc2ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long len = 0;\n    foreach(c; string)\n    {\n        len++;\n    }\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpps7fnmjp.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpps7fnmjp.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpps7fnmjp.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmpps7fnmjp.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x7df0d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n \
    \   }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpz6qcnpxa.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmpz6qcnpxa.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmpz6qcnpxa.__unittest_L17_C1() [0x427a5c]\\n??:? void\
    \ tmpz6qcnpxa.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xbbedb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp9cuzw739.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp9cuzw739.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp9cuzw739.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp9cuzw739.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xf98e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6bminmt6.d(13): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x427e0e]\\n??:? long tmp6bminmt6.strlen(immutable(char)[])\
    \ [0x427a26]\\n??:? void tmp6bminmt6.__unittest_L19_C1() [0x427a5c]\\n??:? void\
    \ tmp6bminmt6.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a961]\\n??:? runModuleUnitTests [0x42b8cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428220]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a7]\\n??:? _d_run_main [0x428112]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xbcfb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long i;\n    for (i = 0; string[i]; i++)\n        ;\n    return i;\n}\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp230po8u7.d(14): Error: use `{ }` for an empty statement, not\
    \ `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp230po8u7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n        length++;\n    return\
    \ length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(char c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    for (long i = 0; i < string.length; i++) \n    {\n\
    \        if (string[i] == '\\0') \n        {\n            break;\n        }\n\
    \        length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n Return length of given string\n    >>> strlen('')\n\
    \    0\n    >>> strlen('abc')\n    3\n    \n*/\nlong strlen(string string) \n\
    {\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n  \
    \  }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
