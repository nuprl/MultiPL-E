name: HumanEval_69_search
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4,\
  \ 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     \
  \   search([5, 5, 4, 4, 4]) == -1\n    \n*/\nlong search(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n \
    \   {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= i && freq[i] > max)\n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        long\
    \ count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] sorted\
    \ = lst.dup.sort;\n    long[] counts = sorted.group.map!(a => a.length).array;\n\
    \    long[] filtered = zip(sorted, counts).filter!(a => a[0] <= a[1]).map!(a =>\
    \ a[0]).array;\n    return filtered.length == 0 ? -1 : filtered[$-1];\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n\
    \        {\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if(counts[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    foreach(e; lst)\n    {\n        if(e >\
    \ max)\n            max = e;\n    }\n    long[] freq = new long[max + 1];\n  \
    \  foreach(e; lst)\n    {\n        freq[e]++;\n    }\n    foreach(e; freq)\n \
    \   {\n        if(e >= freq.length)\n            return freq.length;\n    }\n\
    \    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n    }\n    foreach(i; arr)\n    {\n        if(i\
    \ >= arr[i])\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    if(lst.length == 0) return -1;\n    long max\
    \ = 0;\n    long max_count = 0;\n    foreach(long i; lst)\n    {\n        long\
    \ count = 0;\n        foreach(long j; lst)\n        {\n            if(i == j)\
    \ count++;\n        }\n        if(count >= i && count >= max_count)\n        {\n\
    \            max = i;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; lst)\n    {\n        counts[i]++;\n    }\n    foreach(i; counts)\n\
    \    {\n        if(i >= counts[i])\n        {\n            return i;\n       \
    \ }\n    }\n    return -1;\n}", "{\n    auto result = -1L;\n    auto freq = 0L;\n\
    \    foreach(i; lst)\n    {\n        if(i > freq)\n        {\n            auto\
    \ count = lst.count(i);\n            if(count >= i)\n            {\n         \
    \       result = i;\n                freq = count;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ counts = lst.dup.sort.counts;\n    long[] result = new long[sorted.length];\n\
    \    foreach(i, v; sorted)\n    {\n        if(v == counts[i])\n        {\n   \
    \         result ~= v;\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return result.max;\n    }\n\
    }", "{\n    auto freq = new int[lst.length];\n    foreach(i; lst)\n    {\n   \
    \     freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n\
    \        {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n\
    \    long max = 0;\n    long count = 0;\n    long result = -1;\n    foreach(i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    foreach(i; lst)\n    {\n        if(i == max)\n        {\n        \
    \    count++;\n        }\n    }\n    if(count >= max)\n    {\n        result =\
    \ max;\n    }\n    return result;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n        {\n          \
    \  return lst[i];\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] nums = new long[lst.length];\n    int count = 0;\n    for(int i =\
    \ 0; i < lst.length; i++)\n    {\n        if(!nums.contains(lst[i]))\n       \
    \ {\n            nums[count] = lst[i];\n            freq[count] = lst.count(lst[i]);\n\
    \            count++;\n        }\n    }\n    long max = 0;\n    for(int i = 0;\
    \ i < count; i++)\n    {\n        if(nums[i] <= freq[i] && nums[i] > max)\n  \
    \      {\n            max = nums[i];\n        }\n    }\n    return max == 0 ?\
    \ -1 : max;\n}", "{\n    auto freq = new int[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    auto d = new int[lst.length];\n    foreach(i, e; lst)\n    {\n        d[e]++;\n\
    \    }\n    foreach(i, e; d)\n    {\n        if(e >= i && e != 0)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq[lst[i]]++;\n        }\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto m = lst.groupBy!(a => a);\n    auto\
    \ max = m.max!((a, b) => a.length > b.length);\n    if (max.length < max[0])\n\
    \        return -1;\n    return max[0];\n}", "{\n    long[] arr = lst.dup;\n \
    \   arr.sort();\n    long[] freq = new long[arr.length];\n    long[] values =\
    \ new long[arr.length];\n    long count = 0;\n    long curr = arr[0];\n    foreach(long\
    \ i; arr)\n    {\n        if(i != curr)\n        {\n            values[count]\
    \ = curr;\n            freq[count] = i - curr;\n            curr = i;\n      \
    \      count++;\n        }\n    }\n    values[count] = curr;\n    freq[count]\
    \ = arr.length - curr;\n    count++;\n    foreach(long i; 0..count)\n    {\n \
    \       if(values[i] <= freq[i])\n            return values[i];\n    }\n    return\
    \ -1;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] unique = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long count = 0;\n    long index = 0;\n    foreach(i; 0 .. sorted.length)\n\
    \    {\n        if(i == 0)\n        {\n            unique[index] = sorted[i];\n\
    \            freq[index]++;\n        }\n        else if(sorted[i] == sorted[i-1])\n\
    \        {\n            freq[index]++;\n        }\n        else\n        {\n \
    \           index++;\n            unique[index] = sorted[i];\n            freq[index]++;\n\
    \        }\n    }\n    foreach(i; 0 .. unique.length)\n    {\n        if(unique[i]\
    \ == freq[i])\n        {\n            result[count] = unique[i];\n           \
    \ count++;\n        }\n    }\n    if(count == 0)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return result.sort[count-1];\n    }\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    long max_index = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n            max_index = i;\n        }\n    }\n    if(max == 0)\n\
    \    {\n        return -1;\n    }\n    return lst[max_index];\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; freq)\n    {\n        if(i >= freq[i])\n\
    \        {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n    long[]\
    \ unique = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    long counter = 0;\n    long counter2 = 0;\n    long counter3 = 0;\n    long\
    \ counter4 = 0;\n    long counter5 = 0;\n    long counter6 = 0;\n    long counter7\
    \ = 0;\n    long counter8 = 0;\n    long counter9 = 0;\n    long counter10 = 0;\n\
    \    long counter11 = 0;\n    long counter12 = 0;\n    long counter13 = 0;\n \
    \   long counter14 = 0;\n    long counter15 = 0;\n    long counter16 = 0;\n  \
    \  long counter17 = 0;\n    long counter18 = 0;\n    long counter19 = 0;\n   \
    \ long counter20 = 0;\n    long counter21 = 0;\n    long counter22 = 0;\n    long\
    \ counter23 = 0;\n    long counter24 = 0;\n    long counter25 = 0;\n    long counter26\
    \ = 0;\n    long counter27 = 0;\n    long counter28 = 0;\n    long counter29 =\
    \ 0;\n    long counter30 = 0;\n    long counter31 = 0;\n    long counter32 = 0;\n\
    \    long counter33 = 0;\n    long counter34 = 0;\n    long counter35 = 0;\n \
    \   long counter36 = 0;\n    long counter37 = 0;\n    long counter38 = 0;\n  \
    \  long counter39 = 0;\n    long counter40 = 0;\n    long counter41 = 0;\n   \
    \ long counter42 = 0;\n    long counter43 = 0;\n    long counter44 = 0;\n    long\
    \ counter45 = 0;\n    long counter46 = 0;\n    long counter47 = 0;\n    long counter48\
    \ = 0;\n    long counter49 = 0;\n    long counter50 = 0;\n    long counter51 =\
    \ 0;\n    long counter52 = 0;\n    long counter53 = 0;\n    long counter54 = 0;\n\
    \    long counter55 = 0;\n    long counter56 = 0;\n    long counter57 =", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n\
    \        {\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long[] res = new long[lst.length];\n    long max = 0;\n    long max_freq\
    \ = 0;\n    long max_num = 0;\n    long max_res = 0;\n    long count = 0;\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        if(count == 0)\n        {\n   \
    \         nums[count] = lst[i];\n            freq[count] = 1;\n            count++;\n\
    \        }\n        else\n        {\n            bool flag = false;\n        \
    \    foreach(j; 0 .. count)\n            {\n                if(nums[j] == lst[i])\n\
    \                {\n                    freq[j]++;\n                    flag =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if(!flag)\n            {\n                nums[count] = lst[i];\n     \
    \           freq[count] = 1;\n                count++;\n            }\n      \
    \  }\n    }\n    foreach(i; 0 .. count)\n    {\n        if(nums[i] > max)\n  \
    \      {\n            max = nums[i];\n        }\n        if(freq[i] > max_freq)\n\
    \        {\n            max_freq = freq[i];\n        }\n    }\n    foreach(i;\
    \ 0 .. count)\n    {\n        if(freq[i] >= nums[i])\n        {\n            res[i]\
    \ = nums[i];\n        }\n    }\n    foreach(i; 0 .. count)\n    {\n        if(res[i]\
    \ > max_res)\n        {\n            max_res = res[i];\n        }\n    }\n   \
    \ if(max_res == 0)\n    {\n        return -1;\n    }\n    else\n    {\n      \
    \  return max_res;\n    }\n}", "{\n    long[] freq = new long[lst.length];\n \
    \   foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; freq)\n\
    \    {\n        if(i >= freq[i])\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    auto d = new Dictionary!int();\n\
    \    foreach(i; lst)\n    {\n        if(d.count(i) == 0)\n            d[i] = 1;\n\
    \        else\n            d[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ d.keys)\n    {\n        if(i > d[i])\n            continue;\n        if(i >\
    \ max)\n            max = i;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        long\
    \ count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        long\
    \ count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = 0;\n    foreach(i;\
    \ 0..freq.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max == 0 ? -1 : max;\n}", "{\n\
    \    auto freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    auto m = lst.groupBy!(a\
    \ => a);\n    auto max = m.max!((a, b) => a.length > b.length);\n    if (max.length\
    \ == 1)\n        return -1;\n    return max[0];\n}", "{\n    auto d = new int[lst.length];\n\
    \    foreach(i, e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n\
    \    {\n        if(e >= i && e != 0)\n        {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; freq)\n\
    \    {\n        if(i >= freq[i])\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length + 1];\n\
    \    foreach(e; lst)\n        freq[e]++;\n    for(long i = freq.length - 1; i\
    \ > 0; i--)\n        if(freq[i] >= i)\n            return i;\n    return -1;\n\
    }", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] counts = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(counts[i] >= i)\n        {\n            return i;\n       \
    \ }\n    }\n    return -1;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ freq = new long[sorted.length];\n    long[] unique = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long count = 0;\n    long j\
    \ = 0;\n    for(long i = 0; i < sorted.length; i++)\n    {\n        if(i == 0)\n\
    \        {\n            unique[j] = sorted[i];\n            freq[j]++;\n     \
    \       count++;\n        }\n        else if(sorted[i] == sorted[i-1])\n     \
    \   {\n            freq[j]++;\n            count++;\n        }\n        else\n\
    \        {\n            j++;\n            unique[j] = sorted[i];\n           \
    \ freq[j]++;\n            count++;\n        }\n    }\n    for(long i = 0; i <\
    \ count; i++)\n    {\n        if(unique[i] <= freq[i])\n        {\n          \
    \  result[i] = unique[i];\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return result.max;\n    }\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long maxFreq = 0;\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n        if(freq[i]\
    \ >= i && i > maxFreq)\n        {\n            max = i;\n            maxFreq =\
    \ freq[i];\n        }\n    }\n    return max;\n}", "{\n    long[] counts = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        counts[i]\
    \ = count(lst, lst[i]);\n    }\n    long max = max(counts);\n    if(max == 1)\n\
    \    {\n        return -1;\n    }\n    return lst[counts.indexOf(max)];\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto d = new int[lst.length];\n    foreach(i,\
    \ e; lst)\n    {\n        d[e]++;\n    }\n    foreach(i, e; d)\n    {\n      \
    \  if(e >= i && e != 0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    auto freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n\
    \        {\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] sorted = lst.dup.sort;\n    long[] unique = sorted.dup.uniq;\n  \
    \  long[] count = unique.map!(a => sorted.count(a));\n    long[] result = unique.filter!(a\
    \ => a <= count[unique.indexOf(a)]);\n    return result.length == 0 ? -1 : result.max;\n\
    }", "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    // your code here\n    long[] temp = lst.dup;\n   \
    \ temp.sort;\n    long[] temp2 = temp.dup;\n    temp2.removeDuplicates;\n    foreach(long\
    \ i; temp2)\n    {\n        if(temp.count(i) >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    int[] freq = new int[lst.length];\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        freq[i] = 0;\n    }\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        for (int j = 0; j <\
    \ lst.length; j++)\n        {\n            if (lst[i] == lst[j])\n           \
    \ {\n                freq[i]++;\n            }\n        }\n    }\n    long max\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (freq[i] >=\
    \ lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n \
    \   }\n    if (max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    auto freq = new int[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ freq[lst[i]]++;\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= i && freq[i] > max)\n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    long max = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(i == 0)\n        {\n            freq[i]\
    \ = 1;\n        }\n        else if(sorted[i] == sorted[i-1])\n        {\n    \
    \        freq[i] = freq[i-1] + 1;\n        }\n        else\n        {\n      \
    \      freq[i] = 1;\n        }\n        if(freq[i] >= sorted[i])\n        {\n\
    \            max = sorted[i];\n        }\n    }\n    return max == 0 ? -1 : max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(lst[i] > 0 && lst[i] <= freq[i])\n        {\n            if(lst[i] >\
    \ max)\n            {\n                max = lst[i];\n            }\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(sorted[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(sorted[i] > max && sorted[i]\
    \ <= freq[i])\n        {\n            max = sorted[i];\n        }\n    }\n   \
    \ if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n  \
    \  long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i]++;\n            }\n        }\n    }\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n      \
    \  {\n            return lst[i];\n        }\n    }\n    return -1;\n}", "{\n \
    \   auto d = new long[lst.length];\n    foreach(i, e; lst)\n    {\n        d[e]++;\n\
    \    }\n    foreach(i, e; d)\n    {\n        if(e >= i && e != 0)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; freq)\n    {\n        if(i >= freq[i])\n        {\n     \
    \       return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = -1;\n    long maxCount = -1;\n\
    \    long[] counts = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        counts[i] = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                counts[i]++;\n\
    \            }\n        }\n        if(counts[i] >= lst[i] && counts[i] > maxCount)\n\
    \        {\n            max = lst[i];\n            maxCount = counts[i];\n   \
    \     }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(i <= freq[i])\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] counts = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        counts[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        counts[lst[i]]++;\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(counts[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    auto frequency = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        frequency[i] = 0;\n    }\n  \
    \  foreach(i; 0 .. lst.length)\n    {\n        frequency[lst[i]]++;\n    }\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        if(frequency[i] >= i)\n      \
    \  {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n    auto\
    \ freq = lst.group.sort.array;\n    foreach(i; 0 .. freq.length)\n    {\n    \
    \    if(freq[i][0] >= freq[i][1].length)\n            return freq[i][0];\n   \
    \ }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    int[] freq = new int[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n     \
    \   {\n            return lst[i];\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long max = 0;\n    long[] freq = new long[lst.length];\n  \
    \  foreach(i; lst)\n    {\n        if(i > max)\n            max = i;\n       \
    \ freq[i]++;\n    }\n    foreach(i; 0..max)\n    {\n        if(freq[i] >= i)\n\
    \            return i;\n    }\n    return -1;\n}", "{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] frequencies = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        frequencies[i]++;\n    }\n    long max =\
    \ 0;\n    foreach(i; frequencies)\n    {\n        if(i > max && i >= frequencies[i])\n\
    \        {\n            max = i;\n        }\n    }\n    return max == 0 ? -1 :\
    \ max;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n\
    \    arr2.removeDuplicates;\n    long[] arr3 = new long[arr2.length];\n    foreach(i;\
    \ 0..arr2.length)\n    {\n        arr3[i] = arr.countUntil(arr2[i]);\n    }\n\
    \    long[] arr4 = arr3.dup;\n    arr4.sort;\n    arr4.reverse;\n    if(arr4[0]\
    \ >= arr2[0])\n    {\n        return arr2[0];\n    }\n    else\n    {\n      \
    \  return -1;\n    }\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    auto freq = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n   \
    \     {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    auto freq =\
    \ new int[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n   \
    \     {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort();\n\
    \    foreach(i; 0 .. sorted.length)\n    {\n        if(i == 0)\n        {\n  \
    \          freq[i] = 1;\n        }\n        else if(sorted[i] == sorted[i-1])\n\
    \        {\n            freq[i] = freq[i-1] + 1;\n        }\n        else\n  \
    \      {\n            freq[i] = 1;\n        }\n    }\n    foreach(i; 0 .. sorted.length)\n\
    \    {\n        if(sorted[i] == freq[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    int[] freq = new int[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i] += 1;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    foreach(e; lst)\n    {\n        if(e > max)\n            max = e;\n\
    \    }\n    long[] arr = new long[max + 1];\n    foreach(e; lst)\n    {\n    \
    \    arr[e]++;\n    }\n    long res = -1;\n    foreach(e; arr)\n    {\n      \
    \  if(e >= arr.length)\n            res = arr.length;\n    }\n    return res;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n       \
    \ {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto cmp\
    \ = (a, b) => a.value > b.value;\n    auto dict = new SortedDictionary!(long,\
    \ long, cmp)();\n    foreach(i; lst)\n    {\n        if(dict.count(i) == 0)\n\
    \            dict[i] = 1;\n        else\n            dict[i]++;\n    }\n    foreach(i;\
    \ dict.byKey)\n    {\n        if(i.value >= i.key)\n            return i.key;\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && freq[i] >=\
    \ lst[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= i)\n     \
    \   {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n    auto\
    \ freq = new int[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n      \
    \  if(freq[lst[i]] == 0)\n            freq[lst[i]] = 1;\n        else\n      \
    \      freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n      \
    \  if(freq[i] >= i)\n            return i;\n    }\n    return -1;\n}", "{\n  \
    \  long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n        {\n          \
    \  return lst[i];\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        long\
    \ count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    long[]\
    \ sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n    {\n\
    \        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n     \
    \       if(sorted[i] == lst[j])\n            {\n                count++;\n   \
    \         }\n        }\n        freq[i] = count;\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= sorted[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[]\
    \ freq = new long[sorted.length];\n    long last = sorted[0];\n    long count\
    \ = 0;\n    foreach(i, e; sorted)\n    {\n        if(e == last)\n        {\n \
    \           count++;\n        }\n        else\n        {\n            freq[i-1]\
    \ = count;\n            count = 1;\n            last = e;\n        }\n    }\n\
    \    freq[freq.length-1] = count;\n    foreach(i, e; sorted)\n    {\n        if(e\
    \ == freq[i])\n        {\n            return e;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto m\
    \ = lst.group.by!(a => a).map!(a => tuple(a[0], a.length));\n    auto r = m.filter!(a\
    \ => a[1] >= a[0]).max!(a => a[0]);\n    return r.empty ? -1 : r[0];\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort();\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(i == 0)\n        {\n     \
    \       freq[i] = 1;\n        }\n        else if(sorted[i] == sorted[i-1])\n \
    \       {\n            freq[i] = freq[i-1] + 1;\n        }\n        else\n   \
    \     {\n            freq[i] = 1;\n        }\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= sorted[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = sorted.countUntil(sorted[i]);\n    }\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= sorted[i])\n        {\n       \
    \     return sorted[i];\n        }\n    }\n    return -1;\n}", "{\n    auto freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n   \
    \     {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] unique = new long[sorted.length];\n    long[] result = new long[sorted.length];\n\
    \    int j = 0;\n    int k = 0;\n    for (int i = 0; i < sorted.length; i++)\n\
    \    {\n        if (i == 0)\n        {\n            unique[j] = sorted[i];\n \
    \           freq[j] = 1;\n            j++;\n        }\n        else if (sorted[i]\
    \ == sorted[i-1])\n        {\n            freq[j-1]++;\n        }\n        else\n\
    \        {\n            unique[j] = sorted[i];\n            freq[j] = 1;\n   \
    \         j++;\n        }\n    }\n    for (int i = 0; i < j; i++)\n    {\n   \
    \     if (freq[i] >= unique[i])\n        {\n            result[k] = unique[i];\n\
    \            k++;\n        }\n    }\n    if (k == 0)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return result[k-1];\n    }\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    foreach(e; lst)\n    {\n        if(e > max)\n            max = e;\n\
    \    }\n    long[] counts = new long[max+1];\n    foreach(e; lst)\n    {\n   \
    \     counts[e]++;\n    }\n    for(long i = max; i > 0; i--)\n    {\n        if(counts[i]\
    \ >= i)\n            return i;\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    auto freq = new\
    \ long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] nums = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        long num =\
    \ sorted[i];\n        long count = 0;\n        foreach(j; 0..lst.length)\n   \
    \     {\n            if(num == sorted[j])\n            {\n                count++;\n\
    \            }\n        }\n        if(count >= num)\n        {\n            max\
    \ = num;\n        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    auto freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort;\n\
    \    foreach(i; 0..sorted.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0..sorted.length)\n        {\n            if(sorted[i] == sorted[j])\n     \
    \       {\n                count++;\n            }\n        }\n        freq[i]\
    \ = count;\n    }\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i] >=\
    \ sorted[i])\n        {\n            return sorted[i];\n        }\n    }\n   \
    \ return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] frequencies = new long[lst.length];\n\
    \    long[] unique = new long[lst.length];\n    int j = 0;\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(!unique.contains(lst[i]))\n        {\n\
    \            unique[j] = lst[i];\n            j++;\n        }\n    }\n    unique\
    \ = unique.take(j);\n    for(int i = 0; i < unique.length; i++)\n    {\n     \
    \   frequencies[i] = lst.count(unique[i]);\n    }\n    long max = 0;\n    for(int\
    \ i = 0; i < unique.length; i++)\n    {\n        if(unique[i] <= frequencies[i]\
    \ && unique[i] > max)\n        {\n            max = unique[i];\n        }\n  \
    \  }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] nums = new long[lst.length];\n\
    \    long max = 0;\n    long maxFreq = 0;\n    long maxNum = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long num = lst[i];\n        if(nums.length\
    \ > num)\n        {\n            freq[num]++;\n            if(freq[num] >= num)\n\
    \            {\n                if(freq[num] > maxFreq)\n                {\n \
    \                   maxFreq = freq[num];\n                    maxNum = num;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      if(num > max)\n            {\n                max = num;\n            }\n\
    \        }\n    }\n    if(maxNum == 0)\n    {\n        return -1;\n    }\n   \
    \ return maxNum;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && freq[i] >=\
    \ lst[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n        \
    \    if(lst[i] == lst[j])\n            {\n                count++;\n         \
    \   }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <= freq[i])\n   \
    \     {\n            max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n\
    \        return -1;\n    }\n    return max;\n}", "{\n    long[] count = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        count[i]++;\n    }\n    foreach(i; count)\n\
    \    {\n        if(i >= count[i])\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ arr = lst.dup;\n    arr.sort;\n    long[] freq = new long[arr.length];\n   \
    \ long[] uniq = new long[arr.length];\n    long j = 0;\n    long k = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (i == 0)\n        {\n \
    \           uniq[j] = arr[i];\n            j++;\n        }\n        else if (arr[i]\
    \ != arr[i-1])\n        {\n            uniq[j] = arr[i];\n            j++;\n \
    \       }\n    }\n    for (long i = 0; i < uniq.length; i++)\n    {\n        if\
    \ (uniq[i] == 0)\n        {\n            break;\n        }\n        else\n   \
    \     {\n            freq[k] = arr.count(uniq[i]);\n            k++;\n       \
    \ }\n    }\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        if (uniq[i] == 0)\n        {\n            break;\n        }\n\
    \        else\n        {\n            res[i] = uniq[i];\n        }\n    }\n  \
    \  for (long i = 0; i < k; i++)\n    {\n        if (freq[i] == 0)\n        {\n\
    \            break;\n        }\n        else\n        {\n            res[i] =\
    \ res[i] * freq[i];\n        }\n    }\n    res.sort;\n    if (res[res.length-1]\
    \ == 0)\n    {\n        return -1;\n    }\n    else\n    {\n        return res[res.length-1]\
    \ / freq[freq.length-1];\n    }\n}", "{\n    auto freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    auto freq = new int[lst.length\
    \ + 1];\n    foreach(i; lst)\n        freq[i]++;\n    foreach(i; 0 .. lst.length)\n\
    \        if(freq[i] >= i)\n            return i;\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long max = 0;\n\
    \    long maxFreq = 0;\n    foreach(long i; lst)\n    {\n        long freq = lst.count(i);\n\
    \        if(freq >= i && freq > maxFreq)\n        {\n            max = i;\n  \
    \          maxFreq = freq;\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max)\n            max = lst[i];\n        freq[i] =\
    \ 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n                freq[i]++;\n   \
    \     }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >=\
    \ lst[i] && lst[i] > 0)\n            return lst[i];\n    }\n    return -1;\n}",
  "{\n    auto freq = new int[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   auto d = new int[lst.length];\n    foreach(i,e; lst)\n    {\n        d[e]++;\n\
    \    }\n    long res = -1;\n    foreach(i,e; d)\n    {\n        if(e >= i && e\
    \ > res)\n        {\n            res = e;\n        }\n    }\n    return res;\n\
    }", "{\n    auto freq = lst.frequency;\n    return lst.filter!(a => freq[a] >=\
    \ a).max;\n}", "{\n    long max = -1;\n    long maxCount = 0;\n    foreach(elem;\
    \ lst)\n    {\n        long count = 0;\n        foreach(elem2; lst)\n        {\n\
    \            if(elem == elem2)\n            {\n                count++;\n    \
    \        }\n        }\n        if(count >= elem && count >= maxCount)\n      \
    \  {\n            max = elem;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    long max_index = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n            max_index = i;\n \
    \       }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ lst[max_index];\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    // your code here\n    long[] count = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        count[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(count[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto freq = new int[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] counts = new long[lst.length];\n    long max = 0;\n\
    \    foreach(i; lst)\n    {\n        counts[i]++;\n        max = max(max, i);\n\
    \    }\n    foreach(i; 0 .. max)\n    {\n        if(counts[i] >= i)\n        \
    \    return i;\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
