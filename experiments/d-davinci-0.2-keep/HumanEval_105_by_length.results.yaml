name: HumanEval_105_by_length
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    int[] arr1 = arr.filter!(x\
    \ => x > 0 && x < 10).sort().reverse();\n    string[] arr2 = arr1.map!(x => [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][x - 1]);\n    return arr2;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mekwxqf.d(28): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmp4mekwxqf.d(29): Error: no property `map` for type `int[]`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mekwxqf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6avl1d4.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6avl1d4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvtet1ur.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpmvtet1ur.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvtet1ur.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n    \
    \    {\n            res ~= to!string(elem);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3a8lw2j.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpn3a8lw2j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse;\n\
    \    string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    return result.map!(x => x > 0 && x < 10\
    \ ? names[x - 1] : \"\").array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg39efcnt.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg39efcnt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd310_32u.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpd310_32u.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpd310_32u.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpd310_32u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int i = 0;\n    foreach(num; arr)\n    {\n  \
    \      switch(num)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result[i]\
    \ = \"\";\n                break;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp362hp75j.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294ad]\\n??:? void tmp362hp75j.__unittest_L69_C1()\
    \ [0x4282ff]\\n??:? void tmp362hp75j.__modtest() [0x428718]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e083]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429206]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ad29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42adb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42acb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291dd]\\n??:? runModuleUnitTests [0x42de59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298f7]\\n??:? _d_run_main [0x429862]\\n??:? main [0x42872b]\\\
    n??:? __libc_start_main [0x94abe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n    \
    \    {\n            res ~= to!string(elem);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7rus084.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpa7rus084.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp94ueldm5.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp94ueldm5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqpnci1e.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqpnci1e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpks_gj9i5.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks_gj9i5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nstring[] sort_reverse_replace(long[] arr) \n{\n    arr = arr.sort();\n    arr\
    \ = arr.reverse();\n    return by_length(arr);\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwohtl2za.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpwohtl2za.d(66):\
    \ Error: no property `sort` for type `long[]`\\n/tmp/tmpwohtl2za.d(67): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(long[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpwohtl2za.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0) return result;\n    arr.sort();\n\
    \    arr.reverse();\n    foreach (elem; arr)\n    {\n        if (elem >= 1 &&\
    \ elem <= 9)\n        {\n            switch (elem)\n            {\n          \
    \      case 1:\n                    result ~= \"One\";\n                    break;\n\
    \                case 2:\n                    result ~= \"Two\";\n           \
    \         break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9faic_n0.d(30): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp9faic_n0.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp9faic_n0.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9faic_n0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    int[]\
    \ sorted = arr.sort().reverse();\n    foreach (i; sorted)\n    {\n        if (i\
    \ > 0 && i < 10)\n            result ~= [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5b09_263.d(31): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b09_263.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9mx534e.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9mx534e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    foreach\
    \ (elem; arr)\n    {\n        if (elem >= 1 && elem <= 9)\n        {\n       \
    \     result ~= to!string(elem);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpssb57mc3.d(35): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpssb57mc3.d(38): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpssb57mc3.d(39): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpssb57mc3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0)\n        return [];\n    auto sorted = arr.sort();\n    auto reversed\
    \ = sorted.reverse();\n    string[] result = [];\n    foreach (i; reversed)\n\
    \    {\n        if (i > 0 && i < 10)\n        {\n            switch (i)\n    \
    \        {\n                case 1:\n                    result ~= \"One\";\n\
    \                    break;\n                case 2:\n                    result\
    \ ~= \"Two\";\n                    break;\n                case 3:\n         \
    \           result ~= \"Three\";\n                    break;\n               \
    \ case 4:\n                    result ~= \"Four\";\n                    break;\n\
    \                case 5:\n                    result ~= \"Five\";\n          \
    \          break;\n                case 6:\n                    result ~= \"Six\"\
    ;\n                    break;\n                case 7:\n                    result\
    \ ~= \"Seven\";\n                    break;\n                case 8:\n       \
    \             result ~= \"Eight\";\n                    break;\n             \
    \   case 9:\n                    result ~= \"Nine\";\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlbil5ea.d(30): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlbil5ea.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    arr = arr.sort().reverse();\n\
    \    string[] result = new string[arr.length];\n    foreach(i, v; arr)\n    {\n\
    \        switch(v)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu5xzpw9w.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5xzpw9w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i < 1 || i > 9) continue;\n  \
    \      result ~= [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][i - 1];\n    }\n    return result.reverse;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaw1dp99t.d(34): Error: template `std.typecons.reverse` cannot\
    \ deduce function from argument types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpaw1dp99t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcmplifa_.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmplifa_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse();\n\
    \    string[] res;\n    foreach(i; result)\n    {\n        switch(i)\n       \
    \ {\n            case 1:\n                res ~= \"One\";\n                break;\n\
    \            case 2:\n                res ~= \"Two\";\n                break;\n\
    \            case 3:\n                res ~= \"Three\";\n                break;\n\
    \            case 4:\n                res ~= \"Four\";\n                break;\n\
    \            case 5:\n                res ~= \"Five\";\n                break;\n\
    \            case 6:\n                res ~= \"Six\";\n                break;\n\
    \            case 7:\n                res ~= \"Seven\";\n                break;\n\
    \            case 8:\n                res ~= \"Eight\";\n                break;\n\
    \            case 9:\n                res ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrrao5v1.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrrao5v1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n    {\n    \
    \    if(i > 0 && i < 10)\n        {\n            result[j] = i.to!string;\n  \
    \          j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2d164ma.d(34): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2d164ma.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    int[] sorted = arr.sort;\n    int[] reversed = sorted.reverse;\n\
    \    foreach(int i; reversed)\n    {\n        switch(i)\n        {\n         \
    \   case 1:\n                result ~= \"One\";\n                break;\n    \
    \        case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgeol7t44.d(29): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpgeol7t44.d(30): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgeol7t44.d(33):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgeol7t44.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int index = 0;\n    foreach(i; arr)\n    {\n\
    \        if(i > 0 && i < 10)\n        {\n            result[index] = to!string(i);\n\
    \            index++;\n        }\n    }\n    return result[0..index];\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprfwsr5l.d(34): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpprfwsr5l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mhen8ss.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9mhen8ss.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem >= 1 && elem <= 9)\n \
    \       {\n            switch(elem)\n            {\n                case 1:\n\
    \                    result ~= \"One\";\n                    break;\n        \
    \        case 2:\n                    result ~= \"Two\";\n                   \
    \ break;\n                case 3:\n                    result ~= \"Three\";\n\
    \                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpua7e6dvw.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpua7e6dvw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse;\n\
    \    string[] result_str = new string[result.length];\n    foreach(i, e; result)\n\
    \    {\n        if(e == 1)\n            result_str[i] = \"One\";\n        else\
    \ if(e == 2)\n            result_str[i] = \"Two\";\n        else if(e == 3)\n\
    \            result_str[i] = \"Three\";\n        else if(e == 4)\n           \
    \ result_str[i] = \"Four\";\n        else if(e == 5)\n            result_str[i]\
    \ = \"Five\";\n        else if(e == 6)\n            result_str[i] = \"Six\";\n\
    \        else if(e == 7)\n            result_str[i] = \"Seven\";\n        else\
    \ if(e == 8)\n            result_str[i] = \"Eight\";\n        else if(e == 9)\n\
    \            result_str[i] = \"Nine\";\n    }\n    return result_str;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprule_c3e.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprule_c3e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            string[] temp = [\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n            result ~= temp[elem\
    \ - 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1hkob66_.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429365]\\n??:? void tmp1hkob66_.__unittest_L39_C1()\
    \ [0x4281b3]\\n??:? void tmp1hkob66_.__modtest() [0x4285cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e8cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4290be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b571]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b600]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b4fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429095]\\n??:? runModuleUnitTests [0x42e6a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429828]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4297af]\\n??:? _d_run_main [0x42971a]\\n??:? main [0x4285df]\\\
    n??:? __libc_start_main [0x8fdff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zj1oez7.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp7zj1oez7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92iuh9b1.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp92iuh9b1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    foreach(var i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= to!string(i);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5rknkhzr.d(29): Error: undefined identifier `var`\\n/tmp/tmp5rknkhzr.d(33):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rknkhzr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptd316yvj.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptd316yvj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzbtkoly3.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzbtkoly3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnm0nz_f.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmnm0nz_f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        switch(elem)\n        {\n    \
    \        case 1:\n                result ~= \"One\";\n                break;\n\
    \            case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ibmd1gm.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ibmd1gm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n       \
    \ {\n            switch(i)\n            {\n                case 1:\n         \
    \           result ~= \"One\";\n                    break;\n                case\
    \ 2:\n                    result ~= \"Two\";\n                    break;\n   \
    \             case 3:\n                    result ~= \"Three\";\n            \
    \        break;\n                case 4:\n                    result ~= \"Four\"\
    ;\n                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29ih7i7a.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp29ih7i7a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0)\n        return [];\n    arr.sort();\n    arr.reverse();\n    string[]\
    \ result = [];\n    foreach (elem; arr)\n    {\n        if (elem > 0 && elem <\
    \ 10)\n        {\n            switch (elem)\n            {\n                case\
    \ 1:\n                    result ~= \"One\";\n                    break;\n   \
    \             case 2:\n                    result ~= \"Two\";\n              \
    \      break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqnwnn79.d(30): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpeqnwnn79.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpeqnwnn79.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpeqnwnn79.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zeakd8d.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp_zeakd8d.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zeakd8d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk7d0d0xa.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7d0d0xa.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= i.to!string;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_hswh2dp.d(33): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hswh2dp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n       \
    \ {\n            switch(i)\n            {\n                case 1:\n         \
    \           result ~= \"One\";\n                    break;\n                case\
    \ 2:\n                    result ~= \"Two\";\n                    break;\n   \
    \             case 3:\n                    result ~= \"Three\";\n            \
    \        break;\n                case 4:\n                    result ~= \"Four\"\
    ;\n                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3d1lv18b.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp3d1lv18b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0)\n        return [];\n    else\n    {\n        auto sorted = arr.sort();\n\
    \        auto reversed = sorted.reverse();\n        string[] result = new string[reversed.length];\n\
    \        for (int i = 0; i < reversed.length; i++)\n        {\n            switch\
    \ (reversed[i])\n            {\n                case 1:\n                    result[i]\
    \ = \"One\";\n                    break;\n                case 2:\n          \
    \          result[i] = \"Two\";\n                    break;\n                case\
    \ 3:\n                    result[i] = \"Three\";\n                    break;\n\
    \                case 4:\n                    result[i] = \"Four\";\n        \
    \            break;\n                case 5:\n                    result[i] =\
    \ \"Five\";\n                    break;\n                case 6:\n           \
    \         result[i] = \"Six\";\n                    break;\n                case\
    \ 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n                default:\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvfx2z91n.d(32): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfx2z91n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse.map!(a\
    \ => a > 0 && a < 10 ? to!string(a) : \"\");\n    return result.filter!(a => a\
    \ != \"\");\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0_6d0_vg.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_6d0_vg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpac3fk32q.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac3fk32q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0) return result;\n    foreach (elem;\
    \ arr)\n    {\n        if (elem > 0 && elem < 10)\n        {\n            result\
    \ ~= to!string(elem);\n        }\n    }\n    result.sort;\n    result.reverse;\n\
    \    foreach (elem; result)\n    {\n        switch (elem)\n        {\n       \
    \     case \"1\":\n                elem = \"One\";\n                break;\n \
    \           case \"2\":\n                elem = \"Two\";\n                break;\n\
    \            case \"3\":\n                elem = \"Three\";\n                break;\n\
    \            case \"4\":\n                elem = \"Four\";\n                break;\n\
    \            case \"5\":\n                elem = \"Five\";\n                break;\n\
    \            case \"6\":\n                elem = \"Six\";\n                break;\n\
    \            case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprndjv3q2.d(34): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmprndjv3q2.d(37): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmprndjv3q2.d(38): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmprndjv3q2.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprndjv3q2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ihebdyj.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ihebdyj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1: result ~= \"One\"\
    ; break;\n                case 2: result ~= \"Two\"; break;\n                case\
    \ 3: result ~= \"Three\"; break;\n                case 4: result ~= \"Four\";\
    \ break;\n                case 5: result ~= \"Five\"; break;\n               \
    \ case 6: result ~= \"Six\"; break;\n                case 7: result ~= \"Seven\"\
    ; break;\n                case 8: result ~= \"Eight\"; break;\n              \
    \  case 9: result ~= \"Nine\"; break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg4_ed3_2.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4_ed3_2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplx203dv2.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmplx203dv2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    int[] sorted = sort(arr);\n    int[] reversed = reverse(sorted);\n\
    \    foreach(int i; reversed)\n    {\n        if(i == 1)\n        {\n        \
    \    result ~= \"One\";\n        }\n        else if(i == 2)\n        {\n     \
    \       result ~= \"Two\";\n        }\n        else if(i == 3)\n        {\n  \
    \          result ~= \"Three\";\n        }\n        else if(i == 4)\n        {\n\
    \            result ~= \"Four\";\n        }\n        else if(i == 5)\n       \
    \ {\n            result ~= \"Five\";\n        }\n        else if(i == 6)\n   \
    \     {\n            result ~= \"Six\";\n        }\n        else if(i == 7)\n\
    \        {\n            result ~= \"Seven\";\n        }\n        else if(i ==\
    \ 8)\n        {\n            result ~= \"Eight\";\n        }\n        else if(i\
    \ == 9)\n        {\n            result ~= \"Nine\";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpii0qnupw.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpii0qnupw.d(30): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpii0qnupw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3nk6ctg.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpw3nk6ctg.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3nk6ctg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvitgeou.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpnvitgeou.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvitgeou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse;\n\
    \    auto numbers = [\n        \"One\",\n        \"Two\",\n        \"Three\",\n\
    \        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n\
    \        \"Eight\",\n        \"Nine\"\n    ];\n    return result.map!(n => numbers[n\
    \ - 1])();\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsepimr9y.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsepimr9y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n    {\n    \
    \    if(i > 0 && i < 10)\n        {\n            result[j] = i.to!string;\n  \
    \          j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgo7tmp5.d(34): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgo7tmp5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi2w1ydfp.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpi2w1ydfp.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpi2w1ydfp.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2w1ydfp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int i = 0;\n    foreach(elem; arr)\n    {\n \
    \       switch(elem)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4jprv37c.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429475]\\n??:? void tmp4jprv37c.__unittest_L68_C1()\
    \ [0x4282c3]\\n??:? void tmp4jprv37c.__modtest() [0x4286dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e04b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4291ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42acf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291a5]\\n??:? runModuleUnitTests [0x42de21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298bf]\\n??:? _d_run_main [0x42982a]\\n??:? main [0x4286ef]\\\
    n??:? __libc_start_main [0xeb641554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    else\n\
    \    {\n        long[] sorted = arr.sort();\n        long[] reversed = sorted.reverse();\n\
    \        foreach (long i; reversed)\n        {\n            if (i > 0 && i < 10)\n\
    \            {\n                switch (i)\n                {\n              \
    \      case 1:\n                        result ~= \"One\";\n                 \
    \       break;\n                    case 2:\n                        result ~=\
    \ \"Two\";\n                        break;\n                    case 3:\n    \
    \                    result ~= \"Three\";\n                        break;\n  \
    \                  case 4:\n                        result ~= \"Four\";\n    \
    \                    break;\n                    case 5:\n                   \
    \     result ~= \"Five\";\n                        break;\n                  \
    \  case 6:\n                        result ~= \"Six\";\n                     \
    \   break;\n                    case 7:\n                        result ~= \"\
    Seven\";\n                        break;\n                    case 8:\n      \
    \                  result ~= \"Eight\";\n                        break;\n    \
    \                case 9:\n                        result ~= \"Nine\";\n      \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuo8u8psl.d(33): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpuo8u8psl.d(34): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpuo8u8psl.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuo8u8psl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqi69b898.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqi69b898.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8__i3tv.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8__i3tv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse();\n\
    \    string[] res = new string[result.length];\n    foreach(i, e; result)\n  \
    \  {\n        if(e == 1)\n            res[i] = \"One\";\n        else if(e ==\
    \ 2)\n            res[i] = \"Two\";\n        else if(e == 3)\n            res[i]\
    \ = \"Three\";\n        else if(e == 4)\n            res[i] = \"Four\";\n    \
    \    else if(e == 5)\n            res[i] = \"Five\";\n        else if(e == 6)\n\
    \            res[i] = \"Six\";\n        else if(e == 7)\n            res[i] =\
    \ \"Seven\";\n        else if(e == 8)\n            res[i] = \"Eight\";\n     \
    \   else if(e == 9)\n            res[i] = \"Nine\";\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi28i6e0m.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi28i6e0m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0) \n    {\n        return result;\n\
    \    }\n    long[] sorted = sort(arr);\n    long[] reversed = reverse(sorted);\n\
    \    foreach (long i; reversed) \n    {\n        if (i > 0 && i < 10) \n     \
    \   {\n            switch (i) \n            {\n                case 1:\n     \
    \               result ~= \"One\";\n                    break;\n             \
    \   case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmc9kwf0q.d(33): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpmc9kwf0q.d(34): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpmc9kwf0q.d(39):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmc9kwf0q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                res[i] = \"One\";\n         \
    \       break;\n            case 2:\n                res[i] = \"Two\";\n     \
    \           break;\n            case 3:\n                res[i] = \"Three\";\n\
    \                break;\n            case 4:\n                res[i] = \"Four\"\
    ;\n                break;\n            case 5:\n                res[i] = \"Five\"\
    ;\n                break;\n            case 6:\n                res[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                res[i] = \"Seven\"\
    ;\n                break;\n            case 8:\n                res[i] = \"Eight\"\
    ;\n                break;\n            case 9:\n                res[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp08rj5u_4.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08rj5u_4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    arr.sort;\n    // Reverse the array\n    arr.reverse;\n    // Create a new\
    \ array of strings\n    string[] result = new string[arr.length];\n    // Iterate\
    \ over the array\n    foreach(i, e; arr)\n    {\n        // If the element is\
    \ between 1 and 9 inclusive\n        if(e >= 1 && e <= 9)\n        {\n       \
    \     // Add the corresponding name to the result array\n            result[i]\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][e - 1];\n        }\n    }\n    // Return the result array\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_d7_cdf.d(29): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp6_d7_cdf.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_d7_cdf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxd2unknr.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpxd2unknr.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxd2unknr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem >= 1 && elem <= 9)\n \
    \       {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8xlsfzcw.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8xlsfzcw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7_0w4ppi.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_0w4ppi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        switch(i)\n        {\n      \
    \      case 1:\n                result ~= \"One\";\n                break;\n \
    \           case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4hwkb90.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmps4hwkb90.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    else\n\
    \    {\n        arr = arr.filter!(x => x > 0 && x < 10)().sort().array.reverse();\n\
    \        result = new string[arr.length];\n        foreach (i, v; arr)\n     \
    \   {\n            switch (v)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppz2f66d_.d(33): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmppz2f66d_.d(37): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppz2f66d_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.sort().reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fgvxgbf.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp1fgvxgbf.d(65):\
    \ Error: no property `sort` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1fgvxgbf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(l; arr)\n    {\n        if(l > 0 && l < 10)\n        {\n\
    \            result ~= to!string(l);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjk7sh5p4.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjk7sh5p4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy_w2eokr.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpy_w2eokr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvm_dd2is.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvm_dd2is.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    //sort the array\n\
    \    sort(arr);\n    //reverse the array\n    reverse(arr);\n    //create a new\
    \ array with the same length as arr\n    string[] result = new string[arr.length];\n\
    \    //for each element in arr\n    foreach(i, element; arr)\n    {\n        //if\
    \ the element is between 1 and 9 inclusive\n        if(element >= 1 && element\
    \ <= 9)\n        {\n            //replace the element with its corresponding name\n\
    \            switch(element)\n            {\n                case 1:\n       \
    \             result[i] = \"One\";\n                    break;\n             \
    \   case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    //return the result\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_wllzsy2.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp_wllzsy2.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp_wllzsy2.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_wllzsy2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0c58jn9.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0c58jn9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0)\n        return [];\n    auto sorted = arr.sort();\n    auto reversed\
    \ = sorted.reverse();\n    string[] result = [];\n    foreach (i; reversed)\n\
    \    {\n        if (i > 0 && i < 10)\n        {\n            switch (i)\n    \
    \        {\n                case 1:\n                    result ~= \"One\";\n\
    \                    break;\n                case 2:\n                    result\
    \ ~= \"Two\";\n                    break;\n                case 3:\n         \
    \           result ~= \"Three\";\n                    break;\n               \
    \ case 4:\n                    result ~= \"Four\";\n                    break;\n\
    \                case 5:\n                    result ~= \"Five\";\n          \
    \          break;\n                case 6:\n                    result ~= \"Six\"\
    ;\n                    break;\n                case 7:\n                    result\
    \ ~= \"Seven\";\n                    break;\n                case 8:\n       \
    \             result ~= \"Eight\";\n                    break;\n             \
    \   case 9:\n                    result ~= \"Nine\";\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx8xxxqir.d(30): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8xxxqir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96jwz3we.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp96jwz3we.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp96jwz3we.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(a; arr)\n    {\n        if(a > 0 && a < 10)\n        {\n\
    \            switch(a)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result.reversed;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96a810i_.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp96a810i_.d(65):\
    \ Error: no property `reversed` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp96a810i_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse;\n\
    \    auto result_str = new string[result.length];\n    foreach(i, e; result)\n\
    \    {\n        switch(e)\n        {\n            case 1:\n                result_str[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result_str[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result_str[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result_str[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result_str[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result_str[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result_str[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result_str[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result_str[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result_str[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return result_str.filter!(a\
    \ => a != \"\");\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_d6l73b.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_d6l73b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse();\n\
    \    auto dict = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    string[] res;\n    foreach(i; result)\n  \
    \  {\n        if(i > 0 && i < 10)\n        {\n            res ~= dict[i - 1];\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_b_38nr.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_b_38nr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto res = arr.sort.reverse;\n\
    \    string[] result = new string[];\n    foreach(elem; res)\n    {\n        if(elem\
    \ > 0 && elem < 10)\n        {\n            switch(elem)\n            {\n    \
    \            case 1:\n                    result ~= \"One\";\n               \
    \     break;\n                case 2:\n                    result ~= \"Two\";\n\
    \                    break;\n                case 3:\n                    result\
    \ ~= \"Three\";\n                    break;\n                case 4:\n       \
    \             result ~= \"Four\";\n                    break;\n              \
    \  case 5:\n                    result ~= \"Five\";\n                    break;\n\
    \                case 6:\n                    result ~= \"Six\";\n           \
    \         break;\n                case 7:\n                    result ~= \"Seven\"\
    ;\n                    break;\n                case 8:\n                    result\
    \ ~= \"Eight\";\n                    break;\n                case 9:\n       \
    \             result ~= \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpesa4i9yc.d(28): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpesa4i9yc.d(29): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpesa4i9yc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Create a\
    \ new array to store the result\n    string[] result = new string[arr.length];\n\
    \    // Create a dictionary to map the number to its name\n    string[int] map\
    \ = [\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5, \"Six\":\
    \ 6, \"Seven\": 7, \"Eight\": 8, \"Nine\": 9];\n    // Loop through the array\n\
    \    foreach(i, v; arr)\n    {\n        // If the value is between 1 and 9 inclusive,\
    \ add it to the result array\n        if(v >= 1 && v <= 9)\n        {\n      \
    \      result[i] = map[v];\n        }\n    }\n    // Return the result array\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpitm4yt77.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpitm4yt77.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpitm4yt77.d(35):\
    \ Error: cannot implicitly convert expression `[\"One\":1, \"Two\":2, \"Three\"\
    :3, \"Four\":4, \"Five\":5, \"Six\":6, \"Seven\":7, \"Eight\":8, \"Nine\":9]`\
    \ of type `int[string]` to `string[int]`\\n/tmp/tmpitm4yt77.d(42): Error: cannot\
    \ implicitly convert expression `v` of type `long` to `int`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitm4yt77.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjhslk4w1.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjhslk4w1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.retro;\n    return result.map!(a => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a -\
    \ 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpah0v5_us.d(28): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah0v5_us.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplg4kzk7g.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmplg4kzk7g.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplg4kzk7g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoeibwjxn.d(28): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoeibwjxn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqeoas31.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmppqeoas31.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // create an\
    \ array of strings\n    string[] result = new string[arr.length];\n    // for\
    \ each element in the array\n    foreach(i, element; arr)\n    {\n        // if\
    \ the element is between 1 and 9 inclusive\n        if(element >= 1 && element\
    \ <= 9)\n        {\n            // replace the element by its corresponding name\n\
    \            switch(element)\n            {\n                case 1:\n       \
    \             result[i] = \"One\";\n                    break;\n             \
    \   case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    // return the array of strings\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ghl7ugj.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp6ghl7ugj.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp6ghl7ugj.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6ghl7ugj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe22rabus.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpe22rabus.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpe22rabus.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bu9vjv0.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2bu9vjv0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // create a\
    \ new array of strings\n    string[] result = new string[arr.length];\n    //\
    \ iterate over the array\n    foreach(i, e; arr)\n    {\n        // if the element\
    \ is between 1 and 9 inclusive\n        if(e >= 1 && e <= 9)\n        {\n    \
    \        // replace the element by its corresponding name\n            switch(e)\n\
    \            {\n                case 1:\n                    result[i] = \"One\"\
    ;\n                    break;\n                case 2:\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[i] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n        }\n    }\n    // return the new array\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5_1hgg5.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpg5_1hgg5.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpg5_1hgg5.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpg5_1hgg5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmert4tux.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmert4tux.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, v; arr)\n    {\n        if(v > 0 &&\
    \ v < 10)\n        {\n            switch(v)\n            {\n                case\
    \ 1:\n                    result[i] = \"One\";\n                    break;\n \
    \               case 2:\n                    result[i] = \"Two\";\n          \
    \          break;\n                case 3:\n                    result[i] = \"\
    Three\";\n                    break;\n                case 4:\n              \
    \      result[i] = \"Four\";\n                    break;\n                case\
    \ 5:\n                    result[i] = \"Five\";\n                    break;\n\
    \                case 6:\n                    result[i] = \"Six\";\n         \
    \           break;\n                case 7:\n                    result[i] = \"\
    Seven\";\n                    break;\n                case 8:\n              \
    \      result[i] = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    result[i] = \"Nine\";\n                    break;\n\
    \            }\n        }\n    }\n    return result.filter!(a => a != \"\");\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ejh9o4h.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp2ejh9o4h.d(65):\
    \ Error: no property `filter` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2ejh9o4h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto res = arr.sort.reverse.map!(a\
    \ => a == 1 ? \"One\" : a == 2 ? \"Two\" : a == 3 ? \"Three\" : a == 4 ? \"Four\"\
    \ : a == 5 ? \"Five\" : a == 6 ? \"Six\" : a == 7 ? \"Seven\" : a == 8 ? \"Eight\"\
    \ : a == 9 ? \"Nine\" : \"\");\n    return res.filter!(a => a != \"\").array;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp998eib6g.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp998eib6g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvedx4j1.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwvedx4j1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= i.to!string;\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i; 0 .. result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4t9gp03z.d(33): Error: no property `to` for type `long`\\n/tmp/tmp4t9gp03z.d(36):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp4t9gp03z.d(37):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp4t9gp03z.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4t9gp03z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2eryxzjl.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2eryxzjl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, x; arr)\n    {\n        switch(x)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvzd1gzwb.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzd1gzwb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_48n33na.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_48n33na.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort arr\n \
    \   sort(arr);\n    // reverse arr\n    reverse(arr);\n    // replace each digit\
    \ by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        switch(v)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                result[i] = \"\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mlrb87n.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp9mlrb87n.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp9mlrb87n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    else\n\
    \    {\n        arr = arr.filter!(a => a >= 1 && a <= 9).sort.reverse;\n     \
    \   result = arr.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]).array;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkd_ql0hf.d(33): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpkd_ql0hf.d(34): Error: no property `map` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd_ql0hf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto res = arr.sort().reverse;\n\
    \    string[] result = new string[res.length];\n    foreach(i, e; res)\n    {\n\
    \        if(e > 0 && e < 10)\n        {\n            switch(e)\n            {\n\
    \                case 1:\n                    result[i] = \"One\";\n         \
    \           break;\n                case 2:\n                    result[i] = \"\
    Two\";\n                    break;\n                case 3:\n                \
    \    result[i] = \"Three\";\n                    break;\n                case\
    \ 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpniea9j7y.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpniea9j7y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem < 1 || elem > 9)\n   \
    \         continue;\n        switch(elem)\n        {\n            case 1:\n  \
    \              result ~= \"One\";\n                break;\n            case 2:\n\
    \                result ~= \"Two\";\n                break;\n            case\
    \ 3:\n                result ~= \"Three\";\n                break;\n         \
    \   case 4:\n                result ~= \"Four\";\n                break;\n   \
    \         case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3lwr33p.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3lwr33p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    int[]\
    \ tmp = new int[0];\n    foreach (int i; arr)\n    {\n        if (i > 0 && i <\
    \ 10)\n            tmp ~= i;\n    }\n    tmp.sort();\n    tmp.reverse();\n   \
    \ foreach (int i; tmp)\n    {\n        switch (i)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfzvv__ba.d(32): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\n/tmp/tmpfzvv__ba.d(37): Error: no property `sort`\
    \ for type `int[]`\\n/tmp/tmpfzvv__ba.d(38): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(int[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpfzvv__ba.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfzvv__ba.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int j = 0;\n    foreach(i; arr)\n    {\n    \
    \    switch(i)\n        {\n            case 1:\n                result[j] = \"\
    One\";\n                break;\n            case 2:\n                result[j]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[j]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[j]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[j]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[j]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[j]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[j]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[j]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplfrcga4s.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429475]\\n??:? void tmplfrcga4s.__unittest_L68_C1()\
    \ [0x4282c3]\\n??:? void tmplfrcga4s.__modtest() [0x4286dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e04b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4291ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42acf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291a5]\\n??:? runModuleUnitTests [0x42de21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298bf]\\n??:? _d_run_main [0x42982a]\\n??:? main [0x4286ef]\\\
    n??:? __libc_start_main [0x31513554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int i = 0;\n    foreach(elem; arr)\n    {\n \
    \       switch(elem)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnty3dmv5.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429475]\\n??:? void tmpnty3dmv5.__unittest_L68_C1()\
    \ [0x4282c3]\\n??:? void tmpnty3dmv5.__modtest() [0x4286dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e04b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4291ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42acf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ad80]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ac7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291a5]\\n??:? runModuleUnitTests [0x42de21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429938]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298bf]\\n??:? _d_run_main [0x42982a]\\n??:? main [0x4286ef]\\\
    n??:? __libc_start_main [0xbcf37554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqyb7l7tl.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqyb7l7tl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuajuo1h3.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuajuo1h3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczyv_xit.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpczyv_xit.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpulgcqyav.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulgcqyav.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse();\n\
    \    string[] res = new string[result.length];\n    foreach(i, e; result)\n  \
    \  {\n        if(e > 0 && e < 10)\n        {\n            switch(e)\n        \
    \    {\n                case 1:\n                    res[i] = \"One\";\n     \
    \               break;\n                case 2:\n                    res[i] =\
    \ \"Two\";\n                    break;\n                case 3:\n            \
    \        res[i] = \"Three\";\n                    break;\n                case\
    \ 4:\n                    res[i] = \"Four\";\n                    break;\n   \
    \             case 5:\n                    res[i] = \"Five\";\n              \
    \      break;\n                case 6:\n                    res[i] = \"Six\";\n\
    \                    break;\n                case 7:\n                    res[i]\
    \ = \"Seven\";\n                    break;\n                case 8:\n        \
    \            res[i] = \"Eight\";\n                    break;\n               \
    \ case 9:\n                    res[i] = \"Nine\";\n                    break;\n\
    \            }\n        }\n    }\n    return res.filter!(a => a != \"\");\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvjgb55zq.d(28): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpvjgb55zq.d(66): Error: no property `filter` for type `string[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjgb55zq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    arr\
    \ = arr.filter!(x => x > 0 && x < 10)().sort().array();\n    arr = arr.reverse().array();\n\
    \    foreach (i; arr)\n    {\n        switch (i)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr38oh0ki.d(31): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpr38oh0ki.d(32): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpr38oh0ki.d(35):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpr38oh0ki.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort().reverse();\n\
    \    string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    return result.map!(a => a > 0 && a < 10\
    \ ? names[a - 1] : \"\").array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk28i9ey_.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk28i9ey_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Filter the\
    \ array\n    arr = filter!(a => a > 0 && a < 10)(arr);\n    // Map the array\n\
    \    string[] result = map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1])(arr);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl72qcw_b.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpl72qcw_b.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpl72qcw_b.d(33):\
    \ Error: template instance `filter!((a) => a > 0 && (a < 10))` template `filter`\
    \ is not defined\\n/tmp/tmpl72qcw_b.d(35): Error: template instance `map!((a)\
    \ => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][a - 1])` template `map` is not defined\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl72qcw_b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6avep87u.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp6avep87u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        switch(i)\n        {\n      \
    \      case 1:\n                result ~= \"One\";\n                break;\n \
    \           case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwsu8wgo5.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwsu8wgo5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0) \n        return new string[0];\n    else \n    {\n        auto sorted\
    \ = arr.sort();\n        auto reversed = sorted.reverse();\n        auto filtered\
    \ = reversed.filter!(x => x > 0 && x < 10);\n        auto result = filtered.map!(x\
    \ => to!string(x));\n        return result;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo3puhpoz.d(32): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3puhpoz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdv2gjgep.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdv2gjgep.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reversed;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwmvigaqh.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpwmvigaqh.d(65):\
    \ Error: no property `reversed` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwmvigaqh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoklk8pro.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpoklk8pro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptrft6629.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmptrft6629.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmptrft6629.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= i.to!string;\n        }\n    }\n    result.sort;\n\
    \    result.reverse;\n    foreach(i; 0 .. result.length)\n    {\n        switch(result[i])\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bk64w98.d(33): Error: no property `to` for type `long`\\n/tmp/tmp8bk64w98.d(36):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmp8bk64w98.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp8bk64w98.d(40):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8bk64w98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // create a\
    \ new array with the same size of the input array\n    string[] result = new string[arr.length];\n\
    \    // create a map with the numbers and their names\n    int[string] map = [1:\
    \ \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7:\
    \ \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    // iterate over the array\n    foreach(i,\
    \ number; arr)\n    {\n        // if the number is between 1 and 9 inclusive\n\
    \        if(number > 0 && number < 10)\n        {\n            // add the name\
    \ of the number to the result array\n            result[i] = map[number];\n  \
    \      }\n    }\n    // return the result array\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4tl8rbl.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpd4tl8rbl.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpd4tl8rbl.d(35):\
    \ Error: cannot implicitly convert expression `[1:\"One\", 2:\"Two\", 3:\"Three\"\
    , 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]` of\
    \ type `string[int]` to `int[string]`\\n/tmp/tmpd4tl8rbl.d(43): Error: cannot\
    \ implicitly convert expression `number` of type `long` to `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4tl8rbl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Write your code\
    \ here\n    string[] result = new string[arr.length];\n    int count = 0;\n  \
    \  foreach(i; arr)\n    {\n        if(i >= 1 && i <= 9)\n        {\n         \
    \   switch(i)\n            {\n                case 1:\n                    result[count]\
    \ = \"One\";\n                    break;\n                case 2:\n          \
    \          result[count] = \"Two\";\n                    break;\n            \
    \    case 3:\n                    result[count] = \"Three\";\n               \
    \     break;\n                case 4:\n                    result[count] = \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result[count] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[count] = \"Six\";\n                    break;\n\
    \                case 7:\n                    result[count] = \"Seven\";\n   \
    \                 break;\n                case 8:\n                    result[count]\
    \ = \"Eight\";\n                    break;\n                case 9:\n        \
    \            result[count] = \"Nine\";\n                    break;\n         \
    \   }\n            count++;\n        }\n    }\n    return result.sort().reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzdfsywk.d(35): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpwzdfsywk.d(68):\
    \ Error: no property `sort` for type `string[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwzdfsywk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto res = arr.sort.reverse.map!(a\
    \ => a < 1 || a > 9 ? \"\" : [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n    return res.filter!(a\
    \ => a != \"\").array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7fs94c_f.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7fs94c_f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2lfj9xj9.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lfj9xj9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ecq77rk.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmp5ecq77rk.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ecq77rk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse.map!(a\
    \ => a > 0 && a < 10 ? to!string(a) : \"\").filter!(a => a != \"\");\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc8tt7wur.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8tt7wur.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length\
    \ == 0) \n        return [];\n    \n    auto result = arr.filter!(x => x > 0 &&\
    \ x < 10).sort.reverse;\n    return result.map!(x => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1]);\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqlz7y3u4.d(31): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlz7y3u4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1elt3hi.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpa1elt3hi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph3is1h8b.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3is1h8b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu8_ey4ds.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu8_ey4ds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort arr\n \
    \   // reverse arr\n    // replace each digit by its corresponding name from \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n    // return result\n    return [];\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp58pdu6_c.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4291a5]\\n??:? void tmp58pdu6_c.__unittest_L34_C1()\
    \ [0x427ff3]\\n??:? void tmp58pdu6_c.__modtest() [0x42840c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42dcab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x428efe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42a951]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42a9e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42a8dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x428ed5]\\n??:? runModuleUnitTests [0x42da81]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4295f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42957b]\\n??:? _d_run_main [0x4294e6]\\n??:? main [0x42841f]\\\
    n??:? __libc_start_main [0x492d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dtda0e7.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1dtda0e7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto res = arr.sort().reverse();\n\
    \    string[] result = new string[];\n    foreach(i; res)\n    {\n        if(i\
    \ < 1 || i > 9)\n            continue;\n        result ~= [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i-1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplinmy5qp.d(28): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmplinmy5qp.d(29): Error: new can only create structs, dynamic arrays or\
    \ class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplinmy5qp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            switch(elem)\n            {\n                case\
    \ 1:\n                    result ~= \"One\";\n                    break;\n   \
    \             case 2:\n                    result ~= \"Two\";\n              \
    \      break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result.sort().reverse;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xip6x23.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmp1xip6x23.d(33): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmp1xip6x23.d(65): Error: no property `sort`\
    \ for type `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xip6x23.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5wzf6xw.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5wzf6xw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpovqhmxgv.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpovqhmxgv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    int[] arr2 = arr.map!(a\
    \ => a < 1 || a > 9 ? 0 : a).filter!(a => a != 0).sort().reverse();\n    string[]\
    \ res = new string[arr2.length];\n    foreach(i, a; arr2)\n    {\n        switch(a)\n\
    \        {\n            case 1: res[i] = \"One\"; break;\n            case 2:\
    \ res[i] = \"Two\"; break;\n            case 3: res[i] = \"Three\"; break;\n \
    \           case 4: res[i] = \"Four\"; break;\n            case 5: res[i] = \"\
    Five\"; break;\n            case 6: res[i] = \"Six\"; break;\n            case\
    \ 7: res[i] = \"Seven\"; break;\n            case 8: res[i] = \"Eight\"; break;\n\
    \            case 9: res[i] = \"Nine\"; break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg62738ou.d(28): Error: no property `map` for type `long[]`\\\
    n/tmp/tmpg62738ou.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg62738ou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnx4txngi.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx4txngi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    auto\
    \ sorted = sort(arr);\n    auto reversed = reverse(sorted);\n    foreach (i; reversed)\n\
    \    {\n        if (i > 0 && i < 10)\n        {\n            result ~= to!string(i);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpckyv3u08.d(31): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckyv3u08.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        switch(i)\n        {\n      \
    \      case 1:\n                result ~= \"One\";\n                break;\n \
    \           case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpioitx6kr.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpioitx6kr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvkpx4tk.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpkvkpx4tk.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvkpx4tk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rkc73qi.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rkc73qi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqv3yda0.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpiqv3yda0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    else\n\
    \    {\n        arr = arr.filter!(a => a > 0 && a < 10).sort().array;\n      \
    \  arr = arr.array.reverse();\n        foreach (a; arr)\n        {\n         \
    \   switch (a)\n            {\n                case 1:\n                    result\
    \ ~= \"One\";\n                    break;\n                case 2:\n         \
    \           result ~= \"Two\";\n                    break;\n                case\
    \ 3:\n                    result ~= \"Three\";\n                    break;\n \
    \               case 4:\n                    result ~= \"Four\";\n           \
    \         break;\n                case 5:\n                    result ~= \"Five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ ~= \"Six\";\n                    break;\n                case 7:\n         \
    \           result ~= \"Seven\";\n                    break;\n               \
    \ case 8:\n                    result ~= \"Eight\";\n                    break;\n\
    \                case 9:\n                    result ~= \"Nine\";\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgkpllitj.d(33): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpgkpllitj.d(34): Error: no property `array` for type `long[]`\\n/tmp/tmpgkpllitj.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgkpllitj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx34dbpqu.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpx34dbpqu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndhruo52.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndhruo52.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    foreach\
    \ (elem; arr)\n    {\n        if (elem > 0 && elem < 10)\n        {\n        \
    \    result ~= to!string(elem);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach (elem; result)\n    {\n        switch (elem)\n        {\n       \
    \     case \"1\":\n                elem = \"One\";\n                break;\n \
    \           case \"2\":\n                elem = \"Two\";\n                break;\n\
    \            case \"3\":\n                elem = \"Three\";\n                break;\n\
    \            case \"4\":\n                elem = \"Four\";\n                break;\n\
    \            case \"5\":\n                elem = \"Five\";\n                break;\n\
    \            case \"6\":\n                elem = \"Six\";\n                break;\n\
    \            case \"7\":\n                elem = \"Seven\";\n                break;\n\
    \            case \"8\":\n                elem = \"Eight\";\n                break;\n\
    \            case \"9\":\n                elem = \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjcuynit.d(35): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpgjcuynit.d(38): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpgjcuynit.d(39): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpgjcuynit.d(42):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpgjcuynit.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpze42ir21.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpze42ir21.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse;\n\
    \    string[] res;\n    foreach(i; result)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            res ~= to!string(i);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcqirwwur.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqirwwur.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5g4sho9.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5g4sho9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpna_i7fqn.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpna_i7fqn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // your code here\n\
    \    string[] result;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem\
    \ < 10)\n        {\n            switch(elem)\n            {\n                case\
    \ 1:\n                    result ~= \"One\";\n                    break;\n   \
    \             case 2:\n                    result ~= \"Two\";\n              \
    \      break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo25neo15.d(34): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo25neo15.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0) return result;\n    arr = arr.sort();\n\
    \    arr = arr.reverse();\n    foreach (i; arr) \n    {\n        if (i > 0 &&\
    \ i < 10) \n        {\n            switch (i) \n            {\n              \
    \  case 1:\n                    result ~= \"One\";\n                    break;\n\
    \                case 2:\n                    result ~= \"Two\";\n           \
    \         break;\n                case 3:\n                    result ~= \"Three\"\
    ;\n                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4pnuyxr.d(30): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpz4pnuyxr.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpz4pnuyxr.d(36):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz4pnuyxr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ned983d.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp3ned983d.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp3ned983d.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ned983d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptsi4pfja.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmptsi4pfja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    long[] sorted =\
    \ arr.dup.sort;\n    long[] reversed = sorted.dup.reverse;\n    string[] result\
    \ = [];\n    foreach(num; reversed)\n    {\n        if(num > 0 && num < 10)\n\
    \        {\n            switch(num)\n            {\n                case 1:\n\
    \                    result ~= \"One\";\n                    break;\n        \
    \        case 2:\n                    result ~= \"Two\";\n                   \
    \ break;\n                case 3:\n                    result ~= \"Three\";\n\
    \                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gem3t_s.d(28): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp1gem3t_s.d(29): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp1gem3t_s.d(35):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1gem3t_s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1:\n                res[i] = \"One\";\n         \
    \       break;\n            case 2:\n                res[i] = \"Two\";\n     \
    \           break;\n            case 3:\n                res[i] = \"Three\";\n\
    \                break;\n            case 4:\n                res[i] = \"Four\"\
    ;\n                break;\n            case 5:\n                res[i] = \"Five\"\
    ;\n                break;\n            case 6:\n                res[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                res[i] = \"Seven\"\
    ;\n                break;\n            case 8:\n                res[i] = \"Eight\"\
    ;\n                break;\n            case 9:\n                res[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyjnq2onq.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjnq2onq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1: result[i] = \"One\"; break;\n            case\
    \ 2: result[i] = \"Two\"; break;\n            case 3: result[i] = \"Three\"; break;\n\
    \            case 4: result[i] = \"Four\"; break;\n            case 5: result[i]\
    \ = \"Five\"; break;\n            case 6: result[i] = \"Six\"; break;\n      \
    \      case 7: result[i] = \"Seven\"; break;\n            case 8: result[i] =\
    \ \"Eight\"; break;\n            case 9: result[i] = \"Nine\"; break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpis0dwx94.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpis0dwx94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3cowf2r.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpe3cowf2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        switch(elem)\n        {\n    \
    \        case 1:\n                result ~= \"One\";\n                break;\n\
    \            case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vl19qop.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vl19qop.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu16l3fu_.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpu16l3fu_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ new string[0];\n    foreach(i; arr) \n    {\n        if(i > 0 && i < 10) \n\
    \        {\n            res ~= to!string(i);\n        }\n    }\n    res.sort;\n\
    \    res.reverse;\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpanu37wmu.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpanu37wmu.d(36): Error: no property\
    \ `sort` for type `string[]`\\n/tmp/tmpanu37wmu.d(37): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(string[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpanu37wmu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    arr.sort();\n    // reverse the array\n    arr.reverse();\n    // create\
    \ a new array of strings\n    string[] result = new string[arr.length];\n    //\
    \ for each element in the array\n    foreach(i, e; arr)\n    {\n        // if\
    \ the element is between 1 and 9 inclusive\n        if(e >= 1 && e <= 9)\n   \
    \     {\n            // replace the element by its corresponding name\n      \
    \      switch(e)\n            {\n                case 1:\n                   \
    \ result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ // return the new array\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplknrfr8p.d(29): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmplknrfr8p.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmplknrfr8p.d(41):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplknrfr8p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgueott9y.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgueott9y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2sac_gk.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpl2sac_gk.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2sac_gk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzbu7nb_x.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpzbu7nb_x.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpzbu7nb_x.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbu7nb_x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            switch(i)\n            {\n                case 1:\n             \
    \       result ~= \"One\";\n                    break;\n                case 2:\n\
    \                    result ~= \"Two\";\n                    break;\n        \
    \        case 3:\n                    result ~= \"Three\";\n                 \
    \   break;\n                case 4:\n                    result ~= \"Four\";\n\
    \                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplrp7ytm3.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmplrp7ytm3.d(65):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmplrp7ytm3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    long[]\
    \ sorted = arr.sort();\n    long[] reversed = sorted.reverse();\n    foreach (long\
    \ i; reversed)\n    {\n        if (i > 0 && i < 10)\n        {\n            switch\
    \ (i)\n            {\n                case 1:\n                    result ~= \"\
    One\";\n                    break;\n                case 2:\n                \
    \    result ~= \"Two\";\n                    break;\n                case 3:\n\
    \                    result ~= \"Three\";\n                    break;\n      \
    \          case 4:\n                    result ~= \"Four\";\n                \
    \    break;\n                case 5:\n                    result ~= \"Five\";\n\
    \                    break;\n                case 6:\n                    result\
    \ ~= \"Six\";\n                    break;\n                case 7:\n         \
    \           result ~= \"Seven\";\n                    break;\n               \
    \ case 8:\n                    result ~= \"Eight\";\n                    break;\n\
    \                case 9:\n                    result ~= \"Nine\";\n          \
    \          break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96pt0f6s.d(31): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmp96pt0f6s.d(32): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmp96pt0f6s.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp96pt0f6s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8mewp42.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpk8mewp42.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8mewp42.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4fhzzw2r.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp4fhzzw2r.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fhzzw2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a\
    \ => a.to!string).sort!((a, b) => a.length > b.length).array;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebeer5lf.d(28): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebeer5lf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        switch(elem)\n        {\n    \
    \        case 1:\n                result ~= \"One\";\n                break;\n\
    \            case 2:\n                result ~= \"Two\";\n                break;\n\
    \            case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx_t1ixkw.d(31): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_t1ixkw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.sort.reverse.map!(a\
    \ => a.to!string).filter!(a => a.length == 1).map!(a => a[0].to!int).map!(a =>\
    \ a.to!string);\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq__qlg1o.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq__qlg1o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    arr.sort;\n    // reverse the array\n    arr.reverse;\n    // replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, e; arr)\n    {\n        if(e > 0 && e <\
    \ 10)\n        {\n            switch(e)\n            {\n                case 1:\n\
    \                    result[i] = \"One\";\n                    break;\n      \
    \          case 2:\n                    result[i] = \"Two\";\n               \
    \     break;\n                case 3:\n                    result[i] = \"Three\"\
    ;\n                    break;\n                case 4:\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case 5:\n         \
    \           result[i] = \"Five\";\n                    break;\n              \
    \  case 6:\n                    result[i] = \"Six\";\n                    break;\n\
    \                case 7:\n                    result[i] = \"Seven\";\n       \
    \             break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaptcyzx1.d(29): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpaptcyzx1.d(31): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpaptcyzx1.d(38):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaptcyzx1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n\
    \            result ~= to!string(i);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgajeuro1.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgajeuro1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse.map!(x => to!string(x)).array;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_il0v3w_.d(28): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_il0v3w_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo48dqqka.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo48dqqka.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res =\
    \ [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n    \
    \    {\n            res ~= to!string(elem);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsn2alyg2.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsn2alyg2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n\
    \        {\n            result ~= i.to!string;\n        }\n    }\n    result.sort;\n\
    \    result.reverse;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm36l3asp.d(33): Error: no property `to` for type `long`\\n/tmp/tmpm36l3asp.d(36):\
    \ Error: no property `sort` for type `string[]`\\n/tmp/tmpm36l3asp.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpm36l3asp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3flco6z7.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp3flco6z7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxgxr4i1.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxgxr4i1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto sorted = arr.sort();\n\
    \    auto reversed = sorted.reverse();\n    string[] result = [];\n    foreach(elem;\
    \ reversed)\n    {\n        switch(elem)\n        {\n            case 1:\n   \
    \             result ~= \"One\";\n                break;\n            case 2:\n\
    \                result ~= \"Two\";\n                break;\n            case\
    \ 3:\n                result ~= \"Three\";\n                break;\n         \
    \   case 4:\n                result ~= \"Four\";\n                break;\n   \
    \         case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bqul7qi.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bqul7qi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto sorted = arr.sort();\n\
    \    auto reversed = sorted.reverse();\n    auto filtered = reversed.filter!(a\
    \ => a > 0 && a < 10);\n    auto result = filtered.map!(a => to!string(a));\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7qoa9_k.d(28): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7qoa9_k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ixh2wkj.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmp7ixh2wkj.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp7ixh2wkj.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ixh2wkj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi5i7m3vg.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5i7m3vg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps12da12y.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps12da12y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n       \
    \ {\n            switch(i)\n            {\n                case 1:\n         \
    \           result ~= \"One\";\n                    break;\n                case\
    \ 2:\n                    result ~= \"Two\";\n                    break;\n   \
    \             case 3:\n                    result ~= \"Three\";\n            \
    \        break;\n                case 4:\n                    result ~= \"Four\"\
    ;\n                    break;\n                case 5:\n                    result\
    \ ~= \"Five\";\n                    break;\n                case 6:\n        \
    \            result ~= \"Six\";\n                    break;\n                case\
    \ 7:\n                    result ~= \"Seven\";\n                    break;\n \
    \               case 8:\n                    result ~= \"Eight\";\n          \
    \          break;\n                case 9:\n                    result ~= \"Nine\"\
    ;\n                    break;\n            }\n        }\n    }\n    return result.reverse;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52fvygss.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp52fvygss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1: result\
    \ ~= \"One\"; break;\n                case 2: result ~= \"Two\"; break;\n    \
    \            case 3: result ~= \"Three\"; break;\n                case 4: result\
    \ ~= \"Four\"; break;\n                case 5: result ~= \"Five\"; break;\n  \
    \              case 6: result ~= \"Six\"; break;\n                case 7: result\
    \ ~= \"Seven\"; break;\n                case 8: result ~= \"Eight\"; break;\n\
    \                case 9: result ~= \"Nine\"; break;\n            }\n        }\n\
    \    }\n    return result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjd_isx15.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpjd_isx15.d(47):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpjd_isx15.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            result ~= to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu76zl8l8.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpu76zl8l8.d(36): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmpu76zl8l8.d(37): Error:\
    \ template `std.typecons.reverse` cannot deduce function from argument types `!()(string[])`,\
    \ candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpu76zl8l8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[arr.length];\n    int i = 0;\n    foreach(elem; arr)\n    {\n \
    \       switch(elem)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result[i]\
    \ = \"\";\n                break;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxencbmni.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4294ad]\\n??:? void tmpxencbmni.__unittest_L69_C1()\
    \ [0x4282ff]\\n??:? void tmpxencbmni.__modtest() [0x428718]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e083]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429206]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ad29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42adb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42acb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4291dd]\\n??:? runModuleUnitTests [0x42de59]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4298f7]\\n??:? _d_run_main [0x429862]\\n??:? main [0x42872b]\\\
    n??:? __libc_start_main [0x3ae24554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // sort the array\n\
    \    sort(arr);\n    // reverse the array\n    reverse(arr);\n    // replace each\
    \ digit by its corresponding name\n    string[] result = new string[arr.length];\n\
    \    foreach(i, num; arr)\n    {\n        if(num == 1)\n            result[i]\
    \ = \"One\";\n        else if(num == 2)\n            result[i] = \"Two\";\n  \
    \      else if(num == 3)\n            result[i] = \"Three\";\n        else if(num\
    \ == 4)\n            result[i] = \"Four\";\n        else if(num == 5)\n      \
    \      result[i] = \"Five\";\n        else if(num == 6)\n            result[i]\
    \ = \"Six\";\n        else if(num == 7)\n            result[i] = \"Seven\";\n\
    \        else if(num == 8)\n            result[i] = \"Eight\";\n        else if(num\
    \ == 9)\n            result[i] = \"Nine\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ksn3zvi.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp6ksn3zvi.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ksn3zvi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n    {\n        return result;\n\
    \    }\n    else\n    {\n        long[] sorted = arr.sort();\n        long[] reversed\
    \ = sorted.reverse();\n        foreach(long i; reversed)\n        {\n        \
    \    if (i == 1)\n            {\n                result ~= \"One\";\n        \
    \    }\n            else if (i == 2)\n            {\n                result ~=\
    \ \"Two\";\n            }\n            else if (i == 3)\n            {\n     \
    \           result ~= \"Three\";\n            }\n            else if (i == 4)\n\
    \            {\n                result ~= \"Four\";\n            }\n         \
    \   else if (i == 5)\n            {\n                result ~= \"Five\";\n   \
    \         }\n            else if (i == 6)\n            {\n                result\
    \ ~= \"Six\";\n            }\n            else if (i == 7)\n            {\n  \
    \              result ~= \"Seven\";\n            }\n            else if (i ==\
    \ 8)\n            {\n                result ~= \"Eight\";\n            }\n   \
    \         else if (i == 9)\n            {\n                result ~= \"Nine\"\
    ;\n            }\n        }\n        return result;\n    }\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqvccg01y.d(35): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpqvccg01y.d(36): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvccg01y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, e; arr)\n    {\n        switch(e)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0sgypv4.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmpo0sgypv4.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0sgypv4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n  \
    \      {\n            switch(elem)\n            {\n                case 1:\n \
    \                   result ~= \"One\";\n                    break;\n         \
    \       case 2:\n                    result ~= \"Two\";\n                    break;\n\
    \                case 3:\n                    result ~= \"Three\";\n         \
    \           break;\n                case 4:\n                    result ~= \"\
    Four\";\n                    break;\n                case 5:\n               \
    \     result ~= \"Five\";\n                    break;\n                case 6:\n\
    \                    result ~= \"Six\";\n                    break;\n        \
    \        case 7:\n                    result ~= \"Seven\";\n                 \
    \   break;\n                case 8:\n                    result ~= \"Eight\";\n\
    \                    break;\n                case 9:\n                    result\
    \ ~= \"Nine\";\n                    break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsd7s968y.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd7s968y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    foreach(i; arr)\n    {\n        if(i < 1 || i > 9)\n \
    \           continue;\n        result ~= to!string(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4u5bbfw1.d(33): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4u5bbfw1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = [];\n    foreach(a; arr)\n    {\n        if(a > 0 && a < 10)\n        {\n\
    \            switch(a)\n            {\n                case 1: result ~= \"One\"\
    ; break;\n                case 2: result ~= \"Two\"; break;\n                case\
    \ 3: result ~= \"Three\"; break;\n                case 4: result ~= \"Four\";\
    \ break;\n                case 5: result ~= \"Five\"; break;\n               \
    \ case 6: result ~= \"Six\"; break;\n                case 7: result ~= \"Seven\"\
    ; break;\n                case 8: result ~= \"Eight\"; break;\n              \
    \  case 9: result ~= \"Nine\"; break;\n            }\n        }\n    }\n    return\
    \ result.reverse;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0pxxhtz.d(33): Error: `switch` statement without a `default`;\
    \ use `final switch` or add `default: assert(0);` or add `default: break;`\\n/tmp/tmpl0pxxhtz.d(47):\
    \ Error: template `std.typecons.reverse` cannot deduce function from argument\
    \ types `!()(string[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0pxxhtz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Replace each\
    \ digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new\
    \ string[arr.length];\n    foreach(i, v; arr)\n    {\n        switch(v)\n    \
    \    {\n            case 1:\n                result[i] = \"One\";\n          \
    \      break;\n            case 2:\n                result[i] = \"Two\";\n   \
    \             break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                result[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jw999xc.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmp2jw999xc.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jw999xc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result\
    \ = new string[0];\n    if (arr.length == 0)\n        return result;\n    arr\
    \ = arr.sort();\n    arr = arr.reverse();\n    foreach (long i; arr)\n    {\n\
    \        if (i < 1 || i > 9)\n            continue;\n        switch (i)\n    \
    \    {\n            case 1:\n                result ~= \"One\";\n            \
    \    break;\n            case 2:\n                result ~= \"Two\";\n       \
    \         break;\n            case 3:\n                result ~= \"Three\";\n\
    \                break;\n            case 4:\n                result ~= \"Four\"\
    ;\n                break;\n            case 5:\n                result ~= \"Five\"\
    ;\n                break;\n            case 6:\n                result ~= \"Six\"\
    ;\n                break;\n            case 7:\n                result ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                result ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpibgzcdtu.d(31): Error: no property `sort` for type `long[]`\\\
    n/tmp/tmpibgzcdtu.d(32): Error: template `std.typecons.reverse` cannot deduce\
    \ function from argument types `!()(long[])`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\n/tmp/tmpibgzcdtu.d(37):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpibgzcdtu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n\
    \    sort(arr);\n    // Reverse the array\n    reverse(arr);\n    // Create a\
    \ new array with the same size as arr\n    string[] result = new string[arr.length];\n\
    \    // Loop through the array\n    foreach(i, item; arr)\n    {\n        // If\
    \ the item is between 1 and 9 inclusive\n        if(item >= 1 && item <= 9)\n\
    \        {\n            // Add the corresponding name to the result array\n  \
    \          result[i] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][item - 1];\n        }\n    }\n    // Return\
    \ the result array\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph23d8wxf.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\n/tmp/tmph23d8wxf.d(31): Error: template `std.typecons.reverse`\
    \ cannot deduce function from argument types `!()(long[])`, candidates are:\\\
    n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):\
    \        `std.typecons.reverse(T)(T t) if (isTuple!T)`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmph23d8wxf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            ->\
    \ sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5,\
    \ 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an\
    \ empty array:\n      arr = []\n      return []\n    \n      If the array has\
    \ any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort\
    \ arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return\
    \ = ['One']\n    \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new\
    \ string[];\n    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n       \
    \ {\n            result ~= to!string(i);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2fyrgku9.d(28): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\n/tmp/tmp2fyrgku9.d(33): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fyrgku9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
