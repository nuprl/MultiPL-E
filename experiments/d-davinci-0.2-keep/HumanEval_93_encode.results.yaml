name: HumanEval_93_encode
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if(isAlpha(c))\n   \
    \     {\n            if(isUpper(c))\n            {\n                c = toLower(c);\n\
    \            }\n            else\n            {\n                c = toUpper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'w';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4m7cib1z.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp4m7cib1z.d(24):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmp4m7cib1z.d(26): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmp4m7cib1z.d(30): Error: undefined identifier `toUpper`\\\
    n/tmp/tmp4m7cib1z.d(34): Error: cannot modify `immutable` expression `c`\\n/tmp/tmp4m7cib1z.d(38):\
    \ Error: cannot modify `immutable` expression `c`\\n/tmp/tmp4m7cib1z.d(42): Error:\
    \ cannot modify `immutable` expression `c`\\n/tmp/tmp4m7cib1z.d(46): Error: cannot\
    \ modify `immutable` expression `c`\\n/tmp/tmp4m7cib1z.d(50): Error: cannot modify\
    \ `immutable` expression `c`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4m7cib1z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyfc3pub.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpcyfc3pub.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpcyfc3pub.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4tfbfus4.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp4tfbfus4.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp4tfbfus4.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp4tfbfus4.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4tfbfus4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4z1n_9l_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp4z1n_9l_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4z1n_9l_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if (isAlpha(c))\
    \ \n        {\n            if (isLower(c)) \n            {\n                c\
    \ = toUpper(c);\n            }\n            else \n            {\n           \
    \     c = toLower(c);\n            }\n            switch (c) \n            {\n\
    \                case 'A':\n                    c = 'C';\n                   \
    \ break;\n                case 'E':\n                    c = 'G';\n          \
    \          break;\n                case 'I':\n                    c = 'K';\n \
    \                   break;\n                case 'O':\n                    c =\
    \ 'Q';\n                    break;\n                case 'U':\n              \
    \      c = 'Y';\n                    break;\n                case 'C':\n     \
    \               c = 'E';\n                    break;\n                case 'G':\n\
    \                    c = 'I';\n                    break;\n                case\
    \ 'K':\n                    c = 'M';\n                    break;\n           \
    \     case 'Q':\n                    c = 'S';\n                    break;\n  \
    \              case 'Y':\n                    c = 'A';\n                    break;\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsnjgggl8.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpsnjgggl8.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpsnjgggl8.d(26): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpsnjgggl8.d(30): Error: undefined identifier `toLower`\\\
    n/tmp/tmpsnjgggl8.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnjgggl8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c += 2;\n   \
    \                 break;\n            }\n        }\n        result ~= c;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpibucbfrq.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpibucbfrq.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpibucbfrq.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpibucbfrq.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpibucbfrq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkzai5c74.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpkzai5c74.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpkzai5c74.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message) \n    {\n        if(isalpha(c))\n    \
    \    {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n            else if(c\
    \ == 'y')\n            {\n                c = 'a';\n            }\n          \
    \  else\n            {\n                c += 2;\n            }\n        }\n  \
    \      result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7yy1j8nq.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp7yy1j8nq.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp7yy1j8nq.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp7yy1j8nq.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yy1j8nq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                if(c ==\
    \ 'w')\n                    result ~= 'a';\n                else if(c == 'x')\n\
    \                    result ~= 'b';\n                else if(c == 'y')\n     \
    \               result ~= 'c';\n                else if(c == 'z')\n          \
    \          result ~= 'd';\n                else\n                    result ~=\
    \ toUpper(c+2);\n            }\n            else\n            {\n            \
    \    if(c == 'W')\n                    result ~= 'A';\n                else if(c\
    \ == 'X')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'C';\n                else if(c == 'Z')\n     \
    \               result ~= 'D';\n                else\n                    result\
    \ ~= toLower(c+2);\n            }\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl6xsub6_.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpl6xsub6_.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpl6xsub6_.d(35): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpl6xsub6_.d(48): Error: undefined identifier `toLower`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6xsub6_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toupper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezewmneu.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpezewmneu.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpezewmneu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvhctcm3.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpnvhctcm3.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvhctcm3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                case 'b':\n                    c = 'd';\n \
    \                   break;\n                case 'f':\n                    c =\
    \ 'h';\n                    break;\n                case 'j':\n              \
    \      c = 'l';\n                    break;\n                case 'p':\n     \
    \               c = 'r';\n                    break;\n                case 'v':\n\
    \                    c = 'z';\n                    break;\n                case\
    \ 'z':\n                    c = 'b';\n                    break;\n           \
    \     case 'c':\n                    c = 'e';\n                    break;\n  \
    \              case 'g':\n                    c = 'i';\n                    break;\n\
    \                case 'k':\n                    c = 'm';\n                   \
    \ break;\n                case 'q':\n                    c = 's';\n          \
    \          break;\n                case 'w':\n                    c = 'a';\n \
    \                   break;\n                case 'd':\n                    c =\
    \ 'f';\n                    break;\n                case 'h':\n              \
    \      c = 'j';\n                    break;\n                case 'l':\n     \
    \               c = 'n';\n                    break;\n                case 'r':\n\
    \                    c = 't';\n                    break;\n                case\
    \ 'x':\n                    c = 'c';\n                    break;\n           \
    \     case 'm':\n                    c = 'o';\n                    break;\n  \
    \              case 'n':\n                    c = 'p';\n                    break;\n\
    \                case 's':\n                    c = 'u';\n                   \
    \ break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqjfycxb.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpqqjfycxb.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpqqjfycxb.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpqqjfycxb.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqjfycxb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(islower(c))\n            {\n                c = toupper(c);\n\
    \            }\n            else\n            {\n                c = tolower(c);\n\
    \            }\n            switch(c)\n            {\n                case 'A':\n\
    \                    c = 'C';\n                    break;\n                case\
    \ 'E':\n                    c = 'G';\n                    break;\n           \
    \     case 'I':\n                    c = 'K';\n                    break;\n  \
    \              case 'O':\n                    c = 'Q';\n                    break;\n\
    \                case 'U':\n                    c = 'S';\n                   \
    \ break;\n                case 'a':\n                    c = 'c';\n          \
    \          break;\n                case 'e':\n                    c = 'g';\n \
    \                   break;\n                case 'i':\n                    c =\
    \ 'k';\n                    break;\n                case 'o':\n              \
    \      c = 'q';\n                    break;\n                case 'u':\n     \
    \               c = 's';\n                    break;\n            }\n        }\n\
    \        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqq30s5gb.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpqq30s5gb.d(24):\
    \ Error: undefined identifier `islower`\\n/tmp/tmpqq30s5gb.d(26): Error: undefined\
    \ identifier `toupper`\\n/tmp/tmpqq30s5gb.d(30): Error: undefined identifier `tolower`\\\
    n/tmp/tmpqq30s5gb.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqq30s5gb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = (c + 2) % 26 + 'a';\n        }\n        else if(c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n       \
    \     c = (c + 2) % 26 + 'A';\n        }\n        result ~= c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0gcfl04.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpy0gcfl04.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0gcfl04.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    //\
    \ Your code here\n    string result = \"\";\n    foreach(char c; message)\n  \
    \  {\n        if(c >= 'a' && c <= 'z')\n        {\n            c = c - 'a' + 'A';\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            c =\
    \ c - 'A' + 'a';\n        }\n        switch(c)\n        {\n            case 'a':\n\
    \            case 'A':\n                c = 'C';\n                break;\n   \
    \         case 'e':\n            case 'E':\n                c = 'G';\n       \
    \         break;\n            case 'i':\n            case 'I':\n             \
    \   c = 'K';\n                break;\n            case 'o':\n            case\
    \ 'O':\n                c = 'M';\n                break;\n            case 'u':\n\
    \            case 'U':\n                c = 'Q';\n                break;\n   \
    \     }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp603g5ll_.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp603g5ll_.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp603g5ll_.d(31):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp603g5ll_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpid541zwl.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpid541zwl.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpid541zwl.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpid541zwl.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpid541zwl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp12ivm29h.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp12ivm29h.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp12ivm29h.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp12ivm29h.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp12ivm29h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            encoded ~= toupper(c);\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n  \
    \      }\n        else\n        {\n            encoded ~= c;\n        }\n    }\n\
    \    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe31i4cq9.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpe31i4cq9.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpe31i4cq9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            if(isLower(c))\n            {\n                if(c == 'z')\n\
    \                    result ~= 'B';\n                else if(c == 'y')\n     \
    \               result ~= 'A';\n                else\n                    result\
    \ ~= toUpper(c + 2);\n            }\n            else\n            {\n       \
    \         if(c == 'Z')\n                    result ~= 'b';\n                else\
    \ if(c == 'Y')\n                    result ~= 'a';\n                else\n   \
    \                 result ~= toLower(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7j3rjp5b.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp7j3rjp5b.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmp7j3rjp5b.d(31): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmp7j3rjp5b.d(40): Error: undefined identifier `toLower`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7j3rjp5b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            if(isLower(c))\n            {\n                if(c == 'z')\n\
    \                    result ~= 'B';\n                else if(c == 'y')\n     \
    \               result ~= 'A';\n                else\n                    result\
    \ ~= char(c + 2);\n            }\n            else\n            {\n          \
    \      if(c == 'Z')\n                    result ~= 'b';\n                else\
    \ if(c == 'Y')\n                    result ~= 'a';\n                else\n   \
    \                 result ~= char(c + 2);\n            }\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpey57wb6m.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpey57wb6m.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpey57wb6m.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpey57wb6m.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey57wb6m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                {\n                    encoded ~= 'b';\n             \
    \   }\n                else if(c == 'Y')\n                {\n                \
    \    encoded ~= 'a';\n                }\n                else\n              \
    \  {\n                    encoded ~= tolower(c + 2);\n                }\n    \
    \        }\n            else\n            {\n                if(c == 'z')\n  \
    \              {\n                    encoded ~= 'B';\n                }\n   \
    \             else if(c == 'y')\n                {\n                    encoded\
    \ ~= 'A';\n                }\n                else\n                {\n      \
    \              encoded ~= toupper(c + 2);\n                }\n            }\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjd3blt52.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpjd3blt52.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpjd3blt52.d(36): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpjd3blt52.d(51): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjd3blt52.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmwbbfnri.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpmwbbfnri.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpmwbbfnri.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpmwbbfnri.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwbbfnri.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n\
    \            result ~= 'c';\n        else if(c == 'e')\n            result ~=\
    \ 'g';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c\
    \ == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n           \
    \ result ~= 'y';\n        else if(c == 'A')\n            result ~= 'C';\n    \
    \    else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'I')\n\
    \            result ~= 'K';\n        else if(c == 'O')\n            result ~=\
    \ 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n        else if(c\
    \ >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n        else if(c >=\
    \ 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n        \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hl0gn3s.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmp0hl0gn3s.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp0hl0gn3s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xp_evl_.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp7xp_evl_.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp7xp_evl_.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmp7xp_evl_.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xp_evl_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknfbhf32.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpknfbhf32.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpknfbhf32.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11kg12le.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp11kg12le.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp11kg12le.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp11kg12le.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11kg12le.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n   \
    \     else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else\
    \ if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c\
    \ == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n\
    \        {\n            c = 'q';\n        }\n        else if(c == 'u')\n     \
    \   {\n            c = 'y';\n        }\n        else if(c == 'A')\n        {\n\
    \            c = 'C';\n        }\n        else if(c == 'E')\n        {\n     \
    \       c = 'G';\n        }\n        else if(c == 'I')\n        {\n          \
    \  c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c =\
    \ 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'Y';\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8kms5mus.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp8kms5mus.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8kms5mus.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3otk4n7f.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp3otk4n7f.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3otk4n7f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvg3myzr.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmplvg3myzr.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmplvg3myzr.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmplvg3myzr.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvg3myzr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkn46kx9w.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpkn46kx9w.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpkn46kx9w.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpkn46kx9w.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkn46kx9w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    //\
    \ your code here\n    return \"\";\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_s_b6xjv.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f0d]\\n??:? void tmp_s_b6xjv.__unittest_L22_C1()\
    \ [0x427ab2]\\n??:? void tmp_s_b6xjv.__modtest() [0x427c90]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbdd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43008c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb69]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa9d]\\n??:? runModuleUnitTests [0x42b98d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42835c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282e3]\\n??:? _d_run_main [0x42824e]\\n??:? main [0x427ca3]\\\
    n??:? __libc_start_main [0x7846e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvw52n02x.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpvw52n02x.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpvw52n02x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqa0y45xq.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpqa0y45xq.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqa0y45xq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n \
    \       else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpseyqs4ie.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpseyqs4ie.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseyqs4ie.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \       {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        encoded ~= c;\n \
    \   }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpex_fzz7z.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpex_fzz7z.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex_fzz7z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        encoded\
    \ ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmusk0_n.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmppmusk0_n.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmppmusk0_n.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmppmusk0_n.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmusk0_n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpslmt9bp2.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpslmt9bp2.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpslmt9bp2.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x2c357554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7yrohik3.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp7yrohik3.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp7yrohik3.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp7yrohik3.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7yrohik3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if(isAlpha(c))\
    \ \n        {\n            if(isUpper(c)) \n            {\n                c =\
    \ toLower(c);\n            } \n            else \n            {\n            \
    \    c = toUpper(c);\n            }\n            if(c == 'a') \n            {\n\
    \                c = 'c';\n            } \n            else if(c == 'e') \n  \
    \          {\n                c = 'g';\n            } \n            else if(c\
    \ == 'i') \n            {\n                c = 'k';\n            } \n        \
    \    else if(c == 'o') \n            {\n                c = 'q';\n           \
    \ } \n            else if(c == 'u') \n            {\n                c = 'y';\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxepd0rf.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmplxepd0rf.d(24):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmplxepd0rf.d(26): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmplxepd0rf.d(30): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxepd0rf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                if(c ==\
    \ 'z')\n                    result ~= 'B';\n                else if(c == 'y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'Z')\n                    result ~= 'B';\n            \
    \    else if(c == 'Y')\n                    result ~= 'A';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jcokfbg.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp5jcokfbg.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmp5jcokfbg.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmp5jcokfbg.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jcokfbg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n      \
    \  char c = message[i];\n        if (c >= 'a' && c <= 'z')\n        {\n      \
    \      c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' && c <= 'Z')\n\
    \        {\n            c = c - 'A' + 'a';\n        }\n        else\n        {\n\
    \            result += c;\n            continue;\n        }\n        switch (c)\n\
    \        {\n            case 'A':\n                c = 'C';\n                break;\n\
    \            case 'E':\n                c = 'G';\n                break;\n   \
    \         case 'I':\n                c = 'K';\n                break;\n      \
    \      case 'O':\n                c = 'Q';\n                break;\n         \
    \   case 'U':\n                c = 'S';\n                break;\n            case\
    \ 'a':\n                c = 'c';\n                break;\n            case 'e':\n\
    \                c = 'g';\n                break;\n            case 'i':\n   \
    \             c = 'k';\n                break;\n            case 'o':\n      \
    \          c = 'q';\n                break;\n            case 'u':\n         \
    \       c = 's';\n                break;\n        }\n        result += c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhejehrw.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpvhejehrw.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpvhejehrw.d(33):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpvhejehrw.d(36): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmpvhejehrw.d(69): Error: slice `result` is\
    \ not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhejehrw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplu8px2lg.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmplu8px2lg.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmplu8px2lg.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmplu8px2lg.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplu8px2lg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbze9mp9i.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpbze9mp9i.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpbze9mp9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_uvxuvkg.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp_uvxuvkg.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp_uvxuvkg.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp_uvxuvkg.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_uvxuvkg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n\
    \            result ~= 'c';\n        else if(c == 'e')\n            result ~=\
    \ 'g';\n        else if(c == 'i')\n            result ~= 'k';\n        else if(c\
    \ == 'o')\n            result ~= 'q';\n        else if(c == 'u')\n           \
    \ result ~= 'y';\n        else if(c == 'A')\n            result ~= 'C';\n    \
    \    else if(c == 'E')\n            result ~= 'G';\n        else if(c == 'I')\n\
    \            result ~= 'K';\n        else if(c == 'O')\n            result ~=\
    \ 'Q';\n        else if(c == 'U')\n            result ~= 'Y';\n        else if(c\
    \ >= 'a' && c <= 'z')\n            result ~= toUpper(c);\n        else if(c >=\
    \ 'A' && c <= 'Z')\n            result ~= toLower(c);\n        else\n        \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ninvxlp.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmp8ninvxlp.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8ninvxlp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2t89ia2.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpj2t89ia2.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2t89ia2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf724s1ul.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpf724s1ul.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpf724s1ul.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcq1ulsin.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpcq1ulsin.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpcq1ulsin.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpcq1ulsin.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpcq1ulsin.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            result ~= (char)(c + 2);\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (char)(c + 2);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xjanxur.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp1xjanxur.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\n/tmp/tmp1xjanxur.d(32): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\n/tmp/tmp1xjanxur.d(36): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1xjanxur.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                if(c ==\
    \ 'w')\n                    result ~= 'a';\n                else if(c == 'x')\n\
    \                    result ~= 'b';\n                else if(c == 'y')\n     \
    \               result ~= 'c';\n                else if(c == 'z')\n          \
    \          result ~= 'd';\n                else\n                    result ~=\
    \ toUpper(c) + 2;\n            }\n            else\n            {\n          \
    \      if(c == 'W')\n                    result ~= 'A';\n                else\
    \ if(c == 'X')\n                    result ~= 'B';\n                else if(c\
    \ == 'Y')\n                    result ~= 'C';\n                else if(c == 'Z')\n\
    \                    result ~= 'D';\n                else\n                  \
    \  result ~= toLower(c) + 2;\n            }\n        }\n        else\n       \
    \     result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3evdxmf3.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp3evdxmf3.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmp3evdxmf3.d(35): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmp3evdxmf3.d(48): Error: undefined identifier `toLower`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3evdxmf3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxd8vd9jh.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpxd8vd9jh.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxd8vd9jh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdba9bafn.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpdba9bafn.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpdba9bafn.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x7fd72554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= cast(char)(c - 'a' + 'A');\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= cast(char)(c - 'A' + 'a');\n        }\n        else\n        {\n        \
    \    result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp42nsuiyd.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp42nsuiyd.__unittest_L37_C1()\
    \ [0x427bd6]\\n??:? void tmp42nsuiyd.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x33dfd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ck53hj_.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp2ck53hj_.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2ck53hj_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if (isLetter(c))\
    \ \n        {\n            if (isUpper(c)) \n            {\n                c\
    \ = toLower(c);\n            } \n            else \n            {\n          \
    \      c = toUpper(c);\n            }\n            if (c == 'a') \n          \
    \  {\n                c = 'c';\n            } \n            else if (c == 'e')\
    \ \n            {\n                c = 'g';\n            } \n            else\
    \ if (c == 'i') \n            {\n                c = 'k';\n            } \n  \
    \          else if (c == 'o') \n            {\n                c = 'q';\n    \
    \        } \n            else if (c == 'u') \n            {\n                c\
    \ = 'y';\n            }\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqoa299t.d(22): Error: undefined identifier `isLetter`\\n/tmp/tmpeqoa299t.d(24):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpeqoa299t.d(26): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmpeqoa299t.d(30): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqoa299t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toupper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphq_j6mvl.d(24): Error: undefined identifier `toupper`\\n/tmp/tmphq_j6mvl.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmphq_j6mvl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9u1vm4g_.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmp9u1vm4g_.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9u1vm4g_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn2ewm1j.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpmn2ewm1j.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmn2ewm1j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c++;\n      \
    \              break;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmsj1ghve.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpmsj1ghve.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpmsj1ghve.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpmsj1ghve.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsj1ghve.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n\
    \        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcquevrv3.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpcquevrv3.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcquevrv3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = message;\n    for (int i = 0; i < message.length; i++)\n    {\n  \
    \      char c = message[i];\n        if (c >= 'a' && c <= 'z')\n        {\n  \
    \          encoded[i] = toupper(c);\n        }\n        else if (c >= 'A' && c\
    \ <= 'Z')\n        {\n            encoded[i] = tolower(c);\n        }\n      \
    \  else if (c == 'a')\n        {\n            encoded[i] = 'c';\n        }\n \
    \       else if (c == 'e')\n        {\n            encoded[i] = 'g';\n       \
    \ }\n        else if (c == 'i')\n        {\n            encoded[i] = 'k';\n  \
    \      }\n        else if (c == 'o')\n        {\n            encoded[i] = 'q';\n\
    \        }\n        else if (c == 'u')\n        {\n            encoded[i] = 'y';\n\
    \        }\n        else if (c == 'A')\n        {\n            encoded[i] = 'C';\n\
    \        }\n        else if (c == 'E')\n        {\n            encoded[i] = 'G';\n\
    \        }\n        else if (c == 'I')\n        {\n            encoded[i] = 'K';\n\
    \        }\n        else if (c == 'O')\n        {\n            encoded[i] = 'Q';\n\
    \        }\n        else if (c == 'U')\n        {\n            encoded[i] = 'Y';\n\
    \        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9z75wtp.d(25): Error: undefined identifier `toupper`\\n/tmp/tmpw9z75wtp.d(29):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmpw9z75wtp.d(33): Error: cannot\
    \ modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(37):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(41):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(45):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(49):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(53):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(57):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(61):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(65):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\n/tmp/tmpw9z75wtp.d(69):\
    \ Error: cannot modify `immutable` expression `encoded[cast(ulong)i]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9z75wtp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n\
    \        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            c = c + 2;\n        }\n        else if(c == 'Y')\n        {\n\
    \            c = 'A';\n        }\n        else if(c == 'Z')\n        {\n     \
    \       c = 'B';\n        }\n        result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
    ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_hrxigho.d(24): Error: cannot modify `immutable` expression `c`\\\
    n/tmp/tmp_hrxigho.d(28): Error: cannot modify `immutable` expression `c`\\n/tmp/tmp_hrxigho.d(32):\
    \ Error: cannot modify `immutable` expression `c`\\n/tmp/tmp_hrxigho.d(36): Error:\
    \ cannot modify `immutable` expression `c`\\n/tmp/tmp_hrxigho.d(40): Error: cannot\
    \ modify `immutable` expression `c`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_hrxigho.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lonn6dd.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp3lonn6dd.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp3lonn6dd.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp3lonn6dd.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp3lonn6dd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp86r43u61.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp86r43u61.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp86r43u61.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp86r43u61.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86r43u61.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 32;\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            result ~= c + 32;\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9qpfnpxf.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280ad]\\n??:? void tmp9qpfnpxf.__unittest_L37_C1()\
    \ [0x427c52]\\n??:? void tmp9qpfnpxf.__modtest() [0x427e30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca37]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43031d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b91d]\\n??:? runModuleUnitTests [0x42c80d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428483]\\n??:? _d_run_main [0x4283ee]\\n??:? main [0x427e43]\\\
    n??:? __libc_start_main [0xcd2bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if(isalpha(c))\
    \ \n        {\n            if(isupper(c)) \n            {\n                c =\
    \ tolower(c);\n            }\n            else \n            {\n             \
    \   c = toupper(c);\n            }\n            if(c == 'a') \n            {\n\
    \                c = 'c';\n            }\n            else if(c == 'e') \n   \
    \         {\n                c = 'g';\n            }\n            else if(c ==\
    \ 'i') \n            {\n                c = 'k';\n            }\n            else\
    \ if(c == 'o') \n            {\n                c = 'q';\n            }\n    \
    \        else if(c == 'u') \n            {\n                c = 'y';\n       \
    \     }\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mw82dj2.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp3mw82dj2.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp3mw82dj2.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp3mw82dj2.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mw82dj2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' + 'a';\n     \
    \   }\n        else\n        {\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_0zrdqip.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmp_0zrdqip.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmp_0zrdqip.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x65989554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbom3wmsr.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpbom3wmsr.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpbom3wmsr.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpbom3wmsr.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpbom3wmsr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n      \
    \  if (message[i] >= 'a' && message[i] <= 'z')\n        {\n            result\
    \ += (char)(message[i] - 32);\n        }\n        else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z')\n        {\n            result += (char)(message[i] + 32);\n\
    \        }\n        else\n        {\n            result += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < result.length; i++)\n    {\n        if (result[i]\
    \ == 'a')\n        {\n            result[i] = 'c';\n        }\n        else if\
    \ (result[i] == 'e')\n        {\n            result[i] = 'g';\n        }\n   \
    \     else if (result[i] == 'i')\n        {\n            result[i] = 'k';\n  \
    \      }\n        else if (result[i] == 'o')\n        {\n            result[i]\
    \ = 'q';\n        }\n        else if (result[i] == 'u')\n        {\n         \
    \   result[i] = 'y';\n        }\n        else if (result[i] == 'A')\n        {\n\
    \            result[i] = 'C';\n        }\n        else if (result[i] == 'E')\n\
    \        {\n            result[i] = 'G';\n        }\n        else if (result[i]\
    \ == 'I')\n        {\n            result[i] = 'K';\n        }\n        else if\
    \ (result[i] == 'O')\n        {\n            result[i] = 'Q';\n        }\n   \
    \     else if (result[i] == 'U')\n        {\n            result[i] = 'Y';\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj8xpnp9i.d(24): Error: C style cast illegal, use `cast(char)(message[i]\
    \ - 32)`\\n/tmp/tmpj8xpnp9i.d(28): Error: C style cast illegal, use `cast(char)(message[i]\
    \ + 32)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8xpnp9i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa8ep1kml.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpa8ep1kml.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpa8ep1kml.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x79ef4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqq7kirmz.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpqq7kirmz.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpqq7kirmz.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x4907c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsnw1n3hr.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpsnw1n3hr.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpsnw1n3hr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= char(c - 'a' + 'A');\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c - 'A' + 'a');\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdca6ni32.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpdca6ni32.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdca6ni32.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwelzecr8.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpwelzecr8.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpwelzecr8.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0xf1188554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n       \
    \ else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n\
    \            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n       \
    \ }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoowe3mwr.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpoowe3mwr.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpoowe3mwr.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpoowe3mwr.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpoowe3mwr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsifwa0w6.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpsifwa0w6.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpsifwa0w6.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpsifwa0w6.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpsifwa0w6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' +\
    \ 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphjuml14c.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmphjuml14c.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmphjuml14c.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0x58fad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_n_iqt98.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp_n_iqt98.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_n_iqt98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpknxb6b4h.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpknxb6b4h.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknxb6b4h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4jlq87b.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpd4jlq87b.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4jlq87b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c + 'A' - 'a');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c + 'a'\
    \ - 'A');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpshtxuoaq.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280c5]\\n??:? void tmpshtxuoaq.__unittest_L37_C1()\
    \ [0x427c6a]\\n??:? void tmpshtxuoaq.__modtest() [0x427e48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca4f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430335]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b935]\\n??:? runModuleUnitTests [0x42c825]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428514]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42849b]\\n??:? _d_run_main [0x428406]\\n??:? main [0x427e5b]\\\
    n??:? __libc_start_main [0x6845e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpevbgqghn.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpevbgqghn.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpevbgqghn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \       {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprk8l721m.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmprk8l721m.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprk8l721m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                if(c == 'Z')\n\
    \                    result ~= 'B';\n                else if(c == 'Y')\n     \
    \               result ~= 'A';\n                else\n                    result\
    \ ~= char(c + 2);\n            }\n            else\n            {\n          \
    \      if(c == 'z')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'a';\n                else\n   \
    \                 result ~= char(c + 2);\n            }\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm5794yex.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpm5794yex.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpm5794yex.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpm5794yex.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5794yex.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7es_56as.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp7es_56as.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp7es_56as.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp7es_56as.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7es_56as.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgtw_ao6.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmphgtw_ao6.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgtw_ao6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n       \
    \ else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n\
    \            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n       \
    \ }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe25qo7h0.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpe25qo7h0.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpe25qo7h0.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpe25qo7h0.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpe25qo7h0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptpoo4a1b.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmptpoo4a1b.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmptpoo4a1b.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x50516554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpybqadu02.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpybqadu02.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpybqadu02.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x756db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message) \n    {\n        if(c >= 'a' &&\
    \ c <= 'z') \n        {\n            result ~= toupper(c);\n        } \n     \
    \   else if(c >= 'A' && c <= 'Z') \n        {\n            result ~= tolower(c);\n\
    \        } \n        else \n        {\n            result ~= c;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrwsa1ly.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpqrwsa1ly.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpqrwsa1ly.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7o0yjh5q.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp7o0yjh5q.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp7o0yjh5q.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp7o0yjh5q.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7o0yjh5q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4qupskob.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp4qupskob.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp4qupskob.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp4qupskob.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qupskob.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjyintb4.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmpxjyintb4.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpxjyintb4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                if(c ==\
    \ 'z')\n                    result ~= 'B';\n                else if(c == 'y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= toUpper(c + 2);\n            }\n            else\n            {\n\
    \                if(c == 'Z')\n                    result ~= 'b';\n          \
    \      else if(c == 'Y')\n                    result ~= 'a';\n               \
    \ else\n                    result ~= toLower(c + 2);\n            }\n       \
    \ }\n        else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqxcfxix8.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpqxcfxix8.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpqxcfxix8.d(31): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpqxcfxix8.d(40): Error: undefined identifier `toLower`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxcfxix8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpukbizj1s.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpukbizj1s.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpukbizj1s.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpukbizj1s.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpukbizj1s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n\
    \            }\n            else\n            {\n                c = toLower(c);\n\
    \            }\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U')\n            {\n                c = c + 2;\n            }\n      \
    \      else if(c == 'Y')\n            {\n                c = 'A';\n          \
    \  }\n            else if(c == 'Z')\n            {\n                c = 'B';\n\
    \            }\n            else\n            {\n                c = c + 1;\n\
    \            }\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0jowv_9b.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp0jowv_9b.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmp0jowv_9b.d(26): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmp0jowv_9b.d(30): Error: undefined identifier `toLower`\\\
    n/tmp/tmp0jowv_9b.d(34): Error: cannot implicitly convert expression `cast(int)c\
    \ + 2` of type `int` to `char`\\n/tmp/tmp0jowv_9b.d(46): Error: cannot implicitly\
    \ convert expression `cast(int)c + 1` of type `int` to `char`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jowv_9b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0y21gops.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp0y21gops.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmp0y21gops.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x3844a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvn_h3l_.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpbvn_h3l_.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvn_h3l_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)(c - 'A' + 'a');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoow8g2pz.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpoow8g2pz.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpoow8g2pz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'b':\n                    c = 'd';\n          \
    \          break;\n                case 'f':\n                    c = 'h';\n \
    \                   break;\n                case 'j':\n                    c =\
    \ 'l';\n                    break;\n                case 'p':\n              \
    \      c = 'r';\n                    break;\n                case 'v':\n     \
    \               c = 'z';\n                    break;\n                case 'c':\n\
    \                    c = 'e';\n                    break;\n                case\
    \ 'g':\n                    c = 'i';\n                    break;\n           \
    \     case 'k':\n                    c = 'm';\n                    break;\n  \
    \              case 'q':\n                    c = 's';\n                    break;\n\
    \                case 'w':\n                    c = 'a';\n                   \
    \ break;\n                case 'd':\n                    c = 'f';\n          \
    \          break;\n                case 'h':\n                    c = 'j';\n \
    \                   break;\n                case 'l':\n                    c =\
    \ 'n';\n                    break;\n                case 'r':\n              \
    \      c = 't';\n                    break;\n                case 'x':\n     \
    \               c = 'b';\n                    break;\n                case 'y':\n\
    \                    c = 'd';\n                    break;\n                case\
    \ 'm':\n                    c = 'o';\n                    break;\n           \
    \     case 'n':\n                    c = 'p';\n                    break;\n  \
    \              case 's':\n                    c = 'u';\n                    break;\n\
    \                case 't':\n                    c = 'v';\n                   \
    \ break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxqy7mef.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpdxqy7mef.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpdxqy7mef.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpdxqy7mef.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxqy7mef.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n   \
    \     {\n            result ~= (c + 2);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4mx_mlwy.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp4mx_mlwy.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmp4mx_mlwy.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x13597554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 32;\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            result ~= c + 32;\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa3jsou67.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280ad]\\n??:? void tmpa3jsou67.__unittest_L37_C1()\
    \ [0x427c52]\\n??:? void tmpa3jsou67.__modtest() [0x427e30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca37]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43031d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b91d]\\n??:? runModuleUnitTests [0x42c80d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428483]\\n??:? _d_run_main [0x4283ee]\\n??:? main [0x427e43]\\\
    n??:? __libc_start_main [0x6e8c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n\
    \            encoded ~= 'c';\n        else if(c == 'e')\n            encoded ~=\
    \ 'g';\n        else if(c == 'i')\n            encoded ~= 'k';\n        else if(c\
    \ == 'o')\n            encoded ~= 'q';\n        else if(c == 'u')\n          \
    \  encoded ~= 'y';\n        else if(c == 'A')\n            encoded ~= 'C';\n \
    \       else if(c == 'E')\n            encoded ~= 'G';\n        else if(c == 'I')\n\
    \            encoded ~= 'K';\n        else if(c == 'O')\n            encoded ~=\
    \ 'Q';\n        else if(c == 'U')\n            encoded ~= 'Y';\n        else if(c\
    \ >= 'a' && c <= 'z')\n            encoded ~= toUpper(c);\n        else if(c >=\
    \ 'A' && c <= 'Z')\n            encoded ~= toLower(c);\n        else\n       \
    \     encoded ~= c;\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpctyb7g6i.d(43): Error: undefined identifier `toUpper`\\n/tmp/tmpctyb7g6i.d(45):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpctyb7g6i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnob2q4yt.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpnob2q4yt.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpnob2q4yt.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpnob2q4yt.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnob2q4yt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4i8ai7ip.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp4i8ai7ip.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp4i8ai7ip.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp4i8ai7ip.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i8ai7ip.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n      \
    \  char c = message[i];\n        if (c >= 'a' && c <= 'z')\n        {\n      \
    \      c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' && c <= 'Z')\n\
    \        {\n            c = c - 'A' + 'a';\n        }\n        else\n        {\n\
    \            result += c;\n            continue;\n        }\n        switch (c)\n\
    \        {\n            case 'A':\n                c = 'C';\n                break;\n\
    \            case 'E':\n                c = 'G';\n                break;\n   \
    \         case 'I':\n                c = 'K';\n                break;\n      \
    \      case 'O':\n                c = 'Q';\n                break;\n         \
    \   case 'U':\n                c = 'S';\n                break;\n            case\
    \ 'a':\n                c = 'c';\n                break;\n            case 'e':\n\
    \                c = 'g';\n                break;\n            case 'i':\n   \
    \             c = 'k';\n                break;\n            case 'o':\n      \
    \          c = 'q';\n                break;\n            case 'u':\n         \
    \       c = 's';\n                break;\n        }\n        result += c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm6uypslc.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpm6uypslc.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpm6uypslc.d(33):\
    \ Error: slice `result` is not mutable\\n/tmp/tmpm6uypslc.d(36): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\n/tmp/tmpm6uypslc.d(69): Error: slice `result` is\
    \ not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6uypslc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= 'A' + (c - 'a');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= 'a' + (c\
    \ - 'A');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_y7atgfs.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmp_y7atgfs.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmp_y7atgfs.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x21261554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp30q9dgam.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp30q9dgam.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp30q9dgam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = toupper(c);\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n        }\n   \
    \     else if(c == 'a')\n        {\n            c = 'c';\n        }\n        else\
    \ if(c == 'e')\n        {\n            c = 'g';\n        }\n        else if(c\
    \ == 'i')\n        {\n            c = 'k';\n        }\n        else if(c == 'o')\n\
    \        {\n            c = 'q';\n        }\n        else if(c == 'u')\n     \
    \   {\n            c = 'y';\n        }\n        else if(c == 'A')\n        {\n\
    \            c = 'C';\n        }\n        else if(c == 'E')\n        {\n     \
    \       c = 'G';\n        }\n        else if(c == 'I')\n        {\n          \
    \  c = 'K';\n        }\n        else if(c == 'O')\n        {\n            c =\
    \ 'Q';\n        }\n        else if(c == 'U')\n        {\n            c = 'Y';\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8lprfbbr.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp8lprfbbr.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8lprfbbr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n\
    \        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyx1_f7ly.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpyx1_f7ly.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyx1_f7ly.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpppzpcz5w.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpppzpcz5w.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpppzpcz5w.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpppzpcz5w.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpppzpcz5w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n       \
    \ else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n\
    \            c = c + 2;\n        }\n        else if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n        {\n            c = c + 2;\n       \
    \ }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgs12h74.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmphgs12h74.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmphgs12h74.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmphgs12h74.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmphgs12h74.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyd_j9rs8.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpyd_j9rs8.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpyd_j9rs8.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpyd_j9rs8.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd_j9rs8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpk6emhs.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpfpk6emhs.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpfpk6emhs.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpfpk6emhs.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpfpk6emhs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ai2nui7.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp9ai2nui7.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmp9ai2nui7.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x2145e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgj_1zqc6.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpgj_1zqc6.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpgj_1zqc6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn0n_p522.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpn0n_p522.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpn0n_p522.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xdde8a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            if(isUpper(c))\n            {\n                if(c == 'Z')\n\
    \                    result ~= 'B';\n                else if(c == 'Y')\n     \
    \               result ~= 'A';\n                else\n                    result\
    \ ~= char(c + 2);\n            }\n            else\n            {\n          \
    \      if(c == 'z')\n                    result ~= 'b';\n                else\
    \ if(c == 'y')\n                    result ~= 'a';\n                else\n   \
    \                 result ~= char(c + 2);\n            }\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfchgny2f.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmpfchgny2f.d(24):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpfchgny2f.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpfchgny2f.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfchgny2f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'b':\n                    c = 'd';\n          \
    \          break;\n                case 'f':\n                    c = 'h';\n \
    \                   break;\n                case 'j':\n                    c =\
    \ 'l';\n                    break;\n                case 'p':\n              \
    \      c = 'r';\n                    break;\n                case 'v':\n     \
    \               c = 'z';\n                    break;\n                case 'c':\n\
    \                    c = 'e';\n                    break;\n                case\
    \ 'g':\n                    c = 'i';\n                    break;\n           \
    \     case 'k':\n                    c = 'm';\n                    break;\n  \
    \              case 'q':\n                    c = 's';\n                    break;\n\
    \                case 'w':\n                    c = 'a';\n                   \
    \ break;\n                case 'd':\n                    c = 'f';\n          \
    \          break;\n                case 'h':\n                    c = 'j';\n \
    \                   break;\n                case 'l':\n                    c =\
    \ 'n';\n                    break;\n                case 'r':\n              \
    \      c = 't';\n                    break;\n                case 'x':\n     \
    \               c = 'b';\n                    break;\n                case 'y':\n\
    \                    c = 'd';\n                    break;\n                case\
    \ 'm':\n                    c = 'o';\n                    break;\n           \
    \     case 'n':\n                    c = 'p';\n                    break;\n  \
    \              case 's':\n                    c = 'u';\n                    break;\n\
    \                case 't':\n                    c = 'v';\n                   \
    \ break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_otpae5v.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmp_otpae5v.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_otpae5v.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp_otpae5v.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_otpae5v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(islower(c))\n            {\n                if(c == 'w')\n\
    \                    result ~= 'a';\n                else if(c == 'x')\n     \
    \               result ~= 'b';\n                else if(c == 'y')\n          \
    \          result ~= 'c';\n                else if(c == 'z')\n               \
    \     result ~= 'd';\n                else\n                    result ~= c +\
    \ 2;\n            }\n            else\n            {\n                if(c ==\
    \ 'W')\n                    result ~= 'A';\n                else if(c == 'X')\n\
    \                    result ~= 'B';\n                else if(c == 'Y')\n     \
    \               result ~= 'C';\n                else if(c == 'Z')\n          \
    \          result ~= 'D';\n                else\n                    result ~=\
    \ c + 2;\n            }\n        }\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxoffpv1.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpdxoffpv1.d(24):\
    \ Error: undefined identifier `islower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdxoffpv1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            result ~= (char)(c + 2);\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (char)(c + 2);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq81e2htz.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpq81e2htz.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\n/tmp/tmpq81e2htz.d(32): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\n/tmp/tmpq81e2htz.d(36): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpq81e2htz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv36lt_oh.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpv36lt_oh.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpv36lt_oh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp24630crw.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp24630crw.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmp24630crw.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x90498554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_wsh_h0o.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp_wsh_h0o.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp_wsh_h0o.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp_wsh_h0o.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_wsh_h0o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \       {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_02khsl.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp3_02khsl.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_02khsl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (isalpha(c))\n\
    \        {\n            if (isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                default:\n                    break;\n            }\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv0b3u5do.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpv0b3u5do.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpv0b3u5do.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpv0b3u5do.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0b3u5do.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlbehwhr.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpmlbehwhr.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpmlbehwhr.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpmlbehwhr.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpmlbehwhr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                result\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     result ~= toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa5tmoj4g.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpa5tmoj4g.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpa5tmoj4g.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpa5tmoj4g.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5tmoj4g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 32;\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            result ~= c + 32;\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptt_x0f97.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280ad]\\n??:? void tmptt_x0f97.__unittest_L37_C1()\
    \ [0x427c52]\\n??:? void tmptt_x0f97.__modtest() [0x427e30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca37]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43031d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b91d]\\n??:? runModuleUnitTests [0x42c80d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428483]\\n??:? _d_run_main [0x4283ee]\\n??:? main [0x427e43]\\\
    n??:? __libc_start_main [0x8ff3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8s2svz_.d(24): Error: undefined identifier `toupper`\\n/tmp/tmps8s2svz_.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps8s2svz_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfohfash.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmppfohfash.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmppfohfash.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmppfohfash.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfohfash.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n       \
    \ else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n\
    \            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n       \
    \ }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv2o_n0kh.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpv2o_n0kh.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpv2o_n0kh.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpv2o_n0kh.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpv2o_n0kh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if(c.isUpper)\n    \
    \    {\n            result ~= c.toLower;\n        }\n        else if(c.isLower)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyszjl4mt.d(22): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmpyszjl4mt.d(24): Error: no property `toLower` for type `immutable(char)`\\\
    n/tmp/tmpyszjl4mt.d(26): Error: no property `isLower` for type `immutable(char)`\\\
    n/tmp/tmpyszjl4mt.d(28): Error: no property `toUpper` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyszjl4mt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c++;\n      \
    \              break;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo6mx016h.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpo6mx016h.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpo6mx016h.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpo6mx016h.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6mx016h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' +\
    \ 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo8l13s9r.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmpo8l13s9r.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmpo8l13s9r.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0x71758554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n        }\n \
    \       else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5vzij0fh.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmp5vzij0fh.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5vzij0fh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            encoded ~= toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= tolower(c);\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfuvqw3m.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpjfuvqw3m.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpjfuvqw3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsdl0av6p.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpsdl0av6p.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpsdl0av6p.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xfc7a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hbl60b2.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmp1hbl60b2.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hbl60b2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    foreach(char c; result)\n    {\n        if(c == 'A')\n        {\n       \
    \     result = result.replace('A', 'C');\n        }\n        else if(c == 'E')\n\
    \        {\n            result = result.replace('E', 'G');\n        }\n      \
    \  else if(c == 'I')\n        {\n            result = result.replace('I', 'K');\n\
    \        }\n        else if(c == 'O')\n        {\n            result = result.replace('O',\
    \ 'Q');\n        }\n        else if(c == 'U')\n        {\n            result =\
    \ result.replace('U', 'W');\n        }\n        else if(c == 'a')\n        {\n\
    \            result = result.replace('a', 'c');\n        }\n        else if(c\
    \ == 'e')\n        {\n            result = result.replace('e', 'g');\n       \
    \ }\n        else if(c == 'i')\n        {\n            result = result.replace('i',\
    \ 'k');\n        }\n        else if(c == 'o')\n        {\n            result =\
    \ result.replace('o', 'q');\n        }\n        else if(c == 'u')\n        {\n\
    \            result = result.replace('u', 'w');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqzd5xht.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmppqzd5xht.d(28): Error: no property `toLower` for type `char`\\n/tmp/tmppqzd5xht.d(39):\
    \ Error: no property `replace` for type `string`\\n/tmp/tmppqzd5xht.d(43): Error:\
    \ no property `replace` for type `string`\\n/tmp/tmppqzd5xht.d(47): Error: no\
    \ property `replace` for type `string`\\n/tmp/tmppqzd5xht.d(51): Error: no property\
    \ `replace` for type `string`\\n/tmp/tmppqzd5xht.d(55): Error: no property `replace`\
    \ for type `string`\\n/tmp/tmppqzd5xht.d(59): Error: no property `replace` for\
    \ type `string`\\n/tmp/tmppqzd5xht.d(63): Error: no property `replace` for type\
    \ `string`\\n/tmp/tmppqzd5xht.d(67): Error: no property `replace` for type `string`\\\
    n/tmp/tmppqzd5xht.d(71): Error: no property `replace` for type `string`\\n/tmp/tmppqzd5xht.d(75):\
    \ Error: no property `replace` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppqzd5xht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toUpper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd9ggnrnz.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmpd9ggnrnz.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpd9ggnrnz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                encoded\
    \ ~= tolower(c);\n            }\n            else\n            {\n           \
    \     encoded ~= toupper(c);\n            }\n        }\n        else\n       \
    \ {\n            encoded ~= c;\n        }\n    }\n    return encoded;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5vv6c4zy.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp5vv6c4zy.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp5vv6c4zy.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp5vv6c4zy.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5vv6c4zy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8c0pddg.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpn8c0pddg.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpn8c0pddg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= cast(char)(c - 'a' + 'A');\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= cast(char)(c - 'A' + 'a');\n        }\n        else\n        {\n        \
    \    result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4tb16blk.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp4tb16blk.__unittest_L37_C1()\
    \ [0x427bd6]\\n??:? void tmp4tb16blk.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xc488e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toupper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpizxhdnp4.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpizxhdnp4.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpizxhdnp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            result ~= toupper(c);\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfq6yz93k.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpfq6yz93k.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpfq6yz93k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    foreach(char c; result)\n    {\n        if(c == 'A')\n        {\n       \
    \     result = result.replace(\"A\", \"C\");\n        }\n        else if(c ==\
    \ 'E')\n        {\n            result = result.replace(\"E\", \"G\");\n      \
    \  }\n        else if(c == 'I')\n        {\n            result = result.replace(\"\
    I\", \"K\");\n        }\n        else if(c == 'O')\n        {\n            result\
    \ = result.replace(\"O\", \"Q\");\n        }\n        else if(c == 'U')\n    \
    \    {\n            result = result.replace(\"U\", \"W\");\n        }\n      \
    \  else if(c == 'a')\n        {\n            result = result.replace(\"a\", \"\
    c\");\n        }\n        else if(c == 'e')\n        {\n            result = result.replace(\"\
    e\", \"g\");\n        }\n        else if(c == 'i')\n        {\n            result\
    \ = result.replace(\"i\", \"k\");\n        }\n        else if(c == 'o')\n    \
    \    {\n            result = result.replace(\"o\", \"q\");\n        }\n      \
    \  else if(c == 'u')\n        {\n            result = result.replace(\"u\", \"\
    w\");\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporq519tw.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmporq519tw.d(28): Error: no property `toLower` for type `char`\\n/tmp/tmporq519tw.d(39):\
    \ Error: no property `replace` for type `string`\\n/tmp/tmporq519tw.d(43): Error:\
    \ no property `replace` for type `string`\\n/tmp/tmporq519tw.d(47): Error: no\
    \ property `replace` for type `string`\\n/tmp/tmporq519tw.d(51): Error: no property\
    \ `replace` for type `string`\\n/tmp/tmporq519tw.d(55): Error: no property `replace`\
    \ for type `string`\\n/tmp/tmporq519tw.d(59): Error: no property `replace` for\
    \ type `string`\\n/tmp/tmporq519tw.d(63): Error: no property `replace` for type\
    \ `string`\\n/tmp/tmporq519tw.d(67): Error: no property `replace` for type `string`\\\
    n/tmp/tmporq519tw.d(71): Error: no property `replace` for type `string`\\n/tmp/tmporq519tw.d(75):\
    \ Error: no property `replace` for type `string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmporq519tw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzxvpylqd.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpzxvpylqd.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpzxvpylqd.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xc9a99554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toupper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n\
    \        else if(c == 'a')\n        {\n            result ~= 'c';\n        }\n\
    \        else if(c == 'e')\n        {\n            result ~= 'g';\n        }\n\
    \        else if(c == 'i')\n        {\n            result ~= 'k';\n        }\n\
    \        else if(c == 'o')\n        {\n            result ~= 'q';\n        }\n\
    \        else if(c == 'u')\n        {\n            result ~= 'w';\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wtzlhz5.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp6wtzlhz5.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp6wtzlhz5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4pujczq.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpt4pujczq.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpt4pujczq.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpt4pujczq.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4pujczq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c += 2;\n   \
    \                 break;\n            }\n        }\n        result ~= c;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1b9o6p3.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpc1b9o6p3.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpc1b9o6p3.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpc1b9o6p3.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1b9o6p3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' + 'a';\n     \
    \   }\n        else\n        {\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu3cdnmbp.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpu3cdnmbp.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpu3cdnmbp.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xb5cc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else if(c == 'a')\n        {\n            result ~= 'c';\n\
    \        }\n        else if(c == 'e')\n        {\n            result ~= 'g';\n\
    \        }\n        else if(c == 'i')\n        {\n            result ~= 'k';\n\
    \        }\n        else if(c == 'o')\n        {\n            result ~= 'q';\n\
    \        }\n        else if(c == 'u')\n        {\n            result ~= 'y';\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxhivg7j.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpyxhivg7j.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpyxhivg7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else\n        {\n            result ~= c;\n            continue;\n\
    \        }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = 'A' + ((c - 'A' + 2) % 5);\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21dbcbzd.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp21dbcbzd.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp21dbcbzd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwh5am567.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpwh5am567.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpwh5am567.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybbgene9.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpybbgene9.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpybbgene9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (c - 'A' + 2) % 26 + 'a';\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpal_e86fs.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428055]\\n??:? void tmpal_e86fs.__unittest_L37_C1()\
    \ [0x427bf6]\\n??:? void tmpal_e86fs.__modtest() [0x427dd4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5d1]\\n??:? runModuleUnitTests [0x42c4c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42842b]\\n??:? _d_run_main [0x428396]\\n??:? main [0x427de7]\\\
    n??:? __libc_start_main [0x964dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= toupper(c);\n        }\n        else if(c >=\
    \ 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqwpzh0i.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpiqwpzh0i.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpiqwpzh0i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' +\
    \ 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpic_agm6z.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmpic_agm6z.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmpic_agm6z.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0x6b09a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toUpper(c);\n        }\n       \
    \ else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98l3j838.d(24): Error: undefined identifier `toUpper`\\n/tmp/tmp98l3j838.d(28):\
    \ Error: undefined identifier `toLower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp98l3j838.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c.toUpper;\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z')\n        {\n            result ~= c.toLower;\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91vd2mzp.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmp91vd2mzp.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91vd2mzp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            result ~= (char)(c + 2);\n   \
    \     }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            result ~= (char)(c + 2);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") ==\
    \ \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmb32okiz.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpmb32okiz.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\n/tmp/tmpmb32okiz.d(32): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\n/tmp/tmpmb32okiz.d(36): Error: C style\
    \ cast illegal, use `cast(char)(c + 2)`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmb32okiz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n      \
    \  char c = message[i];\n        if (c >= 'a' && c <= 'z')\n        {\n      \
    \      c = c - 'a' + 'A';\n        }\n        else if (c >= 'A' && c <= 'Z')\n\
    \        {\n            c = c - 'A' + 'a';\n        }\n        result += c;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n\
    \    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xsy8lx6.d(25): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp7xsy8lx6.d(29): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp7xsy8lx6.d(31):\
    \ Error: slice `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7xsy8lx6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        switch(c)\n   \
    \     {\n            case 'a':\n                result ~= 'c';\n             \
    \   break;\n            case 'e':\n                result ~= 'g';\n          \
    \      break;\n            case 'i':\n                result ~= 'k';\n       \
    \         break;\n            case 'o':\n                result ~= 'q';\n    \
    \            break;\n            case 'u':\n                result ~= 'y';\n \
    \               break;\n            case 'A':\n                result ~= 'C';\n\
    \                break;\n            case 'E':\n                result ~= 'G';\n\
    \                break;\n            case 'I':\n                result ~= 'K';\n\
    \                break;\n            case 'O':\n                result ~= 'Q';\n\
    \                break;\n            case 'U':\n                result ~= 'Y';\n\
    \                break;\n            default:\n                result ~= toUpper(c);\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr2ovdmn8.d(55): Error: undefined identifier `toUpper`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2ovdmn8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'B';\n                else if(c == 'Y')\n\
    \                    result ~= 'A';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2kh8gn39.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp2kh8gn39.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp2kh8gn39.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmp2kh8gn39.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2kh8gn39.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpesv9wtks.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpesv9wtks.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpesv9wtks.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xf56a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c += 2;\n   \
    \                 break;\n            }\n        }\n        result ~= c;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5vqm7sq.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpz5vqm7sq.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpz5vqm7sq.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpz5vqm7sq.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5vqm7sq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            c = c - 'a' + 'A';\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n       \
    \ else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n\
    \            c = c + 2;\n        }\n        else if(c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n       \
    \ }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0hkavwm1.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmp0hkavwm1.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmp0hkavwm1.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmp0hkavwm1.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp0hkavwm1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n            {\n                c = toUpper(c);\n\
    \            }\n            else\n            {\n                c = toLower(c);\n\
    \            }\n            switch(c)\n            {\n                case 'A':\n\
    \                    c = 'C';\n                    break;\n                case\
    \ 'E':\n                    c = 'G';\n                    break;\n           \
    \     case 'I':\n                    c = 'K';\n                    break;\n  \
    \              case 'O':\n                    c = 'Q';\n                    break;\n\
    \                case 'U':\n                    c = 'S';\n                   \
    \ break;\n                case 'Y':\n                    c = 'A';\n          \
    \          break;\n                case 'C':\n                    c = 'E';\n \
    \                   break;\n                case 'G':\n                    c =\
    \ 'I';\n                    break;\n                case 'K':\n              \
    \      c = 'O';\n                    break;\n                case 'Q':\n     \
    \               c = 'U';\n                    break;\n                case 'S':\n\
    \                    c = 'Y';\n                    break;\n            }\n   \
    \     }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5fu26ipa.d(22): Error: undefined identifier `isAlpha`\\n/tmp/tmp5fu26ipa.d(24):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmp5fu26ipa.d(26): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmp5fu26ipa.d(30): Error: undefined identifier `toLower`\\\
    n/tmp/tmp5fu26ipa.d(32): Error: `switch` statement without a `default`; use `final\
    \ switch` or add `default: assert(0);` or add `default: break;`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fu26ipa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c++;\n      \
    \              break;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp348fdm5a.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp348fdm5a.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp348fdm5a.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp348fdm5a.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp348fdm5a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzuka4cfb.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpzuka4cfb.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzuka4cfb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp79xvscf_.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmp79xvscf_.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp79xvscf_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdf6rkzcd.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpdf6rkzcd.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdf6rkzcd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ output = \"\";\n    foreach(char c; message)\n    {\n        if(c == 'a')\n\
    \            output ~= 'c';\n        else if(c == 'e')\n            output ~=\
    \ 'g';\n        else if(c == 'i')\n            output ~= 'k';\n        else if(c\
    \ == 'o')\n            output ~= 'q';\n        else if(c == 'u')\n           \
    \ output ~= 'y';\n        else if(c == 'A')\n            output ~= 'C';\n    \
    \    else if(c == 'E')\n            output ~= 'G';\n        else if(c == 'I')\n\
    \            output ~= 'K';\n        else if(c == 'O')\n            output ~=\
    \ 'Q';\n        else if(c == 'U')\n            output ~= 'Y';\n        else if(c\
    \ >= 'a' && c <= 'z')\n            output ~= (char)(c - 32);\n        else if(c\
    \ >= 'A' && c <= 'Z')\n            output ~= (char)(c + 32);\n        else\n \
    \           output ~= c;\n    }\n    return output;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps27ukfsb.d(43): Error: C style cast illegal, use `cast(char)(c\
    \ - 32)`\\n/tmp/tmps27ukfsb.d(45): Error: C style cast illegal, use `cast(char)(c\
    \ + 32)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps27ukfsb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6jgmq3kn.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp6jgmq3kn.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp6jgmq3kn.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp6jgmq3kn.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jgmq3kn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if (c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n     \
    \   }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c +\
    \ 2;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqifgmzad.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpqifgmzad.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpqifgmzad.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpqifgmzad.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpqifgmzad.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                case 'b':\n                    c = 'd';\n \
    \                   break;\n                case 'f':\n                    c =\
    \ 'h';\n                    break;\n                case 'j':\n              \
    \      c = 'l';\n                    break;\n                case 'p':\n     \
    \               c = 'r';\n                    break;\n                case 'v':\n\
    \                    c = 'z';\n                    break;\n                case\
    \ 'z':\n                    c = 'b';\n                    break;\n           \
    \     case 'c':\n                    c = 'e';\n                    break;\n  \
    \              case 'g':\n                    c = 'i';\n                    break;\n\
    \                case 'k':\n                    c = 'm';\n                   \
    \ break;\n                case 'q':\n                    c = 's';\n          \
    \          break;\n                case 'w':\n                    c = 'a';\n \
    \                   break;\n                case 'd':\n                    c =\
    \ 'f';\n                    break;\n                case 'h':\n              \
    \      c = 'j';\n                    break;\n                case 'l':\n     \
    \               c = 'n';\n                    break;\n                case 'r':\n\
    \                    c = 't';\n                    break;\n                case\
    \ 'x':\n                    c = 'c';\n                    break;\n           \
    \     case 'm':\n                    c = 'o';\n                    break;\n  \
    \              case 'n':\n                    c = 'p';\n                    break;\n\
    \                case 's':\n                    c = 'u';\n                   \
    \ break;\n               \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldz23r5v.d(110): Error: found `unittest` instead of statement\\\
    n/tmp/tmpldz23r5v.d(120): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpldz23r5v.d(120): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpldz23r5v.d(120): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldz23r5v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpetmpezlr.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmpetmpezlr.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpetmpezlr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= toupper(c);\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= tolower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2acpueie.d(24): Error: undefined identifier `toupper`\\n/tmp/tmp2acpueie.d(28):\
    \ Error: undefined identifier `tolower`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp2acpueie.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqyhw50ks.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpqyhw50ks.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpqyhw50ks.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0xca245554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 2) % 26 + 'A';\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' +\
    \ 2) % 26 + 'a';\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphon3h_cd.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmphon3h_cd.__unittest_L37_C1()\
    \ [0x427bf2]\\n??:? void tmphon3h_cd.__modtest() [0x427dd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427de3]\\\
    n??:? __libc_start_main [0xbb6b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                if(c ==\
    \ 'Z')\n                    result ~= 'b';\n                else if(c == 'Y')\n\
    \                    result ~= 'a';\n                else\n                  \
    \  result ~= char(c + 2);\n            }\n            else\n            {\n  \
    \              if(c == 'z')\n                    result ~= 'b';\n            \
    \    else if(c == 'y')\n                    result ~= 'a';\n                else\n\
    \                    result ~= char(c + 2);\n            }\n        }\n      \
    \  else\n            result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0kevlj3.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpl0kevlj3.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpl0kevlj3.d(31): Error: cannot\
    \ implicitly convert expression `cast(int)c + 2` of type `int` to `char`\\n/tmp/tmpl0kevlj3.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0kevlj3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c - 'a' + 'A');\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 'a');\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp26n2dt5y.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmp26n2dt5y.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmp26n2dt5y.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0x50171554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= c - 'a' + 'A';\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' + 'a';\n     \
    \   }\n        else\n        {\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsk58szsi.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmpsk58szsi.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmpsk58szsi.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xbce2b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c++;\n      \
    \              break;\n            }\n        }\n        result ~= c;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"\
    TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n  \
    \  assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\"\
    ) == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpafezla9d.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpafezla9d.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpafezla9d.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpafezla9d.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafezla9d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if(c >= 'a' && c <=\
    \ 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n        }\n\
    \        else\n        {\n            result ~= c;\n            continue;\n  \
    \      }\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'Y')\n   \
    \     {\n            c = 'A';\n        }\n        else if(c == 'Z')\n        {\n\
    \            c = 'B';\n        }\n        else\n        {\n            c = c +\
    \ 1;\n        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpppgvugz7.d(24): Error: cannot modify `immutable` expression `c`\\\
    n/tmp/tmpppgvugz7.d(28): Error: cannot modify `immutable` expression `c`\\n/tmp/tmpppgvugz7.d(37):\
    \ Error: cannot modify `immutable` expression `c`\\n/tmp/tmpppgvugz7.d(41): Error:\
    \ cannot modify `immutable` expression `c`\\n/tmp/tmpppgvugz7.d(45): Error: cannot\
    \ modify `immutable` expression `c`\\n/tmp/tmpppgvugz7.d(49): Error: cannot modify\
    \ `immutable` expression `c`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpppgvugz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encodedMessage = \"\";\n    foreach(char c; message)\n    {\n        if(c >=\
    \ 'a' && c <= 'z')\n        {\n            c = toupper(c);\n        }\n      \
    \  else if(c >= 'A' && c <= 'Z')\n        {\n            c = tolower(c);\n   \
    \     }\n        else\n        {\n            continue;\n        }\n        switch(c)\n\
    \        {\n            case 'A':\n                c = 'C';\n                break;\n\
    \            case 'E':\n                c = 'G';\n                break;\n   \
    \         case 'I':\n                c = 'K';\n                break;\n      \
    \      case 'O':\n                c = 'Q';\n                break;\n         \
    \   case 'U':\n                c = 'Y';\n                break;\n            case\
    \ 'a':\n                c = 'c';\n                break;\n            case 'e':\n\
    \                c = 'g';\n                break;\n            case 'i':\n   \
    \             c = 'k';\n                break;\n            case 'o':\n      \
    \          c = 'q';\n                break;\n            case 'u':\n         \
    \       c = 'y';\n                break;\n        }\n        encodedMessage ~=\
    \ c;\n    }\n    return encodedMessage;\n}\nunittest\n{\n    alias candidate =\
    \ encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5c5v4d0.d(24): Error: undefined identifier `toupper`\\n/tmp/tmpw5c5v4d0.d(28):\
    \ Error: undefined identifier `tolower`\\n/tmp/tmpw5c5v4d0.d(34): Error: `switch`\
    \ statement without a `default`; use `final switch` or add `default: assert(0);`\
    \ or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw5c5v4d0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        else if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            c = c + 2;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            c = c + 2;\n\
    \        }\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n\
    \    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\"\
    ) == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    );\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT\
    \ Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogfscr9l.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpogfscr9l.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpogfscr9l.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpogfscr9l.d(36): Error: cannot implicitly convert expression\
    \ `cast(int)c + 2` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpogfscr9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_mfnur2u.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmp_mfnur2u.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmp_mfnur2u.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x4489b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr5yaq3ac.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpr5yaq3ac.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpr5yaq3ac.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x4486c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n\
    \        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            if(c == 'a')\n            {\n                c = 'c';\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ c = 'g';\n            }\n            else if(c == 'i')\n            {\n    \
    \            c = 'k';\n            }\n            else if(c == 'o')\n        \
    \    {\n                c = 'q';\n            }\n            else if(c == 'u')\n\
    \            {\n                c = 'y';\n            }\n        }\n        result\
    \ ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaas9092j.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmpaas9092j.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmpaas9092j.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmpaas9092j.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaas9092j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(c; message)\n    {\n        if (c >= 'a' && c <=\
    \ 'z')\n        {\n            result ~= char(c - 'a' + 'A');\n        }\n   \
    \     else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= char(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpla2a8gkt.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpla2a8gkt.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla2a8gkt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            c = c - 'a' + 'A';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            c = c - 'A' + 'a';\n      \
    \  }\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \       {\n            c = c + 2;\n            if(c > 'z')\n            {\n  \
    \              c = c - 'z' + 'a' - 1;\n            }\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n  \
    \          c = c + 2;\n            if(c > 'Z')\n            {\n              \
    \  c = c - 'Z' + 'A' - 1;\n            }\n        }\n        result ~= c;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n  \
    \  assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgh1vs425.d(24): Error: cannot implicitly convert expression `cast(int)c\
    \ - 97 + 65` of type `int` to `char`\\n/tmp/tmpgh1vs425.d(28): Error: cannot implicitly\
    \ convert expression `cast(int)c - 65 + 97` of type `int` to `char`\\n/tmp/tmpgh1vs425.d(32):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpgh1vs425.d(35): Error: cannot implicitly convert expression\
    \ `cast(int)c - 122 + 97 - 1` of type `int` to `char`\\n/tmp/tmpgh1vs425.d(40):\
    \ Error: cannot implicitly convert expression `cast(int)c + 2` of type `int` to\
    \ `char`\\n/tmp/tmpgh1vs425.d(43): Error: cannot implicitly convert expression\
    \ `cast(int)c - 90 + 65 - 1` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgh1vs425.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (char)(c - 'a' + 'A');\n       \
    \ }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(c\
    \ - 'A' + 'a');\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprxn8kixm.d(24): Error: C style cast illegal, use `cast(char)(c\
    \ - \\'a\\' + \\'A\\')`\\n/tmp/tmprxn8kixm.d(28): Error: C style cast illegal,\
    \ use `cast(char)(c - \\'A\\' + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmprxn8kixm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            result ~= (c + 2);\n        }\n   \
    \     else if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n    \
    \    {\n            result ~= (c + 2);\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\"\
    );\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
    YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS\
    \ C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9j5n9gg.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42811d]\\n??:? void tmpq9j5n9gg.__unittest_L45_C1()\
    \ [0x427cc2]\\n??:? void tmpq9j5n9gg.__modtest() [0x427ea0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42caa7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b9b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43038d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43083c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b98d]\\n??:? runModuleUnitTests [0x42c87d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42856c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284f3]\\n??:? _d_run_main [0x42845e]\\n??:? main [0x427eb3]\\\
    n??:? __libc_start_main [0x289ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ encoded = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            encoded ~= c.toUpper;\n        }\n       \
    \ else if(c >= 'A' && c <= 'Z')\n        {\n            encoded ~= c.toLower;\n\
    \        }\n        else\n        {\n            encoded ~= c;\n        }\n  \
    \  }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n \
    \   assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpigckw4gl.d(24): Error: no property `toUpper` for type `char`\\\
    n/tmp/tmpigckw4gl.d(28): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigckw4gl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result;\n    foreach(char c; message)\n    {\n        if(isalpha(c))\n     \
    \   {\n            if(isupper(c))\n            {\n                c = tolower(c);\n\
    \            }\n            else\n            {\n                c = toupper(c);\n\
    \            }\n            switch(c)\n            {\n                case 'a':\n\
    \                    c = 'c';\n                    break;\n                case\
    \ 'e':\n                    c = 'g';\n                    break;\n           \
    \     case 'i':\n                    c = 'k';\n                    break;\n  \
    \              case 'o':\n                    c = 'q';\n                    break;\n\
    \                case 'u':\n                    c = 'y';\n                   \
    \ break;\n                case 'y':\n                    c = 'a';\n          \
    \          break;\n                default:\n                    c += 2;\n   \
    \                 break;\n            }\n        }\n        result ~= c;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n   \
    \ assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\")\
    \ == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ee3kbud.d(22): Error: undefined identifier `isalpha`\\n/tmp/tmp6ee3kbud.d(24):\
    \ Error: undefined identifier `isupper`\\n/tmp/tmp6ee3kbud.d(26): Error: undefined\
    \ identifier `tolower`\\n/tmp/tmp6ee3kbud.d(30): Error: undefined identifier `toupper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ee3kbud.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= c - 'a' + 'A';\n        }\n    \
    \    else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= c - 'A' +\
    \ 'a';\n        }\n        else\n        {\n            result ~= c;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp47tu0rl_.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmp47tu0rl_.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmp47tu0rl_.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xdaabd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= cast(char)(c - 'a' + 'A');\n   \
    \     }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= cast(char)(c - 'A' + 'a');\n        }\n        else\n        {\n        \
    \    result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"\
    Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0nh8rboe.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp0nh8rboe.__unittest_L37_C1()\
    \ [0x427bd6]\\n??:? void tmp0nh8rboe.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x58eac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Write a function that takes a message, and\
    \ encodes in such a \n    way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n\
    \    'tHKS KS C MGSSCGG'\n    \n*/\nstring encode(string message) \n{\n    string\
    \ result = \"\";\n    foreach(char c; message)\n    {\n        if(c >= 'a' &&\
    \ c <= 'z')\n        {\n            result ~= (c - 'a' + 'A');\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A'\
    \ + 'a');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\
    \n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt\
    \ KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppn_l38zm.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4280bd]\\n??:? void tmppn_l38zm.__unittest_L37_C1()\
    \ [0x427c62]\\n??:? void tmppn_l38zm.__modtest() [0x427e40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ca47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b92d]\\n??:? runModuleUnitTests [0x42c81d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42850c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428493]\\n??:? _d_run_main [0x4283fe]\\n??:? main [0x427e53]\\\
    n??:? __libc_start_main [0xbde75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
