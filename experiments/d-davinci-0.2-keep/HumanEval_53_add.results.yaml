name: HumanEval_53_add
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxslo7rfb.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxslo7rfb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(5, 3)\n    15\n    >>> multiply(7, 5)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(8, 4)\n    2\n    >>> divide(9, 3)\n    3\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers x and y\n\
    \    >>> remainder(8, 3)\n    2\n    >>> remainder(9, 5)\n    4\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute value of a number\
    \ x\n    >>> abs(-3)\n    3\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nFind the maximum of two numbers x and y\n\
    \    >>> max(1, 2)\n    2\n    >>> max(5, 3)\n    5\n*/\nlong max(long x, long\
    \ y) \n{\n    return x > y ? x : y;\n}\n/*\nFind the minimum of two numbers x\
    \ and y\n    >>> min(1, 2)\n    1\n    >>> min(5, 3)\n    3\n*/\nlong min(long\
    \ x, long y) \n{\n    return x < y ? x : y;\n}\n/*\nFind the square root of a\
    \ number x\n    >>> sqrt(9)\n    3\n    >>> sqrt(16)\n    4\n*/\nlong sqrt(long\
    \ x) \n{\n    return cast(long) sqrt(cast(real) x);\n}\n/*\nFind the exponent\
    \ of a number x\n    >>> exp(1\nunittest\n{\n    alias candidate = add;\n\n  \
    \  assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n  \
    \  assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n \
    \   assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppqctgoyj.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqctgoyj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpex0b2s29.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex0b2s29.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo62fenp2.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo62fenp2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nRaise x to the power of y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the square root of x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nFind the absolute value of x\n    >>> abs(-2)\n\
    \    2\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n\
    }\n/*\nFind the floor of x\n    >>> floor(2.5)\n    2\n    >>> floor(5.7)\n  \
    \  5\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n}\n/*\nFind the\
    \ ceiling of x\n    >>> ceiling(2.5)\n    3\n    >>> ceiling(5.\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvswmrqn.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvswmrqn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the square root of a number x\n\
    \    >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nFind the\
    \ power of a number x\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n\
    \    \n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind\
    \ the factorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x) \n{\n    long result = 1;\n    foreach\
    \ (i; 0 .. x) \n    {\n        result *= i;\n    }\n    return result;\n}\n/*\n\
    Find the logarithm of a number x\n    >>> logarithm(2)\n    0.6931471805599453\n\
    \    >>> logarithm(5)\n    1.6094379124341003\n    \n*/\ndouble logarithm(long\
    \ x) \n{\n    return log(x);\n}\n/*\nFind the sine of a number x\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxndw85ho.d(104): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxndw85ho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    35\n*/\nlong mul(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n    0\n\
    \    >>> div(5, 7)\n    0\n*/\nlong div(long x, long y) \n{\n    return x / y;\n\
    }\n/*\nModulo two numbers x and y\n    >>> mod(2, 3)\n    2\n    >>> mod(5, 7)\n\
    \    5\n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nPower two\
    \ numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    78125\n*/\n\
    long pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nFactorial of a number\
    \ x\n    >>> fact(2)\n    2\n    >>> fact(5)\n    120\n*/\nlong fact(long x) \n\
    {\n    return factorial(x);\n}\n/*\nSquare root of a number x\n    >>> sqrt(2)\n\
    \    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n*/\ndouble sqrt(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nSquare of a number x\n    >>> sqr(2)\n \
    \   4\n    >>> sqr(5)\n    25\n*/\nlong sqr(long x) \n{\n    return x * x;\n}\n\
    /*\nCube of a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n*/\n\
    long cube\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn3jyf34n.d(111): Error: semicolon expected, not `unittest`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3jyf34n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the square root of a number x\n\
    \    >>> square_root(9)\n    3\n    >>> square_root(25)\n    5\n    \n*/\nlong\
    \ square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nFind the cube root of a\
    \ number x\n    >>> cube_root(27)\n    3\n    >>> cube_root(125)\n    5\n    \n\
    */\nlong cube_root(long x) \n{\n    return cbrt(x);\n}\n/*\nFind the power of\
    \ a number x\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \n\
    */\nlong power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the log\
    \ of a number x\n    >>> log(100)\n    2\n    >>> log(1000)\n    3\n    \n*/\n\
    long log(long x) \n{\n    return log10(x);\n}\n/*\nFind the natural log of a number\
    \ x\n    >>> natural_log(100)\n    4.605170185988092\n    >>> natural_log(1000)\n\
    \    6.907755278982137\n    \n*/\nlong natural_log(long x) \n{\n    return log(x);\n\
    }\n/*\nFind the\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdu8c_5z1.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu8c_5z1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nCalculate the square root of a number x\n\
    \    >>> square_root(4)\n    2\n    >>> square_root(9)\n    3\n*/\nlong square_root(long\
    \ x) \n{\n    return cast(long) sqrt(x);\n}\n/*\nCalculate the power of a number\
    \ x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n\
    */\nlong power(long x, long y) \n{\n    return cast(long) pow(x, y);\n}\n/*\n\
    Calculate the factorial of a number x\n    >>> factorial(4)\n    24\n    >>> factorial(9)\n\
    \    362880\n*/\nlong factorial(long x) \n{\n    long result = 1;\n    foreach\
    \ (i; 1 .. x + 1) \n    {\n        result *= i;\n    }\n    return result;\n}\n\
    /*\nCalculate the nth fibonacci number\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(9)\n\
    \    34\n*/\nlong fibonacci(long x) \n{\n    long a = 0;\n    long b = 1;\n  \
    \  foreach (i; 1 .. x) \n    {\n        long temp = a;\n        a = b;\n     \
    \  \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdmqa2mn6.d(102): Error: found `unittest` instead of statement\\\
    n/tmp/tmpdmqa2mn6.d(112): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmqa2mn6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(5, 3)\n    15\n    >>> multiply(7, 5)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(8, 4)\n    2\n    >>> divide(9, 3)\n    3\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nDivide two numbers x and y and return the\
    \ remainder\n    >>> modulo(8, 3)\n    2\n    >>> modulo(9, 5)\n    4\n*/\nlong\
    \ modulo(long x, long y) \n{\n    return x % y;\n}\n/*\nRaise x to the power of\
    \ y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nReturn the square root of x\n\
    \    >>> squareRoot(9)\n    3\n    >>> squareRoot(16)\n    4\n*/\nlong squareRoot(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the absolute value of x\n    >>>\
    \ absolute(-3)\n    3\n    >>> absolute(5)\n    5\n*/\nlong absolute(long x) \n\
    {\n    return abs(x);\n}\n/*\nReturn the factorial of x\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(4)\n    24\n*/\nlong factorial(long x) \n{\n    long\
    \ result = 1;\n    for (long i = 1; i <= x; i++) \n    {\n        result *= i;\n\
    \    }\n    return result;\n}\n/*\nReturn the logarith\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuk4h_w94.d(108): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk4h_w94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3x_6d0t8.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3x_6d0t8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nPower two numbers x and y\n    >>> power(2, 3)\n  \
    \  8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long y) \n{\n   \
    \ return pow(x, y);\n}\n/*\nSquare root of a number x\n    >>> squareRoot(2)\n\
    \    1.4142135623730951\n    >>> squareRoot(5)\n    2.23606797749979\n*/\ndouble\
    \ squareRoot(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root of a number x\n\
    \    >>> cubeRoot(2)\n    1.2599210498948732\n    >>> cubeRoot(5)\n    1.7099759466766968\n\
    */\ndouble cubeRoot(long x) \n{\n    return cbrt(x);\n}\n/*\nFactorial of a number\
    \ x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n*/\nlong factorial(long\
    \ x) \n{\n    long result = 1;\n    for (long i = 1; i <=\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpud8_2tej.d(103): Error: expression expected, not `unittest`\\\
    n/tmp/tmpud8_2tej.d(104): Error: found `{` when expecting `;` following `for`\
    \ condition\\n/tmp/tmpud8_2tej.d(105): Error: expression expected, not `alias`\\\
    n/tmp/tmpud8_2tej.d(105): Error: found `candidate` when expecting `)`\\n/tmp/tmpud8_2tej.d(105):\
    \ Error: found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpud8_2tej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower of two numbers x and y\n   \
    \ >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nCube root of a number x\n    >>> cbrt(2)\n    1\n\
    \    >>> cbrt(5)\n    1\n    \n*/\nlong cbrt(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x) \n{\n    return factorial(x);\n}\n\
    /*\nAbsolute value of a number x\n    >>> abs(2)\n   \nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppfql4o42.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfql4o42.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nDivide two numbers x and y and return the\
    \ remainder\n    >>> mod(2, 3)\n    2\n    >>> mod(5, 7)\n    5\n*/\nlong mod(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nRaise x to the power of y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long\
    \ y) \n{\n    return pow(x, y);\n}\n/*\nReturn the square root of x\n    >>> sqrt(2)\n\
    \    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n*/\ndouble sqrt(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of x\n    >>> sqrt(2)\n\
    \    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n*/\ndouble sqrt(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nReturn the square root of x\n    >>> sqrt(2)\n\
    \    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n*/\ndouble sqrt(long\
    \ x) \n{\n   \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpquxyc20d.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquxyc20d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nFactorial of a number x\n    >>> factorial(2)\n\
    \    2\n    >>> factorial(5)\n    120\n    \n*/\nlong factorial(long x) \n{\n\
    \    return factorial(x);\n}\n/*\nAbsolute value of a number x\n    >>> abs(-2)\n\
    \    2\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n\
    }\n/*\nRound a number x\n    >>> round(2.3)\n    2\n    >>> round(5.7\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7icapgiw.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7icapgiw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp664o7gj_.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp664o7gj_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nExponentiate two numbers x and y\n    >>> exponentiate(2,\
    \ 3)\n    8\n    >>> exponentiate(5, 7)\n    78125\n*/\nlong exponentiate(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    */\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root of a\
    \ number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n*/\nlong factorial(long x) \n{\n    return factorial(x\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2l1wxfrs.d(102): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmp2l1wxfrs.d(112): Error: found `void` when expecting `,`\\n/tmp/tmp2l1wxfrs.d(112):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp2l1wxfrs.d(112): Error: expression\
    \ expected, not `}`\\n/tmp/tmp2l1wxfrs.d(112): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp2l1wxfrs.d(112): Error: found `End of File` when expecting\
    \ `)`\\n/tmp/tmp2l1wxfrs.d(112): Error: found `End of File` when expecting `;`\
    \ following `return` statement\\n/tmp/tmp2l1wxfrs.d(112): Error: found `End of\
    \ File` when expecting `}` following compound statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp2l1wxfrs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nFactorial\
    \ of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n\
    \    \n*/\nlong factorial(long x) \n{\n    return factorial(x);\n}\n/*\nLogarithm\
    \ of a number x\n    >>> logarithm(2)\n    0.6931471805599453\n    >>> logarithm(5)\n\
    \    1.6094379124341003\n    \n*/\ndouble logarithm(long x) \n{\n    return log(x);\n\
    }\n/*\nSine of a number x\n    >>> sine(2)\n    0.9092974268256817\n    >>> sine(5)\n\
    \    -0.95892427466313\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3mdbav67.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mdbav67.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nDivide two numbers x and y and return the\
    \ remainder\n    >>> modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong\
    \ modulo(long x, long y) \n{\n    return x % y;\n}\n/*\nReturn the absolute value\
    \ of x\n    >>> abs(-2)\n    2\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n\
    {\n    return x < 0 ? -x : x;\n}\n/*\nReturn the square root of x\n    >>> sqrt(4)\n\
    \    2\n    >>> sqrt(9)\n    3\n*/\nlong sqrt(long x) \n{\n    return cast(long)\
    \ sqrt(cast(real) x);\n}\n/*\nReturn the power of x to y\n    >>> power(2, 3)\n\
    \    8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long y) \n{\n \
    \   return cast(long) pow(cast(real) x, cast(real) y);\n}\n/*\nReturn the factorial\
    \ of x\n    >>> factorial(4)\n    24\n    >>> factorial(9)\n    362880\n*/\nlong\
    \ factorial(long x) \n{\n    long result = 1;\n    for (long i = 1; i <= x; i++)\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpst8b8bip.d(103): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst8b8bip.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(12, 3)\n    4\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(12, 3)\n    9\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nSquare root of a number x\n    >>>\
    \ square_root(9)\n    3\n    >>> square_root(16)\n    4\n    \n*/\nlong square_root(long\
    \ x) \n{\n    return cast(long) sqrt(x);\n}\n/*\nSquare of a number x\n    >>>\
    \ square(3)\n    9\n    >>> square(4)\n    16\n    \n*/\nlong square(long x) \n\
    {\n    return x * x;\n}\n/*\nCube of a number x\n    >>> cube(3)\n    27\n   \
    \ >>> cube(4)\n    64\n    \n*/\nlong cube(long x) \n{\n    return x * x * x;\n\
    }\n/*\nCube root of a number x\n    >>> cube_root(27)\n    3\n    >>> cube_root(64)\n\
    \    4\n    \n*/\nlong cube_root(long x) \n{\n    return cast(long) cbrt(x);\n\
    }\n/*\nPower of a number x\n    >>> power(2, 3)\n    8\n    >>> power(3, 4)\n\
    \    81\n    \n*/\nlong power(long x, long y) \n{\n    return cast(long) pow(x,\
    \ y);\n}\n/*\nFactorial of a number x\n    >>> factorial(5)\n    120\n    >>>\
    \ fact\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwp9lvy25.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp9lvy25.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the square root of a number x\n\
    \    >>> square_root(9)\n    3\n    >>> square_root(25)\n    5\n    \n*/\nlong\
    \ square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nFind the square of a number\
    \ x\n    >>> square(3)\n    9\n    >>> square(5)\n    25\n    \n*/\nlong square(long\
    \ x) \n{\n    return x * x;\n}\n/*\nFind the cube of a number x\n    >>> cube(3)\n\
    \    27\n    >>> cube(5)\n    125\n    \n*/\nlong cube(long x) \n{\n    return\
    \ x * x * x;\n}\n/*\nFind the cube root of a number x\n    >>> cube_root(27)\n\
    \    3\n    >>> cube_root(125)\n    5\n    \n*/\nlong cube_root(long x) \n{\n\
    \    return cbrt(x);\n}\n/*\nFind the factorial of a number x\n    >>> factorial(3)\n\
    \    6\n    >>> factorial(5)\n    120\n    \n*/\nlong factorial(long x) \n{\n\
    \    return factorial(x);\n}\n/*\nFind the power of a number x\n    >>> power(2,\
    \ 3)\n    8\n    >>> power(5, 7\nunittest\n{\n    alias candidate = add;\n\n \
    \   assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n \
    \   assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmrsrcnz.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmrsrcnz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nCalculate the remainder of x divided by y\n\
    \    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nCalculate the square root of x\n \
    \   >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    */\ndouble square_root(double x) \n{\n    return sqrt(x);\n}\n/*\nCalculate the\
    \ power of x to y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n\
    */\nlong power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nCalculate the\
    \ logarithm of x with base y\n    >>> logarithm(2, 3)\n    0.6309297535714574\n\
    \    >>> logarithm(5, 7)\n    0.8571428571428571\n*/\ndouble logarithm(double\
    \ x, double y) \n{\n    return log(x) / log(y);\n}\n/*\nCalculate the natural\
    \ logarithm of x\n    >>> natural_logarithm(2)\n    0.\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnylplc9n.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnylplc9n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nExponentiate two numbers x and y\n    >>>\
    \ exponentiate(2, 3)\n    8\n    >>> exponentiate(5, 7)\n    78125\n*/\nlong exponentiate(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the square root of a number\
    \ x\n    >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n\
    \    2.23606797749979\n*/\nlong square_root(long x) \n{\n    return sqrt(x);\n\
    }\n/*\nFind the logarithm of a number x\n    >>> logarithm(2)\n    0.6931471805599453\n\
    \    >>> logarithm(5)\n    1.6094379124341003\n*/\nlong logarithm(long x) \n{\n\
    \    return log(x);\n}\n/*\nFind the sine of a number x\n    >>> sine(2)\n   \
    \ 0.9092974268256817\n    >>> sine(5)\n    -0.9589242746631385\n*/\nlong sine(long\
    \ x) \n{\n    return sin(x);\n}\n/*\nFind the cosine of a number x\n    >>> cosine(2)\n\
    \    -0.4161468365471424\n    >>>\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpty6jfgfd.d(92): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpty6jfgfd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root\
    \ of a number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy74g8p7u.d(108): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy74g8p7u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nPower two numbers x and y\n    >>> power(2, 3)\n  \
    \  8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long y) \n{\n   \
    \ return pow(x, y);\n}\n/*\nSquare root of a number x\n    >>> square_root(2)\n\
    \    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n*/\ndouble\
    \ square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nSquare of a number x\n\
    \    >>> square(2)\n    4\n    >>> square(5)\n    25\n*/\nlong square(long x)\
    \ \n{\n    return x * x;\n}\n/*\nCube of a number x\n    >>> cube(2)\n    8\n\
    \    >>> cube(5)\n    125\n*/\nlong cube(long x) \n{\n    return x * x * x;\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \   \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp2ev2qdv.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2ev2qdv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root\
    \ of a number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nNatural logarithm of a number x\n    >>> natural_logarithm(2)\n    0.6931471805599453\n\
    \    >>> natural_logarith\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2c0a40nk.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c0a40nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower of two numbers x and y\n   \
    \ >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root\
    \ of a number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb91s5vkd.d(108): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb91s5vkd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nNegate a number x\n    >>> negate(2)\n    -2\n    >>>\
    \ negate(5)\n    -5\n*/\nlong negate(long x) \n{\n    return -x;\n}\n/*\nIncrement\
    \ a number x\n    >>> increment(2)\n    3\n    >>> increment(5)\n    6\n*/\nlong\
    \ increment(long x) \n{\n    return x + 1;\n}\n/*\nDecrement a number x\n    >>>\
    \ decrement(2)\n    1\n    >>> decrement(5)\n    4\n*/\nlong decrement(long x)\
    \ \n{\n    return x - 1;\n}\n/*\nAbsolute value of a number x\n    >>> abs(2)\n\
    \    2\n    >>> abs(-5)\n    5\n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nFloor of a number x\n    >>> floor(2.5)\n    2\n    >>> floor(-5.5)\n\
    \    -6\n*/\nlong floor(long x) \n{\n    return cast(long) floor(\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmt6er2vy.d(113): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmt6er2vy.d(114): Error: found `{` when expecting `,`\\n/tmp/tmpmt6er2vy.d(115):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpmt6er2vy.d(115): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpmt6er2vy.d(115): Error: expression\
    \ expected, not `=`\\n/tmp/tmpmt6er2vy.d(115): Error: found `add` when expecting\
    \ `,`\\n/tmp/tmpmt6er2vy.d(115): Error: expression expected, not `;`\\n/tmp/tmpmt6er2vy.d(117):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpmt6er2vy.d(117): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpmt6er2vy.d(118): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpmt6er2vy.d(119): Error: found `;` when expecting `,`\\n/tmp/tmpmt6er2vy.d(120):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpmt6er2vy.d(121): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpmt6er2vy.d(122): Error: expression expected,\
    \ not `}`\\n/tmp/tmpmt6er2vy.d(123): Error: found `void` when expecting `,`\\\
    n/tmp/tmpmt6er2vy.d(123): Error: found `{` when expecting `,`\\n/tmp/tmpmt6er2vy.d(123):\
    \ Error: expression expected, not `}`\\n/tmp/tmpmt6er2vy.d(123): Error: found\
    \ `End of File` when expecting `,`\\n/tmp/tmpmt6er2vy.d(123): Error: found `End\
    \ of File` when expecting `)`\\n/tmp/tmpmt6er2vy.d(123): Error: found `End of\
    \ File` when expecting `;` following `return` statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt6er2vy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nSquare a number x\n    >>> square(2)\n   \
    \ 4\n    >>> square(5)\n    25\n*/\nlong square(long x) \n{\n    return x * x;\n\
    }\n/*\nCube a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n*/\n\
    long cube(long x) \n{\n    return x * x * x;\n}\n/*\nSquare root of a number x\n\
    \    >>> square_root(4)\n    2\n    >>> square_root(25)\n    5\n*/\nlong square_root(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nCube root of a number x\n    >>> cube_root(8)\n\
    \    2\n    >>> cube_root(125)\n    5\n*/\nlong cube_root(long x) \n{\n    return\
    \ cbrt(x);\n}\n/*\nFactorial of a number x\n    >>> factorial(5)\n    120\n  \
    \  >>> factorial(10)\n    3628800\n*/\nlong factorial(long x) \n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= x; i++) \n    {\n        result *= i;\n    }\n\
    \    return result;\n}\n/*\nPower of a number x\n    >>> power(2, 3)\n    8\n\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf5s2sfzp.d(108): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5s2sfzp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    >>> divide(5, 2)\n   \
    \ 2\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nModulo\
    \ two numbers x and y\n    >>> modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n   \
    \ 5\n    >>> modulo(5, 2)\n    1\n    \n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nExponentiate two numbers x and y\n    >>> exponentiate(2,\
    \ 3)\n    8\n    >>> exponentiate(5, 7)\n    78125\n    >>> exponentiate(5, 2)\n\
    \    25\n    \n*/\nlong exponentiate(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nNegate a number x\n    >>> negate(2)\n    -2\n    >>> negate(5)\n    -5\n\
    \    \n*/\nlong negate(long x) \n{\n    return -x;\n}\n/*\nAbsolute value of a\
    \ number x\n    >>> absolute(2)\n    2\n    >>> absolute(-5)\n    5\n    \n*/\n\
    long absolute(long x) \n{\n    return abs(x);\n}\n/*\nFloor of a number x\n  \
    \  >>> floor(2.5)\n    2\n    >>> floor(-5.5)\n    -6\n    \n*/\nlong floor(long\
    \ x\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0y1lm4cn.d(114): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y1lm4cn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nFloor two numbers x and y\n  \
    \  >>> floor(2, 3)\n    2\n    >>> floor(5, 7)\n    5\n    \n*/\nlong floor(long\
    \ x, long y) \n{\n    return floor(x, y);\n}\n/*\nCeil two numbers x and y\n \
    \   >>> ceil(2, 3)\n    2\n    >>> ceil(5, 7)\n    5\n    \n*/\nlong ceil(long\
    \ x, long y) \n{\n    return ceil(x, y);\n}\n/*\nRound two numbers x and y\n \
    \   >>> round(2, 3)\n    2\n    >>> round(5, 7)\n    5\n    \n*/\nlong round(long\
    \ x, long y) \n{\n    return round(x, y);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpool_kj2m.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpool_kj2m.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2,\
    \ 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2, 3)\n\
    \    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long y) \n{\n   \
    \ return x / y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2, 3)\n   \
    \ 0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2, 3)\n    0\n   \
    \ >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long y) \n{\n    return x /\
    \ y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>>\
    \ divide(5, 7)\n    0\n*/\nlong divide(long x, long y) \n{\n    return x / y;\n\
    }\n/*\nDivide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5,\
    \ 7)\n   \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxef9mop4.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxef9mop4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n*/\nlong sub(long x, long\
    \ y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2,\
    \ 3)\n    6\n    >>> mul(5, 7)\n    35\n*/\nlong mul(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n    0\n\
    \    >>> div(5, 7)\n    0\n*/\nlong div(long x, long y) \n{\n    return x / y;\n\
    }\n/*\nDivide two numbers x and y\n    >>> mod(2, 3)\n    2\n    >>> mod(5, 7)\n\
    \    5\n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/*\nPower of two\
    \ numbers x and y\n    >>> pow(2, 3)\n    8\n    >>> pow(5, 7)\n    78125\n*/\n\
    long pow(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number\
    \ x\n    >>> sqrt(2)\n    1.4142135623730951\n    >>> sqrt(5)\n    2.23606797749979\n\
    */\ndouble sqrt(double x) \n{\n    return sqrt(x);\n}\n/*\nSquare of a number\
    \ x\n    >>> sqr(2)\n    4\n    >>> sqr(5)\n    25\n*/\nlong sqr(long x) \n{\n\
    \    return x * x;\n}\n/*\nCube of a number x\n    >>> cube(2)\n    8\n    >>>\
    \ cube(5)\n    125\n*/\nlong cube(long x) \n{\n    return x * x * x;\n}\n/*\n\
    Factorial of a number x\n    >>> fact(2)\n    2\n    >>> fact(5)\n    120\n*/\n\
    \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(5, 3)\n    15\n    >>> multiply(7, 5)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(9, 3)\n    3\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nCalculate the remainder of two numbers x and\
    \ y\n    >>> remainder(6, 3)\n    0\n    >>> remainder(9, 3)\n    0\n*/\nlong\
    \ remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nCalculate the power\
    \ of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 3)\n  \
    \  125\n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nCalculate\
    \ the square root of a number x\n    >>> square_root(4)\n    2\n    >>> square_root(9)\n\
    \    3\n*/\nlong square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCalculate\
    \ the cube root of a number x\n    >>> cube_root(8)\n    2\n    >>> cube_root(27)\n\
    \    3\n*/\nlong cube_root(long x) \n{\n    return cbrt(x);\n}\n/*\nCalculate\
    \ the factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n\
    \    24\n*/\nlong factorial(long x) \n{\n    long result = 1;\n    for (long i\
    \ = 1; i <= x; i++) \n    {\n       \nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tx6_qr7.d(105): Error: found `unittest` instead of statement\\\
    n/tmp/tmp1tx6_qr7.d(115): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tx6_qr7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(6, 3)\n    0\n    >>> remainder(35, 7)\n    0\n \
    \   \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ absolute value of a number x\n    >>> abs(-6)\n    6\n    >>> abs(35)\n    35\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nFind the square\
    \ root of a number x\n    >>> sqrt(4)\n    2\n    >>> sqrt(9)\n    3\n    \n*/\n\
    long sqrt(long x) \n{\n    return cast(long)sqrt(cast(real)x);\n}\n/*\nFind the\
    \ power of a number x to y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n\
    \    78125\n    \n*/\nlong power(long x, long y) \n{\n    return cast(long)pow(cast(real)x,\
    \ cast(real)y);\n}\n/*\nFind the log of a number x to base y\n    >>> log(8, 2)\n\
    \    3\n    >>> log(78125, 5)\n    7\n    \n*/\nlong log(long x, long y) \n\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadqftdkq.d(109): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadqftdkq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the square root of a number x\n\
    \    >>> square_root(9)\n    3\n    >>> square_root(25)\n    5\n    \n*/\nlong\
    \ square_root(long x) \n{\n    return cast(long) sqrt(x);\n}\n/*\nFind the cube\
    \ root of a number x\n    >>> cube_root(27)\n    3\n    >>> cube_root(64)\n  \
    \  4\n    \n*/\nlong cube_root(long x) \n{\n    return cast(long) cbrt(x);\n}\n\
    /*\nFind the factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n\
    \    720\n    \n*/\nlong factorial(long x) \n{\n    long result = 1;\n    foreach\
    \ (i; 1 .. x + 1) \n    {\n        result *= i;\n    }\n    return result;\n}\n\
    /*\nFind the power of a number x\n    >>> power(2, 3)\n    8\n    >>> power(5,\
    \ 2)\n    25\n    \n*/\nlong power(long x, long y) \n{\n    return cast(long)\
    \ pow(x, y);\n}\n/*\nFind the logarithm of a number x\n    >>> logarithm(10)\n\
    \    1\n    >>> logarithm\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgfslb4x.d(104): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgfslb4x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nFactorial of a number x\n    >>> factorial(2)\n\
    \    2\n    >>> factorial(5)\n    120\n    \n*/\nlong factorial(long x) \n{\n\
    \    return factorial(x);\n}\n/*\nAbsolute value of a number x\n    >>> abs(-2)\n\
    \    2\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n\
    }\n/*\nFloor of a number x\n    >>> floor(2.5)\n    2\n    >>> floor(5\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaxuexrvt.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxuexrvt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2w5jmmeu.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2w5jmmeu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ absolute value of a number x\n    >>> abs(-2)\n    2\n    >>> abs(5)\n    5\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nFind the maximum\
    \ of two numbers x and y\n    >>> max(2, 3)\n    3\n    >>> max(5, 7)\n    7\n\
    \    \n*/\nlong max(long x, long y) \n{\n    return x > y ? x : y;\n}\n/*\nFind\
    \ the minimum of two numbers x and y\n    >>> min(2, 3)\n    2\n    >>> min(5,\
    \ 7)\n    5\n    \n*/\nlong min(long x, long y) \n{\n    return x < y ? x : y;\n\
    }\n/*\nFind the square root of a number x\n    >>> sqrt(4)\n    2\n    >>> sqrt(9)\n\
    \    3\n    \n*/\nlong sqrt(long x) \n{\n    return cast(long) sqrt(cast(real)\
    \ x);\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrpo52cg.d(110): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrpo52cg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    35\n*/\nlong mul(long x, long y)\
    \ \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(6, 3)\n\
    \    2\n    >>> div(35, 7)\n    5\n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nSubtract two numbers x and y\n    >>> sub(6, 3)\n    3\n    >>>\
    \ sub(35, 7)\n    28\n*/\nlong sub(long x, long y) \n{\n    return x - y;\n}\n\
    /*\nCalculate the square root of a number x\n    >>> sqrt(9)\n    3\n    >>> sqrt(25)\n\
    \    5\n*/\nlong sqrt(long x) \n{\n    return cast(long)sqrt(cast(real)x);\n}\n\
    /*\nCalculate the power of a number x to the power of y\n    >>> pow(2, 3)\n \
    \   8\n    >>> pow(5, 7)\n    78125\n*/\nlong pow(long x, long y) \n{\n    return\
    \ cast(long)pow(cast(real)x, cast(real)y);\n}\n/*\nCalculate the factorial of\
    \ a number x\n    >>> fact(5)\n    120\n    >>> fact(7)\n    5040\n*/\nlong fact(long\
    \ x) \n{\n    long result = 1;\n    foreach(i; 0 .. x) \n    {\n        result\
    \ *= i + 1;\n    }\n    return result;\n}\n/*\nCalculate the nth fibonacci number\n\
    \    >>> fib(5)\n    5\n    >>> fib(7)\n    13\n*/\nlong fib(long x) \n{\n   \
    \ long a = 0;\n    long b = 1;\n    foreach(i; 0 .. x) \n    {\n        long temp\
    \ = a;\n        a = b;\n        b =\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj8564re2.d(102): Error: expression expected, not `unittest`\\\
    n/tmp/tmpj8564re2.d(103): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpj8564re2.d(112): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8564re2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n\
    \    78125\n    \n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nFind the square root of a number x\n    >>> square_root(2)\n    1.4142135623730951\n\
    \    >>> square_root(5)\n    2.23606797749979\n    \n*/\ndouble square_root(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nFind the cube root of a number x\n    >>>\
    \ cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n    1.7099759466766968\n\
    \    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n}\n/*\nFind the\
    \ absolute value of a number x\n    >>> absolute_value(2)\n    2\n    >>> absolute_value(-5)\n\
    \    5\n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9dy1ydjr.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dy1ydjr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers x and y\n\
    \    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute value of a number\
    \ x\n    >>> abs(-2)\n    2\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nFind the power of a number x raised to the\
    \ power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n*/\n\
    long power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the square\
    \ root of a number x\n    >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n*/\nlong\
    \ sqrt(long x) \n{\n    return sqrt(x);\n}\n/*\nFind the factorial of a number\
    \ x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n*/\nlong factorial(long\
    \ x) \n{\n    return factorial(x);\n}\n/*\nFind the logarithm of a number x\n\
    \    >>> log(2)\n    0\n    >>> log\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hkdbkho.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hkdbkho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \n*/\nlong add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong\
    \ add(long x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n\
    {\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \n*/\nlong add(long x, long y) \n{\n    return\
    \ x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyzlhgg8.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyzlhgg8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(10, 5)\n    5\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(10, 5)\n    2\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers x and y\n\
    \    >>> remainder(10, 5)\n    0\n    >>> remainder(5, 7)\n    5\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute value of a number\
    \ x\n    >>> abs(-5)\n    5\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nFind the square root of a number x\n    >>>\
    \ sqrt(4)\n    2\n    >>> sqrt(9)\n    3\n*/\nlong sqrt(long x) \n{\n    return\
    \ cast(long) sqrt(cast(real) x);\n}\n/*\nFind the power of a number x\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long\
    \ y) \n{\n    return cast(long) pow(cast(real) x, cast(real) y);\n}\n/*\nFind\
    \ the factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(7)\n\
    \    5040\n*/\nlong factorial(long x) \n{\n    long result = 1;\n    foreach (i;\
    \ 1 .. x + 1) \n   \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkb1de938.d(104): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkb1de938.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nRaise x to the power of y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the square root of x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nFind the absolute value of x\n    >>> abs(-2)\n\
    \    2\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n\
    }\n/*\nFind the floor of x\n    >>> floor(2.5)\n    2\n    >>> floor(5.7)\n  \
    \  5\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n}\n/*\nFind the\
    \ ceiling of x\n    >>> ceiling(2.5)\n    3\n    >>> ceiling(5.\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2cjoyno.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2cjoyno.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n\
    \    78125\n    \n*/\nlong power(long x, long y) \n{\n    return pow(x, y);\n\
    }\n/*\nFind the square root of a number x\n    >>> squareRoot(2)\n    1.4142135623730951\n\
    \    >>> squareRoot(5)\n    2.23606797749979\n    \n*/\ndouble squareRoot(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nFind the natural logarithm of a number x\n\
    \    >>> naturalLogarithm(2)\n    0.6931471805599453\n    >>> naturalLogarithm(5)\n\
    \    1.6094379124341003\n    \n*/\ndouble naturalLogarithm(long x) \n{\n    return\
    \ log(x);\n}\n/*\nFind the logarithm of a number x with base y\n    >>> logarithm(2,\
    \ 3)\n    0.6\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lvkkjbp.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lvkkjbp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the square root of a number x\n\
    \    >>> squareroot(9)\n    3\n    >>> squareroot(25)\n    5\n    \n*/\nlong squareroot(long\
    \ x) \n{\n    return cast(long)sqrt(x);\n}\n/*\nFind the square of a number x\n\
    \    >>> square(3)\n    9\n    >>> square(5)\n    25\n    \n*/\nlong square(long\
    \ x) \n{\n    return x * x;\n}\n/*\nFind the cube of a number x\n    >>> cube(3)\n\
    \    27\n    >>> cube(5)\n    125\n    \n*/\nlong cube(long x) \n{\n    return\
    \ x * x * x;\n}\n/*\nFind the cube root of a number x\n    >>> cuberoot(27)\n\
    \    3\n    >>> cuberoot(125)\n    5\n    \n*/\nlong cuberoot(long x) \n{\n  \
    \  return cast(long)pow(x, 1.0 / 3.0);\n}\n/*\nFind the factorial of a number\
    \ x\n    >>> factorial(3)\n    6\n    >>> factorial(5)\n    120\n    \n*/\nlong\
    \ factorial(long x) \n{\n    long result = 1;\n    for (long i = 1; i <= x; i++)\
    \ \n    {\n       \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuk42i009.d(113): Error: found `unittest` instead of statement\\\
    n/tmp/tmpuk42i009.d(123): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk42i009.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(6, 3)\n    3\n    >>> subtract(35, 7)\n    28\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(6, 3)\n    0\n    >>> remainder(35, 7)\n    0\n \
    \   \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ absolute value of a number x\n    >>> abs(-1)\n    1\n    >>> abs(0)\n    0\n\
    \    >>> abs(1)\n    1\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x\
    \ : x;\n}\n/*\nFind the minimum of two numbers x and y\n    >>> min(1, 2)\n  \
    \  1\n    >>> min(2, 1)\n    1\n    >>> min(1, 1)\n    1\n    \n*/\nlong min(long\
    \ x, long y) \n{\n    return x < y ? x : y;\n}\n/*\nFind the maximum of two numbers\
    \ x and y\n    >>> max(1, 2)\n    2\n    >>> max(2, 1)\n    2\n    >>> max(1,\
    \ 1)\n    1\n    \n*/\nlong max(long x, long y) \n{\n    return x > y ? x : y;\n\
    }\n/*\nFind the square root of a number x\n    >>> sqrt(4)\n    2\n    >>> sqrt(9)\n\
    \   \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnlhh14ky.d(105): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlhh14ky.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nDivide two numbers x and y and return\
    \ the remainder\n    >>> mod(2, 3)\n    2\n    >>> mod(5, 7)\n    5\n    \n*/\n\
    long mod(long x, long y) \n{\n    return x % y;\n}\n/*\nDivide two numbers x and\
    \ y and return the quotient and remainder\n    >>> divmod(2, 3)\n    (0, 2)\n\
    \    >>> divmod(5, 7)\n    (0, 5)\n    \n*/\nTuple!(long, long) divmod(long x,\
    \ long y) \n{\n    return tuple(x / y, x % y);\n}\n/*\nDivide two numbers x and\
    \ y and return the quotient and remainder\n    >>> divmod(2, 3)\n    (0, 2)\n\
    \    >>> divmod(5, 7)\n    (0, 5)\n    \n*/\nTuple!(long, long) divmod(long x,\
    \ long y) \n{\n    return tuple(x / y, x % y);\n}\n/*\nDivide two numbers x and\
    \ y and return the quotient and remainder\n    >>> divmod(2, 3)\n    (0, 2)\n\
    \    >>> divmod(5, 7)\n    (0, 5)\n    \n*/\nTuple!(long, long) divmod(long x,\
    \ long\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7zxe0jx9.d(96): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zxe0jx9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers\
    \ x and y\n    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    5\n  \
    \  \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nFind the\
    \ square root of a number x\n    >>> square_root(2)\n    1.4142135623730951\n\
    \    >>> square_root(5)\n    2.23606797749979\n    \n*/\ndouble square_root(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nFind the power of a number x\n    >>> power(2,\
    \ 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long x, long\
    \ y) \n{\n    return pow(x, y);\n}\n/*\nFind the absolute value of a number x\n\
    \    >>> absolute_value(2)\n    2\n    >>> absolute_value(-5)\n    5\n    \n*/\n\
    long absolute_value(long x) \n{\n    return abs(x);\n}\n/*\nFind the factorial\
    \ of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n\
    \    \n*/\nlong factorial(long x) \n{\n    return factorial(x);\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tutvxbj.d(110): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tutvxbj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSquare root of a number x\n    >>>\
    \ sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n{\n  \
    \  return (long)sqrt(x);\n}\n/*\nSquare of a number x\n    >>> square(2)\n   \
    \ 4\n    >>> square(5)\n    25\n    \n*/\nlong square(long x) \n{\n    return\
    \ x * x;\n}\n/*\nCube of a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n\
    \    125\n    \n*/\nlong cube(long x) \n{\n    return x * x * x;\n}\n/*\nFactorial\
    \ of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n    120\n\
    \    \n*/\nlong factorial(long x) \n{\n    long result = 1;\n    for (long i =\
    \ 1; i <= x; i++) \n    {\n        result *= i;\n    }\n    return result;\n}\n\
    /*\nPower of a number x\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n   \
    \ 78125\n    \n*/\nlong power(long x, long y) \n{\n    return (long)pow(x, y);\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
    \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) ==\
    \ 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) ==\
    \ 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpochrzdvq.d(61): Error: C style cast illegal, use `cast(long)sqrt(x)`\\\
    n/tmp/tmpochrzdvq.d(114): Error: C style cast illegal, use `cast(long)pow(x, y)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpochrzdvq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nRaise x to the power of y\n    >>> power(2, 3)\n  \
    \  8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long x, long y) \n{\n   \
    \ return pow(x, y);\n}\n/*\nGet the square root of x\n    >>> square_root(2)\n\
    \    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n*/\ndouble\
    \ square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nGet the cube root of x\n\
    \    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n    1.7099759466766968\n\
    */\ndouble cube_root(long x) \n{\n    return cbrt(x);\n}\n/*\nGet the absolute\
    \ value of x\n    >>> absolute_value(2)\n    2\n    >>> absolute_value(-5)\n \
    \   5\n*/\nlong absolute_value(long x) \n{\n    return abs(x);\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72gvq6ah.d(102): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72gvq6ah.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers x and y\n\
    \    >>> remainder(6, 3)\n    0\n    >>> remainder(35, 7)\n    0\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute value of a number\
    \ x\n    >>> abs(-2)\n    2\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nFind the square root of a number x\n    >>>\
    \ sqrt(4)\n    2\n    >>> sqrt(9)\n    3\n*/\nlong sqrt(long x) \n{\n    return\
    \ cast(long) sqrt(cast(real) x);\n}\n/*\nFind the power of a number x to the power\
    \ of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n*/\nlong power(long\
    \ x, long y) \n{\n    return cast(long) pow(cast(real) x, cast(real) y);\n}\n\
    /*\nFind the logarithm of a number x to the base of y\n    >>> log(8, 2)\n   \
    \ 3\n    >>> log(78125, 5)\n    7\n*/\nlong log(long x, long y) \n{\n    return\
    \ cast(long) log\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpuog7si.d(102): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpdpuog7si.d(112): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdpuog7si.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nCube root of a number x\n    >>> cbrt(2)\n    1\n\
    \    >>> cbrt(5)\n    1\n    \n*/\nlong cbrt(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x) \n{\n    return factorial(x);\n}\n\
    /*\nAbsolute value of a number x\n    >>> abs(2)\n    2\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp313un62d.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp313un62d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nSquare root of a number x\n    >>>\
    \ square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root\
    \ of a number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x) \n{\n    long result = 1;\n    for\
    \ (long i = 1; i <= x; i++) \n    {\n        result *= i;\n    }\n    return result;\n\
    }\n/*\nSum of a list of numbers\n    >>> sum([1, 2, 3, 4, 5])\n    15\n    >>>\
    \ sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n    \n*/\nlong sum(long[] arr)\
    \ \n{\n    long result = 0;\n\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n   \
    \ assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n  \
    \  assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzc_36oj8.d(104): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc_36oj8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n    \n*/\nlong sqrt(long x) \n\
    {\n    return sqrt(x);\n}\n/*\nAbsolute value of a number x\n    >>> abs(-2)\n\
    \    2\n    >>> abs(5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return abs(x);\n\
    }\n/*\nFloor of a number x\n    >>> floor(2.5)\n    2\n    >>> floor(5.7)\n  \
    \  5\n    \n*/\nlong floor(long x) \n{\n    return floor(x);\n}\n/*\nCeiling of\
    \ a number x\n    >>> ceiling(2.5)\n    3\n    >>> ceiling(\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn865i53o.d(111): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn865i53o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(5, 3)\n    2\n    >>> subtract(7, 5)\n    2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(5, 3)\n    15\n    >>> multiply(7, 5)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(8, 4)\n    2\n    >>> divide(9, 3)\n    3\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nFind the remainder of two numbers x and y\n\
    \    >>> remainder(8, 3)\n    2\n    >>> remainder(9, 5)\n    4\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nFind the absolute value of a number\
    \ x\n    >>> abs(-3)\n    3\n    >>> abs(5)\n    5\n*/\nlong abs(long x) \n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nFind the maximum of two numbers x and y\n\
    \    >>> max(3, 5)\n    5\n    >>> max(5, 3)\n    5\n*/\nlong max(long x, long\
    \ y) \n{\n    return x > y ? x : y;\n}\n/*\nFind the minimum of two numbers x\
    \ and y\n    >>> min(3, 5)\n    3\n    >>> min(5, 3)\n    3\n*/\nlong min(long\
    \ x, long y) \n{\n    return x < y ? x : y;\n}\n/*\nFind the power of two numbers\
    \ x and y\n    >>> power(3, 2)\n    9\n    >>> power(5, 3)\n    125\n*/\nlong\
    \ power(long x, long y) \n{\n    return pow(x, y);\n}\n/*\nFind the square root\
    \ of a number x\n    >>> sqrt(9\nunittest\n{\n    alias candidate = add;\n\n \
    \   assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n \
    \   assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprd_7dib.d(103): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprd_7dib.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nSquare a number x\n    >>> square(2)\n   \
    \ 4\n    >>> square(5)\n    25\n*/\nlong square(long x) \n{\n    return x * x;\n\
    }\n/*\nSquare root of a number x\n    >>> square_root(4)\n    2\n    >>> square_root(25)\n\
    \    5\n*/\nlong square_root(long x) \n{\n    return cast(long)sqrt(x);\n}\n/*\n\
    Cube a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n*/\nlong cube(long\
    \ x) \n{\n    return x * x * x;\n}\n/*\nCube root of a number x\n    >>> cube_root(8)\n\
    \    2\n    >>> cube_root(125)\n    5\n*/\nlong cube_root(long x) \n{\n    return\
    \ cast(long)pow(x, 1.0 / 3.0);\n}\n/*\nFactorial of a number x\n    >>> factorial(0)\n\
    \    1\n    >>> factorial(5)\n    120\n*/\nlong factorial(long x) \n{\n    if\
    \ (x <= 1) \n    {\n        return 1;\n    }\n    return x * factorial(x - 1);\n\
    }\n/*\nPower of a number x\n    >>> power(2, 3)\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpki4zpaw1.d(107): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki4zpaw1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nExponentiate two numbers x and y\n\
    \    >>> exponentiate(2, 3)\n    8\n    >>> exponentiate(5, 7)\n    78125\n  \
    \  \n*/\nlong exponentiate(long x, long y) \n{\n    return pow(x, y);\n}\n/*\n\
    Get the absolute value of a number x\n    >>> absolute(2)\n    2\n    >>> absolute(-5)\n\
    \    5\n    \n*/\nlong absolute(long x) \n{\n    return abs(x);\n}\n/*\nGet the\
    \ square root of a number x\n    >>> square_root(2)\n    1.4142135623730951\n\
    \    >>> square_root(5)\n    2.23606797749979\n    \n*/\ndouble square_root(long\
    \ x) \n{\n    return sqrt(x);\n}\n/*\nGet the natural logarithm of a number x\n\
    \    >>> natural_logarithm(2)\n    0.6931471805599453\n    >>> natural_logarithm(5)\n\
    \    1.609437912434\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1att621w.d(99): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1att621w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>>\
    \ modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \n*/\nlong modulo(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nPower two numbers x and y\n    >>>\
    \ power(2, 3)\n    8\n    >>> power(5, 7)\n    78125\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    return pow(x, y);\n}\n/*\nSquare root of a number x\n  \
    \  >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n\
    \    \n*/\ndouble square_root(long x) \n{\n    return sqrt(x);\n}\n/*\nCube root\
    \ of a number x\n    >>> cube_root(2)\n    1.2599210498948732\n    >>> cube_root(5)\n\
    \    1.7099759466766968\n    \n*/\ndouble cube_root(long x) \n{\n    return cbrt(x);\n\
    }\n/*\nFactorial of a number x\n    >>> factorial(2)\n    2\n    >>> factorial(5)\n\
    \    120\n    \n*/\nlong factorial(long x\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) ==\
    \ 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) ==\
    \ 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7q7585zb.d(108): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q7585zb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n*/\nlong subtract(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n*/\nlong divide(long x, long\
    \ y) \n{\n    return x / y;\n}\n/*\nModulo two numbers x and y\n    >>> modulo(2,\
    \ 3)\n    2\n    >>> modulo(5, 7)\n    5\n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nNegate a number x\n    >>> negate(2)\n    -2\n    >>>\
    \ negate(5)\n    -5\n*/\nlong negate(long x) \n{\n    return -x;\n}\n/*\nGet the\
    \ absolute value of a number x\n    >>> abs(2)\n    2\n    >>> abs(-5)\n    5\n\
    */\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of a\
    \ number x\n    >>> sign(2)\n    1\n    >>> sign(-5)\n    -1\n*/\nlong sign(long\
    \ x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the square root of a number x\n\
    \    >>> sqrt(2)\n    1\n    >>> sqrt(5)\n    2\n*/\nlong sqrt(long x) \n{\n \
    \   return cast(long) sqrt(cast(real) x);\n}\n/*\nGet the square of a number x\n\
    \    >>> square(2)\n    4\n    >>> square(5)\n    25\n*/\nlong\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45m9fngv.d(111): Error: no identifier for declarator `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45m9fngv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
