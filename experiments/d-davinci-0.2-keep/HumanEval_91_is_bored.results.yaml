name: HumanEval_91_is_bored
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxvxx82l.d(18): Error: undefined identifier `split`\\n/tmp/tmphxvxx82l.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphxvxx82l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ length = S.length;\n    while (i < length)\n    {\n        if (S[i] == 'I')\n\
    \        {\n            boredoms++;\n            while (i < length && S[i] !=\
    \ '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n  \
    \          }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9tghj0uu.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp9tghj0uu.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmp9tghj0uu.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x30d6b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6cwgvy9l.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp6cwgvy9l.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmp6cwgvy9l.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xb161d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_672j7q.d(18): Error: undefined identifier `split`\\n/tmp/tmpj_672j7q.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpj_672j7q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88q5euex.d(18): Error: undefined identifier `split`\\n/tmp/tmp88q5euex.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp88q5euex.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4bhyuhef.d(18): Error: undefined identifier `split`\\n/tmp/tmp4bhyuhef.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4bhyuhef.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnj0x63fk.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpnj0x63fk.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmpnj0x63fk.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0x973b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ length = S.length;\n    while (i < length)\n    {\n        if (S[i] == 'I')\n\
    \        {\n            boredoms++;\n            while (i < length && (S[i] !=\
    \ '.' && S[i] != '?' && S[i] != '!'))\n            {\n                i++;\n \
    \           }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp63sll58d.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e7d]\\n??:? void tmp63sll58d.__unittest_L34_C1()\
    \ [0x427b43]\\n??:? void tmp63sll58d.__modtest() [0x427c00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc3d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa81]\\n??:? runModuleUnitTests [0x42b9ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428340]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282c7]\\n??:? _d_run_main [0x428232]\\n??:? main [0x427c13]\\\
    n??:? __libc_start_main [0x7727a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuvrwlf3m.d(18): Error: undefined identifier `split`\\n/tmp/tmpuvrwlf3m.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuvrwlf3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    while\
    \ (i < S.length)\n    {\n        if (S[i] == 'I')\n        {\n            boredoms++;\n\
    \            while (i < S.length && S[i] != '.' && S[i] != '?' && S[i] != '!')\n\
    \            {\n                i++;\n            }\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdpfnbkmr.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpdpfnbkmr.__unittest_L33_C1()\
    \ [0x427b57]\\n??:? void tmpdpfnbkmr.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x92f78554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    long start = 0;\n    long end = 0;\n    while (i < len)\n\
    \    {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n  \
    \          end = i;\n            string sentence = S.substr(start, end - start);\n\
    \            if (sentence.length > 0)\n            {\n                if (sentence[0]\
    \ == 'I')\n                {\n                    boredoms++;\n              \
    \  }\n            }\n            start = i + 1;\n        }\n        i++;\n   \
    \ }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplac5h1mk.d(27): Error: no property `substr` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplac5h1mk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgiyb75tt.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpgiyb75tt.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmpgiyb75tt.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x21ba3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzad6q5kf.d(18): Error: undefined identifier `split`\\n/tmp/tmpzad6q5kf.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzad6q5kf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ length = S.length;\n    while (i < length)\n    {\n        if (S[i] == 'I')\n\
    \        {\n            boredoms++;\n            while (i < length && S[i] !=\
    \ '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n  \
    \          }\n        }\n        else\n        {\n            while (i < length\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n             \
    \   i++;\n            }\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5co85x5x.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmp5co85x5x.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmp5co85x5x.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xb6b1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplge293w4.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmplge293w4.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmplge293w4.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xdea90554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_sv4cuwg.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmp_sv4cuwg.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmp_sv4cuwg.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xcbd0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy_nx7kf4.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpy_nx7kf4.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmpy_nx7kf4.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x42117554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2n2ecpx.d(18): Error: undefined identifier `split`\\n/tmp/tmpa2n2ecpx.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa2n2ecpx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpombdanmb.d(18): Error: undefined identifier `split`\\n/tmp/tmpombdanmb.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpombdanmb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpktko6qfc.d(18): Error: undefined identifier `split`\\n/tmp/tmpktko6qfc.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpktko6qfc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ou58wrx.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp8ou58wrx.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ou58wrx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozcgi9v_.d(18): Error: undefined identifier `split`\\n/tmp/tmpozcgi9v_.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpozcgi9v_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuvt7ptlh.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmpuvt7ptlh.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvt7ptlh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".!?\");\n    foreach(string sentence; sentences)\n    {\n       \
    \ if(sentence.length > 0 && sentence[0] == 'I')\n            boredoms++;\n   \
    \ }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20nn5pwn.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20nn5pwn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7g512fvs.d(18): Error: undefined identifier `split`\\n/tmp/tmp7g512fvs.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7g512fvs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmtfytz4t.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpmtfytz4t.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpmtfytz4t.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x2385a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxzk2yu8v.d(18): Error: undefined identifier `split`\\n/tmp/tmpxzk2yu8v.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxzk2yu8v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbk5t24vp.d(18): Error: undefined identifier `split`\\n/tmp/tmpbk5t24vp.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbk5t24vp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdeuy6tj0.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpdeuy6tj0.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpdeuy6tj0.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xcc4de554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences) {\n        if(sentence.length\
    \ > 0 && sentence[0] == 'I') {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62_lxg8e.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62_lxg8e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpts7g3cap.d(18): Error: undefined identifier `split`\\n/tmp/tmpts7g3cap.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpts7g3cap.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsz0d09iy.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpsz0d09iy.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpsz0d09iy.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x9956f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0p7bb5cz.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp0p7bb5cz.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p7bb5cz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbems3pwy.d(18): Error: undefined identifier `split`\\n/tmp/tmpbems3pwy.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbems3pwy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, '.');\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, ' ');\n      \
    \      if(words[0] == \"I\")\n            {\n                boredoms++;\n   \
    \         }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6y7q8clo.d(18): Error: undefined identifier `split`\\n/tmp/tmp6y7q8clo.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6y7q8clo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpollcmxuk.d(18): Error: undefined identifier `split`\\n/tmp/tmpollcmxuk.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpollcmxuk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3xc9z85.d(18): Error: undefined identifier `split`\\n/tmp/tmpw3xc9z85.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw3xc9z85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4g9i3xs.d(18): Error: undefined identifier `split`\\n/tmp/tmpi4g9i3xs.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpi4g9i3xs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp65q_nyfz.d(18): Error: undefined identifier `split`\\n/tmp/tmp65q_nyfz.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp65q_nyfz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5_ygoikx.d(18): Error: undefined identifier `split`\\n/tmp/tmp5_ygoikx.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5_ygoikx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpugfwspqh.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpugfwspqh.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpugfwspqh.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xfcdcc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzh67bvaf.d(18): Error: undefined identifier `split`\\n/tmp/tmpzh67bvaf.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzh67bvaf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7l0njpxu.d(18): Error: undefined identifier `split`\\n/tmp/tmp7l0njpxu.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7l0njpxu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0l9nc607.d(18): Error: undefined identifier `split`\\n/tmp/tmp0l9nc607.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp0l9nc607.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptrc65cyr.d(18): Error: undefined identifier `split`\\n/tmp/tmptrc65cyr.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptrc65cyr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        // find the next sentence\n\
    \        long start = i;\n        while (i < len && S[i] != '.' && S[i] != '?'\
    \ && S[i] != '!')\n            i++;\n        long end = i;\n        // find the\
    \ first word in the sentence\n        while (start < end && S[start] == ' ')\n\
    \            start++;\n        long word_start = start;\n        while (start\
    \ < end && S[start] != ' ')\n            start++;\n        long word_end = start;\n\
    \        // check if the first word is \"I\"\n        if (word_end - word_start\
    \ == 1 && S[word_start] == 'I')\n            boredoms++;\n        // skip the\
    \ sentence delimiter\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcg8abyv4.d(18): Error: undefined identifier `split`\\n/tmp/tmpcg8abyv4.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcg8abyv4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vk93d9d.d(18): Error: undefined identifier `split`\\n/tmp/tmp6vk93d9d.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6vk93d9d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzz27ncy.d(18): Error: undefined identifier `split`\\n/tmp/tmptzz27ncy.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptzz27ncy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6vemxq42.d(18): Error: undefined identifier `split`\\n/tmp/tmp6vemxq42.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6vemxq42.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ljky45o.d(18): Error: undefined identifier `split`\\n/tmp/tmp8ljky45o.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8ljky45o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkoauzp4.d(18): Error: undefined identifier `split`\\n/tmp/tmpbkoauzp4.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbkoauzp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxei4nzsk.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpxei4nzsk.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmpxei4nzsk.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x19e73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuggx5h30.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpuggx5h30.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmpuggx5h30.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xef4c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjztmg3rd.d(18): Error: undefined identifier `split`\\n/tmp/tmpjztmg3rd.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjztmg3rd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpawsxrxny.d(18): Error: undefined identifier `split`\\n/tmp/tmpawsxrxny.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpawsxrxny.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx4sqme_c.d(18): Error: undefined identifier `split`\\n/tmp/tmpx4sqme_c.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx4sqme_c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegpvzmq3.d(18): Error: undefined identifier `split`\\n/tmp/tmpegpvzmq3.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpegpvzmq3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuochr4mm.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmpuochr4mm.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuochr4mm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwijwzj51.d(18): Error: undefined identifier `split`\\n/tmp/tmpwijwzj51.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwijwzj51.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcr90n749.d(18): Error: undefined identifier `split`\\n/tmp/tmpcr90n749.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcr90n749.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdukvdyyj.d(18): Error: undefined identifier `split`\\n/tmp/tmpdukvdyyj.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdukvdyyj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfrfajmo9.d(18): Error: undefined identifier `split`\\n/tmp/tmpfrfajmo9.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfrfajmo9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwngvpnji.d(18): Error: undefined identifier `split`\\n/tmp/tmpwngvpnji.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwngvpnji.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto sentences = split(S,\
    \ \".\");\n    foreach(sentence; sentences)\n    {\n        auto words = split(sentence,\
    \ \" \");\n        if(words[0] == \"I\")\n            boredoms++;\n    }\n   \
    \ return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx8y816_g.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8y816_g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprpa2up9u.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmprpa2up9u.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmprpa2up9u.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x5dbd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphk3pj4bk.d(18): Error: undefined identifier `split`\\n/tmp/tmphk3pj4bk.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmphk3pj4bk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wphsu_k.d(18): Error: undefined identifier `split`\\n/tmp/tmp9wphsu_k.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9wphsu_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl02m6yqh.d(18): Error: undefined identifier `split`\\n/tmp/tmpl02m6yqh.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpl02m6yqh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences) {\n        if(sentence.length\
    \ > 0 && sentence[0] == 'I') {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14_s9j6v.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14_s9j6v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] split = split(S,\
    \ \".\");\n    foreach(string s; split)\n    {\n        if(s.length > 0)\n   \
    \     {\n            string[] split2 = split(s, \" \");\n            if(split2[0]\
    \ == \"I\")\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxn94d97s.d(18): Error: undefined identifier `split`\\n/tmp/tmpxn94d97s.d(23):\
    \ Error: function expected before `()`, not `split` of type `string[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn94d97s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len)\n    {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n        {\n            if (j < i && S[j]\
    \ == 'I')\n            {\n                boredoms++;\n            }\n       \
    \     j = i + 1;\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxwfucxlg.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e7d]\\n??:? void tmpxwfucxlg.__unittest_L35_C1()\
    \ [0x427b3f]\\n??:? void tmpxwfucxlg.__modtest() [0x427bfc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc17]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc3d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa81]\\n??:? runModuleUnitTests [0x42b9ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428340]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282c7]\\n??:? _d_run_main [0x428232]\\n??:? main [0x427c0f]\\\
    n??:? __libc_start_main [0xe6ac6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuqk5uacl.d(18): Error: undefined identifier `split`\\n/tmp/tmpuqk5uacl.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpuqk5uacl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfz9565z5.d(18): Error: undefined identifier `split`\\n/tmp/tmpfz9565z5.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfz9565z5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    long i = 0;\n    long len\
    \ = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n        {\n\
    \            count++;\n            while (i < len && S[i] != '.' && S[i] != '?'\
    \ && S[i] != '!')\n            {\n                i++;\n            }\n      \
    \  }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ltn4w9n.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp5ltn4w9n.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmp5ltn4w9n.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x4a2fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmxbantos.d(18): Error: undefined identifier `split`\\n/tmp/tmpmxbantos.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmxbantos.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_sdjpsq.d(18): Error: undefined identifier `split`\\n/tmp/tmpw_sdjpsq.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw_sdjpsq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2f_s0tl.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmpa2f_s0tl.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2f_s0tl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8rcq72v.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8rcq72v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjn07up20.d(18): Error: undefined identifier `split`\\n/tmp/tmpjn07up20.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpjn07up20.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp401iqyk6.d(18): Error: undefined identifier `split`\\n/tmp/tmp401iqyk6.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp401iqyk6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppl77ji01.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmppl77ji01.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmppl77ji01.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x32795554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb3y0uto6.d(18): Error: undefined identifier `split`\\n/tmp/tmpb3y0uto6.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb3y0uto6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3yqx0dxc.d(18): Error: undefined identifier `split`\\n/tmp/tmp3yqx0dxc.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp3yqx0dxc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb3ycu4x8.d(18): Error: undefined identifier `split`\\n/tmp/tmpb3ycu4x8.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb3ycu4x8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfalr2geo.d(18): Error: undefined identifier `split`\\n/tmp/tmpfalr2geo.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfalr2geo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkgeluanu.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgeluanu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplufow43e.d(18): Error: undefined identifier `split`\\n/tmp/tmplufow43e.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplufow43e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7opghfp.d(18): Error: undefined identifier `split`\\n/tmp/tmpf7opghfp.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpf7opghfp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbk85f9wo.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbk85f9wo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ha95xsf.d(18): Error: undefined identifier `split`\\n/tmp/tmp_ha95xsf.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_ha95xsf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzqxv5nk.d(18): Error: undefined identifier `split`\\n/tmp/tmpqzqxv5nk.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqzqxv5nk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqoct6wnj.d(18): Error: undefined identifier `split`\\n/tmp/tmpqoct6wnj.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqoct6wnj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbd8qbiwk.d(18): Error: undefined identifier `split`\\n/tmp/tmpbd8qbiwk.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbd8qbiwk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2bhce600.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp2bhce600.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmp2bhce600.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x809b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppxttcpff.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmppxttcpff.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmppxttcpff.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xda900554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z716in9.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp3z716in9.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z716in9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len)\n    {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n        {\n            if (S[j] == 'I')\n\
    \            {\n                boredoms++;\n            }\n            j = i\
    \ + 1;\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqkv7146d.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpqkv7146d.__unittest_L35_C1()\
    \ [0x427b37]\\n??:? void tmpqkv7146d.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaa2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc35]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbc1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa79]\\n??:? runModuleUnitTests [0x42b9e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428338]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bf]\\n??:? _d_run_main [0x42822a]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x27a47554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \".\");\n    foreach(string word; words)\n    {\n        if(word[0] == 'I')\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmrrsddn3.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrrsddn3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5z1pcpd.d(18): Error: undefined identifier `split`\\n/tmp/tmpg5z1pcpd.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpg5z1pcpd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4crph0g0.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp4crph0g0.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4crph0g0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkwd_xmdd.d(18): Error: undefined identifier `split`\\n/tmp/tmpkwd_xmdd.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkwd_xmdd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".!?\");\n    foreach(string sentence; sentences)\n    {\n       \
    \ if(sentence.length > 0 && sentence[0] == 'I')\n            boredoms++;\n   \
    \ }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgc0jg691.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgc0jg691.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp55m9qhnb.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55m9qhnb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnc0k5mo8.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpnc0k5mo8.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpnc0k5mo8.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xef9ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len)\n    {\n        if (S[i]\
    \ == 'I')\n        {\n            boredoms++;\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        else\n        {\n            while (i < len\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n             \
    \   i++;\n            }\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpazibfgqs.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpazibfgqs.__unittest_L42_C1()\
    \ [0x427bfb]\\n??:? void tmpazibfgqs.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xe2f24554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len)\n    {\n        if (S[i]\
    \ == 'I')\n        {\n            boredoms++;\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpchiu8vtg.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpchiu8vtg.__unittest_L35_C1()\
    \ [0x427b57]\\n??:? void tmpchiu8vtg.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xd28d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsvdh_urf.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvdh_urf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6o2ubnr5.d(18): Error: undefined identifier `split`\\n/tmp/tmp6o2ubnr5.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6o2ubnr5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwsgwg1cu.d(18): Error: undefined identifier `split`\\n/tmp/tmpwsgwg1cu.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwsgwg1cu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotfc9x5f.d(18): Error: undefined identifier `split`\\n/tmp/tmpotfc9x5f.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpotfc9x5f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplafvdguh.d(18): Error: undefined identifier `split`\\n/tmp/tmplafvdguh.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplafvdguh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5pm5tdz7.d(18): Error: undefined identifier `split`\\n/tmp/tmp5pm5tdz7.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5pm5tdz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp33bw1az.d(18): Error: undefined identifier `split`\\n/tmp/tmpp33bw1az.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp33bw1az.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6r9jaem6.d(18): Error: undefined identifier `split`\\n/tmp/tmp6r9jaem6.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6r9jaem6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkhka02ah.d(18): Error: undefined identifier `split`\\n/tmp/tmpkhka02ah.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkhka02ah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmj6671a1.d(18): Error: undefined identifier `split`\\n/tmp/tmpmj6671a1.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmj6671a1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9xyzkwy.d(18): Error: undefined identifier `split`\\n/tmp/tmpx9xyzkwy.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx9xyzkwy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \".\");\n    foreach(string word; words)\n    {\n        if(word[0..1] == \"\
    I \")\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptdptph5_.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptdptph5_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvz5lusj2.d(18): Error: undefined identifier `split`\\n/tmp/tmpvz5lusj2.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvz5lusj2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5vm9168.d(18): Error: undefined identifier `split`\\n/tmp/tmpy5vm9168.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpy5vm9168.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_lst8xe.d(18): Error: undefined identifier `split`\\n/tmp/tmpw_lst8xe.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw_lst8xe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6xgm5ge.d(18): Error: undefined identifier `split`\\n/tmp/tmp_6xgm5ge.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_6xgm5ge.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(startsWith(sentence,\
    \ \"I\"))\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprdajeflh.d(18): Error: undefined identifier `split`\\n/tmp/tmprdajeflh.d(21):\
    \ Error: undefined identifier `startsWith`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmprdajeflh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int i = 0;\n    while\
    \ (i < S.length)\n    {\n        if (S[i] == 'I')\n        {\n            boredoms++;\n\
    \            while (S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n\
    \                i++;\n            }\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd7tr1k3k.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpd7tr1k3k.__unittest_L33_C1()\
    \ [0x427b2f]\\n??:? void tmpd7tr1k3k.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc07]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc2d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa71]\\n??:? runModuleUnitTests [0x42b9dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b7]\\n??:? _d_run_main [0x428222]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0xcf65c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0noly0z_.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmp0noly0z_.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmp0noly0z_.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x1b82b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzedchl9.d(18): Error: undefined identifier `split`\\n/tmp/tmptzedchl9.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmptzedchl9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkneak2fb.d(18): Error: undefined identifier `split`\\n/tmp/tmpkneak2fb.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkneak2fb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm231vvt_.d(18): Error: undefined identifier `split`\\n/tmp/tmpm231vvt_.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpm231vvt_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbbshilh.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmpsbbshilh.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbbshilh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf0zvk2c.d(18): Error: undefined identifier `split`\\n/tmp/tmpcf0zvk2c.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcf0zvk2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiijkba7c.d(18): Error: undefined identifier `split`\\n/tmp/tmpiijkba7c.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpiijkba7c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3l32044.d(18): Error: undefined identifier `split`\\n/tmp/tmpz3l32044.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpz3l32044.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len)\n    {\n        if (S[i]\
    \ == 'I')\n        {\n            j = i;\n            while (j < len && S[j] !=\
    \ '.' && S[j] != '?' && S[j] != '!')\n            {\n                j++;\n  \
    \          }\n            if (j == len || S[j] == '.')\n            {\n      \
    \          boredoms++;\n            }\n            i = j;\n        }\n       \
    \ else\n        {\n            i++;\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm91q2fjo.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmpm91q2fjo.__unittest_L43_C1()\
    \ [0x427bce]\\n??:? void tmpm91q2fjo.__modtest() [0x427c60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc77]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab0a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc9d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43014c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc29]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aae1]\\n??:? runModuleUnitTests [0x42ba4d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428327]\\n??:? _d_run_main [0x428292]\\n??:? main [0x427c73]\\\
    n??:? __libc_start_main [0xc6062554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2cdgpns5.d(18): Error: undefined identifier `split`\\n/tmp/tmp2cdgpns5.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2cdgpns5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9q4z63i.d(18): Error: undefined identifier `split`\\n/tmp/tmpu9q4z63i.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu9q4z63i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7seks419.d(18): Error: undefined identifier `split`\\n/tmp/tmp7seks419.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7seks419.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhmtxu50.d(18): Error: undefined identifier `split`\\n/tmp/tmpvhmtxu50.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpvhmtxu50.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ == 0)\n            continue;\n        string[] words = split(sentence, \" \"\
    );\n        if(words[0] == \"I\")\n            boredoms++;\n    }\n    return\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp__b96jk2.d(18): Error: undefined identifier `split`\\n/tmp/tmp__b96jk2.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp__b96jk2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt14xsmv7.d(18): Error: undefined identifier `split`\\n/tmp/tmpt14xsmv7.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpt14xsmv7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_u1mly61.d(18): Error: undefined identifier `split`\\n/tmp/tmp_u1mly61.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_u1mly61.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp65zp3xk0.d(18): Error: undefined identifier `split`\\n/tmp/tmp65zp3xk0.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp65zp3xk0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdv9mzswl.d(18): Error: undefined identifier `split`\\n/tmp/tmpdv9mzswl.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpdv9mzswl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx17ou7cs.d(18): Error: undefined identifier `split`\\n/tmp/tmpx17ou7cs.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpx17ou7cs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl_98h6fh.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpl_98h6fh.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpl_98h6fh.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0xf011a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpng7_ndc7.d(18): Error: undefined identifier `split`\\n/tmp/tmpng7_ndc7.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpng7_ndc7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm0w1utak.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0w1utak.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx2q9bovj.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx2q9bovj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppnwrc8jw.d(18): Error: undefined identifier `split`\\n/tmp/tmppnwrc8jw.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppnwrc8jw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ofp69nm.d(18): Error: undefined identifier `split`\\n/tmp/tmp9ofp69nm.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9ofp69nm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt6s82it9.d(18): Error: undefined identifier `split`\\n/tmp/tmpt6s82it9.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpt6s82it9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnmgufvak.d(18): Error: undefined identifier `split`\\n/tmp/tmpnmgufvak.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpnmgufvak.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpso50guea.d(18): Error: undefined identifier `split`\\n/tmp/tmpso50guea.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpso50guea.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_nftxfzy.d(18): Error: undefined identifier `split`\\n/tmp/tmp_nftxfzy.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_nftxfzy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    long start = 0;\n    long end = 0;\n    while (i < len)\
    \ {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            end\
    \ = i;\n            string sentence = S[start..end];\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms++;\n            }\n            start = i + 1;\n\
    \        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakh2323o.d(26): Error: no property `startsWith` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakh2323o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqcv9y4s.d(18): Error: undefined identifier `split`\\n/tmp/tmpqqcv9y4s.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpqqcv9y4s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnad2ubt.d(18): Error: undefined identifier `split`\\n/tmp/tmpfnad2ubt.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfnad2ubt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            if(sentence[0] == 'I')\n            {\n       \
    \         boredoms++;\n            }\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3c0cmqu9.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c0cmqu9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_j1sxecu.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmp_j1sxecu.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmp_j1sxecu.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x8e3bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6lir_5ez.d(18): Error: undefined identifier `split`\\n/tmp/tmp6lir_5ez.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6lir_5ez.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzk9jj6rc.d(18): Error: undefined identifier `split`\\n/tmp/tmpzk9jj6rc.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzk9jj6rc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2b03vli_.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmp2b03vli_.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2b03vli_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2xfayga.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2xfayga.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpud_6mao3.d(18): Error: undefined identifier `split`\\n/tmp/tmpud_6mao3.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpud_6mao3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkb6c623h.d(18): Error: undefined identifier `split`\\n/tmp/tmpkb6c623h.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpkb6c623h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe02o1um8.d(18): Error: undefined identifier `split`\\n/tmp/tmpe02o1um8.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe02o1um8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpksr0selj.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpksr0selj.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmpksr0selj.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0x39dcc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps4nkhraq.d(18): Error: undefined identifier `split`\\n/tmp/tmps4nkhraq.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmps4nkhraq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qpi20tk.d(18): Error: undefined identifier `split`\\n/tmp/tmp9qpi20tk.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp9qpi20tk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6z2oa3kn.d(18): Error: undefined identifier `split`\\n/tmp/tmp6z2oa3kn.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6z2oa3kn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n        }\n        while (i < len && S[i] != '.' && S[i] !=\
    \ '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n    }\n  \
    \  return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk2yyaoiq.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpk2yyaoiq.__unittest_L31_C1()\
    \ [0x427b53]\\n??:? void tmpk2yyaoiq.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0xc0c8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd89uf4d1.d(18): Error: undefined identifier `split`\\n/tmp/tmpd89uf4d1.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpd89uf4d1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdhl1m8je.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpdhl1m8je.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpdhl1m8je.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x9ca54554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2x3g8yp.d(18): Error: undefined identifier `split`\\n/tmp/tmpw2x3g8yp.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw2x3g8yp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp06tl06q.d(18): Error: undefined identifier `split`\\n/tmp/tmpp06tl06q.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp06tl06q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgw1p1tf1.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpgw1p1tf1.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmpgw1p1tf1.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0x37120554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz842aweu.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmpz842aweu.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmpz842aweu.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xdd9fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparhson9d.d(18): Error: undefined identifier `split`\\n/tmp/tmparhson9d.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmparhson9d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxnp7f1_k.d(18): Error: undefined identifier `split`\\n/tmp/tmpxnp7f1_k.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpxnp7f1_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8g60v0ws.d(18): Error: undefined identifier `split`\\n/tmp/tmp8g60v0ws.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8g60v0ws.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8csv5an3.d(18): Error: undefined identifier `split`\\n/tmp/tmp8csv5an3.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8csv5an3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo02aosr4.d(18): Error: undefined identifier `split`\\n/tmp/tmpo02aosr4.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo02aosr4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_oefu_v.d(18): Error: undefined identifier `split`\\n/tmp/tmp2_oefu_v.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2_oefu_v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk4fzk1ob.d(18): Error: undefined identifier `split`\\n/tmp/tmpk4fzk1ob.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk4fzk1ob.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzdc67ozx.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e95]\\n??:? void tmpzdc67ozx.__unittest_L34_C1()\
    \ [0x427b57]\\n??:? void tmpzdc67ozx.__modtest() [0x427c14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aac2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc55]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa99]\\n??:? runModuleUnitTests [0x42ba05]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282df]\\n??:? _d_run_main [0x42824a]\\n??:? main [0x427c27]\\\
    n??:? __libc_start_main [0x8373a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto words = split(S,\
    \ \" .?!\");\n    foreach(word; words)\n    {\n        if(word == \"I\")\n   \
    \         boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp450i96e5.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp450i96e5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgxl97j6.d(18): Error: undefined identifier `split`\\n/tmp/tmpcgxl97j6.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcgxl97j6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqcj305w.d(18): Error: undefined identifier `split`\\n/tmp/tmpoqcj305w.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpoqcj305w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohimw1y1.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohimw1y1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n  \
    \  long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n  \
    \  long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n  \
    \  long www = 0;\n    long\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx84opst_.d(86): Error: no identifier for declarator `long`\\\
    n/tmp/tmpx84opst_.d(86): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx84opst_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long len = S.length;\n    while (i < len) {\n        if (S[i] ==\
    \ 'I') {\n            boredoms++;\n        }\n        while (i < len && S[i] !=\
    \ '.' && S[i] != '?' && S[i] != '!') {\n            i++;\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_mw7g6ua.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmp_mw7g6ua.__unittest_L32_C1()\
    \ [0x427b53]\\n??:? void tmp_mw7g6ua.__modtest() [0x427c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aaba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300fc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbd9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa91]\\n??:? runModuleUnitTests [0x42b9fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282d7]\\n??:? _d_run_main [0x428242]\\n??:? main [0x427c23]\\\
    n??:? __libc_start_main [0x5771b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpapwpwdju.d(18): Error: undefined identifier `split`\\n/tmp/tmpapwpwdju.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpapwpwdju.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1ifixmz.d(18): Error: undefined identifier `split`\\n/tmp/tmpk1ifixmz.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk1ifixmz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ \" \");\n    foreach(string word; words)\n    {\n        if(word == \"I\")\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt7ezlci3.d(18): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7ezlci3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dww5n9q.d(18): Error: undefined identifier `split`\\n/tmp/tmp_dww5n9q.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_dww5n9q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpge0aadvf.d(18): Error: undefined identifier `split`\\n/tmp/tmpge0aadvf.d(23):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpge0aadvf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsq2y1o6a.d(18): Error: undefined identifier `split`\\n/tmp/tmpsq2y1o6a.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsq2y1o6a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi70ic6d1.d(18): Error: undefined identifier `split`\\n/tmp/tmpi70ic6d1.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpi70ic6d1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprln41f35.d(18): Error: undefined identifier `split`\\n/tmp/tmprln41f35.d(21):\
    \ Error: undefined identifier `split`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmprln41f35.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            boredoms++;\n            while (i < len && S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!')\n            {\n                i++;\n         \
    \   }\n        }\n        else\n        {\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69mdyy92.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f35]\\n??:? void tmp69mdyy92.__unittest_L41_C1()\
    \ [0x427bfb]\\n??:? void tmp69mdyy92.__modtest() [0x427cb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcf5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab39]\\n??:? runModuleUnitTests [0x42baa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42837f]\\n??:? _d_run_main [0x4282ea]\\n??:? main [0x427ccb]\\\
    n??:? __libc_start_main [0xbb51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
