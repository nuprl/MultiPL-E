name: HumanEval_10_make_palindrome
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
  \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
  \ string) \n"
tests: "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\"\
  ) == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
  jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
completions: ["{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    string prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    return string ~ string[0..$-palindrome_suffix].dup.reverse;\n}", "{\n   \
    \ auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix('')\n    ''\n    >>> longest_palindrome_suffix('cat')\n\
    \    ''\n    >>> longest_palindrome_suffix('cata')\n    'a'\n    >>> longest_palindrome_suffix('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix('catacata')\n    'atacata'\n*/\n\
    string longest_palindrome_suffix(string string) \n{\n    auto length = string.length;\n\
    \    for (int i = 0; i < length; i++) \n    {\n        if (is_palindrome(string[i..$]))\
    \ \n        {\n            return string[i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n\
    \    true\n    >>> is_palindrome('ab')\n    false\n    >>> is_palindrome('aba')\n\
    \    true\n    >>> is_palindrome('abba')\n    true\n    >>> is_palindrome('abbc')\n\
    \    false\n*/", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n}",
  "{\n    auto prefix = string[0 .. $/2];\n    auto postfix = string[$/2 .. $];\n\
    \    auto reversed_prefix = postfix.dup;\n    reversed_prefix.reverse;\n    auto\
    \ longest_palindrome_suffix = longest_common_substring(postfix, reversed_prefix);\n\
    \    return string ~ reversed_prefix[$ - longest_palindrome_suffix .. $];\n}",
  "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix\
    \ = string[0..$-palindrome_suffix.length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}", "{\n    auto length = string.length;\n    if\
    \ (length == 0)\n        return string;\n    auto longest_palindrome_length =\
    \ longest_palindrome_length_at(string, length - 1);\n    auto prefix = string[0\
    \ .. length - longest_palindrome_length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacb')\n    1\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    auto length = string.length;\n\
    \    if (length <= 1)\n        return 0;\n    auto longest_palindrome_suffix_length\
    \ = 0;\n    for (auto i = 0; i < length; i++) \n    {\n        if (is_palindrome(string[i..$]))\
    \ \n        {\n            longest_palindrome_suffix_length = length - i;\n  \
    \          break;\n        }\n    }\n    return longest_palindrome_suffix_length;\n\
    }\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n\
    \    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n    true\n\
    \    >>> is_palindrome('aba')\n    true\n    >>> is_palindrome('abba')\n    true\n\
    \    >>> is_palindrome('ab')\n    false\n    >>> is_palindrome('abc')\n    false\n\
    */", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    return string ~ reverse(string[0..$-longest_palindrome_suffix.length]);\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'catacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'catacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n \
    \   'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'catacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'catacatacatacatac'\n    >>> longest", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n*/\nstring\
    \ longest_palindrome_suffix_of(string string) \n{\n    auto length = string.length;\n\
    \    foreach (i; 0..length) \n    {\n        if (is_palindrome(string[$-i..$]))\
    \ \n        {\n            return string[$-i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('cat')\n    false\n    >>> is_palindrome('cata')\n\
    \    false\n    >>> is_palindrome('cattac')\n    true\n*/", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the length of the longest\
    \ palindromic suffix of a supplied string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacac')\n    6\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    auto string_length\
    \ = string.length;\n    if (string_length == 0)\n        return 0;\n    if (string_length\
    \ == 1)\n        return 1;\n    auto longest_palindrome_suffix_length = 0;\n \
    \   for (auto i = 0; i < string_length; i++) \n    {\n        auto is_palindrome\
    \ = true;\n        for (auto j = 0; j < i; j++) \n        {\n            if (string[j]\
    \ != string[string_length - i + j]) \n            {\n                is_palindrome\
    \ = false;\n                break;\n            }\n        }\n        if (is_palindrome)\
    \ \n        {\n            longest_palindrome_suffix_length = i;\n        }\n\
    \    }\n    return longest_palindrome_suffix_length;\n}\n/*\n Find the length\
    \ of the longest palindromic prefix of a supplied string.\n    >>> longest_palindrome_prefix_length('')\n\
    \    0\n    >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    1\n    >>> longest_palindrome_prefix_length('catac')", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n}",
  "{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n \
    \   if (string.length < 2)\n        return string;\n    auto longest_palindrome_suffix_of_prefix\
    \ = longest_palindrome_suffix_of(string[0..$-1]);\n    if (string[$-1] == string[$-1-longest_palindrome_suffix_of_prefix.length])\n\
    \        return string[$-1-longest_palindrome_suffix_of_prefix.length..$-1] ~\
    \ longest_palindrome_suffix_of_prefix;\n    else\n        return longest_palindrome_suffix_of_prefix;\n\
    }\n/*\n Find the longest palindrome prefix of a string.\n    >>> longest_palindrome_prefix_of('')\n\
    \    ''\n    >>> longest_palindrome_prefix_of('cat')\n    'c'\n    >>> longest_palindrome_prefix_of('cata')\n\
    \    'ca'\n    >>> longest_palindrome_prefix_of('catac')\n    'catac'\n    >>>\
    \ longest_palindrome_prefix_of('cataca')", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    // Find the longest palindromic suffix.\n  \
    \  auto suffix = string.dup;\n    auto suffix_len = string.length;\n    while\
    \ (suffix_len > 0) {\n        if (suffix.isPalindrome) {\n            break;\n\
    \        }\n        suffix.popFront;\n        --suffix_len;\n    }\n    // Append\
    \ reverse of the prefix to the end of the string.\n    auto prefix = string[0\
    \ .. $ - suffix_len].dup;\n    prefix.reverse;\n    return string ~ prefix;\n}",
  "{\n    auto suffix = longest_palindromic_suffix(string);\n    auto prefix = string[0..$-suffix.length];\n\
    \    return prefix ~ reverse(prefix) ~ suffix;\n}", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto is_palindrome = (string\
    \ s) {\n        return s == s.dup.reverse;\n    };\n    auto longest_palindrome_suffix\
    \ = (string s) {\n        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[i\
    \ .. $])) {\n                return s[i .. $];\n            }\n        }\n   \
    \     return \"\";\n    };\n    auto longest_palindrome_prefix = (string s) {\n\
    \        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[0 .. i]))\
    \ {\n                return s[0 .. i];\n            }\n        }\n        return\
    \ \"\";\n    };\n    if (string.length == 0) {\n        return \"\";\n    }\n\
    \    auto palindrome_suffix = longest_palindrome_suffix(string);\n    if (palindrome_suffix.length\
    \ == string.length) {\n        return string;\n    }\n    auto palindrome_prefix\
    \ = longest_palindrome_prefix(string[0 .. $ - palindrome_suffix.length]);\n  \
    \  return string ~ palindrome_prefix.dup.reverse;\n}", "{\n    auto len = string.length;\n\
    \    if (len == 0)\n        return string;\n    auto suffix = string[0 .. len];\n\
    \    while (!is_palindrome(suffix))\n        suffix = suffix[1 .. $];\n    return\
    \ string ~ reverse(string[0 .. len - suffix.length]);\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto len = string.length;\n\
    \    if (len <= 1)\n        return string;\n    auto suffix = string[0..len];\n\
    \    while (suffix.length > 0)\n    {\n        if (is_palindrome(suffix))\n  \
    \          break;\n        suffix = suffix[1..$];\n    }\n    auto prefix = string[0..len\
    \ - suffix.length];\n    return string ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    if (string.empty)\n       \
    \ return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacatac')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    7\n    >>> longest_palindrome_suffix_length('catacatacatac')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    11\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatac')\n \
    \   15\n    >>> longest_palindrome_suffix_length('catacatacatacatacataca')\n \
    \   15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatacat')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacatacatac')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatac", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto is_palindrome = (string\
    \ s) {\n        return s == s.dup.reverse;\n    };\n    auto longest_palindrome_suffix\
    \ = (string s) {\n        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[i\
    \ .. $])) {\n                return s[i .. $];\n            }\n        }\n   \
    \     return \"\";\n    };\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    if (palindrome_suffix.length == string.length) {\n        return string;\n\
    \    }\n    return string ~ string[0 .. $ - palindrome_suffix.length].dup.reverse;\n\
    }", "{\n    auto suffix = longest_palindromic_suffix(string);\n    auto prefix\
    \ = string[0..$-suffix.length];\n    return string ~ reverse(prefix);\n}", "{\n\
    \    string result;\n    int length = string.length;\n    int i = 0;\n    int\
    \ j = length - 1;\n    while (i < j) \n    {\n        if (string[i] != string[j])\
    \ \n        {\n            break;\n        }\n        i++;\n        j--;\n   \
    \ }\n    if (i >= j) \n    {\n        return string;\n    }\n    result = string[0..i]\
    \ + string[j..$];\n    result = result.reverse;\n    result ~= string;\n    return\
    \ result;\n}", "{\n    auto longest_palindrome_postfix = longest_palindrome_substring(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_postfix.length];\n    return\
    \ string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome substring in a\
    \ string.\n    >>> longest_palindrome_substring('')\n    ''\n    >>> longest_palindrome_substring('cat')\n\
    \    'c'\n    >>> longest_palindrome_substring('cata')\n    'ata'\n    >>> longest_palindrome_substring('catac')\n\
    \    'catac'\n    >>> longest_palindrome_substring('catacata')\n    'atacata'\n\
    \    >>> longest_palindrome_substring('catacatac')\n    'catacatac'\n    >>> longest_palindrome_substring('catacataca')\n\
    \    'atacataca'\n    >>> longest_palindrome_substring('catacatacat')\n    'atacataca'\n\
    \    >>> longest_palindrome_substring('catacatacata')\n    'atacatacata'\n   \
    \ >>> longest_palindrome_substring('catacatacatac')\n    'atacatacata'\n    >>>\
    \ longest_palindrome_substring('catacatacataca')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_substring('catacatacatacat')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_substring('catacatacatacata')\n    'atacatacatacata'\n  \
    \  >>> longest_palindrome_substring('catacatacatacatac')\n    'atacatacatacata'\n\
    \    >>> longest_palindrome_substring('catacatacatacataca')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_substring('catacatacatacatacat')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_substring('catacatacatac", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    // Find the longest palindromic\
    \ suffix.\n    auto suffix = longest_palindromic_suffix(string);\n    // Append\
    \ the reverse of the prefix to the end of the string.\n    return string ~ reverse(string[0\
    \ .. $ - suffix.length]);\n}", "{\n    auto len = string.length;\n    if (len\
    \ == 0)\n        return \"\";\n    auto prefix = string[0 .. len / 2];\n    auto\
    \ suffix = string[len / 2 .. len];\n    if (prefix == suffix[$ - 1 .. $])\n  \
    \      return string;\n    auto longest_palindrome = longest_palindrome_suffix(suffix);\n\
    \    return string ~ suffix[0 .. longest_palindrome].reverse;\n}", "{\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n    auto\
    \ prefix = string[0..$-longest_palindrome_suffix.length];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}", "{\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n    return\
    \ string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n}\n/*\n Find the\
    \ longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    5\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacataca')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    9\n    >>> longest_palindrome_suffix_length('catacatacatac')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacataca')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacat')\n    13\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacataca')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n   \
    \ 17\n    >>> longest_palindrome_suffix_length('catacatacatacatacatac')\n    19\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatacataca')\n    19\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatacatacat')\n    21\n\
    \    >>> longest_palindrome_suffix_length('catacatacat", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto length = string.length;\n\
    \    if (length == 0) \n    {\n        return string;\n    }\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    if (longest_palindrome_suffix\
    \ == length) \n    {\n        return string;\n    }\n    return string ~ string[0..$-longest_palindrome_suffix].reverse;\n\
    }\n/*\n    Find the length of the longest palindromic suffix of a string.\n  \
    \  >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0) \n    {\n        return 0;\n \
    \   }\n    auto half_length = length / 2;\n    for (size_t i = 0; i < half_length;\
    \ i++) \n    {\n        if (string[i] != string[$-i - 1]) \n        {\n      \
    \      return i;\n        }\n    }\n    return length;\n}\n/*\n    Find the length\
    \ of the longest palindromic prefix of a string.\n    >>> longest_palindrome_prefix_length('')\n\
    \    0\n    >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    0\n    >>> longest_palindrome_prefix_length('catac')\n    2\n*/\nsize_t longest_palindrome_prefix_length(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) \n    {\n\
    \        return 0;\n    }\n    auto half_length = length / 2;\n    for (size_t\
    \ i = 0; i < half_length; i++) \n    {\n        if", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto length = string.length;\n\
    \    if (length == 0) \n    {\n        return string;\n    }\n    auto prefix_length\
    \ = length;\n    while (prefix_length > 0) \n    {\n        if (string[0 .. prefix_length]\
    \ == string[$ - prefix_length .. $]) \n        {\n            break;\n       \
    \ }\n        prefix_length--;\n    }\n    return string ~ string[$ - prefix_length\
    \ .. $].idup.reverse;\n}", "{\n    auto len = string.length;\n    if (len == 0)\
    \ \n    {\n        return string;\n    }\n    auto longest_palindrome_suffix =\
    \ longest_palindrome_suffix_length(string);\n    auto prefix = string[0 .. len\
    \ - longest_palindrome_suffix];\n    return string ~ reverse(prefix);\n}\n/*\n\
    \ Find the length of the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacatac')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacataca')\n    7\n    >>> longest_palindrome_suffix_length('catacatacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatac')\n    11\n    >>> longest_palindrome_suffix_length('catacatacataca')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacata')\n    11\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>> longest_palindrome_suffix_length('catacatacatacataca')\n\
    \    15\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n   \
    \ 15", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    string rev = string.dup.reverse;\n    string\
    \ rev_prefix = rev[0..$-1];\n    string prefix = string[0..$-1];\n    string postfix\
    \ = string[$-1..$];\n    string postfix_rev = postfix.dup.reverse;\n    while\
    \ (prefix.length > 0 && postfix_rev != prefix) \n    {\n        postfix = postfix\
    \ ~ postfix_rev[0..1];\n        postfix_rev = postfix_rev[1..$];\n        prefix\
    \ = prefix[0..$-1];\n    }\n    return string ~ rev_prefix[$-postfix.length..$];\n\
    }", "{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. $ - i])) {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n        return \"\";\n    };\n    return\
    \ string ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\n/*\n\
    \ Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome('')\n   \
    \ ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n*/\nstring make_longest_palindrome(string string) \n{\n  \
    \  auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n   \
    \ };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i; 0\
    \ .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n              \
    \  return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. $ - i])) {\n                return s[0\
    \ .. $ - i];\n            }\n        }\n", "{\n    if (string.length == 0) \n\
    \    {\n        return string;\n    }\n    auto palindrome_length = longest_palindrome_length(string);\n\
    \    auto prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n    auto\
    \ prefix = string[0..$-palindrome_suffix.length];\n    return string ~ reverse(prefix);\n\
    }\n/*\n Find the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix('')\n\
    \    ''\n    >>> longest_palindrome_suffix('cat')\n    ''\n    >>> longest_palindrome_suffix('cata')\n\
    \    'a'\n    >>> longest_palindrome_suffix('catac')\n    'catac'\n    >>> longest_palindrome_suffix('cataca')\n\
    \    'aca'\n    >>> longest_palindrome_suffix('catacat')\n    'atacat'\n    >>>\
    \ longest_palindrome_suffix('catacata')\n    'atacat'\n*/\nstring longest_palindrome_suffix(string\
    \ string) \n{\n    if (string.length < 2) \n    {\n        return \"\";\n    }\n\
    \    auto length = string.length;\n    auto half_length = length / 2;\n    auto\
    \ first_half = string[0..half_length];\n    auto second_half = string[$-half_length..$];\n\
    \    if (first_half == reverse(second_half)) \n    {\n        return string;\n\
    \    }\n    auto first_suffix = longest_palindrome_suffix(first_half);\n    auto\
    \ second_suffix = longest_palindrome_suffix(second_half);\n    return first_suffix.length\
    \ > second_suffix.length ? first_suffix : second_suffix;\n}\n/*\n Find the longest\
    \ palindromic prefix of a string.\n    >>> longest_palindrome_prefix('')\n   \
    \ ''\n    >>> longest_palindrome_prefix('cat')\n    ''\n    >>> longest_palindrome_prefix('acta')\n\
    \    'a'\n    >>> longest_palindrome_prefix('catac')\n    'catac'\n    >>> longest_palindrome_prefix('acataca')\n\
    \    'aca'\n    >>> longest_pal", "{\n    auto len = string.length;\n    if (len\
    \ == 0)\n        return string;\n    auto suffix = string[0 .. len];\n    while\
    \ (suffix.length > 0)\n    {\n        if (suffix == suffix.dup.reverse)\n    \
    \        break;\n        suffix = suffix[1 .. $];\n    }\n    return string ~\
    \ suffix.dup.reverse[0 .. len - suffix.length];\n}", "{\n    string result = string;\n\
    \    size_t length = string.length;\n    if (length == 0)\n        return result;\n\
    \    size_t suffix_length = length;\n    while (suffix_length > 0) {\n       \
    \ if (is_palindrome(string[0 .. suffix_length]))\n            break;\n       \
    \ --suffix_length;\n    }\n    result ~= reverse(string[suffix_length .. length]);\n\
    \    return result;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}", "{\n    auto len = string.length;\n    if (len == 0)\n\
    \        return string;\n    auto max_len = len;\n    for (int i = 0; i < len;\
    \ i++)\n    {\n        if (string[i..$] == string[$-i..$])\n        {\n      \
    \      max_len = i;\n            break;\n        }\n    }\n    return string ~\
    \ string[$-max_len..$].dup.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n    Find the longest suffix of a\
    \ string that is a palindrome.\n    >>> longest_palindrome_suffix_of('')\n   \
    \ ''\n    >>> longest_palindrome_suffix_of('cat')\n    't'\n    >>> longest_palindrome_suffix_of('cata')\n\
    \    'ata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n    auto\
    \ length = string.length;\n    for (auto i = length; i > 0; i--) \n    {\n   \
    \     auto suffix = string[$-i..$];\n        if (is_palindrome(suffix)) \n   \
    \     {\n            return suffix;\n        }\n    }\n    return \"\";\n}\n/*\n\
    \    Check if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n\
    \    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('cat')\n    false\n\
    \    >>> is_palindrome('cata')\n    true\n*/", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto len = string.length;\n\
    \    if (len == 0) return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == len) return string;\n    return string ~\
    \ string[0..$-longest_palindrome_suffix].dup.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto len = string.length;\n\
    \    if (len == 0)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    if (longest_palindrome_suffix\
    \ == len)\n        return string;\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the length of the longest\
    \ palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacatac')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacataca')\n    7\n    >>> longest_palindrome_suffix_length('catacatacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n    7\n*/\n\
    size_t longest_palindrome_suffix_length(string string) \n{\n    auto len = string.length;\n\
    \    if (len == 0)\n        return 0;\n    auto i = len - 1;\n    while (i > 0)\
    \ \n    {\n        if (string[0..i] == reverse(string[$-i..$]))\n            return\
    \ i;\n        i--;\n    }\n    return 0;\n}\n/*\n Find the longest palindromic\
    \ substring in a string.\n    >>> longest_palindrome_substring('')\n    ''\n \
    \   >>> longest_palindrome_substring('cat')\n    'c'\n   ", "{\n    string result\
    \ = string;\n    auto length = string.length;\n    if (length <= 1)\n        return\
    \ result;\n    // Find the longest palindromic suffix.\n    auto suffix = string[$-length..$];\n\
    \    while (suffix.length > 0) \n    {\n        if (is_palindrome(suffix))\n \
    \           break;\n        suffix = suffix[1..$];\n    }\n    // Append the reverse\
    \ of the prefix to the end of the string.\n    result ~= string[0..$-suffix.length].dup.reverse;\n\
    \    return result;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_tuple(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix[1]];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix of a string.\n\
    \    >>> longest_palindrome_suffix_tuple('')\n    (0, 0)\n    >>> longest_palindrome_suffix_tuple('cat')\n\
    \    (0, 0)\n    >>> longest_palindrome_suffix_tuple('cata')\n    (1, 3)\n   \
    \ >>> longest_palindrome_suffix_tuple('catac')\n    (1, 3)\n    >>> longest_palindrome_suffix_tuple('cataca')\n\
    \    (1, 3)\n    >>> longest_palindrome_suffix_tuple('catacat')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacata')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatac')\n\
    \    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacataca')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacatacat')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacata')\n\
    \    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacatac')\n    (3,\
    \ 5)\n    >>> longest_palindrome_suffix_tuple('catacatacataca')\n    (3, 5)\n\
    \    >>> longest_palindrome_suffix_tuple('catacatacatacat')\n    (3, 5)\n    >>>\
    \ longest_palindrome_suffix_tuple('catacatacatacata')\n    (3, 5)\n    >>> longest_palindrome_suffix_tuple('catacatacatacatac')\n\
    \    (3, 5)", "{\n    string result = string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    if (longest_palindrome_suffix.length\
    \ < string.length)\n    {\n        auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \        result ~= prefix.reverse;\n    }\n    return result;\n}", "{\n    auto\
    \ palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n    Find the longest palindromic\
    \ suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n \
    \   >>> longest_palindrome_suffix_length('cat')\n    1\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catac')\n    5\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacat')\n    7\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatac')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacataca')\n    9\n    >>> longest_palindrome_suffix_length('catacatacat')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacata')\n    11\n  \
    \  >>> longest_palindrome_suffix_length('catacatacatac')\n    13\n    >>> longest_palindrome_suffix_length('catacatacataca')\n\
    \    13\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n    15\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacata')\n    15\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacatac')\n    17\n    >>> longest_palindrome_suffix_length('catacatacatacataca')\n\
    \    17\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n   \
    \ 19\n    >>> longest_palindrome_suffix_length('catacatacatacatacata')\n    19\n\
    \    >>>", "{\n    auto suffix = string.dup;\n    auto prefix = string.dup;\n\
    \    reverse(prefix);\n    int i = 0;\n    for (; i < suffix.length; ++i) {\n\
    \        if (suffix[i..$] == prefix[0..$-i]) {\n            break;\n        }\n\
    \    }\n    return string ~ prefix[0..$-i];\n}", "{\n    auto len = string.length;\n\
    \    if (len <= 1) return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    return string ~ string[0 .. len - longest_palindrome_suffix].dup.reverse;\n\
    }", "{\n    auto length = string.length;\n    auto prefix_length = length;\n \
    \   while (prefix_length > 0) \n    {\n        if (string[0 .. prefix_length]\
    \ == string[$ - prefix_length .. $].retro) \n        {\n            break;\n \
    \       }\n        prefix_length--;\n    }\n    return string ~ string[$ - prefix_length\
    \ .. $].retro;\n}\n/*\n Find the shortest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n*/\nstring make_palindrome(string string) \n{\n    auto length\
    \ = string.length;\n    auto prefix_length = length;\n    while (prefix_length\
    \ > 0) \n    {\n        if (string[0 .. prefix_length] == string[$ - prefix_length\
    \ .. $].retro) \n        {\n            break;\n        }\n        prefix_length--;\n\
    \    }\n    return string ~ string[$ - prefix_length .. $].retro;\n}\n/*\n Find\
    \ the shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto length = string.length;\n    auto prefix_length = length;\n\
    \    while (prefix_length > 0) \n    {\n        if (string[0 .. prefix_", "{\n\
    \    auto palindrome_length = longest_palindrome_length(string);\n    auto prefix\
    \ = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n}",
  "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}", "{\n    auto\
    \ len = string.length;\n    if (len == 0)\n        return string;\n    auto suffix\
    \ = string[$-len..$];\n    auto prefix = string[0..$-len];\n    auto palindrome\
    \ = suffix;\n    for (auto i = 0; i < len; i++)\n    {\n        if (suffix[i..$]\
    \ == prefix[0..$-i])\n        {\n            palindrome = suffix[0..i] ~ prefix[$-i..$];\n\
    \            break;\n        }\n    }\n    return string ~ palindrome[$-1..0];\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}", "{\n    auto\
    \ palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix('')\n    ''\n    >>> longest_palindrome_suffix('cat')\n\
    \    ''\n    >>> longest_palindrome_suffix('cata')\n    'a'\n    >>> longest_palindrome_suffix('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix('cataca')\n    'aca'\n    >>>\
    \ longest_palindrome_suffix('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix('catacata')\n\
    \    'atacat'\n    >>> longest_palindrome_suffix('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix('catacataca')\n    'atacataca'\n    >>> longest_palindrome_suffix('catacatacat')\n\
    \    'atacatacat'\n    >>> longest_palindrome_suffix('catacatacata')\n    'atacatacat'\n\
    \    >>> longest_palindrome_suffix('catacatacatac')\n    'catacatacatac'\n   \
    \ >>> longest_palindrome_suffix('catacatacataca')\n    'atacatacataca'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacat')\n    'atacatacatacat'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacata')\n    'atacatacatacat'\n    >>>\
    \ longest_palindrome_suffix('catacatacatacatac')\n    'catacatacatacatac'\n  \
    \  >>> longest_palindrome_suffix('catacatacatacataca')\n    'atacatacatacataca'\n\
    \    >>> longest_palindrome_suffix('", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto length = string.length;\n    auto prefix\
    \ = string[0 .. length / 2];\n    auto suffix = string[length / 2 .. $];\n   \
    \ auto reversed_prefix = suffix.dup;\n    reversed_prefix.reverse;\n    if (suffix.length\
    \ > prefix.length)\n    {\n        suffix = suffix[1 .. $];\n    }\n    if (suffix\
    \ == reversed_prefix)\n    {\n        return string;\n    }\n    else\n    {\n\
    \        return string ~ reversed_prefix;\n    }\n}", "{\n    auto result = string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix_to_append = string[0..$-longest_palindrome_suffix.length];\n\
    \    result ~= prefix_to_append.reverse;\n    return result;\n}", "{\n    auto\
    \ is_palindrome = (string s) {\n        return s == s.dup.reverse;\n    };\n \
    \   auto longest_palindrome_suffix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[i .. $])) {\n                return s[i ..\
    \ $];\n            }\n        }\n        return \"\";\n    };\n    auto longest_palindrome_prefix\
    \ = (string s) {\n        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[0\
    \ .. i])) {\n                return s[0 .. i];\n            }\n        }\n   \
    \     return \"\";\n    };\n    return string ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n\
    }\n/*\n    >>> make_palindrome_2('')\n    ''\n    >>> make_palindrome_2('cat')\n\
    \    'catac'\n    >>> make_palindrome_2('cata')\n    'catac'\n*/\nstring make_palindrome_2(string\
    \ string) \n{\n    auto is_palindrome = (string s) {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s) {\n        foreach (i;\
    \ 0 .. s.length) {\n            if (is_palindrome(s[i .. $])) {\n            \
    \    return s[i .. $];\n            }\n        }\n        return \"\";\n    };\n\
    \    auto longest_palindrome_prefix = (string s) {\n        foreach (i; 0 .. s.length)\
    \ {\n            if (is_palindrome(s[0 .. i])) {\n                return s[0 ..\
    \ i];\n            }\n        }\n        return \"\";\n    };\n    return string\
    \ ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n}\n/*\n    >>>\
    \ make_palindrome_3('')\n    ''\n    >>> make_palindrome_3('cat')\n    'catac'",
  "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix\
    \ = string[0..$-palindrome_suffix.length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto n = string.length;\n    auto suffix_length = n;\n    while (suffix_length\
    \ > 0) \n    {\n        auto prefix_length = n - suffix_length;\n        auto\
    \ suffix = string[prefix_length .. n];\n        if (suffix == suffix.reverse)\
    \ \n        {\n            return string ~ string[0 .. prefix_length].reverse;\n\
    \        }\n        suffix_length--;\n    }\n    return string;\n}", "{\n    auto\
    \ palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto l = string.length;\n \
    \   if (l <= 1) \n    {\n        return string;\n    }\n    auto prefix = string[0\
    \ .. l / 2];\n    auto suffix = string[l / 2 .. $];\n    if (suffix.length > prefix.length)\
    \ \n    {\n        suffix = suffix[1 .. $];\n    }\n    auto suffix_palindrome\
    \ = longest_palindrome(suffix);\n    return string ~ suffix_palindrome.reverse\
    \ ~ suffix_palindrome;\n}\n/*\n Find the longest palindrome in a string.\n   \
    \ >>> longest_palindrome('')\n    ''\n    >>> longest_palindrome('a')\n    'a'\n\
    \    >>> longest_palindrome('aa')\n    'aa'\n    >>> longest_palindrome('ab')\n\
    \    'a'\n    >>> longest_palindrome('aba')\n    'aba'\n    >>> longest_palindrome('abba')\n\
    \    'abba'\n    >>> longest_palindrome('abbba')\n    'abbba'\n    >>> longest_palindrome('abbbba')\n\
    \    'abbbba'\n    >>> longest_palindrome('abbbbba')\n    'abbbbba'\n    >>> longest_palindrome('abbbbbba')\n\
    \    'abbbbbba'\n    >>> longest_palindrome('abbbbbbba')\n    'abbbbbbba'\n  \
    \  >>> longest_palindrome('abbbbbbbba')\n    'abbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbba')\n\
    \    'abbbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbbba')\n    'abbbbbbbbbba'\n\
    \    >>> longest_palindrome('abbbbbbbbbbba')\n    'abbbbbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbbbbba')\n\
    \    'abbbbbbbbbbbba'\n    >>> longest_palindrome('abbbbbbbbbbbbba')\n    'abbbbbbbbbbbbba'\n\
    \    >>> longest_palindrome('abbbbbbbbbbbbbba')\n    '", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    return string ~ string[0..$-palindrome_suffix].dup.reverse;\n}", "{\n   \
    \ auto len = string.length;\n    if (len == 0)\n        return string;\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n    auto\
    \ prefix = string[0..$-longest_palindrome_suffix];\n    return string ~ reverse(prefix);\n\
    }\n/*\n Find the length of the longest palindromic suffix of a string.\n    >>>\
    \ longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    1\n    >>> longest_palindrome_suffix_length('cata')\n    3\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('cataca')\n    5\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacata')\n    7\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    9\n    >>> longest_palindrome_suffix_length('catacataca')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    9\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    13\n \
    \   >>> longest_palindrome_suffix_length('catacatacataca')\n    13\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    13\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    15\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    17\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    17\n    >>> longest_palindrome_suffix_length('catacatacatacatacat')\n\
    \    17\n    >>> longest_pal", "{\n    string rev = string.dup.reverse;\n    string\
    \ result = string;\n    foreach(i; 0 .. string.length) \n    {\n        if(rev[i\
    \ .. $] == string[0 .. string.length - i]) \n        {\n            result ~=\
    \ rev[0 .. i];\n            break;\n        }\n    }\n    return result;\n}\n\
    /*\n    Find the longest palindromic substring of a supplied string.\n    >>>\
    \ longest_palindrome('')\n    ''\n    >>> longest_palindrome('cat')\n    'c'\n\
    \    >>> longest_palindrome('cata')\n    'ata'\n    >>> longest_palindrome('catac')\n\
    \    'atac'\n    >>> longest_palindrome('catacata')\n    'atacata'\n    >>> longest_palindrome('catacatac')\n\
    \    'atacata'\n    >>> longest_palindrome('catacatacatac')\n    'atacatacata'\n\
    \    >>> longest_palindrome('catacatacatacatac')\n    'atacatacatacata'\n    >>>\
    \ longest_palindrome('catacatacatacatacatac')\n    'atacatacatacatacata'\n   \
    \ >>> longest_palindrome('catacatacatacatacatacatac')\n    'atacatacatacatacatacata'\n\
    \    >>> longest_palindrome('catacatacatacatacatacatacatac')\n    'atacatacatacatacatacatacata'\n\
    \    >>> longest_palindrome('catacatacatacatacatacatacatacatac')\n    'atacatacatacatacatacatacatacata'\n\
    \    >>> longest_palindrome('catacatacatacatacatacatacatacatacatac')\n    'atacatacatacatacatacatacatacatacata'\n\
    \    >>> longest_palindrome('catacatacatacatacatacatacatacatacatacatac')\n   \
    \ 'atacatacat", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto suffix =\
    \ string[$-longest_palindrome_suffix..$];\n    return string ~ reverse(prefix);\n\
    }\n/*\n    Find the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacat')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatac')\n    11\n*/\nsize_t longest_palindrome_suffix_length(string\
    \ string) \n{\n    if (string.length < 2) \n    {\n        return 0;\n    }\n\
    \    auto reversed = reverse(string);\n    auto longest_common_prefix_length =\
    \ longest_common_prefix_length(string, reversed);\n    return string.length -\
    \ longest_common_prefix_length;\n}\n/*\n    Find the longest common prefix of\
    \ two strings.\n    >>> longest_common_prefix_length('', '')\n    0\n    >>> longest_common_prefix_length('',\
    \ 'a')\n    0\n    >>> longest_common_prefix_length('a', '')\n    0\n    >>> longest_common_prefix_length('a',\
    \ 'a')\n    1\n    >>> longest_common_prefix_length('a', 'b')\n    0\n    >>>\
    \ longest_common_prefix_length('ab', 'a')\n    1\n    >>> longest_common_prefix_length('",
  "{\n    auto prefix = string.take(string.length - string.find_last_of(string.dropOne));\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto is_palindrome = (string\
    \ s) {\n        return s == s.dup.reverse;\n    };\n    auto longest_palindrome_suffix\
    \ = (string s) {\n        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[i\
    \ .. $])) {\n                return s[i .. $];\n            }\n        }\n   \
    \     return \"\";\n    };\n    auto longest_palindrome_prefix = (string s) {\n\
    \        foreach (i; 0 .. s.length) {\n            if (is_palindrome(s[0 .. $\
    \ - i])) {\n                return s[0 .. $ - i];\n            }\n        }\n\
    \        return \"\";\n    };\n    return string ~ longest_palindrome_prefix(string.dup.reverse).dup.reverse;\n\
    }", "{\n    if (string.empty) \n    {\n        return string;\n    }\n    auto\
    \ suffix = string.suffixArray;\n    auto lcp = string.lcpArray;\n    auto max_lcp\
    \ = 0;\n    auto max_lcp_index = 0;\n    for (size_t i = 0; i < lcp.length; i++)\
    \ \n    {\n        if (lcp[i] > max_lcp) \n        {\n            max_lcp = lcp[i];\n\
    \            max_lcp_index = i;\n        }\n    }\n    auto prefix = string[0\
    \ .. $ - max_lcp];\n    return string ~ prefix.reverse;\n}", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    if (string.empty)\n       \
    \ return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n    Find the longest palindrome suffix of\
    \ a string.\n    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n*/\nstring\
    \ longest_palindrome_suffix_of(string string) \n{\n    auto length = string.length;\n\
    \    if (length == 0) \n    {\n        return \"\";\n    }\n    auto suffix_length\
    \ = length;\n    while (suffix_length > 0) \n    {\n        auto suffix = string[$-suffix_length..$];\n\
    \        if (is_palindrome(suffix)) \n        {\n            return suffix;\n\
    \        }\n        suffix_length--;\n    }\n    return \"\";\n}\n/*\n    Check\
    \ if a string is a palindrome.\n    >>> is_palindrome('')\n    true\n    >>> is_palindrome('cat')\n\
    \    false\n    >>> is_palindrome('cata')\n    false\n    >>> is_palindrome('civic')\n\
    \    true\n    >>> is_palindrome('racecar')\n    true\n*/", "{\n    string rev\
    \ = string.dup.reverse;\n    string palindrome = string ~ rev;\n    string longest_palindrome\
    \ = \"\";\n    foreach(i; 0 .. string.length) \n    {\n        string suffix =\
    \ palindrome[i .. $];\n        if(suffix.isPalindrome) \n        {\n         \
    \   longest_palindrome = suffix;\n        }\n    }\n    return string ~ longest_palindrome.dup.reverse[string.length\
    \ .. $];\n}", "{\n    string postfix = string.dup;\n    string prefix = \"\";\n\
    \    while(!is_palindrome(postfix))\n    {\n        prefix = postfix[0] ~ prefix;\n\
    \        postfix = postfix[1..$];\n    }\n    return string ~ prefix;\n}", "{\n\
    \    string longest_palindrome = longest_palindrome_postfix(string);\n    return\
    \ string ~ longest_palindrome.idup;\n}", "{\n    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    auto longest_palindrome_suffix =\
    \ longest_palindrome_suffix_of(string);\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string ~ string[0..$-longest_palindrome_suffix.length].dup.reverse;\n}", "{\n\
    \    int n = string.length;\n    if (n == 0)\n        return string;\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n            break;\n        i++;\n        j--;\n    }\n    if\
    \ (i == j)\n        return string;\n    string prefix = string[0..i];\n    string\
    \ suffix = string[i..$];\n    return prefix ~ make_palindrome(suffix) ~ prefix.dup.retro;\n\
    }", "{\n    auto suffix_length = longest_palindromic_suffix(string);\n    auto\
    \ prefix = string[0..$-suffix_length];\n    return string ~ reverse(prefix);\n\
    }\n/*\n Find the length of the longest palindromic suffix of a string.\n    >>>\
    \ longest_palindromic_suffix('')\n    0\n    >>> longest_palindromic_suffix('cat')\n\
    \    0\n    >>> longest_palindromic_suffix('cata')\n    1\n    >>> longest_palindromic_suffix('catac')\n\
    \    3\n    >>> longest_palindromic_suffix('catacata')\n    3\n*/\nsize_t longest_palindromic_suffix(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) return 0;\n\
    \    auto suffix_length = 0;\n    for (auto i = 0; i < length; i++) \n    {\n\
    \        if (string[0..$-i] == reverse(string[i..$])) \n        {\n          \
    \  suffix_length = i;\n            break;\n        }\n    }\n    return suffix_length;\n\
    }\n/*\n Find the length of the longest palindromic prefix of a string.\n    >>>\
    \ longest_palindromic_prefix('')\n    0\n    >>> longest_palindromic_prefix('cat')\n\
    \    0\n    >>> longest_palindromic_prefix('cata')\n    0\n    >>> longest_palindromic_prefix('catac')\n\
    \    2\n    >>> longest_palindromic_prefix('catacata')\n    2\n*/\nsize_t longest_palindromic_prefix(string\
    \ string) \n{\n    auto length = string.length;\n    if (length == 0) return 0;\n\
    \    auto prefix_length = 0;\n    for (auto i = 0; i < length; i++) \n    {\n\
    \        if (string[i..$] == reverse(string[0..$-i])) \n        {\n          \
    \  prefix_length = i;\n            break;\n        }\n    }\n    return prefix_length;\n\
    }", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n    auto\
    \ prefix = string[0..$-palindrome_suffix.length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto is_palindrome = (string s)\n    {\n        return s == s.dup.reverse;\n\
    \    };\n    auto longest_palindrome_suffix = (string s)\n    {\n        foreach\
    \ (i; 0 .. s.length)\n        {\n            if (is_palindrome(s[i .. $]))\n \
    \           {\n                return s[i .. $];\n            }\n        }\n \
    \       return \"\";\n    };\n    auto longest_palindrome_prefix = (string s)\n\
    \    {\n        foreach (i; 0 .. s.length)\n        {\n            if (is_palindrome(s[0\
    \ .. $ - i]))\n            {\n                return s[0 .. $ - i];\n        \
    \    }\n        }\n        return \"\";\n    };\n    return string ~ longest_palindrome_suffix(string).dup.reverse;\n\
    }\n/*\n Find the shortest palindrome that begins with a supplied string.\n   \
    \ Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \n*/\nstring make_palindrome(string string) \n{\n    auto is_palindrome\
    \ = (string s)\n    {\n        return s == s.dup.reverse;\n    };\n    auto longest_palindrome_suffix\
    \ = (string s)\n    {\n        foreach (i; 0 .. s.length)\n        {\n       \
    \     if (is_palindrome(s[i .. $]))\n            {\n                return s[i\
    \ .. $];\n            }\n        }\n        return \"\";\n    };\n    auto longest_palindrome_prefix\
    \ = (string s)\n    {\n        foreach (i; 0 .. s.length)\n        {\n       \
    \     if (is_palindrome(s[0 .. $ - i]))", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    auto suffix = string[$-longest_palindrome_suffix..$];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}", "{\n    auto prefix = string.take(string.length\
    \ / 2);\n    auto suffix = string.drop(string.length / 2 + string.length % 2);\n\
    \    auto suffix_reverse = suffix.reverse;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(suffix);\n    return string ~ suffix_reverse.take(suffix.length\
    \ - longest_palindrome_suffix);\n}\n/*\n Find the longest palindromic suffix of\
    \ a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacataca')\n    7\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    7\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    11\n  \
    \  >>> longest_palindrome_suffix_length('catacatacataca')\n    11\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    11\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    11\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    15\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    15\n    >>> longest_palindrome_suffix_length('cat",
  "{\n    // Find the longest postfix of supplied string that is a palindrome.\n \
    \   auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix].dup.reverse;\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    string result = string;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        if(is_palindrome(string[i .. $]))\n        {\n\
    \            result ~= string[0 .. i].idup.reverse;\n            break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    auto reverse = string.dup.idup;\n\
    \    reverse.reverse;\n    auto longest_palindrome = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-longest_palindrome.length];\n    return string\
    \ ~ reverse[prefix.length..$];\n}", "{\n    auto len = string.length;\n    auto\
    \ prefix = string[0 .. len / 2];\n    auto suffix = string[len / 2 + len % 2 ..\
    \ $];\n    auto rev_prefix = reverse(prefix);\n    auto rev_suffix = reverse(suffix);\n\
    \    auto prefix_len = rev_suffix.length;\n    auto suffix_len = rev_prefix.length;\n\
    \    auto max_prefix_len = min(prefix_len, suffix_len);\n    auto max_suffix_len\
    \ = max_prefix_len;\n    while (max_prefix_len > 0) \n    {\n        if (rev_suffix[0\
    \ .. max_prefix_len] == rev_prefix[suffix_len - max_prefix_len .. $]) \n     \
    \   {\n            break;\n        }\n        max_prefix_len--;\n    }\n    return\
    \ string ~ rev_suffix[max_prefix_len .. $];\n}", "{\n    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    // The idea is to use the fact\
    \ that if we have a palindrome, then\n    // we can find the longest palindromic\
    \ suffix by simply reversing the string\n    // and finding the longest common\
    \ prefix of the reversed string and the original string.\n    // This is O(n)\
    \ operation.\n    string reversed = string.dup.reverse;\n    string longest_palindromic_suffix\
    \ = string.lcp(reversed);\n    // Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    // This is O(n)\
    \ operation.\n    return string ~ string.idup[0..$ - longest_palindromic_suffix.length].reverse;\n\
    }", "{\n    // Find the longest postfix that is a palindrome.\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_substring(string);\n    // Reverse the prefix that comes\
    \ before the palindromic suffix.\n    auto reversed_prefix = string[0..$-longest_palindrome_suffix.length].dup.reverse;\n\
    \    // Append the reversed prefix to the end of the string.\n    return string\
    \ ~ reversed_prefix;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$ - longest_palindrome_suffix].dup.reverse;\n\
    }\n/*\n    Find the length of the longest palindromic suffix of a string.\n  \
    \  >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('cataca')\n    3\n    >>> longest_palindrome_suffix_length('catacat')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacataca')\n    5\n    >>>\
    \ longest_palindrome_suffix_length('catacatacat')\n    5\n    >>> longest_palindrome_suffix_length('catacatacata')\n\
    \    5\n    >>> longest_palindrome_suffix_length('catacatacatac')\n    7\n   \
    \ >>> longest_palindrome_suffix_length('catacatacataca')\n    7\n    >>> longest_palindrome_suffix_length('catacatacatacat')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatacatacata')\n    7\n\
    \    >>> longest_palindrome_suffix_length('catacatacatacatac')\n    9\n    >>>\
    \ longest_palindrome_suffix_length('catacatacatacataca')\n    9\n    >>> longest_palindrome_suffix_length('cat",
  "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto len = string.length;\n    if (len == 0)\
    \ return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto prefix_length = string.length;\n    auto\
    \ suffix_length = string.length;\n    while (suffix_length > 0) \n    {\n    \
    \    if (string[0 .. prefix_length] == string[suffix_length .. $]) \n        {\n\
    \            break;\n        }\n        --suffix_length;\n    }\n    return string\
    \ ~ string[0 .. prefix_length - suffix_length].reverse;\n}\n/*\n Find the shortest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome_2(string\
    \ string) \n{\n    auto prefix_length = string.length;\n    auto suffix_length\
    \ = string.length;\n    while (suffix_length > 0) \n    {\n        if (string[0\
    \ .. prefix_length] == string[suffix_length .. $]) \n        {\n            break;\n\
    \        }\n        --suffix_length;\n    }\n    return string ~ string[0 .. prefix_length\
    \ - suffix_length].reverse;\n}\n/*\n Find the shortest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n\
    \    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome_3(string\
    \ string) \n{\n    auto prefix_length = string.length;\n    auto suffix_length\
    \ = string.length;\n    while (suffix_length > 0", "{\n    auto len = string.length;\n\
    \    if (len == 0) \n    {\n        return \"\";\n    }\n    auto prefix = string[0\
    \ .. len / 2];\n    auto suffix = string[len / 2 .. len];\n    auto suffix_len\
    \ = suffix.length;\n    auto prefix_len = prefix.length;\n    auto suffix_palindrome_len\
    \ = 0;\n    for (int i = 0; i < suffix_len; i++) \n    {\n        if (suffix[i]\
    \ == suffix[suffix_len - i - 1]) \n        {\n            suffix_palindrome_len++;\n\
    \        } \n        else \n        {\n            break;\n        }\n    }\n\
    \    if (suffix_palindrome_len == suffix_len) \n    {\n        return string;\n\
    \    }\n    auto prefix_palindrome_len = 0;\n    for (int i = 0; i < prefix_len;\
    \ i++) \n    {\n        if (prefix[i] == prefix[prefix_len - i - 1]) \n      \
    \  {\n            prefix_palindrome_len++;\n        } \n        else \n      \
    \  {\n            break;\n        }\n    }\n    if (prefix_palindrome_len == prefix_len)\
    \ \n    {\n        return string;\n    }\n    if (prefix_palindrome_len > suffix_palindrome_len)\
    \ \n    {\n        return string ~ string[0 .. prefix_palindrome_len - 1].reverse;\n\
    \    } \n    else \n    {\n        return string ~ string[suffix_palindrome_len\
    \ .. len - 1].reverse;\n    }\n}", "{\n    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    string postfix = longest_palindrome_postfix(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ postfix.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.",
  "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto len = string.length;\n    auto prefix_len\
    \ = len;\n    for (; prefix_len > 0; --prefix_len) \n    {\n        if (string[0\
    \ .. prefix_len] == string[$ - prefix_len .. $]) \n        {\n            break;\n\
    \        }\n    }\n    return string ~ string[$ - prefix_len .. $].reverse;\n}",
  "{\n    auto length = string.length;\n    if (length == 0)\n        return string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto prefix = string.take(string.length / 2);\n\
    \    auto suffix = string.drop(string.length / 2 + string.length % 2);\n    auto\
    \ suffix_palindrome = suffix.take(suffix.length - suffix.findLast(prefix.reverse));\n\
    \    return string ~ suffix_palindrome.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'atacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'atacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'atacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n  \
    \  'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'atacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'atacatacatacatac'\n    >>> longest", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the length of the longest\
    \ palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    1\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catac')\n    5\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    7\n    >>> longest_palindrome_suffix_length('catacatac')\n    9\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    if (string.length ==\
    \ 0) \n    {\n        return 0;\n    }\n    else \n    {\n        auto reversed_string\
    \ = reverse(string);\n        auto reversed_prefix = reversed_string[0..$-1];\n\
    \        auto prefix = string[0..$-1];\n        auto common_prefix_length = common_prefix_length(prefix,\
    \ reversed_prefix);\n        return 2 * common_prefix_length + 1;\n    }\n}\n\
    /*\n Find the length of the longest common prefix of two strings.\n    >>> common_prefix_length('',\
    \ '')\n    0\n    >>> common_prefix_length('', 'cat')\n    0\n    >>> common_prefix_length('cat',\
    \ '')\n    0\n    >>> common_prefix_length('cat', 'cat')\n    3\n    >>> common_prefix_length('cat',\
    \ 'cats')\n    3\n    >>> common_prefix_length('cat', 'caterpillar')\n    3\n\
    \    >>> common_prefix_length('caterpillar', 'cat')\n    3\n    >>> common_prefix_length('caterpillar',\
    \ 'caterpillar')\n    11\n    >>> common_prefix_length('caterpillar', 'caterpillars')\n\
    \    11\n    >>> common_", "{\n    string reversed = string.dup.reverse;\n   \
    \ string prefix = string.idup.take(string.length / 2).idup;\n    string suffix\
    \ = string.idup.drop(string.length / 2).idup;\n    string reversed_prefix = reversed.idup.take(string.length\
    \ / 2).idup;\n    string reversed_suffix = reversed.idup.drop(string.length /\
    \ 2).idup;\n    string result;\n    if (prefix == reversed_suffix) \n    {\n \
    \       result = string ~ reversed_prefix;\n    } \n    else if (suffix == reversed_prefix)\
    \ \n    {\n        result = reversed_suffix ~ string;\n    } \n    else \n   \
    \ {\n        result = string ~ reversed_prefix;\n    }\n    return result;\n}",
  "{\n    auto palindrome_length = longest_palindrome_length(string);\n    auto prefix\
    \ = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n}",
  "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}\n/*\n Find the length of the longest palindromic suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_length('')\n    0\n    >>> longest_palindrome_suffix_length('cat')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cata')\n    1\n    >>> longest_palindrome_suffix_length('catac')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacata')\n    3\n    >>> longest_palindrome_suffix_length('catacatac')\n\
    \    7\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0)\n        return 0;\n    if (length\
    \ == 1)\n        return 1;\n    auto half_length = length / 2;\n    for (size_t\
    \ i = 0; i < half_length; i++) \n    {\n        if (string[i] != string[$-1-i])\n\
    \            return 0;\n    }\n    return length;\n}\n/*\n Find the longest palindromic\
    \ substring of a string.\n    >>> longest_palindrome_substring('')\n    ''\n \
    \   >>> longest_palindrome_substring('cat')\n    'c'\n    >>> longest_palindrome_substring('cata')\n\
    \    'ata'\n    >>> longest_palindrome_substring('catac')\n    'catac'\n    >>>\
    \ longest_palindrome_substring('catacata')\n    'catacata'\n    >>> longest_palindrome_substring('catacatac')\n\
    \    'catacatac'\n*/\nstring longest_palindrome_substring(string string) \n{\n\
    \    auto length = string.length;\n    if (length == 0)\n        return \"\";\n\
    \    if (length == 1)", "{\n    auto len = string.length;\n    if (len == 0)\n\
    \        return string;\n    auto prefix_len = len;\n    while (prefix_len > 0)\n\
    \    {\n        auto prefix = string[0 .. prefix_len];\n        auto suffix =\
    \ string[len - prefix_len .. len];\n        if (prefix == suffix)\n          \
    \  break;\n        prefix_len--;\n    }\n    return string ~ string[prefix_len\
    \ .. len].reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto n = string.length;\n    if (n == 0) return\
    \ string;\n    auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n\
    \        if (suffix == suffix.reverse) break;\n        suffix = suffix[1 .. $];\n\
    \    }\n    return string ~ suffix.reverse[0 .. n - suffix.length];\n}\n/*\n Find\
    \ the shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return string;\n \
    \   auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n        if\
    \ (suffix == suffix.reverse) break;\n        suffix = suffix[1 .. $];\n    }\n\
    \    return string ~ suffix.reverse[0 .. n - suffix.length];\n}\n/*\n Find the\
    \ shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    auto n = string.length;\n    if (n == 0) return string;\n \
    \   auto suffix = string[0 .. n];\n    while (suffix.length > 0) {\n        if\
    \ (suffix == suffix.reverse) break;\n        suffix = suffix[1 ..", "{\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n    auto\
    \ prefix = string[0..$-longest_palindrome_suffix];\n    return string ~ reverse(prefix);\n\
    }", "{\n    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    // Find the longest postfix\
    \ that is a palindrome.\n    auto postfix = string.dup;\n    while (!is_palindrome(postfix))\
    \ {\n        postfix.popFront();\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    return\
    \ string ~ reverse(string[0 .. $ - postfix.length]);\n}", "{\n    auto palindrome_suffix\
    \ = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    return string ~ reverse(string[0..$-longest_palindrome_suffix]);\n}", "{\n\
    \    if (string.empty)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    // Find the longest postfix\
    \ of supplied string that is a palindrome.\n    string postfix = longest_palindrome_postfix(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ postfix.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.",
  "{\n    auto length = string.length;\n    if (length == 0)\n        return string;\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    string result = string;\n    size_t length = string.length;\n\
    \    size_t i = 0;\n    size_t j = length - 1;\n    size_t k = length - 1;\n \
    \   while (i < j) \n    {\n        if (string[i] == string[j]) \n        {\n \
    \           i++;\n            j--;\n        }\n        else \n        {\n    \
    \        i = 0;\n            k--;\n            j = k;\n        }\n    }\n    result\
    \ += string[0..k].dup.reverse;\n    return result;\n}", "{\n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    string postfix = longest_palindrome_postfix(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ reverse(string[0 .. $ -\
    \ postfix.length]);\n}", "{\n    auto len = string.length;\n    if (len == 0)\n\
    \        return string;\n    auto suffix = string[0 .. len];\n    while (suffix.length\
    \ > 0) \n    {\n        if (suffix == suffix.dup.reverse)\n            break;\n\
    \        suffix = suffix[1 .. $];\n    }\n    return string ~ suffix.dup.reverse[0\
    \ .. len - suffix.length];\n}", "{\n    auto length = string.length;\n    if (length\
    \ == 0) \n    {\n        return string;\n    }\n    // Find the longest palindromic\
    \ suffix.\n    // If the string is already a palindrome, the suffix is the whole\
    \ string.\n    // Otherwise, the suffix is the longest palindromic suffix of the\
    \ string without the first character.\n    auto suffix = string;\n    while (!is_palindrome(suffix))\
    \ \n    {\n        suffix = suffix[1 .. $];\n    }\n    // Append the reverse\
    \ of the prefix to the end of the string.\n    return string ~ reverse(string[0\
    \ .. $ - suffix.length]);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto length = string.length;\n    if (length ==\
    \ 0)\n        return string;\n    auto suffix = string.dup;\n    auto prefix =\
    \ string.dup;\n    auto prefix_length = length;\n    while (prefix_length > 0)\n\
    \    {\n        if (suffix.startsWith(prefix))\n            break;\n        suffix.popFront;\n\
    \        prefix.popBack;\n        --prefix_length;\n    }\n    if (prefix_length\
    \ == 0)\n        return string ~ string.dup.reverse;\n    return string ~ string[0..$-prefix_length].reverse;\n\
    }", "{\n    auto longest_palindrome_postfix = longest_palindrome_postfix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_postfix.length];\n    return\
    \ string ~ prefix.reverse;\n}", "{\n    auto n = string.length;\n    auto suffix_palindrome\
    \ = string[0 .. n].dup;\n    for (int i = 0; i < n; i++) \n    {\n        if (suffix_palindrome[0\
    \ .. n - i] == suffix_palindrome[i .. n].dup.retro) \n        {\n            return\
    \ string ~ string[0 .. n - i].dup.retro;\n        }\n    }\n    return string;\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n   \
    \ auto longest_palindrome_suffix = string;\n    for (size_t i = 0; i < string.length;\
    \ i++) \n    {\n        if (is_palindrome(string[i..$])) \n        {\n       \
    \     longest_palindrome_suffix = string[i..$];\n            break;\n        }\n\
    \    }\n    return longest_palindrome_suffix;\n}\n/*\n Check if a string is a\
    \ palindrome.\n    >>> is_palindrome('')\n    true\n    >>> is_palindrome('a')\n\
    \    true\n    >>> is_palindrome('aa')\n    true\n    >>> is_palindrome('aba')\n\
    \    true\n    >>> is_palindrome('abba')\n    true\n    >>> is_palindrome('ab')\n\
    \    false\n    >>> is_palindrome('abc')\n    false\n*/", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ reverse(prefix);\n}\n/*\n Find the length of the longest\
    \ palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('catacata')\n\
    \    5\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0) \n    {\n        return 0;\n \
    \   }\n    auto result = 0;\n    for (auto i = 0; i < length; i++) \n    {\n \
    \       if (is_palindrome(string[i..$])) \n        {\n            result = length\
    \ - i;\n            break;\n        }\n    }\n    return result;\n}\n/*\n Find\
    \ the length of the longest palindromic prefix of a string.\n    >>> longest_palindrome_prefix_length('')\n\
    \    0\n    >>> longest_palindrome_prefix_length('cat')\n    0\n    >>> longest_palindrome_prefix_length('cata')\n\
    \    2\n    >>> longest_palindrome_prefix_length('catac')\n    3\n    >>> longest_palindrome_prefix_length('catacata')\n\
    \    3\n*/\nsize_t longest_palindrome_prefix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0) \n    {\n        return 0;\n \
    \   }\n    auto result = 0;\n    for (auto i = 0; i < length; i++) \n    {\n \
    \       if (is_palindrome(string[0..$-i])) \n        {", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto suffix_len = longest_palindrome_suffix(string);\n\
    \    return string ~ string[0..$-suffix_len].dup.reverse;\n}", "{\n    auto length\
    \ = string.length;\n    if (length == 0) \n    {\n        return \"\";\n    }\n\
    \    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == length) \n    {\n        return string;\n\
    \    }\n    auto prefix = string[0 .. length - longest_palindrome_suffix];\n \
    \   return string ~ prefix.reverse;\n}", "{\n    auto prefix = string.take(string.length\
    \ - longest_palindromic_suffix(string).length);\n    return string ~ prefix.reverse;\n\
    }", "{\n    string result;\n    int length = string.length;\n    int i = 0;\n\
    \    int j = length - 1;\n    while (i < j) \n    {\n        if (string[i] !=\
    \ string[j]) \n        {\n            break;\n        }\n        i++;\n      \
    \  j--;\n    }\n    if (i == j) \n    {\n        return string;\n    }\n    if\
    \ (i == 0) \n    {\n        return string[0 .. $] ~ string[1 .. $];\n    }\n \
    \   result = string[i .. $];\n    result ~= string[0 .. i];\n    return result;\n\
    }", "{\n    auto length = string.length;\n    if (length == 0)\n        return\
    \ string;\n    auto prefix_length = length;\n    while (prefix_length > 0)\n \
    \   {\n        if (is_palindrome(string[0 .. prefix_length]))\n            break;\n\
    \        prefix_length--;\n    }\n    return string ~ string[prefix_length ..\
    \ $].reverse;\n}", "{\n    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    return string ~ string[0..$-longest_palindrome_suffix].idup.reverse;\n\
    }", "{\n    string postfix = string.dup;\n    string prefix = \"\";\n    string\
    \ result = \"\";\n    while(postfix.length > 0) \n    {\n        if(postfix.isPalindrome)\
    \ \n        {\n            result = postfix ~ prefix;\n            break;\n  \
    \      }\n        prefix ~= postfix[0];\n        postfix = postfix[1..$];\n  \
    \  }\n    return result;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto len = string.length;\n    if (len == 0)\n\
    \        return string;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto len = string.length;\n    if (len == 0)\n\
    \        return string;\n    auto prefix = string[0 .. len / 2];\n    auto suffix\
    \ = string[len / 2 .. len];\n    if (suffix.length > prefix.length)\n        suffix\
    \ = suffix[1 .. $];\n    auto suffix_len = suffix.length;\n    auto prefix_len\
    \ = prefix.length;\n    auto suffix_palindrome_len = 0;\n    for (int i = 0; i\
    \ < suffix_len; i++)\n    {\n        if (suffix[i] == suffix[suffix_len - i -\
    \ 1])\n            suffix_palindrome_len++;\n        else\n            break;\n\
    \    }\n    if (suffix_palindrome_len == suffix_len)\n        return string;\n\
    \    auto prefix_palindrome_len = 0;\n    for (int i = 0; i < prefix_len; i++)\n\
    \    {\n        if (prefix[i] == prefix[prefix_len - i - 1])\n            prefix_palindrome_len++;\n\
    \        else\n            break;\n    }\n    if (prefix_palindrome_len == prefix_len)\n\
    \        return string ~ string[prefix_len .. $].reverse;\n    auto suffix_palindrome\
    \ = suffix[0 .. suffix_palindrome_len];\n    auto prefix_palindrome = prefix[prefix_len\
    \ - prefix_palindrome_len .. $];\n    if (suffix_palindrome_len > prefix_palindrome_len)\n\
    \        return string ~ suffix_palindrome.reverse;\n    else\n        return\
    \ string ~ prefix_palindrome.reverse;\n}\n/*\n Find the shortest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
    \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n", "{\n    auto\
    \ len = string.length;\n    if (len == 0)\n        return string;\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    auto prefix = string[0..$-longest_palindrome_suffix];\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto palindrome_length = longest_palindrome_length(string);\n\
    \    auto prefix = string[0..$-palindrome_length];\n    return string ~ reverse(prefix);\n\
    }", "{\n    auto string_length = string.length;\n    if (string_length == 0)\n\
    \        return string;\n    auto longest_palindrome_suffix_length = longest_palindrome_suffix_length_naive(string);\n\
    \    auto prefix_length = string_length - longest_palindrome_suffix_length;\n\
    \    return string ~ string[0..prefix_length].dup.reverse;\n}", "{\n    auto n\
    \ = string.length;\n    if (n == 0) return \"\";\n    auto suffix = string[n -\
    \ 1 .. $];\n    auto prefix = string[0 .. n - 1];\n    while (suffix.length >\
    \ 0) \n    {\n        if (suffix == prefix) break;\n        suffix = suffix[1\
    \ .. $];\n        prefix = prefix[0 .. $ - 1];\n    }\n    return string ~ reverse(prefix);\n\
    }", "{\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    auto longest_palindrome_postfix = longest_palindrome_suffix(string);\n  \
    \  // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string ~ reverse(string[0 .. $ - longest_palindrome_postfix]);\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('catacata')\n    'atacata'\n\
    */\nstring longest_palindrome_suffix_of(string string) \n{\n    auto length =\
    \ string.length;\n    foreach (i; 0..length) \n    {\n        if (is_palindrome(string[$-i..$]))\
    \ \n        {\n            return string[$-i..$];\n        }\n    }\n    return\
    \ \"\";\n}\n/*\n Check if a string is a palindrome.\n    >>> is_palindrome('')\n\
    \    true\n    >>> is_palindrome('a')\n    true\n    >>> is_palindrome('aa')\n\
    \    true\n    >>> is_palindrome('aba')\n    true\n    >>> is_palindrome('abba')\n\
    \    true\n    >>> is_palindrome('abc')\n    false\n    >>> is_palindrome('abca')\n\
    \    false\n*/", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'atacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'atacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'atacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'atacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n  \
    \  'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'atacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'atacatacatacatac'\n    >>> longest", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}", "{\n    if (string.empty)\n        return string;\n   \
    \ auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n   \
    \ auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}", "{\n    auto\
    \ palindrome_suffix = longest_palindrome_suffix(string);\n    auto prefix = string[0..$-palindrome_suffix.length];\n\
    \    return string ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    auto prefix = string[0..$-longest_palindrome_suffix.length];\n\
    \    return string ~ prefix.reverse;\n}\n/*\n Find the longest palindrome suffix\
    \ of a string.\n    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n*/\nstring longest_palindrome_suffix_of(string string) \n{\n \
    \   auto length = string.length;\n    if (length == 0)\n        return \"\";\n\
    \    auto half_length = (length + 1) / 2;\n    auto longest_palindrome_suffix\
    \ = string[$-1..$];\n    foreach (i; 0..half_length) \n    {\n        auto suffix\
    \ = string[$-i..$];\n        auto prefix = string[0..i];\n        if (suffix ==\
    \ prefix.reverse)\n            longest_palindrome_suffix = suffix;\n    }\n  \
    \  return longest_palindrome_suffix;\n}\n/*\n Find the longest palindrome prefix\
    \ of a string.\n    >>> longest_palindrome_prefix_of('')\n    ''\n    >>> longest_palindrome_prefix_of('cat')\n\
    \    'c'\n    >>> longest_palindrome_prefix_of('cata')\n    'ca'\n    >>> longest_palindrome_prefix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_prefix_of('cataca')\n    'cataca'\n \
    \  ", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ reverse(prefix);\n}\n/*\n Find the longest palindrome suffix of a string.\n\
    \    >>> longest_palindrome_suffix_of('')\n    ''\n    >>> longest_palindrome_suffix_of('cat')\n\
    \    't'\n    >>> longest_palindrome_suffix_of('cata')\n    'ata'\n    >>> longest_palindrome_suffix_of('catac')\n\
    \    'catac'\n    >>> longest_palindrome_suffix_of('cataca')\n    'ataca'\n  \
    \  >>> longest_palindrome_suffix_of('catacat')\n    'catacat'\n    >>> longest_palindrome_suffix_of('catacata')\n\
    \    'atacata'\n    >>> longest_palindrome_suffix_of('catacatac')\n    'catacatac'\n\
    \    >>> longest_palindrome_suffix_of('catacataca')\n    'atacataca'\n    >>>\
    \ longest_palindrome_suffix_of('catacatacat')\n    'catacatacat'\n    >>> longest_palindrome_suffix_of('catacatacata')\n\
    \    'atacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatac')\n  \
    \  'catacatacatac'\n    >>> longest_palindrome_suffix_of('catacatacataca')\n \
    \   'atacatacataca'\n    >>> longest_palindrome_suffix_of('catacatacatacat')\n\
    \    'catacatacatacat'\n    >>> longest_palindrome_suffix_of('catacatacatacata')\n\
    \    'atacatacatacata'\n    >>> longest_palindrome_suffix_of('catacatacatacatac')\n\
    \    'catacatacatacatac'\n    >>> longest", "{\n    auto length = string.length;\n\
    \    auto prefix = string[0 .. length / 2];\n    auto suffix = string[length /\
    \ 2 .. $];\n    auto reversed_prefix = reverse(prefix);\n    auto palindrome_suffix\
    \ = suffix.find(reversed_prefix);\n    if (palindrome_suffix.empty)\n    {\n \
    \       return string ~ reversed_prefix;\n    }\n    else\n    {\n        return\
    \ string ~ reversed_prefix[palindrome_suffix.length .. $];\n    }\n}", "{\n  \
    \  // Find the longest palindromic suffix.\n    // If the string is a palindrome,\
    \ return it.\n    int length = string.length;\n    if (length == 0)\n        return\
    \ string;\n    if (length == 1)\n        return string ~ string;\n    if (length\
    \ == 2)\n        return string[0] == string[1] ? string ~ string : string ~ string[0];\n\
    \    int i = length - 1;\n    while (i >= 0) \n    {\n        if (string[0..i]\
    \ == string[$-i..$])\n            break;\n        i--;\n    }\n    // Append reverse\
    \ of the string prefix to the end of the string.\n    return string ~ string[0..$-i].reverse;\n\
    }", "{\n    auto prefix = string.take(string.length - string.longest_palindromic_suffix.length);\n\
    \    return string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    if (longest_palindrome_suffix\
    \ == string.length)\n        return string;\n    auto prefix = string[0 .. $ -\
    \ longest_palindrome_suffix];\n    return string ~ prefix.reverse;\n}\n/*\n Find\
    \ the longest palindromic suffix of a string.\n    >>> longest_palindrome_suffix_length('')\n\
    \    0\n    >>> longest_palindrome_suffix_length('cat')\n    0\n    >>> longest_palindrome_suffix_length('cata')\n\
    \    1\n    >>> longest_palindrome_suffix_length('catac')\n    3\n    >>> longest_palindrome_suffix_length('cataca')\n\
    \    3\n    >>> longest_palindrome_suffix_length('catacat')\n    3\n*/\nsize_t\
    \ longest_palindrome_suffix_length(string string) \n{\n    if (string.length <=\
    \ 1)\n        return 0;\n    auto last_index = string.length - 1;\n    for (size_t\
    \ i = 0; i < last_index; i++) \n    {\n        if (string[i] == string[last_index])\
    \ \n        {\n            auto is_palindrome = true;\n            for (size_t\
    \ j = 1; i + j < last_index - j; j++) \n            {\n                if (string[i\
    \ + j] != string[last_index - j]) \n                {\n                    is_palindrome\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_palindrome)\n                return last_index - i + 1;\n   \
    \     }\n    }\n    return 0;\n}\n/*\n Find the longest palindromic substring\
    \ of a string.\n    >>> longest_palindrome_substring('')\n    ''\n    >>> longest_palindrome_substring('cat')\n\
    \    'c'\n    >>> longest_palindrome_substring('cata')\n    'ata'\n    >>> longest_palindrome_substring('catac')\n\
    \   "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
