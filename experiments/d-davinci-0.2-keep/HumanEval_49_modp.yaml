name: HumanEval_49_modp
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \n*/\nlong modp(long n, long p) \n"
tests: "unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
  \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
  \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
  \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
  \ == 3L);\n}\nvoid main(){}"
completions: ["{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n\
    \        if (n & 1)\n            result = (result * a) % p;\n        a = (a *\
    \ a) % p;\n        n >>= 1;\n    }\n    return result;\n}", "{\n    long res =\
    \ 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n            res\
    \ = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;\n}", "{\n    long result = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            result = (result\
    \ * a) % p;\n        }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n\
    \    return result;\n}", "{\n    long r = 1;\n    while (n > 0) {\n        if\
    \ (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n        n = n / 2;\n\
    \    }\n    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> digits(0)\n\
    \    1\n    >>> digits(1)\n    1\n    >>> digits(10)\n    2\n    >>> digits(10**100)\n\
    \    101\n    >>> digits(10**1000)\n    1001\n*/\nlong digits(long n) \n{\n  \
    \  long r = 1;\n    while (n > 9) {\n        n = n / 10;\n        r = r + 1;\n\
    \    }\n    return r;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(0)\n\
    \    0\n    >>> sum_digits(1)\n    1\n    >>> sum_digits(10)\n    1\n    >>> sum_digits(11)\n\
    \    2\n    >>> sum_digits(12345)\n    15\n    >>> sum_digits(10**100)\n    1\n\
    */\nlong sum_digits(long n) \n{\n    long r = 0;\n    while (n > 0) {\n      \
    \  r = r + n % 10;\n        n = n / 10;\n    }\n    return r;\n}\n/*\nReturn the\
    \ sum of the digits in n.\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(1)\n\
    \    1\n    >>> sum_digits(10)\n    1\n    >>> sum_digits(11)\n    2\n    >>>\
    \ sum_digits(12345)\n    15\n    >>> sum_digits(10**100)\n    1\n*/\nlong sum_digits(long\
    \ n) \n{\n    long r = 0;\n    while (n > 0) {\n        r = r + n % 10;\n    \
    \    n = n / 10;\n    }\n    return r;\n}\n/*\nReturn the sum of the digits in\
    \ n.\n    >>> sum_digits(0)\n    0\n", "{\n    long res = 1;\n    long a = 2;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n        {\n            res =\
    \ (res * a) % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n\
    \    return res;\n}\n/*\nReturn the number of digits of n in base b.\n    >>>\
    \ digits(0, 10)\n    1\n    >>> digits(1, 10)\n    1\n    >>> digits(2, 10)\n\
    \    1\n    >>> digits(10, 10)\n    2\n    >>> digits(100, 10)\n    3\n    >>>\
    \ digits(1000, 10)\n    4\n    >>> digits(12345, 10)\n    5\n    >>> digits(12345,\
    \ 2)\n    13\n    >>> digits(12345, 16)\n    5\n    >>> digits(12345, 17)\n  \
    \  5\n    >>> digits(12345, 32)\n    5\n    >>> digits(12345, 33)\n    6\n   \
    \ >>> digits(12345, 37)\n    6\n    >>> digits(12345, 62)\n    5\n    >>> digits(12345,\
    \ 63)\n    6\n    >>> digits(12345, 64)\n    6\n    >>> digits(12345, 100)\n \
    \   6\n    >>> digits(12345, 10**40)\n    6\n    >>> digits(12345, 10**50)\n \
    \   6\n    >>> digits(12345, 10**60)\n    6\n    >>> digits(12345, 10**70)\n \
    \   6\n    >>> digits(12345, 10**80)\n    6\n    >>> digits(12345, 10**90)\n \
    \   6\n    >>> digits(12345, 10**100)\n    6\n    >>> digits(12345, 10**110)\n\
    \    6\n    >>> digits(12345, 10**120)\n    6\n    >>> digits(12345, 10**130)\n\
    \    6\n    >>> digits(12345, 10**140)\n    6\n    >>> digits(12345, 10**150)\n\
    \    6\n    >>> digits(12345, 10**160)\n    6\n    >>> digits", "{\n    long r\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n            r = (r * 2)\
    \ % p;\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long res = 1;\n  \
    \  while (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;\n}", "{\n    long result = 1;\n    long a = 2;\n    while (n\
    \ > 0) {\n        if (n & 1) {\n            result = (result * a) % p;\n     \
    \   }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return result;\n\
    }", "{\n    long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if\
    \ (n & 1) \n        {\n            r = (r * b) % p;\n        }\n        n >>=\
    \ 1;\n        b = (b * b) % p;\n    }\n    return r;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>>\
    \ digits(2)\n    1\n    >>> digits(10)\n    2\n    >>> digits(12345)\n    5\n\
    */\nlong digits(long n) \n{\n    long d = 1;\n    while (n >= 10) \n    {\n  \
    \      n /= 10;\n        d += 1;\n    }\n    return d;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>>\
    \ digits(2)\n    1\n    >>> digits(10)\n    2\n    >>> digits(12345)\n    5\n\
    */\nlong digits(long n) \n{\n    long d = 1;\n    while (n >= 10) \n    {\n  \
    \      n /= 10;\n        d += 1;\n    }\n    return d;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>>\
    \ digits(2)\n    1\n    >>> digits(10)\n    2\n    >>> digits(12345)\n    5\n\
    */\nlong digits(long n) \n{\n    long d = 1;\n    while (n >= 10) \n    {\n  \
    \      n /= 10;\n        d += 1;\n    }\n    return d;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>>\
    \ digits(2)\n    1\n    >>> digits(10)\n    2\n    >>> digits(12345)\n    5\n\
    */\nlong digits(long n) \n{\n    long d = 1", "{\n    if (n == 0)\n        return\
    \ 1;\n    if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n\
    \    return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n}", "{\n    long res = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n        {\n            res =\
    \ (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n \
    \   }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res * a)\
    \ % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2\
    \ == 1) \n        {\n            r = (r * 2) % p;\n        }\n        n = n /\
    \ 2;\n        if (n > 0) \n        {\n            r = (r * r) % p;\n        }\n\
    \    }\n    return r;\n}", "{\n    long res = 1;\n    for (; n > 0; n >>= 1) \n\
    \    {\n        if (n & 1) \n        {\n            res = (res * n) % p;\n   \
    \     }\n    }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n\
    \    while (n > 0) \n    {\n        if (n & 1)\n            res = (res * a) %\
    \ p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}",
  "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}", "{\n    long result = 1;\n    long pow = n;\n   \
    \ while (p > 0) {\n        if (p & 1) {\n            result = (result * pow) %\
    \ n;\n        }\n        pow = (pow * pow) % n;\n        p >>= 1;\n    }\n   \
    \ return result;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0)\
    \ {\n        if (n & 1) {\n            res = (res * a) % p;\n        }\n     \
    \   a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long\
    \ r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n        \
    \    r = (r * n) % p;\n        }\n        n = n >> 1;\n    }\n    return r;\n}",
  "{\n    long r = 1;\n    foreach (i; 0 .. n)\n        r = (r * 2) % p;\n    return\
    \ r;\n}", "{\n    if (n == 0)\n        return 1;\n    long res = modp(n >> 1,\
    \ p);\n    res = (res * res) % p;\n    if (n & 1)\n        res = (res * 2) % p;\n\
    \    return res;\n}", "{\n    long r = 1;\n    long b = 2;\n    while (n > 0)\
    \ {\n        if (n & 1) {\n            r = (r * b) % p;\n        }\n        n\
    \ >>= 1;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long result\
    \ = 1;\n    long power = n;\n    while (p > 0) {\n        if (p & 1) {\n     \
    \       result = (result * power) % MOD;\n        }\n        power = (power *\
    \ power) % MOD;\n        p >>= 1;\n    }\n    return result;\n}", "{\n    long\
    \ res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n      \
    \      res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}", "{\n    if (n == 0)\n        return 1;\n\
    \    long res = modp(n >> 1, p);\n    res = (res * res) % p;\n    if (n & 1)\n\
    \        res = (res * 2) % p;\n    return res;\n}", "{\n    long r = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) {\n            r = (r * 2) % p;\n        }\n \
    \       n >>= 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n    long b =\
    \ 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1)\n            r = (r *\
    \ b) % p;\n        n = n / 2;\n        b = (b * b) % p;\n    }\n    return r;\n\
    }", "{\n    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n   \
    \         res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;\n}", "{\n    long r = 1;\n    long b = 2;\n    while (n\
    \ > 0) {\n        if (n & 1) {\n            r = (r * b) % p;\n        }\n    \
    \    n >>= 1;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1)\n \
    \           res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}", "{\n    long result = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            result = (result\
    \ * a) % p;\n        }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n\
    \    return result;\n}", "{\n    long res = 1;\n    while (n > 0) \n    {\n  \
    \      if (n & 1) \n        {\n            res = (res * n) % p;\n        }\n \
    \       n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}", "{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n & 1)\n            result = (result * a) % p;\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return result;\n}", "{\n    long result = 1;\n \
    \   long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n            result\
    \ = (result * a) % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return result;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n    >>> bit_length(0)\n    0\n    >>> bit_length(1)\n    1\n    >>> bit_length(2)\n\
    \    2\n    >>> bit_length(3)\n    2\n    >>> bit_length(4)\n    3\n    >>> bit_length(5)\n\
    \    3\n    >>> bit_length(6)\n    3\n    >>> bit_length(7)\n    3\n    >>> bit_length(8)\n\
    \    4\n    >>> bit_length(9)\n    4\n    >>> bit_length(10)\n    4\n    >>> bit_length(11)\n\
    \    4\n    >>> bit_length(15)\n    4\n    >>> bit_length(16)\n    5\n    >>>\
    \ bit_length(17)\n    5\n    >>> bit_length(31)\n    5\n    >>> bit_length(32)\n\
    \    6\n    >>> bit_length(1023)\n    10\n    >>> bit_length(1024)\n    11\n \
    \   >>> bit_length(1025)\n    11\n    >>> bit_length(2**10000 - 1)\n    10000\n\
    \    >>> bit_length(2**10000)\n    10001\n*/\nlong bit_length(long n) \n{\n  \
    \  long bits = 0;\n    while (n > 0) {\n        n >>= 1;\n        bits++;\n  \
    \  }\n    return bits;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n    >>> bit_length(0)\n    0\n    >>> bit_length(1)\n    1\n    >>> bit_length(2)\n\
    \    2\n    >>> bit_length(3)\n    2\n    >>> bit_length(4)\n    3\n    >>> bit_length(5)\n\
    \    3\n    >>> bit_length(6", "{\n    long res = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n & 1)\n            res = (res * a) % p;\n    \
    \    a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n\
    \        {\n            res = (res * a) % p;\n        }\n        a = (a * a) %\
    \ p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long res = 1;\n  \
    \  while (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;\n}", "{\n    long r = 1;\n    while (n > 0) {\n        if (n\
    \ & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n \
    \   return r;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n\
    \        if (n & 1) {\n            res = (res * a) % p;\n        }\n        a\
    \ = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the\
    \ greatest common divisor of a and b.\n    >>> gcd(14, 15)\n    1\n    >>> gcd(2\
    \ * 3 * 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong\
    \ gcd(long a, long b) \n{\n    while (b != 0) {\n        long t = b;\n       \
    \ b = a % b;\n        a = t;\n    }\n    return a;\n}\n/*\nReturn the least common\
    \ multiple of a and b.\n    >>> lcm(14, 15)\n    210\n    >>> lcm(2 * 3 * 5 *\
    \ 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    2310\n*/\nlong lcm(long a,\
    \ long b) \n{\n    return (a * b) / gcd(a, b);\n}\n/*\nReturn the integer square\
    \ root of n.\n    >>> isqrt(0)\n    0\n    >>> isqrt(1)\n    1\n    >>> isqrt(4)\n\
    \    2\n    >>> isqrt(15)\n    3\n    >>> isqrt(16)\n    4\n    >>> isqrt(23)\n\
    \    4\n*/\nlong isqrt(long n) \n{\n    long xk = n;\n    long xk1 = (xk + n /\
    \ xk) / 2;\n    while (xk1 < xk) {\n        xk = xk1;\n        xk1 = (xk + n /\
    \ xk) / 2;\n    }\n    return xk;\n}\n/*\nReturn the integer square root of n.\n\
    \    >>> isqrt(0)\n    0\n    >>> isqrt(1)\n    1\n    >>> isqrt(4)\n    2", "{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n \
    \       {\n            result = (result * 2) % p;\n        }\n        n = n /\
    \ 2;\n        if (n > 0) \n        {\n            result = (result * result) %\
    \ p;\n        }\n    }\n    return result;\n}\n/*\nReturn the number of digits\
    \ in n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>> digits(10)\n\
    \    2\n    >>> digits(12345)\n    5\n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    while (n > 0) \n    {\n        n = n / 10;\n        result = result\
    \ + 1;\n    }\n    return result;\n}\n/*\nReturn the nth digit of n, counting\
    \ from the right.\n    >>> nth_digit(0, 0)\n    0\n    >>> nth_digit(0, 1)\n \
    \   0\n    >>> nth_digit(12345, 0)\n    5\n    >>> nth_digit(12345, 1)\n    4\n\
    \    >>> nth_digit(12345, 2)\n    3\n    >>> nth_digit(12345, 3)\n    2\n    >>>\
    \ nth_digit(12345, 4)\n    1\n    >>> nth_digit(12345, 5)\n    0\n    >>> nth_digit(12345,\
    \ 6)\n    0\n*/\nlong nth_digit(long n, long i) \n{\n    long result = 0;\n  \
    \  while (i > 0) \n    {\n        n = n / 10;\n        i = i - 1;\n    }\n   \
    \ result = n % 10;\n    return result;\n}\n/*\nReturn the number of digits in\
    \ n.\n    >>> digits(0)\n    1\n    >>> digits(1)\n    1\n    >>> digits(10)\n\
    \    2\n    >>> digits(12345)\n    5\n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    while (n > 0)", "{\n    long r = 1;\n    long b = 2;\n    while (n\
    \ > 0) \n    {\n        if (n & 1)\n            r = (r * b) % p;\n        n >>=\
    \ 1;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long result\
    \ = 1;\n    long power = n;\n    long i;\n    for (i = 0; i < p; i++) \n    {\n\
    \        if (power & 1)\n            result = (result * n) % p;\n        power\
    \ = power >> 1;\n        n = (n * n) % p;\n    }\n    return result;\n}", "{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;\n}\n/*\nReturn the number of digits in n.\n    >>> num_digits(12345)\n\
    \    5\n    >>> num_digits(0)\n    1\n    >>> num_digits(-12345)\n    5\n*/\n\
    long num_digits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n  \
    \      res++;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn the sum\
    \ of the digits in n.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_digits(4224)\
    \ # 4 + 2 + 2 + 4 = 12\n    12\n    >>> sum_digits(1234567890)\n    45\n    >>>\
    \ a = sum_digits(123) # make sure that you are using return rather than print\n\
    \    >>> a\n    6\n*/\nlong sum_digits(long n) \n{\n    long res = 0;\n    while\
    \ (n > 0) \n    {\n        res += n % 10;\n        n /= 10;\n    }\n    return\
    \ res;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(10) # 1\
    \ + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>>\
    \ sum_digits(1234567890)\n    45\n    >>> a = sum_digits(123) # make sure that\
    \ you are using return rather than print\n    >>> a\n    6\n*/\nlong sum_digits(long\
    \ n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n        res += n % 10;\n\
    \        n /= 10;\n    }\n    return res;\n}\n/*\nReturn the sum of the digits\
    \ in n.\n   ", "{\n    long res = 1;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n        {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}", "{\n    long r\
    \ = 1;\n    while (n > 0) {\n        if (n & 1)\n            r = (r * 2) % p;\n\
    \        n >>= 1;\n    }\n    return r;\n}", "{\n    long result = 1;\n    long\
    \ a = 2;\n    while (n > 0) \n    {\n        if (n & 1)\n            result =\
    \ (result * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ result;\n}", "{\n    long result = 1;\n    long power = n;\n    while (p) \n\
    \    {\n        if (p & 1)\n            result = (result * power) % MOD;\n   \
    \     power = (power * power) % MOD;\n        p >>= 1;\n    }\n    return result;\n\
    }", "{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n   \
    \     if (n % 2 == 1) \n        {\n            result = (result * a) % p;\n  \
    \      }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n    return result;\n\
    }", "{\n    long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            r = (r * b) % p;\n        }\n        n\
    \ = n / 2;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long res\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n          \
    \  res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) %\
    \ p;\n    }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n   \
    \ while (n > 0) {\n        if (n & 1) {\n            res = (res * a) % p;\n  \
    \      }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n\
    }\n/*\nReturn the number of primes less than or equal to n.\n    >>> primes(6)\n\
    \    3\n    >>> primes(13)\n    6\n*/\nlong primes(long n) \n{\n    long count\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\nReturn the number\
    \ of primes less than or equal to n.\n    >>> primes(6)\n    3\n    >>> primes(13)\n\
    \    6\n*/\nlong primes(long n) \n{\n    long count = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (isPrime(i)) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n/*\nReturn the number of primes less than or equal\
    \ to n.\n    >>> primes(6)\n    3\n    >>> primes(13)\n    6\n*/\nlong primes(long\
    \ n) \n{\n    long count = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (isPrime(i)) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nReturn the number of primes less than or equal to n.\n    >>> primes(6)\n\
    \    3\n    >>> primes(13)\n    6\n*/\nlong primes(long n) \n{\n    long count\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\nReturn the number\
    \ of primes less than or equal to n.\n    >>> primes(6)\n    3\n    >>>", "{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n & 1)\n            result = (result * a) % p;\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return result;\n}\n/*\nReturn the number of digits\
    \ in n.\n    >>> digits(0)\n    1\n    >>> digits(5)\n    1\n    >>> digits(12345)\n\
    \    5\n    >>> digits(10**100)\n    101\n*/\nlong digits(long n) \n{\n    long\
    \ result = 1;\n    while (n >= 10) \n    {\n        n /= 10;\n        result +=\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn the sum of the digits in n.\n \
    \   >>> sum_digits(0)\n    0\n    >>> sum_digits(5)\n    5\n    >>> sum_digits(12345)\n\
    \    15\n    >>> sum_digits(10**100)\n    1\n*/\nlong sum_digits(long n) \n{\n\
    \    long result = 0;\n    while (n > 0) \n    {\n        result += n % 10;\n\
    \        n /= 10;\n    }\n    return result;\n}\n/*\nReturn the sum of the digits\
    \ in n.\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(5)\n    5\n    >>> sum_digits(12345)\n\
    \    15\n    >>> sum_digits(10**100)\n    1\n*/\nlong sum_digits(long n) \n{\n\
    \    long result = 0;\n    while (n > 0) \n    {\n        result += n % 10;\n\
    \        n /= 10;\n    }\n    return result;\n}\n/*\nReturn the sum of the digits\
    \ in n.\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(5)\n    5\n    >>> sum_digits(12345)\n\
    \    15\n    >>> sum_digits(10**100)\n    1\n*/\nlong sum_digits", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n\
    \        {\n            res = (res * a) % p;\n        }\n        a = (a * a) %\
    \ p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long result = 1;\n\
    \    long power = n;\n    while (p != 0) \n    {\n        if (p & 1) \n      \
    \  {\n            result = (result * power) % MOD;\n        }\n        power =\
    \ (power * power) % MOD;\n        p >>= 1;\n    }\n    return result;\n}", "{\n\
    \    if (n == 0)\n        return 1;\n    if (n % 2 == 0)\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    else\n        return modp(n / 2, p) * modp(n\
    \ / 2, p) * 2 % p;\n}", "{\n    long r = 1;\n    while (n > 0) {\n        if (n\
    \ & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n \
    \   return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(101)\n\
    \    3\n    >>> numdigits(12345)\n    5\n    >>> numdigits(123456789)\n    9\n\
    */\nlong numdigits(long n) \n{\n    long r = 0;\n    while (n > 0) {\n       \
    \ r++;\n        n /= 10;\n    }\n    return r;\n}\n/*\nReturn the number of digits\
    \ in n.\n    >>> numdigits(0)\n    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n\
    \    2\n    >>> numdigits(101)\n    3\n    >>> numdigits(12345)\n    5\n    >>>\
    \ numdigits(123456789)\n    9\n*/\nlong numdigits(long n) \n{\n    long r = 0;\n\
    \    while (n > 0) {\n        r++;\n        n /= 10;\n    }\n    return r;\n}\n\
    /*\nReturn the number of digits in n.\n    >>> numdigits(0)\n    1\n    >>> numdigits(1)\n\
    \    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(101)\n    3\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(123456789)\n    9\n*/\nlong numdigits(long n) \n{\n\
    \    long r = 0;\n    while (n > 0) {\n        r++;\n        n /= 10;\n    }\n\
    \    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> num", "{\n    long result = 1;\n\
    \    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            result = (result * a) % p;\n        }\n        n = n / 2;\n\
    \        a = (a * a) % p;\n    }\n    return result;\n}", "{\n    long result\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n          \
    \  result = (result * n) % p;\n        }\n        n = n >> 1;\n        n = (n\
    \ * n) % p;\n    }\n    return result;\n}", "{\n    long r = 1;\n    while (n\
    \ > 0) {\n        if (n & 1)\n            r = (r * 2) % p;\n        n >>= 1;\n\
    \    }\n    return r;\n}", "{\n    long result = 1;\n    long a = 2;\n    while\
    \ (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * a) % p;\n\
    \        }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n    return result;\n\
    }", "{\n    long result = 1;\n    long pow = n;\n    while (p > 0) \n    {\n \
    \       if (p & 1) \n        {\n            result = (result * pow) % p;\n   \
    \     }\n        pow = (pow * pow) % p;\n        p >>= 1;\n    }\n    return result;\n\
    }", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n    \
    \    {\n            r = (r * n) % p;\n        }\n        n = n >> 1;\n    }\n\
    \    return r;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0)\
    \ \n    {\n        if (n & 1)\n            res = (res * a) % p;\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> numdigits(0)\n    1\n    >>> numdigits(1)\n    1\n\
    \    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n    5\n    >>> numdigits(10**100)\n\
    \    100\n*/\nlong numdigits(long n) \n{\n    long res = 0;\n    while (n > 0)\
    \ \n    {\n        res++;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn\
    \ the sum of the digits in n.\n    >>> sumdigits(0)\n    0\n    >>> sumdigits(1)\n\
    \    1\n    >>> sumdigits(10)\n    1\n    >>> sumdigits(12345)\n    15\n    >>>\
    \ sumdigits(10**100)\n    1\n*/\nlong sumdigits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        res += n % 10;\n        n /= 10;\n    }\n\
    \    return res;\n}\n/*\nReturn the sum of the digits in n, where n is given as\
    \ a string.\n    >>> sumdigits_str(\"0\")\n    0\n    >>> sumdigits_str(\"1\"\
    )\n    1\n    >>> sumdigits_str(\"10\")\n    1\n    >>> sumdigits_str(\"12345\"\
    )\n    15\n    >>> sumdigits_str(\"10**100\")\n    1\n*/\nlong sumdigits_str(string\
    \ n) \n{\n    long res = 0;\n    foreach (c; n)\n        res += c - '0';\n   \
    \ return res;\n}\n/*\nReturn the sum of the digits in n, where n is given as a\
    \ string.\n    >>> sumdigits_str(\"0\")\n   ", "{\n    long r = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            r = (r * n) % p;\n\
    \        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long res = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n        {\n            res =\
    \ (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n \
    \   }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n & 1)\n            res = (res * a) % p;\n    \
    \    a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n     \
    \       res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n >>=\
    \ 1;\n    }\n    return res;\n}", "{\n    if (n == 0)\n        return 1;\n   \
    \ if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    else\n\
    \        return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n}", "{\n    long res\
    \ = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n    \
    \    {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return res;\n}", "{\n    if (n == 0) \n    {\n \
    \       return 1;\n    }\n    long res = modp(n >> 1, p);\n    res = (res * res)\
    \ % p;\n    if (n & 1) \n    {\n        res = (res * 2) % p;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n    1\n\
    \    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(10**100)\n    100\n*/\nlong numdigits(long n) \n{\n\
    \    long res = 0;\n    while (n > 0) \n    {\n        res += 1;\n        n /=\
    \ 10;\n    }\n    return res;\n}\n/*\nReturn the sum of the digits in n.\n   \
    \ >>> sumdigits(0)\n    0\n    >>> sumdigits(1)\n    1\n    >>> sumdigits(10)\n\
    \    1\n    >>> sumdigits(12345)\n    15\n    >>> sumdigits(10**100)\n    1\n\
    */\nlong sumdigits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n\
    \        res += n % 10;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn\
    \ the sum of the digits in n.\n    >>> sumdigits(0)\n    0\n    >>> sumdigits(1)\n\
    \    1\n    >>> sumdigits(10)\n    1\n    >>> sumdigits(12345)\n    15\n    >>>\
    \ sumdigits(10**100)\n    1\n*/\nlong sumdigits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        res += n % 10;\n        n /= 10;\n    }\n\
    \    return res;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sumdigits(0)\n\
    \    0\n    >>> sumdigits(1)\n", "{\n    long result = 1;\n    long a = 2;\n \
    \   while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result *\
    \ a) % p;\n        }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n  \
    \  return result;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n    >>> bit_length(0)\n    0\n    >>> bit_length(1)\n    1\n    >>> bit_length(2)\n\
    \    2\n    >>> bit_length(6)\n    3\n    >>> bit_length(7)\n    3\n    >>> bit_length(8)\n\
    \    4\n    >>> bit_length(9)\n    4\n    >>> bit_length(10)\n    4\n    >>> bit_length(15)\n\
    \    4\n    >>> bit_length(16)\n    5\n    >>> bit_length(17)\n    5\n    >>>\
    \ bit_length(31)\n    5\n    >>> bit_length(32)\n    6\n    >>> bit_length(33)\n\
    \    6\n    >>> bit_length(63)\n    6\n    >>> bit_length(64)\n    7\n    >>>\
    \ bit_length(65)\n    7\n    >>> bit_length(127)\n    7\n    >>> bit_length(128)\n\
    \    8\n    >>> bit_length(129)\n    8\n    >>> bit_length(255)\n    8\n    >>>\
    \ bit_length(256)\n    9\n    >>> bit_length(257)\n    9\n    >>> bit_length(511)\n\
    \    9\n    >>> bit_length(512)\n    10\n    >>> bit_length(513)\n    10\n   \
    \ >>> bit_length(1023)\n    10\n    >>> bit_length(1024)\n    11\n    >>> bit_length(1025)\n\
    \    11\n    >>> bit_length(2047)\n    11\n    >>> bit_length(2048)\n    12\n\
    \    >>> bit_length(2049)\n    12\n    >>> bit_length(4095)\n    12\n    >>> bit_length(4096)\n\
    \    13\n", "{\n    long result = 1;\n    long x = 2;\n    while (n > 0) \n  \
    \  {\n        if (n % 2 == 1) \n        {\n            result = (result * x) %\
    \ p;\n        }\n        n = n / 2;\n        x = (x * x) % p;\n    }\n    return\
    \ result;\n}", "{\n    long result = 1;\n    long power = n;\n    while (p > 0)\
    \ \n    {\n        if (p & 1) \n        {\n            result = (result * power)\
    \ % MOD;\n        }\n        power = (power * power) % MOD;\n        p >>= 1;\n\
    \    }\n    return result;\n}", "{\n    long res = 1;\n    while (n > 0) \n  \
    \  {\n        if (n & 1) \n        {\n            res = (res * n) % p;\n     \
    \   }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }", "{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n   \
    \     if (n % 2 == 1) \n        {\n            result = (result * a) % p;\n  \
    \      }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n    return result;\n\
    }", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n    \
    \    {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n   \
    \ return r;\n}", "{\n    long result = 1;\n    while (n > 0) \n    {\n       \
    \ if (n & 1) \n        {\n            result = (result * n) % p;\n        }\n\
    \        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return result;\n}",
  "{\n    long result = 1;\n    long pow = n;\n    while (p > 0) \n    {\n       \
    \ if (p & 1) \n        {\n            result = (result * pow) % p;\n        }\n\
    \        pow = (pow * pow) % p;\n        p >>= 1;\n    }\n    return result;\n\
    }", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1)\n\
    \            r = (r * 2) % p;\n        n = n / 2;\n    }\n    return r;\n}", "{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if (n %\
    \ 2 == 1) \n        {\n            r = (r * b) % p;\n        }\n        n = n\
    \ / 2;\n        b = (b * b) % p;\n    }\n    return r;\n}\n/*\nReturn the number\
    \ of digits in n.\n    >>> numdigits(123)\n    3\n    >>> numdigits(0)\n    1\n\
    \    >>> numdigits(-123)\n    Traceback (most recent call last):\n        ...\n\
    \    ValueError: n must be non-negative\n    \n*/\nlong numdigits(long n) \n{\n\
    \    if (n < 0) \n    {\n        throw new Exception(\"n must be non-negative\"\
    );\n    }\n    if (n == 0) \n    {\n        return 1;\n    }\n    return (long)floor(log10(n))\
    \ + 1;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sumdigits(10) # 1 +\
    \ 0 = 1\n    1\n    >>> sumdigits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>>\
    \ sumdigits(1234567890)\n    45\n    \n*/\nlong sumdigits(long n) \n{\n    long\
    \ s = 0;\n    while (n > 0) \n    {\n        s += n % 10;\n        n /= 10;\n\
    \    }\n    return s;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sumdigits(10)\
    \ # 1 + 0 = 1\n    1\n    >>> sumdigits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n \
    \   >>> sumdigits(1234567890)\n    45\n    \n*/\nlong sumdigits(long n) \n{\n\
    \    long s = 0;\n    while (n > 0) \n    {\n        s += n % 10;\n        n /=\
    \ 10;\n    }\n    return s;\n}\n/*\nReturn the sum of the digits in n.\n    >>>\
    \ sumdigits(", "{\n    long result = 1;\n    long power = n;\n    while (p > 0)\
    \ \n    {\n        if (p & 1)\n            result = (result * power) % 101;\n\
    \        power = (power * power) % 101;\n        p >>= 1;\n    }\n    return result;\n\
    }\n/*\nReturn a list of all the divisors of n.\n    >>> divisors(1)\n    [1]\n\
    \    >>> divisors(4)\n    [1, 2, 4]\n    >>> divisors(12)\n    [1, 2, 3, 4, 6,\
    \ 12]\n    >>> divisors(25)\n    [1, 5, 25]\n    >>> divisors(28)\n    [1, 2,\
    \ 4, 7, 14, 28]\n*/\nauto divisors(long n) \n{\n    auto result = new long[];\n\
    \    for (long i = 1; i <= n; i++) \n    {\n        if (n % i == 0)\n        \
    \    result ~= i;\n    }\n    return result;\n}\n/*\nReturn the number of divisors\
    \ of n.\n    >>> num_divisors(1)\n    1\n    >>> num_divisors(4)\n    3\n    >>>\
    \ num_divisors(12)\n    6\n    >>> num_divisors(25)\n    3\n    >>> num_divisors(28)\n\
    \    6\n*/\nlong num_divisors(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        if (n % i == 0)\n            result++;\n\
    \    }\n    return result;\n}\n/*\nReturn the sum of all the divisors of n.\n\
    \    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(4)\n    7\n    >>> sum_divisors(12)\n\
    \    28\n    >>> sum_divisors(25)\n    31\n    >>> sum_divisors(28)\n    56\n\
    */\nlong sum_divisors(long n) \n{\n    long", "{\n    long result = 1;\n    long\
    \ pow = n;\n    while (p > 0) \n    {\n        if (p % 2 == 1) \n        {\n \
    \           result = (result * pow) % p;\n        }\n        pow = (pow * pow)\
    \ % p;\n        p /= 2;\n    }\n    return result;\n}\n/*\nReturn the greatest\
    \ common divisor of two integers.\n    >>> gcd(12, 8)\n    4\n    >>> gcd(8, 12)\n\
    \    4\n    >>> gcd(3, 7)\n    1\n    >>> gcd(35, 49)\n    7\n    >>> gcd(20,\
    \ 10)\n    10\n    >>> gcd(40, 20)\n    20\n*/\nlong gcd(long a, long b) \n{\n\
    \    if (a < b) \n    {\n        return gcd(b, a);\n    }\n    if (b == 0) \n\
    \    {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n/*\nReturn the\
    \ least common multiple of two integers.\n    >>> lcm(12, 8)\n    24\n    >>>\
    \ lcm(8, 12)\n    24\n    >>> lcm(3, 7)\n    21\n    >>> lcm(35, 49)\n    245\n\
    \    >>> lcm(20, 10)\n    20\n    >>> lcm(40, 20)\n    40\n*/\nlong lcm(long a,\
    \ long b) \n{\n    return a * b / gcd(a, b);\n}\n/*\nReturn the greatest common\
    \ divisor of a list of integers.\n    >>> gcd_list([12, 8, 28])\n    4\n    >>>\
    \ gcd_list([8, 12, 28])\n    4\n    >>> gcd_list([3, 7, 11])\n    1\n    >>> gcd_list([35,\
    \ 49, 77])\n    7\n    >>> gcd_list([20, 10, 40])\n    10\n    >>> gcd_list([40,\
    \ 20, 80])\n    20\n*/\nlong gcd_list(long[] a) \n{\n   ", "{\n    long result\
    \ = 1;\n    long x = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n\
    \        {\n            result = (result * x) % p;\n        }\n        n = n /\
    \ 2;\n        x = (x * x) % p;\n    }\n    return result;\n}", "{\n    long r\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n          \
    \  r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if (n %\
    \ 2 == 1)\n            r = (r * b) % p;\n        n = n / 2;\n        b = (b *\
    \ b) % p;\n    }\n    return r;\n}", "{\n    long r = 1;\n    while (n > 0) \n\
    \    {\n        if (n % 2 == 1) \n        {\n            r = (r * 2) % p;\n  \
    \      }\n        n = n / 2;\n        if (n > 0) \n        {\n            r =\
    \ (r * r) % p;\n        }\n    }\n    return r;\n}", "{\n    long r = 1;\n   \
    \ while (n > 0) {\n        if (n & 1) {\n            r = (r * 2) % p;\n      \
    \  }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long res = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res * n)\
    \ % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}", "{\n    long result = 1;\n    long pow = n;\n    while (p > 0) \n\
    \    {\n        if (p & 1) \n        {\n            result = (result * pow) %\
    \ p;\n        }\n        pow = (pow * pow) % p;\n        p >>= 1;\n    }\n   \
    \ return result;\n}", "{\n    long result = 1;\n    long a = 2;\n    while (n\
    \ > 0) \n    {\n        if (n % 2 == 1) \n        {\n            result = (result\
    \ * a) % p;\n        }\n        n = n >> 1;\n        a = (a * a) % p;\n    }\n\
    \    return result;\n}", "{\n    long r = 1;\n    while (n > 0) \n    {\n    \
    \    if (n & 1) \n        {\n            r = (r * 2) % p;\n        }\n       \
    \ n >>= 1;\n    }\n    return r;\n}", "{\n    long result = 1;\n    long a = 2;\n\
    \    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            result\
    \ = (result * a) % p;\n        }\n        n = n / 2;\n        a = (a * a) % p;\n\
    \    }\n    return result;\n}", "{\n    long result = 1;\n    long power = n;\n\
    \    while (p != 0) \n    {\n        if (p & 1)\n            result = (result\
    \ * power) % MOD;\n        power = (power * power) % MOD;\n        p >>= 1;\n\
    \    }\n    return result;\n}", "{\n    long r = 1;\n    while (n > 0) \n    {\n\
    \        if (n & 1) \n        {\n            r = (r * 2) % p;\n        }\n   \
    \     n >>= 1;\n    }\n    return r;\n}\n/*\nReturn the nth Lucas number.\n  \
    \  >>> lucas(0)\n    2\n    >>> lucas(1)\n    1\n    >>> lucas(2)\n    3\n   \
    \ >>> lucas(3)\n    4\n    >>> lucas(4)\n    7\n    >>> lucas(5)\n    11\n   \
    \ >>> lucas(6)\n    18\n    >>> lucas(7)\n    29\n    >>> lucas(8)\n    47\n \
    \   >>> lucas(9)\n    76\n    >>> lucas(10)\n    123\n    >>> lucas(11)\n    199\n\
    \    >>> lucas(12)\n    322\n    >>> lucas(13)\n    521\n    >>> lucas(14)\n \
    \   843\n    >>> lucas(15)\n    1364\n    >>> lucas(16)\n    2207\n    >>> lucas(17)\n\
    \    3571\n    >>> lucas(18)\n    5778\n    >>> lucas(19)\n    9349\n    >>> lucas(20)\n\
    \    15127\n    >>> lucas(21)\n    24476\n    >>> lucas(22)\n    39603\n    >>>\
    \ lucas(23)\n    64079\n    >>> lucas(24)\n    103682\n    >>> lucas(25)\n   \
    \ 167761\n    >>> lucas(26)\n    271443\n    >>> lucas(27)\n    439204\n    >>>\
    \ lucas(28)\n    710647\n    >>> lucas(29)\n    1149851\n    >>> lucas(30)\n \
    \   1860498\n    >>> lucas(31)\n    3010349\n    >>> lucas(32)\n    4870847\n\
    \    >>> lucas(33)\n    7881196\n    >>> lucas(34)\n    12752043\n    >>> lucas(35)\n\
    \    20633239\n    >>> lucas", "{\n    long r = 1;\n    while (n > 0) {\n    \
    \    if (n & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n\
    \    }\n    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(10**100)\n    101\n*/\nlong numdigits(long n) \n{\n\
    \    long r = 1;\n    while (n >= 10) {\n        n /= 10;\n        r++;\n    }\n\
    \    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(10**100)\n    101\n*/\nlong numdigits(long n) \n{\n\
    \    long r = 1;\n    while (n >= 10) {\n        n /= 10;\n        r++;\n    }\n\
    \    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(10**100)\n    101\n*/\nlong numdigits(long n) \n{\n\
    \    long r = 1;\n    while (n >= 10) {\n        n /= 10;\n        r++;\n    }\n\
    \    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(12345)\n\
    \    5\n    >>> numdigits(10**100)\n    101\n*/\nlong", "{\n    long r = 1;\n\
    \    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            r\
    \ = (r * 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) \n       \
    \ {\n            r = (r * r) % p;\n        }\n    }\n    return r;\n}", "{\n \
    \   long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n &\
    \ 1) \n        {\n            res = (res * a) % p;\n        }\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long res =\
    \ 1;\n    while (n > 0) \n    {\n        if (n & 1)\n            res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n      \
    \  if (n & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n  \
    \      n >>= 1;\n    }\n    return res;\n}", "{\n    long r = 1;\n    while (n\
    \ > 0) \n    {\n        if (n & 1)\n            r = (r * 2) % p;\n        n >>=\
    \ 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n    while (n > 0) \n    {\n\
    \        if (n & 1) \n        {\n            r = (r * n) % p;\n        }\n   \
    \     n >>= 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n    while (n >\
    \ 0) \n    {\n        if (n % 2 == 1) \n        {\n            r = (r * 2) % p;\n\
    \        }\n        n = n / 2;\n        if (n > 0) \n        {\n            r\
    \ = (r * r) % p;\n        }\n    }\n    return r;\n}", "{\n    long res = 1;\n\
    \    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n            res = (res\
    \ * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n\
    }", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n    \
    \    {\n            r = (r * n) % p;\n        }\n        n >>= 1;\n    }\n   \
    \ return r;\n}", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            r = (r * 2) % p;\n        n >>= 1;\n    }\n    return r;\n\
    }\n/*\nReturn the number of 1 bits in n.\n    >>> bitcount(0)\n    0\n    >>>\
    \ bitcount(1)\n    1\n    >>> bitcount(2)\n    1\n    >>> bitcount(3)\n    2\n\
    \    >>> bitcount(4)\n    1\n    >>> bitcount(5)\n    2\n    >>> bitcount(6)\n\
    \    2\n    >>> bitcount(7)\n    3\n    >>> bitcount(8)\n    1\n    >>> bitcount(9)\n\
    \    2\n    >>> bitcount(10)\n    2\n    >>> bitcount(11)\n    3\n    >>> bitcount(12)\n\
    \    2\n    >>> bitcount(13)\n    3\n    >>> bitcount(14)\n    3\n    >>> bitcount(15)\n\
    \    4\n    >>> bitcount(16)\n    1\n    >>> bitcount(17)\n    2\n    >>> bitcount(18)\n\
    \    2\n    >>> bitcount(19)\n    3\n    >>> bitcount(20)\n    2\n    >>> bitcount(21)\n\
    \    3\n    >>> bitcount(22)\n    3\n    >>> bitcount(23)\n    4\n    >>> bitcount(24)\n\
    \    2\n    >>> bitcount(25)\n    3\n    >>> bitcount(26)\n    3\n    >>> bitcount(27)\n\
    \    4\n    >>> bitcount(28)\n    3\n    >>> bitcount(29)\n    4\n    >>> bitcount(30)\n\
    \    4\n    >>> bitcount(31)\n    5\n    >>> bitcount(32)\n    1\n    >>> bitcount(33)\n\
    \    2\n    >>> bitcount(34)\n    2\n    >>> bitcount(35)\n    3\n    >>> bitcount(36)\n\
    \    2\n    >>> bitcount(37)\n    3\n    >>> bitcount(38)\n    3\n    >>> bitcount(39)\n\
    \    4\n   ", "{\n    long res = 1;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n        {\n            res = (res * n) % p;\n        }\n        n = n\
    \ >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}\n/*\nReturn the greatest\
    \ common divisor of a and b.\n    >>> gcd(14, 15)\n    1\n    >>> gcd(2 * 3 *\
    \ 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong gcd(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\n/*\nReturn the least common\
    \ multiple of a and b.\n    >>> lcm(14, 15)\n    210\n    >>> lcm(2 * 3 * 5 *\
    \ 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    2310\n*/\nlong lcm(long a,\
    \ long b) \n{\n    return (a * b) / gcd(a, b);\n}\n/*\nReturn the greatest common\
    \ divisor of a and b.\n    >>> gcd(14, 15)\n    1\n    >>> gcd(2 * 3 * 5 * 11\
    \ * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong gcd(long a, long\
    \ b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n/*\nReturn the least common multiple\
    \ of a and b.\n    >>> lcm(14, 15)\n    210\n    >>> lcm(2 * 3 * 5 * 11 * 17,\n\
    \    ...     3 * 7 * 11 * 13 * 19)\n    2310\n*/\nlong lcm(long a, long b) \n\
    {\n    return (a * b) / gcd(a, b);\n}\n/*", "{\n    long r = 1;\n    while (n\
    \ > 0) \n    {\n        if (n % 2 == 1) \n        {\n            r = (r * 2) %\
    \ p;\n        }\n        n /= 2;\n        if (n > 0) \n        {\n           \
    \ r = (r * r) % p;\n        }\n    }\n    return r;\n}", "{\n    long r = 1;\n\
    \    long b = 2;\n    while (n != 0) \n    {\n        if (n % 2 == 1)\n      \
    \      r = (r * b) % p;\n        n = n / 2;\n        b = (b * b) % p;\n    }\n\
    \    return r;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0)\
    \ \n    {\n        if (n % 2 == 1) \n        {\n            res = (res * a) %\
    \ p;\n        }\n        a = (a * a) % p;\n        n = n / 2;\n    }\n    return\
    \ res % p;\n}", "{\n    long result = 1;\n    while (n > 0) \n    {\n        if\
    \ (n & 1) \n        {\n            result = (result * n) % p;\n        }\n   \
    \     n = n >> 1;\n        n = (n * n) % p;\n    }\n    return result;\n}\n/*\n\
    Return the greatest common divisor of a and b.\n    >>> gcd(14, 15)\n    1\n \
    \   >>> gcd(2 * 3 * 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    3 * 11\n\
    */\nlong gcd(long a, long b) \n{\n    while (b != 0) \n    {\n        long t =\
    \ b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n/*\nReturn\
    \ the least common multiple of a and b.\n    >>> lcm(14, 15)\n    210\n    >>>\
    \ lcm(2 * 3 * 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    2310\n*/\n\
    long lcm(long a, long b) \n{\n    return (a * b) / gcd(a, b);\n}\n/*\nReturn the\
    \ greatest common divisor of a and b.\n    >>> gcd(14, 15)\n    1\n    >>> gcd(2\
    \ * 3 * 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong\
    \ gcd(long a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n \
    \       b = a % b;\n        a = t;\n    }\n    return a;\n}\n/*\nReturn the least\
    \ common multiple of a and b.\n    >>> lcm(14, 15)\n    210\n    >>> lcm(2 * 3\
    \ * 5 * 11 * 17,\n    ...     3 * 7 * 11 * 13 * 19)\n    2310\n*/\nlong lcm(long\
    \ a, long b) \n{\n    return (a * b) / gcd(a, b);\n}\n/*", "{\n    long res =\
    \ 1;\n    while (n > 0) \n    {\n        if (n & 1)\n            res = (res *\
    \ n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n     \
    \       r = (r * 2) % p;\n        n >>= 1;\n    }\n    return r;\n}", "{\n   \
    \ long res = 1;\n    for (long i = 0; i < n; i++) \n    {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;\n}", "{\n    long result = 1;\n    long power\
    \ = n;\n    while (p > 0) \n    {\n        if (p & 1)\n            result = (result\
    \ * power) % n;\n        power = (power * power) % n;\n        p >>= 1;\n    }\n\
    \    return result;\n}", "{\n    long res = 1;\n    while (n > 0) \n    {\n  \
    \      if (n & 1) \n        {\n            res = (res * n) % p;\n        }\n \
    \       n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}", "{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of digits in n.\n \
    \   >>> num_digits(12345)\n    5\n    >>> num_digits(0)\n    1\n    >>> num_digits(-12345)\n\
    \    5\n*/\nlong num_digits(long n) \n{\n    long res = 0;\n    while (n > 0)\
    \ \n    {\n        res++;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn\
    \ the sum of the digits of n.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n   \
    \ >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>> sum_digits(1234567890)\n\
    \    45\n*/\nlong sum_digits(long n) \n{\n    long res = 0;\n    while (n > 0)\
    \ \n    {\n        res += n % 10;\n        n /= 10;\n    }\n    return res;\n\
    }\n/*\nReturn the sum of the digits of n.\n    >>> sum_digits(10) # 1 + 0 = 1\n\
    \    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>> sum_digits(1234567890)\n\
    \    45\n*/\nlong sum_digits(long n) \n{\n    long res = 0;\n    while (n > 0)\
    \ \n    {\n        res += n % 10;\n        n /= 10;\n    }\n    return res;\n\
    }\n/*\nReturn the sum of the digits of n.\n    >>> sum_digits(10) # 1 + 0 = 1\n\
    \    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>> sum_digits(1234567890)",
  "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n        {\n            res = (res * a) % p;\n        }\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long result\
    \ = 1;\n    long power = n;\n    long i;\n    for (i = 0; i < p; i++) \n    {\n\
    \        if (power & 1) \n        {\n            result = (result * n) % p;\n\
    \        }\n        power = power >> 1;\n        n = (n * n) % p;\n    }\n   \
    \ return result;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0)\
    \ \n    {\n        if (n & 1) \n        {\n            res = (res * a) % p;\n\
    \        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n\
    }\n/*\nReturn the number of primes less than n.\n    >>> count_primes(2)\n   \
    \ 0\n    >>> count_primes(3)\n    1\n    >>> count_primes(4)\n    2\n    >>> count_primes(5)\n\
    \    2\n    >>> count_primes(10)\n    4\n    >>> count_primes(100)\n    25\n \
    \   >>> count_primes(1000)\n    168\n    >>> count_primes(10000)\n    1229\n \
    \   >>> count_primes(100000)\n    9592\n    >>> count_primes(1000000)\n    78498\n\
    \    >>> count_primes(10000000)\n    664579\n    >>> count_primes(100000000)\n\
    \    5761455\n    >>> count_primes(1000000000)\n    50847534\n    >>> count_primes(10000000000)\n\
    \    455052511\n    >>> count_primes(100000000000)\n    4118054813\n    >>> count_primes(1000000000000)\n\
    \    37607912018\n    >>> count_primes(10000000000000)\n    346065536839\n   \
    \ >>> count_primes(100000000000000)\n    318626801858\n    >>> count_primes(1000000000000000)\n\
    \    2944730731902\n    >>> count_primes(10000000000000000)\n    2734388303059\n\
    \    >>> count_primes(100000000000000000)\n    2543407095054\n    >>> count_primes(1000000000000000000)\n\
    \    2369212305927\n*/\nlong count_primes(long n) \n{\n    long res = 0;\n   \
    \ for (long i = 2; i < n; i++) \n    {\n        if (is_prime(i)) \n        {\n",
  "{\n    long r = 1;\n    foreach (i; 0 .. n)\n        r = (r * 2) % p;\n    return\
    \ r;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n      \
    \  if (n % 2 == 1) {\n            res = (res * a) % p;\n        }\n        a =\
    \ (a * a) % p;\n        n /= 2;\n    }\n    return res;\n}", "{\n    long res\
    \ = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n    \
    \    {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return res;\n}", "{\n    long res = 1;\n    long\
    \ a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n        \
    \    res = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n >>=\
    \ 1;\n    }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n   \
    \ while (n > 0) \n    {\n        if (n & 1)\n            res = (res * a) % p;\n\
    \        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ a random integer in the range [0, n).\n    >>> random_int(0)\n    Traceback\
    \ (most recent call last):\n        ...\n    ValueError: n must be > 0\n    >>>\
    \ random_int(5)\n    4\n    >>> random_int(5)\n    1\n    >>> random_int(5)\n\
    \    3\n    >>> random_int(5)\n    4\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n\
    \    3\n    >>> random_int(5)\n    4\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n\
    \    0\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n    4\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n    4\n    >>> random_int(5)\n\
    \    0\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n    3\n    >>> random_int(5)\n\
    \    4\n    >>> random_int(5)\n    0\n    >>> random_int(5)\n    0\n    >>> random",
  "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n        {\n            res = (res * a) % p;\n        }\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long res =\
    \ 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n            res\
    \ = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;\n}", "{\n    long res = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res * a)\
    \ % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}", "{\n    long res = 1;\n    for (int i = 0; i < n; i++) \n    {\n \
    \       res = (res * 2) % p;\n    }\n    return res;\n}", "{\n    long res = 1;\n\
    \    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1)\n            res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}", "{\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return\
    \ n;\n    long t = modp(n / 2, p);\n    if (n % 2 == 0)\n        return (t * t)\
    \ % p;\n    else\n        return (t * t * n) % p;\n}", "{\n    long res = 1;\n\
    \    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1)\n            res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}", "{\n    long result = 1;\n    long power = n;\n    while (p) \n  \
    \  {\n        if (p & 1) \n        {\n            result = (result * power) %\
    \ 101;\n        }\n        power = (power * power) % 101;\n        p >>= 1;\n\
    \    }\n    return result;\n}\n/*\nReturn the number of digits in n.\n    >>>\
    \ num_digits(12345)\n    5\n    >>> num_digits(0)\n    1\n    >>> num_digits(-12345)\n\
    \    5\n*/\nlong num_digits(long n) \n{\n    long count = 0;\n    while (n) \n\
    \    {\n        count += 1;\n        n /= 10;\n    }\n    return count;\n}\n/*\n\
    Return the sum of the digits in n.\n    >>> sum_digits(10) # 1 + 0 = 1\n    1\n\
    \    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>> sum_digits(1234567890)\n\
    \    45\n    >>> a = sum_digits(123) # make sure that you are using return rather\
    \ than print\n    >>> a\n    6\n*/\nlong sum_digits(long n) \n{\n    long sum\
    \ = 0;\n    while (n) \n    {\n        sum += n % 10;\n        n /= 10;\n    }\n\
    \    return sum;\n}\n/*\nReturn the sum of all the digits in n.\n    >>> sum_every_other_digit(1)\
    \ # 1\n    1\n    >>> sum_every_other_digit(0) # 0\n    0\n    >>> sum_every_other_digit(1234567890)\
    \ # 1 + 2 + 3 + 4 + 5 + 7 + 8\n    30\n    >>> sum_every_other_digit(123456) #\
    \ 1 + 3 + 5\n    9\n    >>> sum_every_other_digit(123456789) # 1 + 2 + 3 + 5 +\
    \ 6 + 8\n    30\n*/\nlong sum_every_other_digit(long n) \n{\n    long sum = 0;\n\
    \    long count", "{\n    if (n == 0)\n        return 1;\n    long r = modp(n\
    \ / 2, p);\n    r = (r * r) % p;\n    if (n % 2 == 1)\n        r = (r * 2) % p;\n\
    \    return r;\n}", "{\n    long r = 1;\n    while (n > 0) {\n        if (n &\
    \ 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n   \
    \ return r;\n}", "{\n    long r = 1;\n    while (n > 0) {\n        if (n & 1)\
    \ {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return\
    \ r;\n}", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n\
    \        if (n & 1) \n        {\n            res = (res * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n       \
    \     result = (result * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return result;\n}\n/*\nReturn the greatest common divisor of a and\
    \ b.\n    >>> gcd(14, 15)\n    1\n    >>> gcd(2 * 3 * 5 * 11 * 17,\n    ...  \
    \   3 * 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong gcd(long a, long b) \n{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}\n/*\nReturn the least common multiple of a and b.\n \
    \   >>> lcm(14, 15)\n    210\n    >>> lcm(2 * 3 * 5 * 11 * 17,\n    ...     3\
    \ * 7 * 11 * 13 * 19)\n    2310\n*/\nlong lcm(long a, long b) \n{\n    return\
    \ (a * b) / gcd(a, b);\n}\n/*\nReturn the greatest common divisor of a and b.\n\
    \    >>> gcd(14, 15)\n    1\n    >>> gcd(2 * 3 * 5 * 11 * 17,\n    ...     3 *\
    \ 7 * 11 * 13 * 19)\n    3 * 11\n*/\nlong gcd(long a, long b) \n{\n    while (b\
    \ != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n   \
    \ }\n    return a;\n}\n/*\nReturn the least common multiple of a and b.\n    >>>\
    \ lcm(14, 15)\n    210\n    >>> lcm(2 * 3 * 5 * 11 * 17,\n    ...     3 * 7 *\
    \ 11 * 13 * 19)\n    2310\n*/\nlong lcm(long a, long b) \n{\n    return (a * b)\
    \ / gcd(a, b);\n}\n/*\nReturn the greatest common divis", "{\n    long r = 1;\n\
    \    while (n > 0) {\n        if (n & 1) {\n            r = (r * 2) % p;\n   \
    \     }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n   \
    \ long b = 2;\n    while (n != 0) \n    {\n        if (n & 1)\n            r =\
    \ (r * b) % p;\n        n >>= 1;\n        b = (b * b) % p;\n    }\n    return\
    \ r;\n}", "{\n    long result = 1;\n    long a = 2;\n    while (n > 0) {\n   \
    \     if (n % 2 == 1) {\n            result = (result * a) % p;\n        }\n \
    \       n = n / 2;\n        a = (a * a) % p;\n    }\n    return result;\n}", "{\n\
    \    long result = 1;\n    long x = n;\n    while (p > 0) \n    {\n        if\
    \ (p & 1) \n        {\n            result = (result * x) % n;\n        }\n   \
    \     p = p >> 1;\n        x = (x * x) % n;\n    }\n    return result;\n}", "{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n\
    \            r = (r * n) % p;\n        }\n        n = n >> 1;\n    }\n    return\
    \ r;\n}", "{\n    long result = 1;\n    long x = 2;\n    while (n > 0) \n    {\n\
    \        if (n % 2 == 1) \n        {\n            result = (result * x) % p;\n\
    \        }\n        n = n / 2;\n        x = (x * x) % p;\n    }\n    return result;\n\
    }", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}", "{\n    long r = 1;\n    for (; n > 0; n\
    \ >>= 1) \n    {\n        if (n & 1) \n        {\n            r = (r * 2) % p;\n\
    \        }\n    }\n    return r;\n}", "{\n    long res = 1;\n    while (n > 0)\
    \ \n    {\n        if (n & 1) \n        {\n            res = (res * n) % p;\n\
    \        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n\
    }", "{\n    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n\
    \            result = (result * n) % p;\n        n = n >> 1;\n        n = (n *\
    \ n) % p;\n    }\n    return result;\n}", "{\n    long result = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1)\n            result = (result * n) % p;\n\
    \        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return result;\n}",
  "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n        {\n            res = (res * a) % p;\n        }\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long result\
    \ = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1)\n\
    \            result = (result * a) % p;\n        n = n / 2;\n        a = (a *\
    \ a) % p;\n    }\n    return result;\n}", "{\n    if (n == 0)\n        return\
    \ 1;\n    long r = modp(n >> 1, p);\n    r = (r * r) % p;\n    if (n & 1)\n  \
    \      r = (r * 2) % p;\n    return r;\n}", "{\n    long r = 1;\n    while (n\
    \ > 0) {\n        if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n\
    \        n = n / 2;\n    }\n    return r;\n}\n/*\nReturn the number of digits\
    \ in n.\n    >>> numdigits(0)\n    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n\
    \    2\n    >>> numdigits(10**100)\n    101\n    >>> numdigits(10**1000)\n   \
    \ 1001\n*/\nlong numdigits(long n) \n{\n    long r = 1;\n    while (n >= 10) {\n\
    \        n = n / 10;\n        r = r + 1;\n    }\n    return r;\n}\n/*\nReturn\
    \ the number of digits in n.\n    >>> numdigits(0)\n    1\n    >>> numdigits(1)\n\
    \    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(10**100)\n    101\n  \
    \  >>> numdigits(10**1000)\n    1001\n*/\nlong numdigits(long n) \n{\n    long\
    \ r = 1;\n    while (n >= 10) {\n        n = n / 10;\n        r = r + 1;\n   \
    \ }\n    return r;\n}\n/*\nReturn the number of digits in n.\n    >>> numdigits(0)\n\
    \    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n    2\n    >>> numdigits(10**100)\n\
    \    101\n    >>> numdigits(10**1000)\n    1001\n*/\nlong numdigits(long n) \n\
    {\n    long r = 1;\n    while (n >= 10) {\n        n = n / 10;\n        r = r\
    \ + 1;\n    }\n    return r;\n}\n/*\nReturn the number of digits in n.\n    >>>\
    \ numdigits(0)\n    1\n    >>> numdigits(1)\n    1\n    >>> numdigits(10)\n  \
    \  2\n    >>> numdigits(", "{\n    if (n == 0)\n        return 1;\n    else if\
    \ (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    else\n\
    \        return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n}", "{\n    long res\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n          \
    \  res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) %\
    \ p;\n    }\n    return res;\n}", "{\n    long r = 1;\n    while (n > 0) {\n \
    \       if (n & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n\
    \    }\n    return r;\n}", "{\n    long r = 1;\n    long b = 2;\n    while (n\
    \ != 0) \n    {\n        if (n & 1) \n        {\n            r = (r * b) % p;\n\
    \        }\n        n >>= 1;\n        b = (b * b) % p;\n    }\n    return r;\n\
    }", "{\n    long r = 1;\n    while (n > 0) {\n        if (n & 1) {\n         \
    \   r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}", "{\n    long r = 1;\n    while (n > 0) \n\
    \    {\n        if (n & 1) \n        {\n            r = (r * 2) % p;\n       \
    \ }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long res = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1)\n            res = (res * n) % p;\n    \
    \    n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;\n}", "{\n \
    \   long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if (n & 1)\
    \ \n        {\n            r = (r * b) % p;\n        }\n        n >>= 1;\n   \
    \     b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long res = 1;\n    long\
    \ a = 2;\n    while (n) \n    {\n        if (n & 1)\n            res = (res *\
    \ a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n\
    }\n/*\nReturn the nth Lucas number (be aware of numerics).\n    >>> lucas(0)\n\
    \    2\n    >>> lucas(1)\n    1\n    >>> lucas(2)\n    3\n    >>> lucas(3)\n \
    \   4\n    >>> lucas(4)\n    7\n    >>> lucas(5)\n    11\n    >>> lucas(6)\n \
    \   18\n    >>> lucas(7)\n    29\n    >>> lucas(8)\n    47\n    >>> lucas(9)\n\
    \    76\n    >>> lucas(10)\n    123\n    >>> lucas(11)\n    199\n    >>> lucas(12)\n\
    \    322\n    >>> lucas(13)\n    521\n    >>> lucas(14)\n    843\n    >>> lucas(15)\n\
    \    1364\n    >>> lucas(16)\n    2207\n    >>> lucas(17)\n    3571\n    >>> lucas(18)\n\
    \    5778\n    >>> lucas(19)\n    9349\n    >>> lucas(20)\n    15127\n    >>>\
    \ lucas(21)\n    24476\n    >>> lucas(22)\n    39603\n    >>> lucas(23)\n    64079\n\
    \    >>> lucas(24)\n    103682\n    >>> lucas(25)\n    167761\n    >>> lucas(26)\n\
    \    271443\n    >>> lucas(27)\n    439204\n    >>> lucas(28)\n    710647\n  \
    \  >>> lucas(29)\n    1149851\n    >>> lucas(30)\n    1860498\n    >>> lucas(31)\n\
    \    3010349\n    >>> lucas(32)\n    4870847\n    >>> lucas(33)\n    7881196\n\
    \    >>> lucas(34)\n    12752043\n   ", "{\n    long res = 1;\n    long a = 2;\n\
    \    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            res\
    \ = (res * a) % p;\n        }\n        a = (a * a) % p;\n        n = n / 2;\n\
    \    }\n    return res % p;\n}", "{\n    long result = 1;\n    long power = n;\n\
    \    while (p > 0) \n    {\n        if (p & 1) \n        {\n            result\
    \ = (result * power) % 101;\n        }\n        power = (power * power) % 101;\n\
    \        p >>= 1;\n    }\n    return result;\n}\n/*\nReturn the number of digits\
    \ in n.\n    >>> num_digits(123)\n    3\n    >>> num_digits(0)\n    1\n    >>>\
    \ num_digits(-123)\n    Traceback (most recent call last):\n        ...\n    ValueError:\
    \ n must be non-negative\n*/\nlong num_digits(long n) \n{\n    if (n < 0) \n \
    \   {\n        throw new Exception(\"n must be non-negative\");\n    }\n    if\
    \ (n == 0) \n    {\n        return 1;\n    }\n    return (long)floor(log10(n))\
    \ + 1;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(10) # 1\
    \ + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>>\
    \ sum_digits(1234567890)\n    45\n*/\nlong sum_digits(long n) \n{\n    long sum\
    \ = 0;\n    while (n > 0) \n    {\n        sum += n % 10;\n        n /= 10;\n\
    \    }\n    return sum;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(10)\
    \ # 1 + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n\
    \    >>> sum_digits(1234567890)\n    45\n*/\nlong sum_digits(long n) \n{\n   \
    \ long sum = 0;\n    while (n > 0) \n    {\n        sum += n % 10;\n        n\
    \ /= 10;\n    }\n    return sum;\n}\n/*\nReturn the sum of the digits in n.\n\
    \    >>> sum", "{\n    long r = 1;\n    while (n > 0) \n    {\n        if (n &\
    \ 1) \n        {\n            r = (r * n) % p;\n        }\n        n = n >> 1;\n\
    \    }\n    return r;\n}", "{\n    long res = 1;\n    while (n > 0) \n    {\n\
    \        if (n & 1)\n            res = (res * n) % p;\n        n = n >> 1;\n \
    \       n = (n * n) % p;\n    }\n    return res;\n}", "{\n    long result = 1;\n\
    \    long power = n;\n    while (p > 0) {\n        if (p & 1) {\n            result\
    \ = (result * power) % n;\n        }\n        power = (power * power) % n;\n \
    \       p >>= 1;\n    }\n    return result;\n}", "{\n    long res = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            res = (res * n)\
    \ % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of digits in n.\n    >>> num_digits(123)\n  \
    \  3\n    >>> num_digits(0)\n    1\n    >>> num_digits(-123)\n    3\n*/\nlong\
    \ num_digits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n     \
    \   res++;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn the sum of\
    \ the digits in n.\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(0)\n  \
    \  0\n    >>> sum_digits(-123)\n    6\n*/\nlong sum_digits(long n) \n{\n    long\
    \ res = 0;\n    while (n > 0) \n    {\n        res += n % 10;\n        n /= 10;\n\
    \    }\n    return res;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(123)\n\
    \    6\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(-123)\n    6\n*/\nlong\
    \ sum_digits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n     \
    \   res += n % 10;\n        n /= 10;\n    }\n    return res;\n}\n/*\nReturn the\
    \ sum of the digits in n.\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(0)\n\
    \    0\n    >>> sum_digits(-123)\n    6\n*/\nlong sum_digits(long n) \n{\n   \
    \ long res = 0;\n    while (n > 0) \n    {\n        res += n % 10;\n        n\
    \ /= 10;\n    }\n    return res;\n", "{\n    long result = 1;\n    long a = 2;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n        {\n            result\
    \ = (result * a) % p;\n        }\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return result;\n}\n/*\nReturn the number of digits in n.\n    >>>\
    \ numdigits(12345)\n    5\n    >>> numdigits(0)\n    1\n    >>> numdigits(-12345)\n\
    \    5\n*/\nlong numdigits(long n) \n{\n    long result = 0;\n    while (n > 0)\
    \ \n    {\n        result++;\n        n /= 10;\n    }\n    return result;\n}\n\
    /*\nReturn the number of digits in the base b representation of n.\n    >>> numdigits(12345,\
    \ 10)\n    5\n    >>> numdigits(12345, 2)\n    13\n    >>> numdigits(12345, 8)\n\
    \    6\n    >>> numdigits(0, 10)\n    1\n    >>> numdigits(0, 2)\n    0\n    >>>\
    \ numdigits(0, 8)\n    0\n    >>> numdigits(-12345, 10)\n    5\n    >>> numdigits(-12345,\
    \ 2)\n    13\n    >>> numdigits(-12345, 8)\n    6\n*/\nlong numdigits(long n,\
    \ long b) \n{\n    long result = 0;\n    while (n > 0) \n    {\n        result++;\n\
    \        n /= b;\n    }\n    return result;\n}\n/*\nReturn the number of digits\
    \ in the base b representation of n.\n    >>> numdigits(12345, 10)\n    5\n  \
    \  >>> numdigits(12345, 2)\n    13\n    >>> numdigits(12345, 8)\n    6\n    >>>\
    \ numdigits(0, 10)\n    1\n    >>> numdigits(0, 2)\n    0\n    >>> numdigits(0,\
    \ 8)\n    0\n    >>> numdigits(-12345, 10)\n    5\n   ", "{\n    long result =\
    \ 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \  {\n            result = (result * a) % p;\n        }\n        n >>= 1;\n  \
    \      a = (a * a) % p;\n    }\n    return result;\n}", "{\n    long result =\
    \ 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n \
    \       {\n            result = (result * a) % p;\n        }\n        n = n /\
    \ 2;\n        a = (a * a) % p;\n    }\n    return result;\n}", "{\n    long result\
    \ = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n\
    \        {\n            result = (result * a) % p;\n        }\n        n = n /\
    \ 2;\n        a = (a * a) % p;\n    }\n    return result;\n}", "{\n    long r\
    \ = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n          \
    \  r = (r * n) % p;\n        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n\
    \            res = (res * n) % p;\n        }\n        n = n >> 1;\n        n =\
    \ (n * n) % p;\n    }\n    return res;\n}", "{\n    long r = 1;\n    long b =\
    \ 2;\n    while (n > 0) {\n        if (n & 1) {\n            r = (r * b) % p;\n\
    \        }\n        n >>= 1;\n        b = (b * b) % p;\n    }\n    return r;\n\
    }", "{\n    long r = 1;\n    foreach (i; 0 .. n)\n        r = (r * 2) % p;\n \
    \   return r;\n}\n/*\nReturn the number of bits in the binary representation of\
    \ n.\n    >>> bit_length(0)\n    0\n    >>> bit_length(1)\n    1\n    >>> bit_length(2)\n\
    \    2\n    >>> bit_length(3)\n    2\n    >>> bit_length(4)\n    3\n    >>> bit_length(5)\n\
    \    3\n    >>> bit_length(6)\n    3\n    >>> bit_length(7)\n    3\n    >>> bit_length(8)\n\
    \    4\n    >>> bit_length(9)\n    4\n    >>> bit_length(10)\n    4\n    >>> bit_length(11)\n\
    \    4\n    >>> bit_length(12)\n    4\n    >>> bit_length(13)\n    4\n    >>>\
    \ bit_length(14)\n    4\n    >>> bit_length(15)\n    4\n    >>> bit_length(16)\n\
    \    5\n    >>> bit_length(17)\n    5\n    >>> bit_length(18)\n    5\n    >>>\
    \ bit_length(19)\n    5\n    >>> bit_length(20)\n    5\n    >>> bit_length(21)\n\
    \    5\n    >>> bit_length(22)\n    5\n    >>> bit_length(23)\n    5\n    >>>\
    \ bit_length(24)\n    5\n    >>> bit_length(25)\n    5\n    >>> bit_length(26)\n\
    \    5\n    >>> bit_length(27)\n    5\n    >>> bit_length(28)\n    5\n    >>>\
    \ bit_length(29)\n    5\n    >>> bit_length(30)\n    5\n    >>> bit_length(31)\n\
    \    5\n    >>> bit_length(32)\n    6\n    >>> bit_length(33)\n    6\n    >>>\
    \ bit_length(34)\n    6\n    >>> bit_length(35)\n    6\n    >>> bit_length(36)\n\
    \    6\n    >>> bit_length(37)\n    6\n   ", "{\n    long r = 1;\n    while (n\
    \ > 0) \n    {\n        if (n & 1) \n        {\n            r = (r * n) % p;\n\
    \        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n\
    \    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            r\
    \ = (r * 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) \n       \
    \ {\n            r = (r * r) % p;\n        }\n    }\n    return r;\n}\n/*\nReturn\
    \ the number of digits in n.\n    >>> num_digits(12345)\n    5\n    >>> num_digits(0)\n\
    \    1\n    >>> num_digits(-12345)\n    5\n*/\nlong num_digits(long n) \n{\n \
    \   if (n == 0) \n    {\n        return 1;\n    }\n    return (long)floor(log10(abs(n)))\
    \ + 1;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(10) # 1\
    \ + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n    >>>\
    \ sum_digits(1234567890)\n    45\n*/\nlong sum_digits(long n) \n{\n    long sum\
    \ = 0;\n    while (n > 0) \n    {\n        sum += n % 10;\n        n = n / 10;\n\
    \    }\n    return sum;\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(10)\
    \ # 1 + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n    12\n\
    \    >>> sum_digits(1234567890)\n    45\n*/\nlong sum_digits(long n) \n{\n   \
    \ long sum = 0;\n    while (n > 0) \n    {\n        sum += n % 10;\n        n\
    \ = n / 10;\n    }\n    return sum;\n}\n/*\nReturn the sum of the digits in n.\n\
    \    >>> sum_digits(10) # 1 + 0 = 1\n    1\n    >>> sum_digits(4224) # 4 + 2 +\
    \ 2", "{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if\
    \ (n % 2 == 1) {\n            res = (res * a) % p;\n        }\n        a = (a\
    \ * a) % p;\n        n = n / 2;\n    }\n    return res % p;\n}", "{\n    long\
    \ res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n      \
    \      res = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n *\
    \ n) % p;\n    }\n    return res;\n}", "{\n    if (n == 0)\n        return 1;\n\
    \    if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n  \
    \  else\n        return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n}", "{\n   \
    \ if (n == 0)\n        return 1;\n    else if (n == 1)\n        return n;\n  \
    \  else if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n\
    \    else\n        return modp(n / 2, p) * modp(n / 2, p) * n % p;\n}", "{\n \
    \   long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if (n % 2\
    \ == 1) \n        {\n            r = (r * b) % p;\n        }\n        n = n /\
    \ 2;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long res = 1;\n\
    \    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n = n / 2;\n    }\n    return res % p;\n}", "{\n    long res = 1;\n \
    \   long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n       \
    \ {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n \
    \       n = n / 2;\n    }\n    return res % p;\n}", "{\n    long r = 1;\n    foreach\
    \ (i; 0 .. n)\n        r = (r * 2) % p;\n    return r;\n}\n/*\nReturn the number\
    \ of bits in the binary representation of n.\n    >>> bit_length(0)\n    0\n \
    \   >>> bit_length(1)\n    1\n    >>> bit_length(2)\n    2\n    >>> bit_length(3)\n\
    \    2\n    >>> bit_length(4)\n    3\n    >>> bit_length(5)\n    3\n    >>> bit_length(6)\n\
    \    3\n    >>> bit_length(7)\n    3\n    >>> bit_length(8)\n    4\n    >>> bit_length(9)\n\
    \    4\n    >>> bit_length(10)\n    4\n    >>> bit_length(11)\n    4\n    >>>\
    \ bit_length(12)\n    4\n    >>> bit_length(13)\n    4\n    >>> bit_length(14)\n\
    \    4\n    >>> bit_length(15)\n    4\n    >>> bit_length(16)\n    5\n    >>>\
    \ bit_length(17)\n    5\n    >>> bit_length(18)\n    5\n    >>> bit_length(19)\n\
    \    5\n    >>> bit_length(20)\n    5\n    >>> bit_length(21)\n    5\n    >>>\
    \ bit_length(22)\n    5\n    >>> bit_length(23)\n    5\n    >>> bit_length(24)\n\
    \    5\n    >>> bit_length(25)\n    5\n    >>> bit_length(26)\n    5\n    >>>\
    \ bit_length(27)\n    5\n    >>> bit_length(28)\n    5\n    >>> bit_length(29)\n\
    \    5\n    >>> bit_length(30)\n    5\n    >>> bit_length(31)\n    5\n    >>>\
    \ bit_length(32)\n    6\n    >>> bit_length(33)\n    6\n    >>> bit_length(34)\n\
    \    6\n    >>> bit_length(35)\n    6\n    >>> bit_length(36)\n    6\n    >>>\
    \ bit_length(37)\n    6\n   ", "{\n    if (n == 0) \n    {\n        return 1;\n\
    \    }\n    else if (n % 2 == 0) \n    {\n        long m = modp(n / 2, p);\n \
    \       return (m * m) % p;\n    }\n    else \n    {\n        return (modp(n -\
    \ 1, p) * n) % p;\n    }\n}\n/*\nReturn the number of digits in n.\n    >>> digits(0)\n\
    \    1\n    >>> digits(1)\n    1\n    >>> digits(10)\n    2\n    >>> digits(12345)\n\
    \    5\n    >>> digits(123456789)\n    9\n*/\nlong digits(long n) \n{\n    if\
    \ (n == 0) \n    {\n        return 1;\n    }\n    else \n    {\n        return\
    \ (long)log10(n) + 1;\n    }\n}\n/*\nReturn the sum of the digits in n.\n    >>>\
    \ sum_digits(0)\n    0\n    >>> sum_digits(1)\n    1\n    >>> sum_digits(10)\n\
    \    1\n    >>> sum_digits(12345)\n    15\n    >>> sum_digits(123456789)\n   \
    \ 45\n*/\nlong sum_digits(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ 0;\n    }\n    else \n    {\n        return n % 10 + sum_digits(n / 10);\n \
    \   }\n}\n/*\nReturn the sum of the digits in n.\n    >>> sum_digits(0)\n    0\n\
    \    >>> sum_digits(1)\n    1\n    >>> sum_digits(10)\n    1\n    >>> sum_digits(12345)\n\
    \    15\n    >>> sum_digits(123456789)\n    45\n*/\nlong sum_digits(long n) \n\
    {\n    if (n == 0) \n    {\n        return 0;\n    }\n    else \n    {\n     \
    \   return n % 10 + sum_digits(n / 10);\n    }\n}\n/*\nReturn the", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n) \n    {\n        if (n & 1)\n     \
    \       res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n   \
    \ }\n    return res;\n}", "{\n    long result = 1;\n    long power = n;\n    while\
    \ (p > 0) \n    {\n        if (p & 1) \n        {\n            result = (result\
    \ * power) % MOD;\n        }\n        power = (power * power) % MOD;\n       \
    \ p >>= 1;\n    }\n    return result;\n}", "{\n    long res = 1;\n    long a =\
    \ 2;\n    while (n > 0) \n    {\n        if (n & 1)\n            res = (res *\
    \ a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n\
    }", "{\n    long r = 1;\n    long b = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            r = (r * b) % p;\n        }\n        n\
    \ = n / 2;\n        b = (b * b) % p;\n    }\n    return r;\n}", "{\n    long r\
    \ = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n     \
    \       r = (r * 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) \n\
    \        {\n            r = (r * r) % p;\n        }\n    }\n    return r;\n}",
  "{\n    long r = 1;\n    long b = 2;\n    while (n != 0) \n    {\n        if (n\
    \ & 1) \n        {\n            r = (r * b) % p;\n        }\n        n >>= 1;\n\
    \        b = (b * b) % p;\n    }\n    return r;\n}\n/*\nReturn the number of 1\
    \ bits in n.\n    >>> bitcount(0)\n    0\n    >>> bitcount(1)\n    1\n    >>>\
    \ bitcount(2)\n    1\n    >>> bitcount(3)\n    2\n    >>> bitcount(100)\n    3\n\
    */\nlong bitcount(long n) \n{\n    long count = 0;\n    while (n != 0) \n    {\n\
    \        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n/*\n\
    Return the number of trailing 0 bits in n.\n    >>> trailing(0)\n    0\n    >>>\
    \ trailing(1)\n    0\n    >>> trailing(2)\n    1\n    >>> trailing(3)\n    0\n\
    \    >>> trailing(4)\n    2\n    >>> trailing(100)\n    2\n*/\nlong trailing(long\
    \ n) \n{\n    long count = 0;\n    while ((n & 1) == 0) \n    {\n        count\
    \ += 1;\n        n >>= 1;\n    }\n    return count;\n}\n/*\nReturn the number\
    \ of leading 0 bits in n.\n    >>> leading(0)\n    0\n    >>> leading(1)\n   \
    \ 0\n    >>> leading(2)\n    1\n    >>> leading(3)\n    0\n    >>> leading(4)\n\
    \    2\n    >>> leading(100)\n    6\n*/\nlong leading(long n) \n{\n    long count\
    \ = 0;\n    while (n != 0) \n    {\n        if (n & 1) \n        {\n         \
    \   break;\n        }\n        count += 1;\n        n >>= 1;\n    }\n    return\
    \ count;\n}\n/*\nReturn the number of bits in n.\n    >>> bits(0)\n    0\n   \
    \ >>> bits(1)", "{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n\
    \    {\n        if (n % 2 == 1) \n        {\n            result = (result * a)\
    \ % p;\n        }\n        n = n / 2;\n        a = (a * a) % p;\n    }\n    return\
    \ result;\n}", "{\n    long result = 1;\n    long power = n;\n    long i;\n  \
    \  for (i = 0; i < p; i++) \n    {\n        if (power & 1)\n            result\
    \ = (result * n) % p;\n        power = power >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return result;\n}", "{\n    long res = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n & 1)\n            res = (res * a) % p;\n    \
    \    a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long\
    \ res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n & 1) \n\
    \        {\n            res = (res * a) % p;\n        }\n        a = (a * a) %\
    \ p;\n        n >>= 1;\n    }\n    return res;\n}", "{\n    long r = 1;\n    while\
    \ (n > 0) \n    {\n        if (n & 1) \n        {\n            r = (r * 2) % p;\n\
    \        }\n        n >>= 1;\n    }\n    return r;\n}", "{\n    long r = 1;\n\
    \    while (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            r\
    \ = (r * 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) \n       \
    \ {\n            r = (r * r) % p;\n        }\n    }\n    return r;\n}", "{\n \
    \   long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n        {\n\
    \            res = (res * n) % p;\n        }\n        n = n >> 1;\n        n =\
    \ (n * n) % p;\n    }\n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
