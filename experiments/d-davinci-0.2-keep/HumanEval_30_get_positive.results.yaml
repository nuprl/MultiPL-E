name: HumanEval_30_get_positive
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ j = 0;\n    for (long i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(e; l)\n    {\n \
    \       if(e > 0)\n        {\n            result ~= e;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l) {\n        if (i > 0) {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] r;\n    foreach(long i; l) {\n      \
    \  if (i > 0) {\n            r ~= i;\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res;\n    foreach(i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(long i; l) \n  \
    \  {\n        if (i > 0) \n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[0];\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ j = 0;\n    for (long i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive_list = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            positive_list ~= i;\n\
    \        }\n    }\n    return positive_list;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int count\
    \ = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n        \
    \    res[count] = i;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] ret;\n    foreach(i; l)\n    {\n    \
    \    if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    return l.filter!(x => x > 0);\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpudft1vk5.d(12): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudft1vk5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result ~= x;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\n/*\nReturn only negative numbers in the list.\n    >>> get_negative([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [-5, -3, -10]\n*/\nlong[] get_negative(long[] l) \n{\n  \
    \  long[] result;\n    foreach(i; l)\n    {\n        if(i < 0)\n        {\n  \
    \          result ~= i;\n        }\n    }\n    return result;\n}\n/*\nReturn only\
    \ even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, -4,\
    \ 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 0, -10]\n\
    */\nlong[] get_even(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn only odd numbers in the list.\n    >>>\
    \ get_odd([-1, 2, -4, 5, 6])\n    [-1, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, 3, -5, -3, 3, 9, 123, 1]\n*/\nlong[] get_odd(long[]\
    \ l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only prime numbers in the\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj67o9jml.d(79): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj67o9jml.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(long i; l)\n   \
    \ {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(num;\
    \ l)\n    {\n        if(num > 0)\n        {\n            result ~= num;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\n/*\nReturn only negative numbers in the list.\n\
    \    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[0];\n    foreach(long i; l)\n    {\n  \
    \      if(i < 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn the sum of all numbers in the list.\n    >>> get_sum([-1,\
    \ 2, -4, 5, 6])\n    9\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    155\n*/\nlong get_sum(long[] l) \n{\n    long result = 0;\n    foreach(long\
    \ i; l)\n    {\n        result += i;\n    }\n    return result;\n}\n/*\nReturn\
    \ the sum of all positive numbers in the list.\n    >>> get_positive_sum([-1,\
    \ 2, -4, 5, 6])\n    13\n    >>> get_positive_sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n    147\n*/\nlong get_positive_sum(long[] l) \n{\n    long result\
    \ = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n        \
    \    result += i;\n        }\n    }\n    return result;\n}\n/*\nReturn the sum\
    \ of all negative numbers in the list.\n    >>> get_negative_sum([-1, 2, -4, 5,\
    \ 6])\n    -5\n\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcf9oc4_.d(76): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcf9oc4_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\n/*\nReturn only negative numbers in the list.\n    >>> get_negative([-1,\
    \ 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    [-5, -3, -10]\n*/\nlong[] get_negative(long[] l) \n{\n  \
    \  long[] result;\n    foreach(i; l)\n    {\n        if(i < 0)\n        {\n  \
    \          result ~= i;\n        }\n    }\n    return result;\n}\n/*\nReturn only\
    \ even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, -4,\
    \ 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 0, -10]\n\
    */\nlong[] get_even(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn only odd numbers in the list.\n    >>>\
    \ get_odd([-1, 2, -4, 5, 6])\n    [-1, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    [5, 3, -5, -3, 3, 9, 123, 1]\n*/\nlong[] get_odd(long[]\
    \ l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn only prime numbers in the\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt67rjba2.d(79): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt67rjba2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result ~= x;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            positive ~= i;\n      \
    \  }\n    }\n    return positive;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            result ~= x;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = [];\n    foreach(i; l)\n   \
    \ {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ j = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n           \
    \ result[j] = i;\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpke1uqapm.d(12): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpke1uqapm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(e;\
    \ l)\n    {\n        if(e > 0)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            positive ~= i;\n   \
    \     }\n    }\n    return positive;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ x; l)\n    {\n        if(x > 0)\n        {\n            result ~= x;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive = new long[l.length];\n    long[]\
    \ result = new long[l.length];\n    long j = 0;\n    for (long i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] > 0)\n        {\n            positive[j] = l[i];\n\
    \            j++;\n        }\n    }\n    result = positive[0..j];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    for (int i\
    \ = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n        {\n         \
    \   result ~= l[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] ret = new long[0];\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    int j\
    \ = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            res[j] = l[i];\n            j++;\n        }\n    }\n \
    \   return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res;\n    foreach(e; l)\n    {\n    \
    \    if(e > 0)\n        {\n            res ~= e;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(item; l)\n    {\n\
    \        if(item > 0)\n        {\n            result ~= item;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n    long j\
    \ = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n            res[j]\
    \ = i;\n            j++;\n        }\n    }\n    return res[0..j];\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(e; l)\n    {\n \
    \       if(e > 0)\n        {\n            result ~= e;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    return l.filter!(x => x > 0);\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqlcasmc.d(12): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqlcasmc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(x; l)\n    {\n        if(x > 0)\n        {\n       \
    \     result[count] = x;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(x; l)\n    {\n \
    \       if(x > 0)\n        {\n            result ~= x;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(x; l)\n    {\n \
    \       if(x > 0)\n        {\n            result ~= x;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ j = 0;\n    for (long i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    return l.filter!(x => x > 0);\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpusbs9sti.d(12): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpusbs9sti.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    return l.filter!(x => x > 0);\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcb07xv1v.d(12): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcb07xv1v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(x; l)\n    {\n \
    \       if(x > 0)\n        {\n            result ~= x;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            result[j] = l[i];\n            j++;\n        }\n    }\n\
    \    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    long\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n       \
    \     result[count] = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = [];\n    foreach(long i; l)\n\
    \    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] res = new long[0];\n    foreach(i; l)\n\
    \    {\n        if(i > 0)\n        {\n            res ~= i;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive = new long[l.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \        {\n            positive[j] = l[i];\n            j++;\n        }\n   \
    \ }\n    return positive;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjkxrsykf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284cd]\\n??:? void tmpjkxrsykf.__unittest_L24_C1()\
    \ [0x427fb1]\\n??:? void tmpjkxrsykf.__modtest() [0x428250]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b43e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430655]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b415]\\n??:? runModuleUnitTests [0x42c381]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x428263]\\\
    n??:? __libc_start_main [0x52be2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n  \
    \          result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] positive = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            positive ~= i;\n      \
    \  }\n    }\n    return positive;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result;\n    foreach(i; l)\n    {\n \
    \       if(i > 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n    int\
    \ count = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[count] = l[i];\n            count++;\n \
    \       }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = new long[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] ret;\n    foreach(e; l)\n    {\n    \
    \    if(e > 0)\n        {\n            ret ~= e;\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    >>>\
    \ get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \n*/\nlong[]\
    \ get_positive(long[] l) \n{\n    long[] result = [];\n    foreach(num; l)\n \
    \   {\n        if(num > 0)\n        {\n            result ~= num;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
