name: HumanEval_140_fix_spaces
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces\
    \ = \"  \";\n    while (result.canFind(consecutive_spaces))\n    {\n        result\
    \ = result.replace(consecutive_spaces, \"-\");\n        consecutive_spaces ~=\
    \ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoxp7gyrl.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxp7gyrl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces\
    \ = result.replace(\"__\", \"-\");\n    return consecutive_spaces;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4tqzm7fd.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4tqzm7fd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyf2z18h0.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf2z18h0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n     \
    \   if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count == 2)\n           \
    \     result ~= '-';\n        }\n        else\n        {\n            count =\
    \ 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt1hgjhph.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpt1hgjhph.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmpt1hgjhph.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xa4224554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool prevSpace = false;\n    foreach(c; text)\n   \
    \ {\n        if(c == ' ')\n        {\n            if(prevSpace)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n            }\n            prevSpace = true;\n\
    \        }\n        else\n        {\n            result ~= c;\n            prevSpace\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnlquqe8l.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpnlquqe8l.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpnlquqe8l.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x7ff4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2jnsu6es.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jnsu6es.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto i = 0;\n    auto j = 0;\n    auto n = text.length;\n\
    \    auto prev = ' ';\n    auto curr = ' ';\n    auto count = 0;\n    while (i\
    \ < n)\n    {\n        curr = text[i];\n        if (curr == ' ')\n        {\n\
    \            if (prev == ' ')\n            {\n                count++;\n     \
    \       }\n            else\n            {\n                count = 1;\n     \
    \       }\n        }\n        else\n        {\n            count = 0;\n      \
    \  }\n        if (count == 1)\n        {\n            result[j] = '_';\n     \
    \   }\n        else if (count > 1)\n        {\n            result[j] = '-';\n\
    \        }\n        else\n        {\n            result[j] = curr;\n        }\n\
    \        prev = curr;\n        i++;\n        j++;\n    }\n    return result[0..j];\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbcf0douv.d(44): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    n/tmp/tmpbcf0douv.d(48): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    n/tmp/tmpbcf0douv.d(52): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcf0douv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvbf85huj.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpvbf85huj.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpvbf85huj.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x99c56554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3jckhpuq.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp3jckhpuq.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp3jckhpuq.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x557c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpane31_tf.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpane31_tf.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpane31_tf.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x2b5b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_swgx5ig.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_swgx5ig.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkwbuyd5k.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwbuyd5k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplxlk99u3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmplxlk99u3.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmplxlk99u3.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xe81ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp46mb7lr1.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp46mb7lr1.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp46mb7lr1.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x4445e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1bwpuqo.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1bwpuqo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 1)\n                result ~= '_';\n            else if(spaces == 2)\n  \
    \              result ~= '-';\n        }\n        else\n        {\n          \
    \  result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdglhcw3n.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpdglhcw3n.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmpdglhcw3n.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x82a87554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto spaces = result.split(\"\
    _\");\n    auto result2 = \"\";\n    foreach(i, space; spaces)\n    {\n      \
    \  if(space.length > 2)\n        {\n            result2 ~= \"_\" ~ space.replace(\"\
    \ \", \"-\") ~ \"_\";\n        }\n        else\n        {\n            result2\
    \ ~= \"_\" ~ space ~ \"_\";\n        }\n    }\n    return result2.replace(\"__\"\
    , \"_\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxw8y22ih.d(17): Error: no property `replace` for type `string`\\\
    n/tmp/tmpxw8y22ih.d(31): Error: no property `replace` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxw8y22ih.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbh0mdm3_.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpbh0mdm3_.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpbh0mdm3_.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xdfcbc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto res = text.replace(\" \", \"_\");\n    res = res.replace(\"__\", \"\
    _\");\n    res = res.replace(\"___\", \"-\");\n    return res;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwrd3jkyk.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrd3jkyk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmki4t1h.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmki4t1h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6o6cvki0.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6o6cvki0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpheplcvyy.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpheplcvyy.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpheplcvyy.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x48a3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_h_o5q7k.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_h_o5q7k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ > 2)\n                continue;\n            else\n                result ~=\
    \ '_';\n        }\n        else\n        {\n            if(spaces > 2)\n     \
    \           result ~= '-';\n            result ~= c;\n            spaces = 0;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl7vae25g.d(46): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpl7vae25g.__unittest_L39_C1()\
    \ [0x427cbb]\\n??:? void tmpl7vae25g.__modtest() [0x427db8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dcb]\\\
    n??:? __libc_start_main [0xb6eae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsw5r6qud.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsw5r6qud.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdrrc7pjs.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrrc7pjs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwb_r2w8a.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb_r2w8a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"_\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqsjofkin.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsjofkin.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.string\
    \ : split;\n    import std.conv : to;\n    import std.math : max;\n    import\
    \ std.range : take;\n    import std.range : drop;\n    import std.range : zip;\n\
    \    import std.range : cycle;\n    import std.range : retro;\n    import std.range\
    \ : retroCycle;\n    import std.range : retroZip;\n    import std.range : retroZipCycle;\n\
    \    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n\
    \    import std.range : retroZipCycleRetro;\n    import std.range : retroZipRetroCycleRetro;\n\
    \    import std.range : retroZipCycleRetroCycle;\n    import std.range : retroZipRetroCycleRetroCycle;\n\
    \    import std.range : retroZipCycleRetroCycleRetro;\n    import std.range :\
    \ retroZipRetroCycleRetroCycleRetro;\n    import std.range : retroZipCycleRetroCycleRetroCycle;\n\
    \    import std.range : retroZipRetroCycleRetroCycleRetroCycle;\n    import std.range\
    \ : retroZipCycleRetroCycleRetroCycleRetro;\n    import std.range : retroZipRetroCycleRetroCycleRetroCycleRetro;\n\
    \    import std.range : retroZipCycleRetroCycleRetroCycleRetroCycleRetro;\n  \
    \  import std.range : retroZipRetroCycleRetroCycleRetroCycleRetroCycleRetro;\n\
    \    import std.range : retroZipCycleRetroCycleRetroCycleRetroCycleRetroCycleRetro;\n\
    \    import std.range : retroZipRetroCycleRetroCycleRetroCycleRetroCycleRetroCycleRetro;\n\
    \    import std.range : retroZipCycleRetroCycleRetroCycleRetroCycleRetroCycleRetroCycleRetro;\n\
    \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjnbfy__5.d(50): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnbfy__5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplgi272tp.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmplgi272tp.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmplgi272tp.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x46005554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool is_space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(is_space)\n            {\n  \
    \              result ~= '-';\n            }\n            else\n            {\n\
    \                result ~= '_';\n                is_space = true;\n          \
    \  }\n        }\n        else\n        {\n            result ~= c;\n         \
    \   is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpek3kvml2.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpek3kvml2.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpek3kvml2.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x5b34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptk8jelg2.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptk8jelg2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsnrm9vf0.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnrm9vf0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphfyojilc.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfyojilc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz1bpj0tc.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpz1bpj0tc.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpz1bpj0tc.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x17420554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppn17k3pi.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn17k3pi.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool is_space = false;\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            if(!is_space)\n \
    \           {\n                result ~= '_';\n                is_space = true;\n\
    \            }\n            count++;\n        }\n        else\n        {\n   \
    \         if(is_space)\n            {\n                if(count > 2)\n       \
    \             result ~= '-';\n                is_space = false;\n            \
    \    count = 0;\n            }\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp16o9vsdf.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428045]\\n??:? void tmp16o9vsdf.__unittest_L45_C1()\
    \ [0x427c80]\\n??:? void tmp16o9vsdf.__modtest() [0x427dc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c1]\\n??:? runModuleUnitTests [0x42c4b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428494]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42841b]\\n??:? _d_run_main [0x428386]\\n??:? main [0x427ddb]\\\
    n??:? __libc_start_main [0xff28d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto spaces = result.count(\"\
    _\");\n    if (spaces > 2)\n    {\n        result = result.replace(\"_\", \"-\"\
    );\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqkmknik.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqkmknik.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplegcjuou.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmplegcjuou.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmplegcjuou.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x3d70f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool prev_space = false;\n    foreach(c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            if(prev_space)\n          \
    \      result ~= '-';\n            else\n                result ~= '_';\n    \
    \        prev_space = true;\n        }\n        else\n        {\n            result\
    \ ~= c;\n            prev_space = false;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy62osve3.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpy62osve3.__unittest_L37_C1()\
    \ [0x427c64]\\n??:? void tmpy62osve3.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x2c13b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ac3ykb4.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ac3ykb4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int consecutive_spaces = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            consecutive_spaces++;\n \
    \           if(consecutive_spaces == 1)\n                result ~= '_';\n    \
    \        else if(consecutive_spaces == 2)\n                result ~= '-';\n  \
    \      }\n        else\n        {\n            consecutive_spaces = 0;\n     \
    \       result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps92ywlfn.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmps92ywlfn.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmps92ywlfn.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x65455554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto spaces = 0;\n    foreach(i, c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ > 2)\n            {\n                result[i] = '-';\n            }\n     \
    \       else\n            {\n                result[i] = '_';\n            }\n\
    \        }\n        else\n        {\n            spaces = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n   \
    \ assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkh8pm9b.d(26): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmpbkh8pm9b.d(30): Error: cannot modify `immutable` expression `result[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkh8pm9b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppy30k_4l.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmppy30k_4l.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmppy30k_4l.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x93881554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmh4f7qw_.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmh4f7qw_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8qny9ao.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8qny9ao.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20wdmtmf.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20wdmtmf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    int count = 0;\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (text[i] == ' ')\n        {\n            count++;\n\
    \            if (count > 2)\n            {\n                result[i] = '-';\n\
    \            }\n            else\n            {\n                result[i] = '_';\n\
    \            }\n        }\n        else\n        {\n            count = 0;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmig7ookd.d(26): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpmig7ookd.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmig7ookd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    while (result.find(\"  \"\
    ) != -1)\n    {\n        result = result.replace(\"  \", \"-\");\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ajbjliy.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ajbjliy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuvtcqkm7.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvtcqkm7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool prev_space = false;\n    foreach(c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            if(prev_space)\n          \
    \      result ~= '-';\n            else\n                result ~= '_';\n    \
    \        prev_space = true;\n        }\n        else\n        {\n            result\
    \ ~= c;\n            prev_space = false;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxaei9xrp.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpxaei9xrp.__unittest_L37_C1()\
    \ [0x427c64]\\n??:? void tmpxaei9xrp.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x31fda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5t6r8qfi.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp5t6r8qfi.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp5t6r8qfi.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x94f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwo81rwky.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpwo81rwky.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpwo81rwky.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1500d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdssvbewb.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpdssvbewb.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpdssvbewb.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x9e1f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnq9d05g.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnq9d05g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfo7qpl5c.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfo7qpl5c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ \", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngyw197s.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngyw197s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprp9mhuc9.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmprp9mhuc9.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmprp9mhuc9.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x25cde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    int i = 0;\n    while (i < result.length)\n  \
    \  {\n        if (result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \            int j = i + 1;\n            while (j < result.length && result[j]\
    \ == ' ')\n            {\n                result[j] = '-';\n                j++;\n\
    \            }\n            i = j;\n        }\n        else\n        {\n     \
    \       i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgxcb86q.d(23): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpcgxcb86q.d(27): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgxcb86q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3vn9rm6c.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp3vn9rm6c.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp3vn9rm6c.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1e4bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n     \
    \   if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count == 2)\n           \
    \     result ~= '-';\n        }\n        else\n        {\n            result ~=\
    \ c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7cimzbbj.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp7cimzbbj.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmp7cimzbbj.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x7c744554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int spaceCount = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            spaceCount++;\n         \
    \   if(spaceCount > 2)\n                continue;\n            result ~= '_';\n\
    \        }\n        else\n        {\n            spaceCount = 0;\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp26kkgavf.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ffd]\\n??:? void tmp26kkgavf.__unittest_L36_C1()\
    \ [0x427c83]\\n??:? void tmp26kkgavf.__modtest() [0x427d80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c693]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430428]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b579]\\n??:? runModuleUnitTests [0x42c469]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42844c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283d3]\\n??:? _d_run_main [0x42833e]\\n??:? main [0x427d93]\\\
    n??:? __libc_start_main [0x344a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2c21ag0.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2c21ag0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplet1f1uq.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplet1f1uq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool is_space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(is_space)\n            {\n  \
    \              result ~= '-';\n            }\n            else\n            {\n\
    \                result ~= '_';\n                is_space = true;\n          \
    \  }\n        }\n        else\n        {\n            result ~= c;\n         \
    \   is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp38u5ec7c.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp38u5ec7c.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp38u5ec7c.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xd67dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppz13vd2b.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmppz13vd2b.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmppz13vd2b.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x4bc4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi9mtjvqz.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpi9mtjvqz.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpi9mtjvqz.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x294c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppyo7do17.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppyo7do17.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb1mitqss.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpb1mitqss.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpb1mitqss.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xf1b2b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppsz_cx1b.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsz_cx1b.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuaihv0vg.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpuaihv0vg.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpuaihv0vg.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x4f32554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space_flag = false;\n    foreach(char c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space_flag)\n        \
    \    {\n                result ~= '-';\n            }\n            else\n    \
    \        {\n                result ~= '_';\n                space_flag = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5myufo75.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp5myufo75.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp5myufo75.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x45e85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int counter = 0;\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (text[i] == ' ')\n        {\n            counter++;\n\
    \            if (counter == 1)\n            {\n                result += '_';\n\
    \            }\n            else if (counter == 2)\n            {\n          \
    \      result += '-';\n            }\n        }\n        else\n        {\n   \
    \         counter = 0;\n            result += text[i];\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4iyh5y2y.d(26): Error: slice `result` is not mutable\\n/tmp/tmp4iyh5y2y.d(30):\
    \ Error: slice `result` is not mutable\\n/tmp/tmp4iyh5y2y.d(36): Error: slice\
    \ `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp4iyh5y2y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n     \
    \   if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count == 2)\n           \
    \     result ~= '-';\n        }\n        else\n        {\n            count =\
    \ 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptvptg3im.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmptvptg3im.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmptvptg3im.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x9c46b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqth8mipc.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpqth8mipc.__unittest_L42_C1()\
    \ [0x427cbb]\\n??:? void tmpqth8mipc.__modtest() [0x427db8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dcb]\\\
    n??:? __libc_start_main [0xcc65c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdd_nxd8v.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdd_nxd8v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            count = 0;\n       \
    \     result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwomr1jt3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpwomr1jt3.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpwomr1jt3.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x1e755554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n     \
    \   if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n\
    \                result ~= '_';\n            else if(count > 2)\n            \
    \    result ~= '-';\n        }\n        else\n        {\n            count = 0;\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptsfpkcx_.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmptsfpkcx_.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmptsfpkcx_.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xf43c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n        }\n        else\n        {\n            if(count == 1)\n\
    \            {\n                result ~= '_';\n                count = 0;\n \
    \           }\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgkw_5y0x.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42803d]\\n??:? void tmpgkw_5y0x.__unittest_L42_C1()\
    \ [0x427c2d]\\n??:? void tmpgkw_5y0x.__modtest() [0x427dc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b9]\\n??:? runModuleUnitTests [0x42c4a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42848c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428413]\\n??:? _d_run_main [0x42837e]\\n??:? main [0x427dd3]\\\
    n??:? __libc_start_main [0x768ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto s = text.split(\" \");\n    auto result = \"\";\n    foreach(i, e;\
    \ s)\n    {\n        if(e.length != 0)\n        {\n            result ~= e;\n\
    \            if(i != s.length - 1)\n            {\n                result ~= \"\
    _\";\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffkb34xu.d(17): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffkb34xu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool isSpace = false;\n    int count = 0;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(isSpace)\n\
    \            {\n                count++;\n            }\n            else\n  \
    \          {\n                isSpace = true;\n                count = 1;\n  \
    \          }\n        }\n        else\n        {\n            if(isSpace)\n  \
    \          {\n                if(count > 2)\n                {\n             \
    \       result ~= \"-\";\n                }\n                else\n          \
    \      {\n                    result ~= \"_\";\n                }\n          \
    \      isSpace = false;\n            }\n            result ~= c;\n        }\n\
    \    }\n    if(isSpace)\n    {\n        if(count > 2)\n        {\n           \
    \ result ~= \"-\";\n        }\n        else\n        {\n            result ~=\
    \ \"_\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpih6axafr.d(70): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmpih6axafr.__unittest_L64_C1()\
    \ [0x427cbc]\\n??:? void tmpih6axafr.__modtest() [0x427e04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6b1]\\n??:? runModuleUnitTests [0x42c5a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e17]\\\
    n??:? __libc_start_main [0x9b72a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj063aifv.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpj063aifv.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpj063aifv.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xae498554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool isSpace = false;\n    bool isSpace2 = false;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(isSpace)\n\
    \            {\n                if(isSpace2)\n                {\n            \
    \        result ~= '-';\n                    isSpace2 = false;\n             \
    \   }\n                else\n                {\n                    isSpace2 =\
    \ true;\n                }\n            }\n            else\n            {\n \
    \               result ~= '_';\n                isSpace = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            isSpace\
    \ = false;\n            isSpace2 = false;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqnfbrlzm.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428045]\\n??:? void tmpqnfbrlzm.__unittest_L51_C1()\
    \ [0x427c80]\\n??:? void tmpqnfbrlzm.__modtest() [0x427dc8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c1]\\n??:? runModuleUnitTests [0x42c4b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428494]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42841b]\\n??:? _d_run_main [0x428386]\\n??:? main [0x427ddb]\\\
    n??:? __libc_start_main [0xfa27b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxpdv6og.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxpdv6og.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool is_space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(is_space)\n            {\n  \
    \              result ~= '-';\n            }\n            else\n            {\n\
    \                result ~= '_';\n                is_space = true;\n          \
    \  }\n        }\n        else\n        {\n            result ~= c;\n         \
    \   is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnvio7dya.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpnvio7dya.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpnvio7dya.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1106554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqn62xmx7.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqn62xmx7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    bool consecutive =\
    \ false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n     \
    \       if(space)\n            {\n                consecutive = true;\n      \
    \      }\n            space = true;\n        }\n        else\n        {\n    \
    \        if(consecutive)\n            {\n                result ~= \"-\";\n  \
    \              consecutive = false;\n            }\n            if(space)\n  \
    \          {\n                result ~= \"_\";\n                space = false;\n\
    \            }\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4xsrj7zl.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp4xsrj7zl.__unittest_L47_C1()\
    \ [0x427c19]\\n??:? void tmp4xsrj7zl.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c773]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b682]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b659]\\n??:? runModuleUnitTests [0x42c549]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xd591f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo1kdb7zw.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1kdb7zw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc82hraaj.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc82hraaj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaerv_a4w.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpaerv_a4w.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpaerv_a4w.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x95c27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool is_space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(is_space)\n            {\n  \
    \              result ~= '-';\n            }\n            else\n            {\n\
    \                result ~= '_';\n                is_space = true;\n          \
    \  }\n        }\n        else\n        {\n            result ~= c;\n         \
    \   is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpia843e73.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpia843e73.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpia843e73.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xe1864554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.array : join;\n    import\
    \ std.range : iota;\n    import std.conv : to;\n    import std.typecons : tuple;\n\
    \    import std.math : max;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.range : take;\n  \
    \  import std.range : drop;\n    import std.range : zip;\n    import std.range\
    \ : cycle;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpamkuuhd2.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamkuuhd2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5gha1pj.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5gha1pj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2yeve56l.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp2yeve56l.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp2yeve56l.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1e6b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool is_space = false;\n    foreach(char c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            if(!is_space)\n \
    \           {\n                result ~= '_';\n                is_space = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu0aaxcfg.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ffd]\\n??:? void tmpu0aaxcfg.__unittest_L37_C1()\
    \ [0x427c38]\\n??:? void tmpu0aaxcfg.__modtest() [0x427d80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c693]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430428]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b579]\\n??:? runModuleUnitTests [0x42c469]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42844c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283d3]\\n??:? _d_run_main [0x42833e]\\n??:? main [0x427d93]\\\
    n??:? __libc_start_main [0x34a03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsza2d_z1.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpsza2d_z1.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpsza2d_z1.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x25cc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 2)\n            {\n                result ~= '-';\n                spaces\
    \ = 0;\n            }\n        }\n        else\n        {\n            if(spaces\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuytrmjoo.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42803d]\\n??:? void tmpuytrmjoo.__unittest_L42_C1()\
    \ [0x427c2d]\\n??:? void tmpuytrmjoo.__modtest() [0x427dc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b9]\\n??:? runModuleUnitTests [0x42c4a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42848c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428413]\\n??:? _d_run_main [0x42837e]\\n??:? main [0x427dd3]\\\
    n??:? __libc_start_main [0xea39b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto count = 0;\n    foreach(i,\
    \ c; result)\n    {\n        if(c == '_')\n        {\n            count++;\n \
    \       }\n        else\n        {\n            count = 0;\n        }\n      \
    \  if(count > 2)\n        {\n            result[i] = '-';\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n   \
    \ assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps2u4ep64.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2u4ep64.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp24avkugv.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp24avkugv.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp24avkugv.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x503be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnzb0eb2.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnzb0eb2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool isSpace = false;\n    int count = 0;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(isSpace)\n\
    \            {\n                if(count == 1)\n                {\n          \
    \          result ~= '_';\n                    count = 0;\n                }\n\
    \                else\n                {\n                    result ~= '-';\n\
    \                    count = 0;\n                }\n            }\n          \
    \  else\n            {\n                result ~= '_';\n                isSpace\
    \ = true;\n                count = 0;\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            isSpace = false;\n         \
    \   count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr9vswfiz.d(59): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42809d]\\n??:? void tmpr9vswfiz.__unittest_L53_C1()\
    \ [0x427cd4]\\n??:? void tmpr9vswfiz.__modtest() [0x427e1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c733]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b642]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430019]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ffa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b619]\\n??:? runModuleUnitTests [0x42c509]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428473]\\n??:? _d_run_main [0x4283de]\\n??:? main [0x427e2f]\\\
    n??:? __libc_start_main [0x785ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnzy9jqh3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpnzy9jqh3.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpnzy9jqh3.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xe0aee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    // your code here\n    string result = \"\";\n    int count = 0;\n    foreach(c;\
    \ text)\n    {\n        if(c == ' ')\n        {\n            count++;\n      \
    \      if(count == 1)\n                result ~= '_';\n            else if(count\
    \ == 2)\n                result ~= '-';\n        }\n        else\n        {\n\
    \            result ~= c;\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp94glt6b.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpp94glt6b.__unittest_L38_C1()\
    \ [0x427c6c]\\n??:? void tmpp94glt6b.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x62d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw_i11es3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpw_i11es3.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpw_i11es3.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x7d754554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7vvlnxod.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp7vvlnxod.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp7vvlnxod.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x7545f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    while (result.find(\"  \"\
    ) != -1)\n    {\n        result = result.replace(\"  \", \"-\");\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1lqqoyjd.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lqqoyjd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bi9dk_p.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bi9dk_p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space_found)\n       \
    \     {\n                result ~= '-';\n            }\n            else\n   \
    \         {\n                result ~= '_';\n                space_found = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp61xwrbu_.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp61xwrbu_.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp61xwrbu_.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x304c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            count = 0;\n       \
    \     result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp83dc0x_9.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp83dc0x_9.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmp83dc0x_9.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x71cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdsdldtfu.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpdsdldtfu.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpdsdldtfu.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xc4b49554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces\
    \ = result.find(\"__\");\n    while (consecutive_spaces != -1)\n    {\n      \
    \  result = result.replace(\"__\", \"-\");\n        consecutive_spaces = result.find(\"\
    __\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjwvmg5w.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjwvmg5w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptazeog7l.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmptazeog7l.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmptazeog7l.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x33d40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsvekja5m.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpsvekja5m.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpsvekja5m.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x4b982554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvp67xuse.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp67xuse.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplh8x_p3u.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmplh8x_p3u.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmplh8x_p3u.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x26672554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp52pxvdhs.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp52pxvdhs.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp52pxvdhs.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x6da4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgksei7l.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgksei7l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmposzizasr.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmposzizasr.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmposzizasr.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x422a6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk5bi6xt.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk5bi6xt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsumxl9nr.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsumxl9nr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto i = 0;\n    auto j = 0;\n    auto n = text.length;\n\
    \    auto spaces = 0;\n    while (i < n)\n    {\n        if (text[i] == ' ')\n\
    \        {\n            ++spaces;\n            if (spaces > 2)\n            {\n\
    \                result[j] = '-';\n                ++j;\n                spaces\
    \ = 0;\n            }\n        }\n        else\n        {\n            result[j]\
    \ = text[i];\n            ++j;\n            spaces = 0;\n        }\n        ++i;\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_u_x_6dy.d(29): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    n/tmp/tmp_u_x_6dy.d(36): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_u_x_6dy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n     \
    \   if(c == ' ')\n        {\n            if(count == 0)\n            {\n     \
    \           result ~= '_';\n            }\n            else if(count == 1)\n \
    \           {\n                result ~= '-';\n            }\n            count++;\n\
    \        }\n        else\n        {\n            result ~= c;\n            count\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe5gaylcn.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpe5gaylcn.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpe5gaylcn.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xed0ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            count = 0;\n       \
    \     result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_jwhglk4.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp_jwhglk4.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmp_jwhglk4.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x9755a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbri820km.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbri820km.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= \"-\";\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ \"_\";\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp91bjdwwa.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42801d]\\n??:? void tmp91bjdwwa.__unittest_L42_C1()\
    \ [0x427c9f]\\n??:? void tmp91bjdwwa.__modtest() [0x427d9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c763]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b672]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430448]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b649]\\n??:? runModuleUnitTests [0x42c539]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42846c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283f3]\\n??:? _d_run_main [0x42835e]\\n??:? main [0x427daf]\\\
    n??:? __libc_start_main [0x23ff8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_4lk_i8g.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4lk_i8g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.array : array;\n    import std.string : split;\n    import std.conv : to;\n\
    \    import std.typecons : tuple;\n    import std.math : max;\n    import std.range\
    \ : take;\n    import std.range : drop;\n    import std.range : zip;\n    import\
    \ std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std\nunittest\n{\n    alias candidate = fix_spaces;\n\n\
    \    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprhqu7_lf.d(74): Error: `;` expected\\n/tmp/tmprhqu7_lf.d(84):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhqu7_lf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    int spaces = 0;\n    string result = \"\";\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 1)\n                result ~= '_';\n            else if(spaces == 2)\n  \
    \              result ~= '-';\n        }\n        else\n        {\n          \
    \  result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp_6ig9dl.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpp_6ig9dl.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmpp_6ig9dl.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x809cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    int i = 0;\n    while (i < result.length)\n  \
    \  {\n        if (result[i] == ' ')\n        {\n            result[i] = '_';\n\
    \            if (i + 1 < result.length && result[i + 1] == ' ')\n            {\n\
    \                result[i] = '-';\n                while (i + 1 < result.length\
    \ && result[i + 1] == ' ')\n                {\n                    result = result[0..i]\
    \ ~ result[i + 1..$];\n                }\n            }\n        }\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdk_jmegc.d(23): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    n/tmp/tmpdk_jmegc.d(26): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk_jmegc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvx10jqlg.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvx10jqlg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutiveSpaces =\
    \ result.replace(\"__\", \"-\");\n    return consecutiveSpaces;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60exu2pe.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60exu2pe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    if (text.length > 0)\n    {\n        auto space\
    \ = ' ';\n        auto underscore = '_';\n        auto dash = '-';\n        auto\
    \ last = text[0];\n        auto count = 0;\n        foreach (i, c; text)\n   \
    \     {\n            if (c == space)\n            {\n                if (last\
    \ == space)\n                {\n                    count++;\n               \
    \     if (count > 2)\n                    {\n                        result[i]\
    \ = dash;\n                    }\n                    else\n                 \
    \   {\n                        result[i] = underscore;\n                    }\n\
    \                }\n                else\n                {\n                \
    \    result[i] = underscore;\n                }\n            }\n            last\
    \ = c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplwefbo8o.d(34): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmplwefbo8o.d(38): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmplwefbo8o.d(43): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmplwefbo8o.d(46): Error: cannot modify `immutable` expression `last`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplwefbo8o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= \"-\";\n                count =\
    \ 0;\n            }\n            else\n            {\n                result ~=\
    \ \"_\";\n            }\n        }\n        else\n        {\n            result\
    \ ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3ldzewk.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42801d]\\n??:? void tmpw3ldzewk.__unittest_L42_C1()\
    \ [0x427c9f]\\n??:? void tmpw3ldzewk.__modtest() [0x427d9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c763]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b672]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430448]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b649]\\n??:? runModuleUnitTests [0x42c539]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42846c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283f3]\\n??:? _d_run_main [0x42835e]\\n??:? main [0x427daf]\\\
    n??:? __libc_start_main [0x24d5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces\
    \ = result.find(\"__\");\n    while (consecutive_spaces != -1)\n    {\n      \
    \  result = result.replace(\"__\", \"-\");\n        consecutive_spaces = result.find(\"\
    __\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxm7ltd2.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxm7ltd2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool prevSpace = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(prevSpace)\n         \
    \   {\n                result ~= '-';\n            }\n            else\n     \
    \       {\n                result ~= '_';\n            }\n            prevSpace\
    \ = true;\n        }\n        else\n        {\n            result ~= c;\n    \
    \        prevSpace = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmuiigfis.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpmuiigfis.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpmuiigfis.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xf1c98554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool isSpace = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(isSpace)\n           \
    \ {\n                result ~= '-';\n            }\n            else\n       \
    \     {\n                result ~= '_';\n                isSpace = true;\n   \
    \         }\n        }\n        else\n        {\n            result ~= c;\n  \
    \          isSpace = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdxva1cll.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpdxva1cll.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpdxva1cll.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x31c04554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    int count = 0;\n    foreach(i, c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result[i] = '-';\n            }\n       \
    \     else\n            {\n                result[i] = '_';\n            }\n \
    \       }\n        else\n        {\n            count = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n   \
    \ assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oy7y74w.d(26): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmp9oy7y74w.d(30): Error: cannot modify `immutable` expression `result[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oy7y74w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n   \nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoey7o0up.d(66): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoey7o0up.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(char c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n                result ~= '_';\n            else if(count == 2)\n   \
    \             result ~= '-';\n        }\n        else\n        {\n           \
    \ result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprt185l8z.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmprt185l8z.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmprt185l8z.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xb23fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptnq1n0pi.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmptnq1n0pi.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmptnq1n0pi.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x68e6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqm_w_u93.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqm_w_u93.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzwvrp_nk.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpzwvrp_nk.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpzwvrp_nk.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x242f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto spaces = 0;\n    foreach(i, c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ > 2)\n            {\n                result[i] = '-';\n            }\n     \
    \       else\n            {\n                result[i] = '_';\n            }\n\
    \        }\n        else\n        {\n            spaces = 0;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n   \
    \ assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir\
    \ Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty\
    \  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa\
    \   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbhmo41eu.d(26): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmpbhmo41eu.d(30): Error: cannot modify `immutable` expression `result[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhmo41eu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps35ljmnx.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmps35ljmnx.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmps35ljmnx.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x97547554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ra0igrk.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ra0igrk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n   \nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjstkp5zt.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjstkp5zt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n   \nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpea2c2n72.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpea2c2n72.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_agj_8xe.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp_agj_8xe.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp_agj_8xe.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xa24dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    if (text.length == 0)\n        return text;\n    string result = \"\";\n\
    \    int spaces = 0;\n    foreach (c; text)\n    {\n        if (c == ' ')\n  \
    \      {\n            ++spaces;\n            if (spaces > 2)\n               \
    \ continue;\n            result ~= '_';\n        }\n        else\n        {\n\
    \            if (spaces > 2)\n                result ~= '-';\n            result\
    \ ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0lnipdy7.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42804d]\\n??:? void tmp0lnipdy7.__unittest_L40_C1()\
    \ [0x427ccf]\\n??:? void tmp0lnipdy7.__modtest() [0x427dcc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6e3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c9]\\n??:? runModuleUnitTests [0x42c4b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42849c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428423]\\n??:? _d_run_main [0x42838e]\\n??:? main [0x427ddf]\\\
    n??:? __libc_start_main [0xd02ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzde0fuh.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzde0fuh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafe14qda.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpafe14qda.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpafe14qda.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x355e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            count = 0;\n       \
    \     result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5gul1ej3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp5gul1ej3.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmp5gul1ej3.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0x47acc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzv78dr8.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzv78dr8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvmiqbb_w.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpvmiqbb_w.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpvmiqbb_w.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xa74a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp79_rgpfv.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp79_rgpfv.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp79_rgpfv.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x122f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool was_space = false;\n    foreach(c; text)\n   \
    \ {\n        if(c == ' ')\n        {\n            if(was_space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n            }\n            was_space = true;\n\
    \        }\n        else\n        {\n            result ~= c;\n            was_space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp972u7a0w.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp972u7a0w.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp972u7a0w.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1b1e5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool is_space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(is_space)\n          \
    \  {\n                result ~= '-';\n            }\n            else\n      \
    \      {\n                result ~= '_';\n            }\n            is_space\
    \ = true;\n        }\n        else\n        {\n            result ~= c;\n    \
    \        is_space = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp31c_osi7.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp31c_osi7.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp31c_osi7.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x9389e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 1)\n                result ~= '_';\n            else if(spaces == 2)\n  \
    \              result ~= '-';\n        }\n        else\n        {\n          \
    \  result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8rr1ur6z.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp8rr1ur6z.__unittest_L37_C1()\
    \ [0x427c6c]\\n??:? void tmp8rr1ur6z.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xc2763554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    while (result.find(\"  \"\
    ) != -1)\n    {\n        result = result.replace(\"  \", \"-\");\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwoo7gmuv.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwoo7gmuv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3u0xpe2.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3u0xpe2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpleg7uk0j.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpleg7uk0j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59nenqqc.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59nenqqc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4x54r1p7.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp4x54r1p7.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp4x54r1p7.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x1b154554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto pos = result.find(\"\
    __\");\n    while (pos != string.npos)\n    {\n        result = result.replace(\"\
    __\", \"-\");\n        pos = result.find(\"__\");\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2nkvnyt.d(17): Error: no property `replace` for type `string`\\\
    n/tmp/tmpw2nkvnyt.d(19): Error: no property `npos` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2nkvnyt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    bool space_count =\
    \ false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n     \
    \       if(space)\n            {\n                if(!space_count)\n         \
    \       {\n                    result ~= '-';\n                    space_count\
    \ = true;\n                }\n            }\n            else\n            {\n\
    \                result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n            space_count = false;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp973zbkln.d(53): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428045]\\n??:? void tmp973zbkln.__unittest_L47_C1()\
    \ [0x427c7c]\\n??:? void tmp973zbkln.__modtest() [0x427dc4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5c1]\\n??:? runModuleUnitTests [0x42c4b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428494]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42841b]\\n??:? _d_run_main [0x428386]\\n??:? main [0x427dd7]\\\
    n??:? __libc_start_main [0xeba0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohblwnh7.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohblwnh7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpho11mdn_.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho11mdn_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    int i = 0;\n    int j = 0;\n    int len = text.length;\n\
    \    while (i < len)\n    {\n        if (text[i] == ' ')\n        {\n        \
    \    result[j] = '_';\n            i++;\n            j++;\n            while (i\
    \ < len && text[i] == ' ')\n            {\n                result[j] = '-';\n\
    \                i++;\n                j++;\n            }\n        }\n      \
    \  else\n        {\n            result[j] = text[i];\n            i++;\n     \
    \       j++;\n        }\n    }\n    return result[0..j];\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3j_lvvcb.d(20): Error: cannot implicitly convert expression `text.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp3j_lvvcb.d(25): Error: cannot modify `immutable`\
    \ expression `result[cast(ulong)j]`\\n/tmp/tmp3j_lvvcb.d(30): Error: cannot modify\
    \ `immutable` expression `result[cast(ulong)j]`\\n/tmp/tmp3j_lvvcb.d(37): Error:\
    \ cannot modify `immutable` expression `result[cast(ulong)j]`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3j_lvvcb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb_m9pbfb.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpb_m9pbfb.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpb_m9pbfb.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x5ff35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rabt6id.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rabt6id.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.range : take;\n    import std.range : drop;\n    import std.range\
    \ : zip;\n    import std.range : map;\n    import std.range : filter;\n    import\
    \ std.range : cycle;\n    import std.range : repeat;\n    import std.range : iota;\n\
    \    import std.range : retro;\n    import std.range : retroFilter;\n    import\
    \ std.range : retroMap;\n    import std.range : retroZip;\n    import std.range\
    \ : retroCycle;\n    import std.range : retroRepeat;\n    import std.range : retroIota;\n\
    \    import std.range : retroCycle;\n    import std.range : retroRepeat;\n   \
    \ import std.range : retroIota;\n    import std.range : retroCycle;\n    import\
    \ std.range : retroRepeat;\n    import std.range : retroIota;\n    import std.range\
    \ : retroCycle;\n    import std.range : retroRepeat;\n    import std.range : retroIota;\n\
    \    import std.range : retroCycle;\n    import std.range : retroRepeat;\n   \
    \ import std.range : retroIota;\n    import std.range : retroCycle;\n    import\
    \ std.range : retroRepeat;\n    import std.range : retroIota;\n    import std.range\
    \ : retroCycle;\n    import std.range : retroRepeat;\n    import std.range : retroIota;\n\
    \    import std.range : retroCycle;\n    import std.range : retroRepeat;\n   \
    \ import std.range : retroIota;\n    import std.range : retroCycle;\n    import\
    \ std.range : retroRepeat;\n    import std.range : retroIota;\n    import std.range\
    \ : retroCycle;\n    import std.range : retroRepeat;\n    import std.range : retroIota;\n\
    \    import std.range : retroCycle;\n    import std.range : retroRepeat;\n   \
    \ import std.range : retroIota;\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6j9um1ym.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6j9um1ym.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool isSpace = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(isSpace)\n           \
    \ {\n                result ~= '-';\n            }\n            else\n       \
    \     {\n                result ~= '_';\n                isSpace = true;\n   \
    \         }\n        }\n        else\n        {\n            result ~= c;\n  \
    \          isSpace = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfqjw0y6j.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpfqjw0y6j.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpfqjw0y6j.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x6d39e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto prev = ' ';\n    auto spaceCount = 0;\n \
    \   foreach(i, c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev\
    \ == ' ')\n            {\n                spaceCount++;\n                if(spaceCount\
    \ > 2)\n                {\n                    result[i] = '-';\n            \
    \    }\n                else\n                {\n                    result[i]\
    \ = '_';\n                }\n            }\n            else\n            {\n\
    \                result[i] = '_';\n            }\n        }\n        else\n  \
    \      {\n            spaceCount = 0;\n        }\n        prev = c;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzddioefn.d(29): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmpzddioefn.d(33): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmpzddioefn.d(38): Error: cannot modify `immutable` expression `result[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzddioefn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc7y1sy4l.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpc7y1sy4l.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpc7y1sy4l.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x4f053554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space_flag = false;\n    foreach(c; text)\n  \
    \  {\n        if(c == ' ')\n        {\n            if(space_flag)\n          \
    \  {\n                result ~= '-';\n            }\n            else\n      \
    \      {\n                result ~= '_';\n                space_flag = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6oude1py.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp6oude1py.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp6oude1py.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x62091554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            result ~= c;\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplzegy5la.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmplzegy5la.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmplzegy5la.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xa968e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkr7t94h.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkr7t94h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count > 2)\n            {\n                result ~= '-';\n      \
    \      }\n        }\n        else\n        {\n            result ~= c;\n     \
    \       count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpacaes0dk.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpacaes0dk.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpacaes0dk.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xc3cb4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space_found = false;\n    foreach(ch; text)\n\
    \    {\n        if(ch == ' ')\n        {\n            if(!space_found)\n     \
    \       {\n                result ~= '_';\n                space_found = true;\n\
    \            }\n        }\n        else\n        {\n            result ~= ch;\n\
    \            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdak4sk4d.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ffd]\\n??:? void tmpdak4sk4d.__unittest_L37_C1()\
    \ [0x427c34]\\n??:? void tmpdak4sk4d.__modtest() [0x427d7c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c693]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ff79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430428]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b579]\\n??:? runModuleUnitTests [0x42c469]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42844c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283d3]\\n??:? _d_run_main [0x42833e]\\n??:? main [0x427d8f]\\\
    n??:? __libc_start_main [0x9ec0f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ytj1_l0.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ytj1_l0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphuerbozi.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmphuerbozi.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmphuerbozi.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x6fd17554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8uiw98gz.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uiw98gz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    import std.algorithm : replace;\n    import std.range : join;\n    import\
    \ std.array : array;\n    import std.string : split;\n    import std.conv : to;\n\
    \    import std.typecons : tuple;\n    import std.math : min;\n    import std.range\
    \ : take;\n    import std.range : drop;\n    import std.range : empty;\n    import\
    \ std.range : front;\n    import std.range : back;\n    import std.range : popFront;\n\
    \    import std.range : popBack;\n    import std.range : only;\n    import std.range\
    \ : isInputRange;\n    import std.range : isForwardRange;\n    import std.range\
    \ : isBidirectionalRange;\n    import std.range : isRandomAccessRange;\n    import\
    \ std.range : isInfinite;\n    import std.range : isSorted;\n    import std.range\
    \ : isSorted!\"a < b\";\n    import std.range : isSorted!\"a > b\";\n    import\
    \ std.range : isSorted!\"a <= b\";\n    import std.range : isSorted!\"a >= b\"\
    ;\n    import std.range : isSorted!\"a == b\";\n    import std.range : isSorted!\"\
    a != b\";\n    import std.range : isSorted!\"a.cmp(b)\";\n    import std.range\
    \ : isSorted!\"a.cmp(b) < 0\";\n    import std.range : isSorted!\"a.cmp(b) > 0\"\
    ;\n    import std.range : isSorted!\"a.cmp(b) <= 0\";\n    import std.range :\
    \ isSorted!\"a.cmp(b) >= 0\";\n    import std.range : isSorted!\"a.cmp(b) == 0\"\
    ;\n    import std.range : isSorted!\"a.cmp(b) != 0\";\n    import std.range :\
    \ isSorted!\"a.icmp(b)\";\n    import std.range : isSorted!\"a.icmp(b) < 0\";\n\
    \    import std.range : isSorted!\"a.icmp(b) > 0\";\n    import std.range : isSorted!\"\
    a\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprlpvtbpx.d(38): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(39):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(40): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(41):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(42): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(43):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(44): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(45):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(46): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(47):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(48): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(49):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(50): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(51):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(52): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(53):\
    \ Error: `;` expected\\n/tmp/tmprlpvtbpx.d(54): Error: `;` expected\\n/tmp/tmprlpvtbpx.d(59):\
    \ Error: found `Example` when expecting `;` following statement\\n/tmp/tmprlpvtbpx.d(59):\
    \ Error: found `Example` when expecting `;` following statement\\n/tmp/tmprlpvtbpx.d(60):\
    \ Error: found `Mudasir` when expecting `;` following statement\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlpvtbpx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces\
    \ = \"  \";\n    while (result.find(consecutive_spaces) != -1)\n    {\n      \
    \  result = result.replace(consecutive_spaces, \"-\");\n        consecutive_spaces\
    \ ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ea1bvir.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ea1bvir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwijep28d.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpwijep28d.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpwijep28d.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x90caa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    return text.replace(\"  \", \"-\").replace(\" \", \"_\");\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpisn252n4.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisn252n4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjecq5cxw.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpjecq5cxw.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpjecq5cxw.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xb0cbf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text;\n    auto spaceCount = 0;\n    foreach(i, c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            spaceCount++;\n         \
    \   if(spaceCount > 2)\n            {\n                result[i] = '-';\n    \
    \        }\n            else\n            {\n                result[i] = '_';\n\
    \            }\n        }\n        else\n        {\n            spaceCount = 0;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmparj4dvcw.d(26): Error: cannot modify `immutable` expression `result[i]`\\\
    n/tmp/tmparj4dvcw.d(30): Error: cannot modify `immutable` expression `result[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparj4dvcw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpikdlnc00.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpikdlnc00.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpikdlnc00.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x5d74d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5cpoy9pk.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmp5cpoy9pk.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmp5cpoy9pk.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x9ad7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuluhbahy.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpuluhbahy.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpuluhbahy.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0xf5f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_8c_0we.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp7_8c_0we.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmp7_8c_0we.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xcab77554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    __\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_kxjaot.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_kxjaot.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n\
    \                result ~= '-';\n            }\n            else\n           \
    \ {\n                result ~= '_';\n                space = true;\n         \
    \   }\n        }\n        else\n        {\n            result ~= c;\n        \
    \    space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz7e1wzvl.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpz7e1wzvl.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpz7e1wzvl.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x13f3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto consecutiveSpaces =\
    \ result.replace(\"__\", \"-\");\n    return consecutiveSpaces;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro2q05y8.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro2q05y8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count >\
    \ 2)\n            {\n                result ~= '-';\n                count = 0;\n\
    \            }\n            else\n            {\n                result ~= '_';\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0g4m514w.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmp0g4m514w.__unittest_L42_C1()\
    \ [0x427cbb]\\n??:? void tmp0g4m514w.__modtest() [0x427db8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dcb]\\\
    n??:? __libc_start_main [0xccc28554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"\
    __\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkqzemb61.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqzemb61.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result;\n    bool space = false;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            if(space)\n            {\n     \
    \           result ~= '-';\n            }\n            else\n            {\n \
    \               result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeqgfyhoj.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42802d]\\n??:? void tmpeqgfyhoj.__unittest_L41_C1()\
    \ [0x427c64]\\n??:? void tmpeqgfyhoj.__modtest() [0x427dac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a9]\\n??:? runModuleUnitTests [0x42c499]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42847c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428403]\\n??:? _d_run_main [0x42836e]\\n??:? main [0x427dbf]\\\
    n??:? __libc_start_main [0x2a5db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n\
    \        if(c == ' ')\n        {\n            count++;\n            if(count ==\
    \ 1)\n            {\n                result ~= '_';\n            }\n         \
    \   else if(count == 2)\n            {\n                result ~= '-';\n     \
    \       }\n        }\n        else\n        {\n            count = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgys2nazu.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428035]\\n??:? void tmpgys2nazu.__unittest_L41_C1()\
    \ [0x427c6c]\\n??:? void tmpgys2nazu.__modtest() [0x427db4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42ffb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b1]\\n??:? runModuleUnitTests [0x42c4a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428484]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42840b]\\n??:? _d_run_main [0x428376]\\n??:? main [0x427dc7]\\\
    n??:? __libc_start_main [0xc54cd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\"\
    \ Example   3\") == \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n\
    {\n    auto result = text.replace(\" \", \"_\");\n    return result.replace(\"\
    _ _\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpta65l0m5.d(17): Error: no property `replace` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpta65l0m5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
