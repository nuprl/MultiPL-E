name: HumanEval_14_all_prefixes
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
  \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n  \
  \  ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n"
tests: "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
  \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
  , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
  WWW\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\n\
    string[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings3(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] prefixes;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        prefixes ~= string[0 .. i];\n    }\n    return\
    \ prefixes;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(int i; 0..string.length)\n        result ~= string[0..i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.string;\n    import std.array;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.string;\n\
    \    import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.traits;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.traits;\n    import std.algorithm;\n    import std.range;\n  \
    \  import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.", "{\n    string[] prefixes;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        prefixes ~= string[0 .. i];\n\
    \    }\n    return prefixes;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(immutable\
    \ i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n  \
    \  return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings2(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n       \
    \ {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings3(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n       \
    \ {\n            result ~= string[", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings_2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings_3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=",
  "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i ..", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    return iota(string.length + 1).map!(i => string[0 .. i])();\n\
    }", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\n\
    string[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \n*/\n\
    string[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\n\
    string[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', '", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(immutable\
    \ i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n  \
    \  return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n     \
    \   {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n     \
    \   {\n", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc',\
    \ 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings('abc')\n    ['a', 'ab',\
    \ 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i .. j];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(immutable\
    \ i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n \
    \   return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\n\
    \        result ~= string[0..i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}", "{\n \
    \   string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(string s; string[]) \n  \
    \  {\n        result ~= s;\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(int i; 0..string.length) \n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n        ret ~=\
    \ string[0 .. i];\n    }\n    return ret;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c',\
    \ 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c',\
    \ 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    import std.algorithm : map;\n    import\
    \ std.range : iota;\n    import std.array : array;\n    import std.conv : to;\n\
    \    import std.string : take;\n    return iota(string.length).map!(i => string.take(i\
    \ + 1)).array;\n}", "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\
    \ \n    {\n        result ~= string[0..i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    import std.algorithm;\n    import\
    \ std.range;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;", "{\n    string[] result;\n \
    \   foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}",
  "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~=\
    \ string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(immutable\
    \ i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n  \
    \  return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\
    \ \n    {\n        result ~= string[0..i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', '", "{\n    string[] result;\n    foreach(immutable i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\n\
    string[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings3(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\n\
    string[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc',\
    \ 'c']\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i ..", "{\n    string[] result;\n   \
    \ foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n \
    \   }\n    return result;\n}", "{\n    string[] prefixes;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        prefixes ~= string[0 .. i];\n    }\n    return\
    \ prefixes;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings_2(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n       \
    \ {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n\
    */\nstring[] all_substrings_3(string string) \n{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n       \
    \ {\n            result ~=", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    import std.algorithm;\n\
    \    import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.string;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \   ", "{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n\
    \    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0\
    \ .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i;\
    \ 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(int i; 0..string.length)\n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}", "{\n \
    \   string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return\
    \ result;\n}", "{\n    string[] result;\n    foreach(i; 0 .. string.length)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}", "{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n\
    \    }\n    return result;\n}", "{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}", "{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
