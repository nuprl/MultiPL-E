name: HumanEval_61_correct_bracketing
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if the brackets are correctly nested.\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokb4ve8s.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokb4ve8s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    int count = 0;\n    foreach(ch; brackets)\n    {\n       \
    \ if(ch == '(')\n        {\n            count++;\n        }\n        else if(ch\
    \ == ')')\n        {\n            count--;\n        }\n        if(count < 0)\n\
    \        {\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(ch; brackets)\n    {\n        if(ch == '(')\n\
    \            count++;\n        else if(ch == ')')\n            count--;\n    \
    \    if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the expression such that\
    \ it evaluates to True.\n    >>> num_ways_to_parenthesize(\"T|F&F\")\n    2\n\
    \    >>> num_ways_to_parenthesize(\"T^F|F\")\n    2\n    >>> num_ways_to_parenthesize(\"\
    T^F&T\")\n    1\n    >>> num_ways_to_parenthesize(\"T^F&F\")\n    0\n*/\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets) \n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets) \n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression so that it evaluates\
    \ to target.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzngralvw.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzngralvw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open = 0;\n    foreach(char c; brackets) {\n        if (c == '(') {\n\
    \            open++;\n        } else if (c == ')') {\n            open--;\n  \
    \      }\n        if (open < 0) {\n            return false;\n        }\n    }\n\
    \    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the product of n variables.\n\
    \    >>> num_ways_parenthesize(1)\n    1\n    >>> num_ways_parenthesize(2)\n \
    \   1\n    >>> num_ways_parenthesize(3)\n    2\n    >>> num_ways_parenthesize(4)\n\
    \    5\n    >>> num_ways_parenthesize(5)\n    14\n*/\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int count = 0;\n\tforeach(char c; brackets)\n\t{\n\t\tif(c == '(')\n\t\t\tcount++;\n\
    \t\telse if(c == ')')\n\t\t\tcount--;\n\t\tif(count < 0)\n\t\t\treturn false;\n\
    \t}\n\treturn count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe3rnuku2.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3rnuku2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if the string is a palindrome.\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcm7tte5x.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcm7tte5x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(ch; brackets) \n    {\n        if (ch == '(')\n\
    \            count++;\n        else if (ch == ')')\n            count--;\n   \
    \     if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the given\
    \ string.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpla5oexkx.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla5oexkx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression.\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt34apd7w.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt34apd7w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return a string of \"(\" and \")\" that is the same length as brackets.\n\
    \    The returned string should have the same number of opening brackets as brackets,\n\
    \    and the same number of closing brackets as brackets.\n    The returned string\
    \ should be such that if it is concatenated with brackets,\n    the result is\
    \ a string with correct bracketing.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfss5v1w.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfss5v1w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            balance++;\n        else if (c == ')')\n            balance--;\n\
    \        if (balance < 0)\n            return false;\n    }\n    return balance\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(') {\n\
    \            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ \n    {\n        if (brackets[i] == '(') \n        {\n            count++;\n\
    \        } \n        else if (brackets[i] == ')') \n        {\n            count--;\n\
    \        }\n        if (count < 0) \n        {\n            return false;\n  \
    \      }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxh2z5tp4.d(19): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxh2z5tp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if the string is a palindrome.\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ozjl_xn.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ozjl_xn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else\n            count--;\n        if(count < 0)\n\
    \            return false;\n    }\n    return count == 0;\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the expression such that\
    \ it evaluates to True.\n    >>> num_ways_to_parenthesize(\"T&F\", {(\"T\", True),\
    \ (\"F\", False)})\n    1\n    >>> num_ways_to_parenthesize(\"T|F\", {(\"T\",\
    \ True), (\"F\", False)})\n    2\n    >>> num_ways_to_parenthesize(\"T^F^T\",\
    \ {(\"T\", True), (\"F\", False)})\n    4\n    >>> num_ways_to_parenthesize(\"\
    T^F|F\", {(\"T\", True), (\"F\", False)})\n    2\n    >>> num_ways_to_parenthesize(\"\
    T^F|F&T^F\", {(\"T\", True), (\"F\", False)})\n    10\n*/\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets) \n    {\n        if (c == '(') \n\
    \        {\n            count++;\n        } \n        else if (c == ')') \n  \
    \      {\n            count--;\n        }\n        if (count < 0) \n        {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the expression such that\
    \ it evaluates to True.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_5w_ac2.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_5w_ac2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            balance++;\n        else if (c == ')')\n            balance--;\n\
    \        if (balance < 0)\n            return false;\n    }\n    return balance\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ \n    {\n        if (brackets[i] == '(') \n        {\n            count++;\n\
    \        } \n        else \n        {\n            count--;\n        }\n     \
    \   if (count < 0) \n        {\n            return false;\n        }\n    }\n\
    \    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkm9p09vf.d(19): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkm9p09vf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets) \n    {\n        if (c == '(') \n\
    \        {\n            count++;\n        } \n        else if (c == ')') \n  \
    \      {\n            count--;\n        }\n        if (count < 0) \n        {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(ch; brackets)\n    {\n        if(ch == '(')\n\
    \            count++;\n        else if(ch == ')')\n            count--;\n    \
    \    if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the expression such that\
    \ it evaluates to True.\n    >>> num_true_parenthesizations(\"T^F&T\")\n    2\n\
    \    >>> num_true_parenthesizations(\"T^F|F\")\n    1\n    >>> num_true_parenthesizations(\"\
    T^F^T\")\n    0\n    >>> num_true_parenthesizations(\"T&F&T\")\n    0\n    >>>\
    \ num_true_parenthesizations(\"T|F|T\")\n    3\n    >>> num_true_parenthesizations(\"\
    T|F&T^F\")\n    4\n    >>> num_true_parenthesizations(\"T|F&T^F|F\")\n    8\n\
    */\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphc4qu809.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc4qu809.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to parenthesize the expression such that\
    \ the value is v.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7i6k1pd.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7i6k1pd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    >>> correct_bracketing(\"(())()\")\n    True\n    >>> correct_bracketing(\"\
    ((()))\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>>\
    \ correct_bracketing(\"(()()(()))\")\n    True\n    >>> correct_bracketing(\"\
n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4tss4jc.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4tss4jc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression so that it evaluates\
    \ to target.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpen0ogjqj.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpen0ogjqj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return a string of \"(\" and \")\" that is a correct bracketing of the\
    \ given number of pairs.\n    >>> bracketing(0)\n    \"\"\n    >>> bracketing(1)\n\
    \    \"()\"\n    >>> bracketing(2)\n    \"(())\"\n    >>> bracketing(3)\n    \"\
    ((()))\"\n    >>> bracketing(4)\n    \"(((())))\"\n*/\nstring bracketing(int pairs)\n\
    {\n    string result = \"\";\n    for(int i = 0; i < pairs; i++)\n    {\n    \
    \    result = \"(\" ~ result ~ \")\";\n    }\n    return result;\n}\n/*\n    return\
    \ a string of \"(\" and \")\" that is a correct bracketing of the given number\
    \ of pairs.\n    >>> bracketing(0)\n    \"\"\n    >>> bracketing(1)\n    \"()\"\
    \n    >>> bracketing(2)\n    \"(())\"\n    >>> bracketing(3)\n    \"((()))\"\n\
    \    >>> bracketing(4)\n    \"(((())))\"\n*/\nstring bracketing2(int pairs)\n\
    {\n    string result = \"\";\n    for(int i = 0; i < pairs; i++)\n    {\n    \
    \    result = \"(\" ~ result ~ \")\";\n    }\n    return result;\n}\n/*\n    return\
    \ a string of \"(\" and \")\" that is a correct bracketing of the given number\
    \ of pairs.\n    >>> bracketing(0)\n    \"\"\n    >>> bracketing(1)\n    \"()\"\
    \n    >>> bracketing(2)\n    \"(())\"\n    >>> bracketing(3)\n    \"((()))\"\n\
    \    >>> bracketing(4)\n    \"(((())))\"\n*/\nstring bracketing3(int pairs)\n\
    {\n    string result = \"\";\n    for(int i = 0; i < pairs; i++)\n   \nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5rjx4tzq.d(93): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rjx4tzq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int counter = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            counter++;\n        else if(c == ')')\n            counter--;\n \
    \       if(counter < 0)\n            return false;\n    }\n    return counter\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return a string of \"(\" and \")\" such that:\n    - every opening bracket\
    \ has a corresponding closing bracket\n    - the string is as short as possible\n\
    \    - the string is as long as possible\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ty3m6kr.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ty3m6kr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression so that it evaluates\
    \ to target.\n    >>> num_ways_parenthesize(\"1+2\", 3)\n    1\n    >>> num_ways_parenthesize(\"\
    1+2+3+4+5\", 15)\n    1\n    >>> num_ways_parenthesize(\"1+2+3+4+5\", 16)\n  \
    \  2\n    >>> num_ways_parenthesize(\"2*3*4*5\", 120)\n    1\n    >>> num_ways_parenthesize(\"\
    2*3*4*5\", 121)\n    0\n    >>> num_ways_parenthesize(\"2+3*4+5\", 45)\n    2\n\
    \    >>> num_ways_parenthesize(\"2+3*4+5\", 46)\n    0\n    >>> num_ways_parenthesize(\"\
    2+3*4+5\", 47)\n    1\n    >>> num_ways_parenthesize(\"2+3*4+5\", 48)\n    2\n\
    \    >>> num_ways_parenthesize(\"2+3*4+5\", 49)\n    1\n    >>> num_ways_parenthesize(\"\
    2+3*4+5\", 50)\n    0\n    >>> num_ways_parenthesize(\"2+3*4+5\", 51)\n    1\n\
    \    >>> num_ways_parenthesize(\"2+3*4+5\", 52)\n    2\n    >>> num_ways_parenthesize(\"\
    2+3*4+5\", 53)\n    1\n    >>> num_ways_parenthesize(\"2+3*4+5\", 54)\n    0\n\
    \    >>> num_ways_parenthesize(\"2+3*4+5\", 55)\n    1\n    >>> num_ways_parenthesize(\"\
    2+3*4+5\", 56)\n    2\n    >>> num_ways_parent\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cqa6buh.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cqa6buh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    foreach(char c; brackets) {\n        if (c == '(') {\n\
    \            balance++;\n        } else if (c == ')') {\n            balance--;\n\
    \        }\n        if (balance < 0) {\n            return false;\n        }\n\
    \    }\n    return balance == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets) \n    {\n        if (c == '(') \n\
    \        {\n            count++;\n        } \n        else if (c == ')') \n  \
    \      {\n            count--;\n        }\n        if (count < 0) \n        {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"\
    ()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\"\
    )(()\")\n    False\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '(')\
    \ \n        {\n            count++;\n        } \n        else if (c == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
