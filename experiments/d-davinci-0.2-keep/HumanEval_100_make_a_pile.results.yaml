name: HumanEval_100_make_a_pile
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk75usfet.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpk75usfet.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpk75usfet.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xf5647554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu8_dsgcd.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpu8_dsgcd.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpu8_dsgcd.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x11f7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppgwq5or7.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmppgwq5or7.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmppgwq5or7.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x84aa0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdniwbj9i.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpdniwbj9i.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpdniwbj9i.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpdniwbj9i.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xf94ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpssegkd15.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpssegkd15.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpssegkd15.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpssegkd15.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x864ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpshh7916z.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpshh7916z.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpshh7916z.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xeae04554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long num = n;\n    for (long i = 0; i < n; i++)\n    {\n     \
    \   result[i] = num;\n        if (num % 2 == 0)\n        {\n            num +=\
    \ 1;\n        }\n        else\n        {\n            num += 2;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpypr_sd4z.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpypr_sd4z.__unittest_L35_C1()\
    \ [0x427f8b]\\n??:? void tmpypr_sd4z.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xcc93e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4z13fzp9.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp4z13fzp9.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp4z13fzp9.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xaa247554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      result[i] = stones;\n        if (stones % 2 == 0)\n            stones++;\n\
    \        else\n            stones += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoj_d4ylh.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpoj_d4ylh.__unittest_L31_C1()\
    \ [0x427f8b]\\n??:? void tmpoj_d4ylh.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x818a6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = result[i-1] + (n % 2 == 0 ? 2 : 1);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx80m05ly.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42848d]\\n??:? void tmpx80m05ly.__unittest_L27_C1()\
    \ [0x427f56]\\n??:? void tmpx80m05ly.__modtest() [0x428210]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c547]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430665]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b1]\\n??:? runModuleUnitTests [0x42c31d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428950]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288d7]\\n??:? _d_run_main [0x428842]\\n??:? main [0x428223]\\\
    n??:? __libc_start_main [0xf2978554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4vrky47s.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp4vrky47s.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmp4vrky47s.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x9d06b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = (n % 2 == 0) ? result[i-1] + 2 : result[i-1] + 1;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd223yjf7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpd223yjf7.__unittest_L27_C1()\
    \ [0x427f72]\\n??:? void tmpd223yjf7.__modtest() [0x42822c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x42823f]\\\
    n??:? __libc_start_main [0xf8d52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy3t4e2tq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpy3t4e2tq.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpy3t4e2tq.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x35561554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpucbyvzem.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpucbyvzem.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpucbyvzem.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x7b51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n;\n \
    \       n = (n % 2 == 0) ? n + 2 : n + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpq12wvrn_.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpq12wvrn_.make_a_pile(long) [0x427e42]\\\
    n??:? void tmpq12wvrn_.__unittest_L27_C1() [0x427ea5]\\n??:? void tmpq12wvrn_.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x6aa5c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + i\
    \ * 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        n = n % 2 == 0 ? n + 2 : n + 1;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpga0fy7d0.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpga0fy7d0.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpga0fy7d0.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpga0fy7d0.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x18438554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n   \
    \     }\n        else\n        {\n            result[i] = result[i-1] + 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc00d9d4m.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpc00d9d4m.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpc00d9d4m.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x25900554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new long[n];\n\
    \    res[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n        res[i] = res[i-1]\
    \ + (res[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprmzw3isq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmprmzw3isq.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmprmzw3isq.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xdbc12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm6pgkkwv.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpm6pgkkwv.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpm6pgkkwv.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x94314554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprwm2r4xa.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmprwm2r4xa.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmprwm2r4xa.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x8c9a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv3nq8z49.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpv3nq8z49.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpv3nq8z49.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x64aef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqysx634f.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpqysx634f.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpqysx634f.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x99884554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n   \
    \     }\n        else\n        {\n            result[i] = result[i-1] + 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd0fcntjy.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpd0fcntjy.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpd0fcntjy.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x1e7d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      result[i] = stones;\n        if (stones % 2 == 0)\n            stones++;\n\
    \        else\n            stones += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu28qobse.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpu28qobse.__unittest_L31_C1()\
    \ [0x427f8b]\\n??:? void tmpu28qobse.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xeca25554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 2 : n + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprvkqab33.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmprvkqab33.make_a_pile(long) [0x427e43]\\\
    n??:? void tmprvkqab33.__unittest_L27_C1() [0x427ea5]\\n??:? void tmprvkqab33.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xe1b1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplfu7yic2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmplfu7yic2.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmplfu7yic2.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x95145554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi40uo_x5.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpi40uo_x5.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpi40uo_x5.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xefb38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph41gblnc.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmph41gblnc.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmph41gblnc.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x47782554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe7q_yjia.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpe7q_yjia.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpe7q_yjia.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x20602554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv86jzb72.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpv86jzb72.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpv86jzb72.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd71bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n;\n \
    \       n = (n % 2 == 0) ? n + 2 : n + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp6hkfg54t.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmp6hkfg54t.make_a_pile(long) [0x427e42]\\\
    n??:? void tmp6hkfg54t.__unittest_L27_C1() [0x427ea5]\\n??:? void tmp6hkfg54t.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xb965e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      result[i] = stones;\n        if (stones % 2 == 0)\n            stones +=\
    \ 1;\n        else\n            stones += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphh16132d.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmphh16132d.__unittest_L31_C1()\
    \ [0x427f8b]\\n??:? void tmphh16132d.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x21bea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprc2d31eg.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmprc2d31eg.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmprc2d31eg.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x57b10554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfiayao6o.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpfiayao6o.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpfiayao6o.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x5f739554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ksci2jk.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp_ksci2jk.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp_ksci2jk.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x39b5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp500aibg_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp500aibg_.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp500aibg_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x94dc3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnbf3bogo.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpnbf3bogo.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpnbf3bogo.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x17850554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdkd966m5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpdkd966m5.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpdkd966m5.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x2fa18554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp871nnzlf.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp871nnzlf.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmp871nnzlf.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x6e17c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] pile = new long[n];\n\
    \    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n        pile[i]\
    \ = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones + 1;\n \
    \   }\n    return pile;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n\
    \    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcm30ywxt.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpcm30ywxt.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpcm30ywxt.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xaf872554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoa70up2q.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpoa70up2q.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpoa70up2q.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x580f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyy52fo5_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpyy52fo5_.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpyy52fo5_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfc655554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n   \
    \     }\n        else\n        {\n            result[i] = result[i-1] + 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv7oaeh12.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpv7oaeh12.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpv7oaeh12.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x4e220554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg9goe9kp.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpg9goe9kp.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpg9goe9kp.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xeb402554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi_ml8_d6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpi_ml8_d6.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpi_ml8_d6.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x81cbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8pntobk.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpz8pntobk.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpz8pntobk.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x17c7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_5ii128l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp_5ii128l.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp_5ii128l.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x7dddd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ju37ba4.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp5ju37ba4.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmp5ju37ba4.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x4e7a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpynnclvnn.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpynnclvnn.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpynnclvnn.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x376ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsmqx3if_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpsmqx3if_.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpsmqx3if_.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xe64a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpk2tmefbw.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpk2tmefbw.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpk2tmefbw.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpk2tmefbw.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x36e74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptde6jzb2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmptde6jzb2.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmptde6jzb2.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x19b0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        if (n % 2 == 0)\n            n += 1;\n        else\n            n +=\
    \ 2;\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmo66uapc.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpmo66uapc.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpmo66uapc.__unittest_L32_C1() [0x427ea9]\\n??:? void tmpmo66uapc.__modtest()\
    \ [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x8a653554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuvqw3zku.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpuvqw3zku.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpuvqw3zku.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xdb83a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg766hsb6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpg766hsb6.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpg766hsb6.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x9811e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = stones % 2 == 0 ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1p5s2wtn.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp1p5s2wtn.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmp1p5s2wtn.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x497c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpezl8fmbt.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpezl8fmbt.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpezl8fmbt.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x75ea7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyl5xx_fj.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpyl5xx_fj.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpyl5xx_fj.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xc6f45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaajcwjgw.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpaajcwjgw.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpaajcwjgw.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x9fa5b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz784p7ia.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpz784p7ia.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpz784p7ia.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x96201554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn482o6h1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpn482o6h1.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpn482o6h1.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x204a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc_2ltez4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpc_2ltez4.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpc_2ltez4.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xc2633554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdr6lzie1.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpdr6lzie1.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpdr6lzie1.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x14bb5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe05tr63h.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpe05tr63h.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpe05tr63h.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x8706c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphfp8qsjz.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmphfp8qsjz.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmphfp8qsjz.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xabca4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpixbdkwhd.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpixbdkwhd.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpixbdkwhd.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xcc205554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyxr1gfji.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpyxr1gfji.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpyxr1gfji.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x3457554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++) {\n        if\
    \ (n % 2 == 0) {\n            result[i] = result[i - 1] + 2;\n        } else {\n\
    \            result[i] = result[i - 1] + 1;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5ofwko14.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp5ofwko14.__unittest_L30_C1()\
    \ [0x427f9e]\\n??:? void tmp5ofwko14.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xadc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      result[i] = stones;\n        if (stones % 2 == 0)\n            stones++;\n\
    \        else\n            stones += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpor2l81n0.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpor2l81n0.__unittest_L31_C1()\
    \ [0x427f8b]\\n??:? void tmpor2l81n0.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x2862b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx69dq2bv.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpx69dq2bv.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpx69dq2bv.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb5ea7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv18kszp_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpv18kszp_.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpv18kszp_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xdae9b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp87kncf_8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp87kncf_8.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp87kncf_8.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xc7173554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpji62jtlv.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpji62jtlv.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpji62jtlv.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x8832d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0uphe351.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp0uphe351.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp0uphe351.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xed87c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm8pw73gz.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpm8pw73gz.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpm8pw73gz.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x465cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2u3k093s.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp2u3k093s.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp2u3k093s.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x31bb8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpalzrba5z.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpalzrba5z.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpalzrba5z.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xbbdca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfe4g9a25.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpfe4g9a25.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpfe4g9a25.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xc8074554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprwjqwg5s.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmprwjqwg5s.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmprwjqwg5s.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x5c9ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new long[n];\n\
    \    res[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n        if (n % 2 ==\
    \ 0)\n            res[i] = res[i-1] + 2;\n        else\n            res[i] = res[i-1]\
    \ + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnlnszj7t.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpnlnszj7t.__unittest_L30_C1()\
    \ [0x427f9e]\\n??:? void tmpnlnszj7t.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xfa87d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp73h1y55d.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp73h1y55d.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp73h1y55d.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb51dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkuxtcpny.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpkuxtcpny.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpkuxtcpny.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x7a293554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbwvt5vs_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpbwvt5vs_.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpbwvt5vs_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xad7ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long[] odd = new long[n];\n    long[] even = new long[n];\n  \
    \  long[] odd_even = new long[n];\n    long[] even_odd = new long[n];\n    long[]\
    \ even_even = new long[n];\n    long[] odd_odd = new long[n];\n    long[] odd_even_even\
    \ = new long[n];\n    long[] even_odd_odd = new long[n];\n    long[] even_even_even\
    \ = new long[n];\n    long[] odd_odd_odd = new long[n];\n    long[] even_odd_odd_odd\
    \ = new long[n];\n    long[] odd_even_even_even = new long[n];\n    long[] odd_odd_odd_odd\
    \ = new long[n];\n    long[] even_even_even_even = new long[n];\n    long[] odd_odd_odd_odd_odd\
    \ = new long[n];\n    long[] even_even_even_even_even = new long[n];\n    long[]\
    \ odd_odd_odd_odd_odd_odd = new long[n];\n    long[] even_even_even_even_even_even\
    \ = new long[n];\n    long[] odd_odd_odd_odd_odd_odd_odd = new long[n];\n    long[]\
    \ even_even_even_even_even_even_even = new long[n];\n    long[] odd_odd_odd_odd_odd_odd_odd_odd\
    \ = new long[n];\n    long[] even_even_even_even_even_even_even_even = new long[n];\n\
    \    long[] odd_odd_odd_odd_odd_odd_odd_odd_odd = new long[n];\n    long[] even_even_even_even_even_even_even_even_even\
    \ = new long[n];\n    long[] odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = new long[n];\n\
    \    long[] even_even_even_even_even_even_even_even_even_even = new long[n];\n\
    \    long[] odd_odd_odd\nunittest\n{\n    alias candidate = make_a_pile;\n\n \
    \   assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L,\
    \ 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxikos4ty.d(47): Error: semicolon expected, not `unittest`\\n/tmp/tmpxikos4ty.d(47):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxikos4ty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpecudq1iv.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpecudq1iv.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpecudq1iv.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x76f47554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8yr91hao.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp8yr91hao.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp8yr91hao.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd4c60554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp0fsadmf.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpp0fsadmf.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpp0fsadmf.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xda2c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        if (stones % 2 == 0)\n            stones++;\n\
    \        else\n            stones += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfeuhrjne.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpfeuhrjne.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmpfeuhrjne.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xcd66554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprw0x5bpk.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmprw0x5bpk.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmprw0x5bpk.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xde0ca554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk_mtgxd_.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpk_mtgxd_.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpk_mtgxd_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd1e48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n   \
    \     }\n        else\n        {\n            result[i] = result[i-1] + 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbbau9e1z.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpbbau9e1z.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpbbau9e1z.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x3aca2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n  \
    \      }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj2me_yef.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpj2me_yef.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpj2me_yef.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xe48d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0rp_q2so.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp0rp_q2so.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp0rp_q2so.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x8c42a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpch2gg6if.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpch2gg6if.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpch2gg6if.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xc05c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpztf_nz7s.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpztf_nz7s.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpztf_nz7s.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x340ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxth16tfj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpxth16tfj.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpxth16tfj.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x6f078554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long count = n;\n    for (int i = 0; i < n; i++)\n    {\n    \
    \    result[i] = count;\n        if (count % 2 == 0)\n            count++;\n \
    \       else\n            count += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4fryxf3.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpt4fryxf3.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmpt4fryxf3.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xc122c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        n = n % 2 == 0 ? n + 2 : n + 1;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpj89g0m0a.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpj89g0m0a.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpj89g0m0a.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpj89g0m0a.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xba31a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy_y7i0z7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpy_y7i0z7.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpy_y7i0z7.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xf6f64554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n;\n \
    \       n = n % 2 == 0 ? n + 2 : n + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpjfy7rea5.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpjfy7rea5.make_a_pile(long) [0x427e42]\\\
    n??:? void tmpjfy7rea5.__unittest_L27_C1() [0x427ea5]\\n??:? void tmpjfy7rea5.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x9f0f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long count = n;\n    for (int i = 0; i < n; i++)\n    {\n    \
    \    result[i] = count;\n        if (count % 2 == 0)\n            count++;\n \
    \       else\n            count += 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0caxpakt.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp0caxpakt.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmp0caxpakt.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xe0fd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5fltbepp.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp5fltbepp.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp5fltbepp.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x55ddd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpml55u41e.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpml55u41e.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpml55u41e.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xdcdee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_9qdl_1w.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp_9qdl_1w.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp_9qdl_1w.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x52473554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps0lnqt_u.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmps0lnqt_u.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmps0lnqt_u.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x35335554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcpa_ezku.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpcpa_ezku.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpcpa_ezku.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x850f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr8qd_ymh.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpr8qd_ymh.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpr8qd_ymh.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf1652554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgaj_u56h.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpgaj_u56h.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpgaj_u56h.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x52400554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp54ax9ury.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp54ax9ury.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp54ax9ury.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xde134554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcjyxt3we.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpcjyxt3we.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpcjyxt3we.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xd2abd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaf00euif.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpaf00euif.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpaf00euif.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x5474b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp43sl283x.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp43sl283x.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmp43sl283x.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb9fcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + (2\
    \ * i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsdb5076b.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpsdb5076b.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpsdb5076b.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd2fbf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsvkcwm5y.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpsvkcwm5y.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpsvkcwm5y.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x64d9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] = n;\n\
    \        if (n % 2 == 0)\n            n++;\n        else\n            n += 2;\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp_hvjlsrr.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmp_hvjlsrr.make_a_pile(long) [0x427e43]\\\
    n??:? void tmp_hvjlsrr.__unittest_L32_C1() [0x427ea5]\\n??:? void tmp_hvjlsrr.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x39bef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqzc1d9uq.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpqzc1d9uq.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpqzc1d9uq.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xcbe8b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu3m2whvr.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpu3m2whvr.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpu3m2whvr.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xdc2ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd28izjvy.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpd28izjvy.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpd28izjvy.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xab738554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsurzzpnx.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpsurzzpnx.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmpsurzzpnx.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x62484554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp458irwpq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp458irwpq.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp458irwpq.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xf6fba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n  \
    \      }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy1mukoqj.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpy1mukoqj.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpy1mukoqj.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xcd9f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp90k8lcwi.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp90k8lcwi.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp90k8lcwi.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xe1495554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n   \
    \     }\n        else\n        {\n            result[i] = result[i-1] + 1;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmhrpvkxx.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpmhrpvkxx.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpmhrpvkxx.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xefd4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw5r40_wb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpw5r40_wb.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpw5r40_wb.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xe7b0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_bf9e6dm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp_bf9e6dm.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp_bf9e6dm.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xee35c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjw003me2.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpjw003me2.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpjw003me2.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xad261554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n    \
    \    if (result[i-1] % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppapduxk1.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmppapduxk1.__unittest_L34_C1()\
    \ [0x427fc2]\\n??:? void tmppapduxk1.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf1cae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp12ivft0d.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp12ivft0d.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp12ivft0d.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x7ce40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n + 2\
    \ * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in a list, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n   \
    \ [3, 5, 7]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n    \
    \    else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6n0d0s67.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp6n0d0s67.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp6n0d0s67.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x8c241554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
