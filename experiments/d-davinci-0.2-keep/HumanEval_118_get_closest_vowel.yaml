name: HumanEval_118_get_closest_vowel
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n  \
  \  get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\
  \"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = int.max;\n   \
    \ foreach(v; vowels)\n    {\n        index = word.find(v);\n        if(index !=\
    \ -1)\n        {\n            if(index != 0 && index != word.length - 1)\n   \
    \         {\n                if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    if(abs(index - word.length)\
    \ < min)\n                    {\n                        min = abs(index - word.length);\n\
    \                        result = v;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    int distance = word.length\
    \ - i;\n                    if (distance < min_distance)\n                   \
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i..$];\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = -1;\n    int distance = int.max;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i == word.length - 1)\n                return\
    \ \"\";\n            if (vowels.find(word[i + 1]) != -1)\n                continue;\n\
    \            if (i == 0)\n                return \"\";\n            if (vowels.find(word[i\
    \ - 1]) != -1)\n                continue;\n            if (word.length - i < distance)\n\
    \            {\n                distance = word.length - i;\n                index\
    \ = i;\n            }\n        }\n    }\n    if (index != -1)\n        result\
    \ = word[index..$];\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    for (int i = 0; i < word.length; i++)\n  \
    \  {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (closest_vowel_distance == -1 || distance\
    \ < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n            }\n     \
    \   }\n    }\n    if (closest_vowel_index != -1)\n    {\n        if (closest_vowel_index\
    \ > 0 && closest_vowel_index < word.length - 1)\n        {\n            string\
    \ vowels = \"aeiouAEIOU\";\n            if (vowels.find(word[closest_vowel_index\
    \ - 1]) == -1 && vowels.find(word[closest_vowel_index + 1]) == -1)\n         \
    \   {\n                closest_vowel = word[closest_vowel_index];\n          \
    \  }\n        }\n    }\n    return closest_vowel;\n}", "{\n    string vowels =\
    \ \"aeiou\";\n    string res = \"\";\n    int min_dist = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            int j = i;\n            while (j < word.length &&\
    \ vowels.find(word[j]) != -1)\n                j++;\n            if (j < word.length)\n\
    \            {\n                int k = j;\n                while (k < word.length\
    \ && vowels.find(word[k]) == -1)\n                    k++;\n                if\
    \ (k < word.length)\n                {\n                    int dist = k - j;\n\
    \                    if (dist < min_dist)\n                    {\n           \
    \             min_dist = dist;\n                        res = word[i..i];\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return res;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    int distance\
    \ = 0;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            int distance = word.length - i;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int min = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i < min)\n            {\n                min = i;\n         \
    \       index = i;\n            }\n        }\n    }\n    if (index == 0)\n   \
    \ {\n        return result;\n    }\n    else\n    {\n        return word[index..index];\n\
    \    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = 0;\n    int closest_vowel_distance =\
    \ 0;\n    int word_length = word.length;\n    int vowel_length = vowels.length;\n\
    \    int word_index = word_length - 1;\n    int vowel_index = 0;\n    int vowel_distance\
    \ = 0;\n    bool found_vowel = false;\n    bool found_consonant = false;\n   \
    \ while (word_index >= 0)\n    {\n        if (found_vowel)\n        {\n      \
    \      if (isalpha(word[word_index]))\n            {\n                if (vowels.find(word[word_index])\
    \ == -1)\n                {\n                    break;\n                }\n \
    \           }\n        }\n        else\n        {\n            if (isalpha(word[word_index]))\n\
    \            {\n                if (vowels.find(word[word_index]) != -1)\n   \
    \             {\n                    found_vowel = true;\n                   \
    \ closest_vowel = word[word_index..word_index];\n                    closest_vowel_index\
    \ = word_index;\n                    closest_vowel_distance = word_length - word_index;\n\
    \                }\n            }\n        }\n        word_index--;\n    }\n \
    \   if (found_vowel)\n    {\n        vowel_index = 0;\n        while (vowel_index\
    \ < vowel_length)\n        {\n            vowel_distance = abs(word_index - vowels.find(vowels[vowel_index]));\n\
    \            if (vowel_distance < closest_vowel_distance)\n            {\n   \
    \             closest_vowel = vowels[vowel_index..vowel_index];\n            \
    \    closest_vowel_index = vowels.find(vowels[vowel_index]);\n               \
    \ closest_vowel_distance = vowel_distance;\n            }\n            vowel_index++;\n\
    \        }\n    }\n    return closest_vowel;\n}", "{\n    enum vowel = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowel.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1])\
    \ == -1)\n                {\n                    if (min > abs(word.length - i))\n\
    \                    {\n                        min = abs(word.length - i);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if (index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int index = -1;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            index = i;\n            break;\n        }\n    }\n    if (index ==\
    \ -1)\n        return result;\n    if (index == word.length - 1)\n        return\
    \ result;\n    if (vowels.find(word[index + 1]) != -1)\n        return result;\n\
    \    return word[index..index];\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int distance = 0;\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i == 0)\n            {\n                distance =\
    \ word.length;\n            }\n            else if (i == word.length - 1)\n  \
    \          {\n                distance = word.length;\n            }\n       \
    \     else\n            {\n                distance = word.length - i - 1;\n \
    \           }\n            if (distance < min_distance)\n            {\n     \
    \           min_distance = distance;\n                result = word[i];\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    string vowels =\
    \ \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && vowels.find(word[i-1]) == -1 &&\
    \ i < word.length - 1 && vowels.find(word[i+1]) == -1)\n            {\n      \
    \          if (min_distance > abs(i - word.length))\n                {\n     \
    \               min_distance = abs(i - word.length);\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min\
    \ = int.max;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int j = i;\n          \
    \  while (j >= 0 && vowels.find(word[j]) != -1)\n                j--;\n      \
    \      if (j >= 0 && i - j < min)\n            {\n                min = i - j;\n\
    \                result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    enum vowels = \"aeiou\";\n    string result = \"\";\n \
    \   int distance = word.length;\n    foreach(i, char c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            if(i > 0 && i < word.length -\
    \ 1)\n            {\n                if(vowels.canFind(word[i - 1]) || vowels.canFind(word[i\
    \ + 1]))\n                    continue;\n            }\n            if(abs(word.length\
    \ - i) < distance)\n            {\n                distance = abs(word.length\
    \ - i);\n                result = c.toString();\n            }\n        }\n  \
    \  }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int index = word.length - i - 1;\n            if(index\
    \ > 0 && consonants.canFind(word[index - 1]) && consonants.canFind(word[index\
    \ + 1]))\n            {\n                if(index < min)\n                {\n\
    \                    min = index;\n                    result = c;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(vowel; word)\n    {\n        if(vowels.find(vowel)\
    \ != -1)\n        {\n            int distance = word.length - word.find(vowel);\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = vowel;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = int.max;\n    int distance = 0;\n    int index\
    \ = 0;\n    int word_length = word.length;\n    for (int i = 0; i < word_length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i == 0 || i == word_length - 1)\n            {\n                continue;\n\
    \            }\n            else\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            distance = abs(word_length - i - 1);\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        index = i;\n                    }\n   \
    \             }\n            }\n        }\n    }\n    if (index != 0)\n    {\n\
    \        result = word[index];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if (distance < min_distance)\n            {\n                min_distance =\
    \ distance;\n                result = word[i];\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n   \
    \ for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1])\
    \ == -1)\n                {\n                    if (i < min_distance)\n     \
    \               {\n                        min_distance = i;\n               \
    \         result = word[i..$];\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = 0;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.find(c) != -1)\n     \
    \   {\n            foreach(j, char d; word[i..$])\n            {\n           \
    \     if(consonants.find(d) != -1)\n                {\n                    distance\
    \ = j;\n                    break;\n                }\n            }\n       \
    \     if(distance != 0)\n            {\n                if(min_distance == 0)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n                else if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result =\
    \ \"\";\n    int min_distance = word.length;\n    foreach(i, char c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(vowel; vowels)\n    {\n        int vowel_pos = word.find(vowel);\n\
    \        if(vowel_pos != -1)\n        {\n            int distance = word.length\
    \ - vowel_pos;\n            if(distance > 1 && distance < min_distance)\n    \
    \        {\n                min_distance = distance;\n                result =\
    \ vowel;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n    int\
    \ min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n   \
    \ {\n        if (vowels.find(word[i]) != string.npos)\n        {\n           \
    \ if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == string.npos && vowels.find(word[i + 1]) == string.npos)\n         \
    \       {\n                    if (min_distance > abs(word.length - i))\n    \
    \                {\n                        min_distance = abs(word.length - i);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if (index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    int index = word.length - 1;\n    while(index >= 0)\n    {\n\
    \        if(vowels.find(word[index]) != -1)\n        {\n            if(index ==\
    \ 0)\n                return \"\";\n            if(vowels.find(word[index-1])\
    \ == -1)\n                return word[index..index];\n        }\n        index--;\n\
    \    }\n    return \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    int distance = 0;\n    int word_length = word.length;\n    for\
    \ (int i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i == 0)\n            {\n                distance\
    \ = word_length - 1;\n            }\n            else if (i == word_length - 1)\n\
    \            {\n                distance = word_length - 1;\n            }\n \
    \           else\n            {\n                distance = word_length - i -\
    \ 1;\n            }\n            if (distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = word[i..$];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (min > abs(word.length\
    \ - i))\n                    {\n                        min = abs(word.length\
    \ - i);\n                        index = i;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    if (index != 0)\n    {\n     \
    \   result = word[index];\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = int.max;\n \
    \   int distance = 0;\n    int word_length = word.length;\n    int vowel_length\
    \ = vowels.length;\n    int word_index = 0;\n    int vowel_index = 0;\n    int\
    \ vowel_pos = 0;\n    bool found_vowel = false;\n    bool found_consonant = false;\n\
    \    foreach(char c; word)\n    {\n        if(found_vowel)\n        {\n      \
    \      if(vowels.find(c) == -1)\n            {\n                found_vowel =\
    \ false;\n                found_consonant = true;\n            }\n        }\n\
    \        else if(found_consonant)\n        {\n            if(vowels.find(c) !=\
    \ -1)\n            {\n                found_vowel = true;\n                found_consonant\
    \ = false;\n                distance = word_length - word_index;\n           \
    \     if(distance < min_distance)\n                {\n                    min_distance\
    \ = distance;\n                    result = c;\n                }\n          \
    \  }\n        }\n        else\n        {\n            if(vowels.find(c) != -1)\n\
    \            {\n                found_vowel = true;\n                vowel_pos\
    \ = word_index;\n            }\n        }\n        word_index++;\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int index = 0;\n    int min_distance = word.length;\n    for (int i = 0;\
    \ i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n    \
    \    {\n            if (i > 0 && i < word.length - 1)\n            {\n       \
    \         if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n\
    \                {\n                    if (min_distance > abs(i - word.length))\n\
    \                    {\n                        min_distance = abs(i - word.length);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if (index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && vowels.find(word[i - 1]) == -1)\n\
    \            {\n                index = i;\n                break;\n         \
    \   }\n        }\n    }\n    if (index != 0)\n    {\n        for (int i = index;\
    \ i < word.length; i++)\n        {\n            if (vowels.find(word[i]) == -1)\n\
    \            {\n                if (i - index < min)\n                {\n    \
    \                min = i - index;\n                    result = word[index];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int d = word.length - i;\n            if(d < distance)\n\
    \            {\n                distance = d;\n                result = c;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if (distance < min_distance)\n            {\n                min_distance =\
    \ distance;\n                result = word[i..$];\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min = int.max;\n    for (int i = word.length - 1; i >= 0;\
    \ i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  for (int j = i; j >= 0; j--)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    index = j;\n                \
    \    break;\n                }\n            }\n            if (i - index < min)\n\
    \            {\n                min = i - index;\n                result = word[i\
    \ .. i];\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              result = word[i];\n                    }\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i != word.length - 1 && vowels.find(word[i\
    \ + 1]) == -1)\n            {\n                int distance = word.length - i\
    \ - 1;\n                if (distance < min_distance)\n                {\n    \
    \                min_distance = distance;\n                    result = word[i..$];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i - 1;\n            if(distance < min_distance)\n            {\n         \
    \       min_distance = distance;\n                index = i;\n            }\n\
    \        }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n     \
    \   if(!vowels.canFind(word[index - 1]) && !vowels.canFind(word[index + 1]))\n\
    \        {\n            result = word[index..$];\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            int distance = word.length - i;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int closest = 0;\n    int distance = 0;\n    int index = 0;\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n\
    \    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n\
    \    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n\
    \    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n\
    \    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n\
    \    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int min_distance = int.max;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                result = c;\n                min_distance = distance;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = int.max;\n \
    \   foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n   \
    \         int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c.to!string;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c.to!string;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int minDistance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if (distance < minDistance)\n            {\n                minDistance = distance;\n\
    \                result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n \
    \   string closestVowel = \"\";\n    int closestVowelIndex = 0;\n    int closestVowelDistance\
    \ = 0;\n    int wordLength = word.length;\n    for (int i = wordLength - 1; i\
    \ >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n    \
    \        if (i == wordLength - 1)\n            {\n                continue;\n\
    \            }\n            if (vowels.find(word[i + 1]) != -1)\n            {\n\
    \                continue;\n            }\n            if (closestVowelDistance\
    \ == 0)\n            {\n                closestVowel = word[i];\n            \
    \    closestVowelIndex = i;\n                closestVowelDistance = wordLength\
    \ - i;\n            }\n            else\n            {\n                if (wordLength\
    \ - i < closestVowelDistance)\n                {\n                    closestVowel\
    \ = word[i];\n                    closestVowelIndex = i;\n                   \
    \ closestVowelDistance = wordLength - i;\n                }\n            }\n \
    \       }\n    }\n    return closestVowel;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length;\n    int distance =\
    \ word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n      \
    \  if (vowels.find(word[i]) != -1)\n        {\n            if (index - i < distance)\n\
    \            {\n                distance = index - i;\n                result\
    \ = word[i..$];\n            }\n            index = i;\n        }\n    }\n   \
    \ return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result =\
    \ \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = int.max;\n    for (int i\
    \ = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            int distance = word.length - i;\n            if\
    \ (distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int left = i - 1;\n            int right = i + 1;\n  \
    \          while (left >= 0 && vowels.find(word[left]) != -1)\n              \
    \  left--;\n            while (right < word.length && vowels.find(word[right])\
    \ != -1)\n                right++;\n            if (left >= 0 && right < word.length)\n\
    \            {\n                int distance = right - left - 1;\n           \
    \     if (distance < min_distance)\n                {\n                    min_distance\
    \ = distance;\n                    result = word[i..i];\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min = int.max;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int index\
    \ = word.rfind(c);\n            if(index != -1)\n            {\n             \
    \   if(index < min)\n                {\n                    min = index;\n   \
    \                 result = c;\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int index = 0;\n    int min = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            if(i\
    \ > 0 && vowels.find(word[i - 1]) == -1 && i < word.length - 1 && vowels.find(word[i\
    \ + 1]) == -1)\n            {\n                if(abs(i - word.length) < min)\n\
    \                {\n                    min = abs(i - word.length);\n        \
    \            index = i;\n                }\n            }\n        }\n    }\n\
    \    if(index != 0)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n   \
    \ {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = word[i..$];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && vowels.find(word[i - 1]) == -1)\n\
    \            {\n                if (i < min_distance)\n                {\n   \
    \                 min_distance = i;\n                    result = word[i];\n \
    \               }\n            }\n            else if (i < word.length - 1 &&\
    \ vowels.find(word[i + 1]) == -1)\n            {\n                if (word.length\
    \ - i - 1 < min_distance)\n                {\n                    min_distance\
    \ = word.length - i - 1;\n                    result = word[i];\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n    int\
    \ distance = 0;\n    int minDistance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            index = word.length\
    \ - i - 1;\n            distance = index - word.rfind(\"[^aeiou]\", index);\n\
    \            if(distance > 1 && distance < minDistance)\n            {\n     \
    \           minDistance = distance;\n                result = c;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (i < min_distance)\n                    {\n                  \
    \      min_distance = i;\n                        result = word[i];\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (i < min_distance)\n                    {\n                  \
    \      min_distance = i;\n                        result = word[i];\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    if (i < min_distance)\n                    {\n                        min_distance\
    \ = i;\n                        result = word[i];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n      \
    \  {\n            int distance = word.length - i;\n            if(min_distance\
    \ == 0 || distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = 0;\n            for (int j = i; j\
    \ < word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    distance++;\n               \
    \ }\n                else if (vowels.find(word[j]) != -1)\n                {\n\
    \                    break;\n                }\n            }\n            if\
    \ (distance < minDistance)\n            {\n                minDistance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = word[i..$];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(consonants.find(c) != -1)\n        {\n         \
    \   foreach(j, v; vowels)\n            {\n                if(word.find(v, i) !=\
    \ -1)\n                {\n                    int distance = word.find(v, i) -\
    \ i;\n                    if(distance < min_distance)\n                    {\n\
    \                        min_distance = distance;\n                        result\
    \ = v;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(v; vowels)\n    {\n        int pos = word.rfind(v);\n\
    \        if(pos != -1)\n        {\n            int distance = word.length - pos;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = v;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = 0;\n    int closest_vowel_distance =\
    \ 0;\n    int word_length = word.length;\n    int vowel_index = 0;\n    int vowel_distance\
    \ = 0;\n    for (int i = word_length - 1; i >= 0; i--)\n    {\n        vowel_index\
    \ = vowels.find(word[i]);\n        if (vowel_index != -1)\n        {\n       \
    \     vowel_distance = word_length - i;\n            if (vowel_distance > closest_vowel_distance)\n\
    \            {\n                closest_vowel_distance = vowel_distance;\n   \
    \             closest_vowel_index = vowel_index;\n            }\n        }\n \
    \   }\n    if (closest_vowel_distance > 0)\n    {\n        closest_vowel = vowels[closest_vowel_index..closest_vowel_index];\n\
    \    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiou\";\n  \
    \  string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              index = i;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    if (index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            int distance = word.length - i;\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_dist\
    \ = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            int dist = word.length\
    \ - i;\n            if (dist < min_dist)\n            {\n                min_dist\
    \ = dist;\n                result = word[i..$];\n            }\n        }\n  \
    \  }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int temp = 0;\n    for (int i = word.length\
    \ - 1; i > 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (vowels.find(word[i - 1]) == -1)\n            {\n            \
    \    temp = i;\n                break;\n            }\n        }\n    }\n    for\
    \ (int i = temp; i > 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (vowels.find(word[i - 1]) == -1)\n            {\n \
    \               distance = temp - i;\n                if (distance < temp)\n \
    \               {\n                    result = word[i];\n                   \
    \ temp = distance;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int index = word.length - 1;\n    while(index > 0)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(vowels.find(word[index - 1]) == -1)\n    \
    \        {\n                result = word[index];\n                break;\n  \
    \          }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while(index > 0)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(vowels.find(word[index - 1]) == -1)\n    \
    \        {\n                result = word[index];\n                break;\n  \
    \          }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = -1;\n    int min_distance = int.max;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        if(!vowels.canFind(word[index\
    \ - 1]) && !vowels.canFind(word[index + 1]))\n        {\n            result =\
    \ word[index..index];\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int index = word.length;\n\
    \    int min = word.length;\n    while(index--)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(index < min)\n            {\n            \
    \    min = index;\n                result = word[index..$];\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = int.max;\n    int distance\
    \ = 0;\n    int vowel_index = 0;\n    int consonant_index = 0;\n    int word_length\
    \ = word.length;\n    for (int i = 0; i < word_length; i++)\n    {\n        if\
    \ (vowels.indexOf(word[i]) != -1)\n        {\n            vowel_index = i;\n \
    \           for (int j = i + 1; j < word_length; j++)\n            {\n       \
    \         if (vowels.indexOf(word[j]) == -1)\n                {\n            \
    \        consonant_index = j;\n                    distance = consonant_index\
    \ - vowel_index;\n                    if (distance < min_distance)\n         \
    \           {\n                        min_distance = distance;\n            \
    \            result = word[i];\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto vowels = \"aeiou\";\n    auto result = \"\";\n    auto word_len = word.length;\n\
    \    auto word_rev = word.dup.reverse;\n    auto word_rev_len = word_rev.length;\n\
    \    auto vowel_len = vowels.length;\n    auto vowel_idx = 0;\n    auto word_idx\
    \ = 0;\n    auto word_rev_idx = 0;\n    auto vowel_found = false;\n    auto vowel_found_idx\
    \ = 0;\n    auto vowel_found_idx_rev = 0;\n    auto vowel_found_idx_rev_len =\
    \ 0;\n    auto vowel_found_idx_rev_len_min = 0;\n    auto vowel_found_idx_rev_len_min_idx\
    \ = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len\
    \ = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx\
    \ = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev = 0;\n  \
    \  auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev_len = 0;\n    auto\
    \ vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev_len_min = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev_len_min_idx\
    \ = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev_len_min_idx_rev\
    \ = 0;\n    auto vowel_found_idx_rev_len_min_idx_rev_len_min_idx_rev_len", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    int distance = 0;\n    int word_len = word.length;\n    int\
    \ vowel_len = vowels.length;\n    foreach(i, vowel; vowels)\n    {\n        int\
    \ index = word.find(vowel);\n        if(index != -1)\n        {\n            if(index\
    \ == 0 || index == word_len - 1)\n                continue;\n            if(index\
    \ > 0 && index < word_len - 1)\n            {\n                if(vowels.find(word[index\
    \ - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n                {\n    \
    \                distance = abs(word_len - index - 1);\n                    if(distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = vowel;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (word.length\
    \ - i < min)\n            {\n                min = word.length - i;\n        \
    \        index = i;\n            }\n        }\n    }\n    if (index != 0)\n  \
    \  {\n        result = word[index];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (min_distance > i)\n\
    \                    {\n                        min_distance = i;\n          \
    \              result = word[i];\n                    }\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int j = i;\n            while(j > 0 && !vowels.canFind(word[j - 1]))\n\
    \                j--;\n            if(j > 0 && word[j - 1] != c)\n           \
    \ {\n                int k = i;\n                while(k < word.length - 1 &&\
    \ !vowels.canFind(word[k + 1]))\n                    k++;\n                if(k\
    \ < word.length - 1 && word[k + 1] != c)\n                {\n                \
    \    if(distance > k - j)\n                    {\n                        distance\
    \ = k - j;\n                        result = c;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return result;\n}", "{\n \
    \   string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int vowel_index = -1;\n    int consonant_index\
    \ = -1;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            vowel_index = i;\n    \
    \        if(consonant_index != -1)\n            {\n                int distance\
    \ = vowel_index - consonant_index;\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n        else\
    \ if(consonants.canFind(c))\n        {\n            consonant_index = i;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = 0;\n            for (int j = i; j\
    \ < word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    distance++;\n               \
    \ }\n                else\n                {\n                    break;\n   \
    \             }\n            }\n            if (distance < minDistance)\n    \
    \        {\n                minDistance = distance;\n                result =\
    \ word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                result = c;\n              \
    \  min_distance = distance;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    int min_dist = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int dist = pos - i;\n            if (dist < min_dist)\n         \
    \   {\n                min_dist = dist;\n                result = word[i..$];\n\
    \            }\n        }\n        else\n        {\n            pos = i;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min = word.length;\n  \
    \  for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min)\n        \
    \            {\n                        min = i;\n                        index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if (index != 0)\n    {\n        result = word[index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int distance = 0;\n    int minDistance = word.length;\n    for (int i = 0;\
    \ i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n    \
    \    {\n            if (i > 0 && i < word.length - 1)\n            {\n       \
    \         if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n\
    \                {\n                    distance = word.length - i;\n        \
    \            if (distance < minDistance)\n                    {\n            \
    \            minDistance = distance;\n                        result = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min = 100;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            for (int j = i - 1; j >= 0; j--)\n            {\n               \
    \ if (vowels.find(word[j]) == -1)\n                {\n                    if (i\
    \ - j < min)\n                    {\n                        min = i - j;\n  \
    \                      result = word[i];\n                    }\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   result = c;\n                min_distance = distance;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n \
    \   string result = \"\";\n    int index = word.length;\n    int distance = 0;\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            distance = index - i;\n      \
    \      if(distance > 1 && distance < min_distance)\n            {\n          \
    \      min_distance = distance;\n                result = c;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = int.max;\n \
    \   foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n   \
    \         int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    int distance = word.length\
    \ - i;\n                    if (distance < min_distance)\n                   \
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i..$];\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i > 0 && i < word.length - 1)\n            {\n   \
    \             if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) ==\
    \ -1)\n                {\n                    int distance = word.length - i;\n\
    \                    if (distance < min_distance)\n                    {\n   \
    \                     min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n\
    \    int min = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n\
    \        if (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 &&\
    \ i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min > abs(word.length - i))\n                    {\n        \
    \                min = abs(word.length - i);\n                        index =\
    \ i;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    if (index != 0)\n    {\n        result = word[index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != string.npos)\n        {\n \
    \           if (i > 0 && i < word.length - 1)\n            {\n               \
    \ if (vowels.find(word[i-1]) == string.npos && vowels.find(word[i+1]) == string.npos)\n\
    \                {\n                    if (min_distance > abs(word.length - i\
    \ - 1))\n                    {\n                        min_distance = abs(word.length\
    \ - i - 1);\n                        result = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int left_distance = 0;\n            int right_distance\
    \ = 0;\n            for(int j = i - 1; j >= 0; j--)\n            {\n         \
    \       if(vowels.canFind(word[j]))\n                    break;\n            \
    \    left_distance++;\n            }\n            for(int j = i + 1; j < word.length;\
    \ j++)\n            {\n                if(vowels.canFind(word[j]))\n         \
    \           break;\n                right_distance++;\n            }\n       \
    \     if(left_distance > 0 && right_distance > 0 && left_distance + right_distance\
    \ < min_distance)\n            {\n                min_distance = left_distance\
    \ + right_distance;\n                result = c;\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = word.length - 1;\n    while(index > 0)\n   \
    \ {\n        if(vowels.find(word[index]) != -1)\n        {\n            if(vowels.find(word[index\
    \ - 1]) == -1)\n            {\n                result = word[index];\n       \
    \         break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = int.max;\n    int distance = 0;\n    for (int i =\
    \ 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n \
    \       {\n            if (i == 0 || i == word.length - 1)\n                continue;\n\
    \            if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) == -1)\n\
    \            {\n                distance = i;\n                if (distance <\
    \ min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int temp = 0;\n    int\
    \ index = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            for (int j = i - 1; j >=\
    \ 0; j--)\n            {\n                if (vowels.find(word[j]) == -1)\n  \
    \              {\n                    temp = i - j;\n                    if (distance\
    \ == 0)\n                    {\n                        distance = temp;\n   \
    \                     index = i;\n                    }\n                    else\
    \ if (temp < distance)\n                    {\n                        distance\
    \ = temp;\n                        index = i;\n                    }\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ if (index != 0)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = 0;\n    int distance = 0;\n    int index = 0;\n    int vowel_index\
    \ = 0;\n    int vowel_count = 0;\n    int word_length = word.length;\n    int\
    \ vowel_length = vowels.length;\n    int[] vowel_indexes = new int[vowel_length];\n\
    \    int[] vowel_distances = new int[vowel_length];\n    foreach(c; word)\n  \
    \  {\n        if(vowels.find(c) != -1)\n        {\n            vowel_indexes[vowel_count]\
    \ = index;\n            vowel_count++;\n        }\n        index++;\n    }\n \
    \   if(vowel_count == 0)\n    {\n        return result;\n    }\n    else if(vowel_count\
    \ == 1)\n    {\n        return word[vowel_indexes[0]..vowel_indexes[0]];\n   \
    \ }\n    else\n    {\n        for(int i = 0; i < vowel_count; i++)\n        {\n\
    \            vowel_distances[i] = word_length - vowel_indexes[i];\n        }\n\
    \        min_distance = min(vowel_distances);\n        for(int i = 0; i < vowel_count;\
    \ i++)\n        {\n            if(vowel_distances[i] == min_distance)\n      \
    \      {\n                vowel_index = vowel_indexes[i];\n                break;\n\
    \            }\n        }\n        return word[vowel_index..vowel_index];\n  \
    \  }\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int min = int.max;\n    for (int i = word.length - 1; i >=\
    \ 0; i--)\n    {\n        if (vowels.indexOf(word[i]) != -1)\n        {\n    \
    \        if (i < min)\n            {\n                min = i;\n             \
    \   index = i;\n            }\n        }\n    }\n    if (index != -1)\n    {\n\
    \        result = word[index..index];\n    }\n    return result;\n}", "{\n   \
    \ string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int j = i;\n            while(j >= 0 && consonants.canFind(word[j]))\n\
    \            {\n                j--;\n            }\n            if(j < 0)\n \
    \           {\n                j = 0;\n            }\n            distance = i\
    \ - j;\n            if(distance < minDistance)\n            {\n              \
    \  minDistance = distance;\n                result = c;\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n   \
    \ string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    distance = word.length\
    \ - i;\n                    if (distance < min_distance)\n                   \
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n\
    \    string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int closest_vowel_distance\
    \ = 0;\n    int word_length = word.length;\n    int vowel_length = vowels.length;\n\
    \    int vowel_index = 0;\n    int vowel_distance = 0;\n    for (int i = 0; i\
    \ < word_length; i++)\n    {\n        for (int j = 0; j < vowel_length; j++)\n\
    \        {\n            if (word[i] == vowels[j])\n            {\n           \
    \     vowel_index = i;\n                vowel_distance = word_length - vowel_index;\n\
    \                if (vowel_distance > closest_vowel_distance)\n              \
    \  {\n                    closest_vowel_distance = vowel_distance;\n         \
    \           closest_vowel_index = vowel_index;\n                    closest_vowel\
    \ = word[closest_vowel_index..closest_vowel_index];\n                }\n     \
    \       }\n        }\n    }\n    return closest_vowel;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int j = i - 1;\n            while (j >= 0 &&\
    \ vowels.find(word[j]) != -1)\n                j--;\n            if (j >= 0)\n\
    \            {\n                int k = i + 1;\n                while (k < word.length\
    \ && vowels.find(word[k]) != -1)\n                    k++;\n                if\
    \ (k < word.length)\n                {\n                    int distance = k -\
    \ j - 1;\n                    if (distance < min_distance)\n                 \
    \   {\n                        min_distance = distance;\n                    \
    \    result = word[i];\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string closest_vowel = \"\";\n    int closest_distance = word.length;\n\
    \    int distance = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n\
    \        if (vowels.find(word[i]) != -1)\n        {\n            distance = word.length\
    \ - i;\n            if (distance < closest_distance)\n            {\n        \
    \        closest_distance = distance;\n                closest_vowel = word[i..$];\n\
    \            }\n        }\n    }\n    return closest_vowel;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = 0;\n    int closest_vowel_distance = 0;\n    int word_length = word.length;\n\
    \    int vowel_index = 0;\n    int vowel_distance = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    for (i = word_length - 1; i > 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            vowel_index = i;\n            vowel_distance\
    \ = word_length - i;\n            for (j = i - 1; j > 0; j--)\n            {\n\
    \                if (vowels.find(word[j]) == -1)\n                {\n        \
    \            if (closest_vowel_distance == 0 || \n                        vowel_distance\
    \ < closest_vowel_distance)\n                    {\n                        closest_vowel_distance\
    \ = vowel_distance;\n                        closest_vowel_index = vowel_index;\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    if (closest_vowel_index != 0)\n    {\n       \
    \ closest_vowel = word[closest_vowel_index..closest_vowel_index];\n    }\n   \
    \ return closest_vowel;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int j = i;\n            while(j > 0 && vowels.canFind(word[j]))\n \
    \               j--;\n            if(!vowels.canFind(word[j]))\n            {\n\
    \                j = i;\n                while(j < word.length && vowels.canFind(word[j]))\n\
    \                    j++;\n                if(!vowels.canFind(word[j]))\n    \
    \            {\n                    if(abs(i - j) < min)\n                   \
    \ {\n                        min = abs(i - j);\n                        index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if(index != 0)\n        result = word[index..$];\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int index = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n \
    \       if (vowels.find(word[i]) != -1)\n        {\n            index = i;\n \
    \           break;\n        }\n    }\n    for (int i = index - 1; i >= 0; i--)\n\
    \    {\n        if (vowels.find(word[i]) == -1)\n        {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while(index > 0)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(vowels.find(word[index - 1]) == -1)\n    \
    \        {\n                result = word[index];\n                break;\n  \
    \          }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1])\
    \ == -1)\n                {\n                    if (i < min_distance)\n     \
    \               {\n                        min_distance = i;\n               \
    \         result = word[i];\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    static string vowels\
    \ = \"aeiouAEIOU\";\n    static string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (consonants.find(word[index]) != -1)\n        {\n  \
    \          if (vowels.find(word[index - 1]) != -1)\n            {\n          \
    \      result = word[index - 1];\n                break;\n            }\n    \
    \        else\n            {\n                index--;\n            }\n      \
    \  }\n        else\n        {\n            index--;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int index = 0;\n    int min_distance = word.length;\n    for (int i =\
    \ 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n \
    \       {\n            if (i > 0 && i < word.length - 1)\n            {\n    \
    \            if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) == -1)\n\
    \                {\n                    if (min_distance > abs(word.length - i))\n\
    \                    {\n                        min_distance = abs(word.length\
    \ - i);\n                        index = i;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    if (index != 0)\n    {\n     \
    \   result = word[index];\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, char c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            foreach(j, char d; word[i..$])\n            {\n\
    \                if(consonants.find(d) != -1)\n                {\n           \
    \         distance = j;\n                    break;\n                }\n     \
    \       }\n            if(distance < min_distance)\n            {\n          \
    \      min_distance = distance;\n                index = i;\n            }\n \
    \       }\n    }\n    if(min_distance != word.length)\n    {\n        result =\
    \ word[index..index];\n    }\n    return result;\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    for (int i = word.length - 1;\
    \ i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n  \
    \          index = i;\n            distance = word.length - i;\n            if\
    \ (distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int pos = 0;\n    int min = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min > abs(word.length - i))\n                    {\n        \
    \                min = abs(word.length - i);\n                        pos = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (pos != 0)\n    {\n        result = word[pos];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ >= 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n     \
    \       if (index != 0 && index != word.length - 1)\n            {\n         \
    \       if (consonants.find(word[index - 1]) != -1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    result = word[index];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     index--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n\
    \    int min_distance = word.length;\n    for (int i = word.length - 1; i >= 0;\
    \ i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  distance = word.length - i;\n            if (distance < min_distance)\n   \
    \         {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = 100;\n    int distance = 0;\n    int vowel_index = 0;\n    int consonant_index\
    \ = 0;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            vowel_index = i;\n            for (int j = i\
    \ + 1; j < word.length; j++)\n            {\n                if (vowels.find(word[j])\
    \ == -1)\n                {\n                    consonant_index = j;\n      \
    \              distance = consonant_index - vowel_index;\n                   \
    \ if (distance < min_distance)\n                    {\n                      \
    \  min_distance = distance;\n                        result = word[i];\n     \
    \               }\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = 0;\n\
    \    int index = 0;\n    int min_index = 0;\n    int word_length = word.length;\n\
    \    int vowel_length = vowels.length;\n    for (int i = 0; i < word_length; i++)\n\
    \    {\n        for (int j = 0; j < vowel_length; j++)\n        {\n          \
    \  if (word[i] == vowels[j])\n            {\n                index = i;\n    \
    \            distance = abs(word_length - index);\n                if (distance\
    \ < min_distance || min_distance == 0)\n                {\n                  \
    \  min_distance = distance;\n                    min_index = index;\n        \
    \        }\n            }\n        }\n    }\n    if (min_index == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        result = word[min_index];\n\
    \        return result;\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i > 0 && i < word.length - 1)\n            {\n   \
    \             if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) ==\
    \ -1)\n                {\n                    if (min_distance > abs(word.length\
    \ - 1 - i))\n                    {\n                        min_distance = abs(word.length\
    \ - 1 - i);\n                        result = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    foreach(i,v;word)\n    {\n        if(vowels.find(v) != -1)\n        {\n \
    \           int j = i;\n            while(j >= 0 && consonants.find(word[j]) !=\
    \ -1)\n            {\n                j--;\n            }\n            if(j >=\
    \ 0 && consonants.find(word[j]) == -1)\n            {\n                j++;\n\
    \            }\n            if(j >= 0 && consonants.find(word[j]) != -1)\n   \
    \         {\n                j++;\n            }\n            if(j < word.length\
    \ && consonants.find(word[j]) != -1)\n            {\n                if(abs(i\
    \ - j) < min)\n                {\n                    min = abs(i - j);\n    \
    \                index = i;\n                }\n            }\n        }\n   \
    \ }\n    if(index != 0)\n    {\n        result = word[index..index];\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(v; vowels)\n    {\n\
    \        int index = word.rfind(v);\n        if(index != -1)\n        {\n    \
    \        int distance = word.length - index;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = v;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n    int\
    \ min = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            index = i;\n          \
    \  break;\n        }\n    }\n    if (index == 0)\n        return \"\";\n    for\
    \ (int i = index; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) == -1)\n\
    \        {\n            min = index - i;\n            break;\n        }\n    }\n\
    \    for (int i = index - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (index - i < min)\n            {\n       \
    \         min = index - i;\n                result = word[i];\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n\
    \    string result = \"\";\n    int min_distance = int.max;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiou\";\n    string result = \"\";\n    int min_distance = int.max;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            int distance = 0;\n            for (int j = i +\
    \ 1; j < word.length; j++)\n            {\n                if (vowels.find(word[j])\
    \ == -1)\n                {\n                    distance++;\n               \
    \ }\n                else\n                {\n                    break;\n   \
    \             }\n            }\n            if (distance < min_distance)\n   \
    \         {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    int vowel_index = 0;\n    int consonant_index = 0;\n    for (int i = 0; i\
    \ < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n      \
    \  {\n            vowel_index = i;\n            for (int j = vowel_index; j <\
    \ word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    consonant_index = j;\n      \
    \              distance = consonant_index - vowel_index;\n                   \
    \ if (distance < min_distance)\n                    {\n                      \
    \  min_distance = distance;\n                        result = word[vowel_index];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int index = word.length;\n    while(index > 0)\n    {\n       \
    \ if(vowels.find(word[index]) != -1)\n        {\n            result = word[index];\n\
    \            break;\n        }\n        index--;\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    foreach(i, c; word)\n    {\n        if(c in vowels)\n      \
    \  {\n            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              result = word[i];\n                    }\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              result = word[i];\n                    }\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    while(index > 0)\n    {\n        if(vowels.find(word[index]) != -1)\n\
    \        {\n            if(vowels.find(word[index - 1]) == -1)\n            {\n\
    \                result = word[index];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length;\n\
    \    int vowel_index = 0;\n    int min_distance = 0;\n    int distance = 0;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.find(c) != -1)\n     \
    \   {\n            vowel_index = i;\n            distance = index - vowel_index;\n\
    \            if(distance > 1)\n            {\n                if(min_distance\
    \ == 0)\n                {\n                    min_distance = distance;\n   \
    \                 result = c;\n                }\n                else if(distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = c;\n                }\n            }\n        }\n\
    \        index--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            int distance = word.length - i;\n            if\
    \ (distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            int distance = word.length - i;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = word.length -\
    \ 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (i < min_distance)\n\
    \                    {\n                        min_distance = i;\n          \
    \              result = word[i];\n                    }\n                }\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    while(index > 0)\n    {\n        if(vowels.find(word[index]) != -1)\n\
    \        {\n            if(vowels.find(word[index-1]) == -1)\n            {\n\
    \                result = word[index];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int distance = 0;\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    distance = word.length\
    \ - i;\n                    if (distance < min_distance)\n                   \
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    foreach(vowel;\
    \ vowels)\n    {\n        int index = word.rfind(vowel);\n        if(index !=\
    \ -1)\n        {\n            int distance = word.length - index;\n          \
    \  if(distance > 1 && distance < min_distance)\n            {\n              \
    \  min_distance = distance;\n                result = vowel;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n\
    \    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i > 0 && i < word.length - 1)\n            {\n   \
    \             if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) ==\
    \ -1)\n                {\n                    if (i < min_distance)\n        \
    \            {\n                        min_distance = i;\n                  \
    \      result = word[i];\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min = int.max;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int left = i;\n\
    \            int right = word.length - i - 1;\n            if(left > 0 && right\
    \ > 0)\n            {\n                if(vowels.canFind(word[left - 1]) || vowels.canFind(word[right\
    \ + 1]))\n                    continue;\n                if(min > abs(left - right))\n\
    \                {\n                    min = abs(left - right);\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"AEIOUaeiou\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if (min_distance\
    \ != word.length)\n    {\n        result = word[index..index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int index = 0;\n    int min = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            index = i;\n            if (index - 1 >= 0 && vowels.find(word[index\
    \ - 1]) == -1)\n            {\n                if (word.length - index < min)\n\
    \                {\n                    min = word.length - index;\n         \
    \           result = word[index];\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, vowel; vowels)\n\
    \    {\n        int index = word.findLastOf(vowel);\n        if(index != -1)\n\
    \        {\n            int distance = word.length - index;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = vowel;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    int distance = 0;\n    int index = 0;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index == 0 || index == word.length\
    \ - 1)\n        return \"\";\n    if(!vowels.canFind(word[index - 1]) && !vowels.canFind(word[index\
    \ + 1]))\n        return result;\n    return \"\";\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = -1;\n    int distance\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n      \
    \  {\n            int temp = word.length - i;\n            if(temp > distance)\n\
    \            {\n                distance = temp;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index != -1)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i > 0 && i < word.length - 1)\n            {\n   \
    \             if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) == -1)\n\
    \                {\n                    if (i < min_distance)\n              \
    \      {\n                        min_distance = i;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int closest = 999;\n    int index = 0;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < closest)\n            {\n    \
    \            closest = distance;\n                result = c;\n              \
    \  index = i;\n            }\n        }\n    }\n    if(index == 0 || index ==\
    \ word.length - 1)\n        return \"\";\n    if(!vowels.canFind(word[index -\
    \ 1]) && !vowels.canFind(word[index + 1]))\n        return result;\n    return\
    \ \"\";\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n \
    \   int min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = int.max;\n    int distance = 0;\n    int word_length = word.length;\n\
    \    for (int i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i == 0)\n            {\n                if\
    \ (vowels.find(word[i+1]) == -1)\n                {\n                    distance\
    \ = 1;\n                }\n            }\n            else if (i == word_length\
    \ - 1)\n            {\n                if (vowels.find(word[i-1]) == -1)\n   \
    \             {\n                    distance = 1;\n                }\n      \
    \      }\n            else\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    distance = 1;\n                }\n            }\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word.length - i;\n            if (distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = word[i..$];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    int distance = 0;\n    int min_distance\
    \ = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    for (int i = word.length - 1; i\
    \ >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n    \
    \        if (i == word.length - 1)\n                continue;\n            if\
    \ (vowels.find(word[i + 1]) != -1)\n                continue;\n            int\
    \ distance = word.length - i - 1;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = int.max;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if (distance < min_distance)\n            {\n                min_distance =\
    \ distance;\n                result = word[i];\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (i < min_distance)\n                    {\n                  \
    \      min_distance = i;\n                        result = word[i];\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            int distance = word.length - i;\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_dist = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                result = c;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if(index > 0\
    \ && index < word.length - 1)\n    {\n        if(!vowels.canFind(word[index -\
    \ 1]) && !vowels.canFind(word[index + 1]))\n        {\n            result = word[index..$];\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    for (int i\
    \ = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i < distance)\n            {\n             \
    \   distance = i;\n                result = word[i..$];\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int index = word.length - 1;\n    while(index\
    \ > 0)\n    {\n        if(vowels.find(word[index]) != -1)\n        {\n       \
    \     if(vowels.find(word[index - 1]) == -1)\n            {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i > 0 && i < word.length - 1)\n            {\n              \
    \  if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n   \
    \             {\n                    if (i < min_distance)\n                 \
    \   {\n                        min_distance = i;\n                        result\
    \ = word[i];\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n   \
    \ string result = \"\";\n    int index = 0;\n    int min = 0;\n    int min_index\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n\
    \        {\n            if(vowels.find(word[i+1]) != -1)\n            {\n    \
    \            index = i+1;\n                min = abs(index - i);\n           \
    \     min_index = index;\n                break;\n            }\n        }\n \
    \   }\n    foreach(i, c; word[index..$])\n    {\n        if(consonants.find(c)\
    \ != -1)\n        {\n            if(vowels.find(word[i+1]) != -1)\n          \
    \  {\n                if(abs(i+1 - index) < min)\n                {\n        \
    \            min = abs(i+1 - index);\n                    min_index = i+1;\n \
    \               }\n            }\n        }\n    }\n    if(min_index != 0)\n \
    \   {\n        result = word[min_index..min_index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while(index\
    \ > 0)\n    {\n        if(vowels.find(word[index]) != -1)\n        {\n       \
    \     if(vowels.find(word[index - 1]) == -1)\n            {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int minDistance = word.length;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i > 0 && i < word.length - 1)\n            {\n              \
    \  if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n   \
    \             {\n                    int distance = word.length - i;\n       \
    \             if (distance < minDistance)\n                    {\n           \
    \             minDistance = distance;\n                        result = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            int distance = word.length - i;\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n            {\n                if(distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    if(index != 0)\n    {\n        result = word[index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int index = word.length;\n    int min_distance = word.length;\n    foreach(vowel;\
    \ vowels)\n    {\n        int distance = word.findLastOf(vowel);\n        if(distance\
    \ != -1 && distance < index)\n        {\n            index = distance;\n     \
    \       result = vowel;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n  \
    \  int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(i - word.length))\n                    {\n\
    \                        min_distance = abs(i - word.length);\n              \
    \          index = i;\n                    }\n                }\n            }\n\
    \        }\n    }\n    if (index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
