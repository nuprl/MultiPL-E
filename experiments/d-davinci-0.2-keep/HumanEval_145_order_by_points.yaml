name: HumanEval_145_order_by_points
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
  \ sorts the given list of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
  \    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>>\
  \ order_by_points([]) == []\n    \n*/\nlong[] order_by_points(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        sums[i] = nums[i].abs.to!string.sum!(a =>\
    \ a.to!int - '0');\n    }\n    return nums.zip(sums).sort!((a, b) => a[1] < b[1]\
    \ || (a[1] == b[1] && a[0] < b[0])).map!(a => a[0]).array;\n}", "{\n    auto result\
    \ = nums.dup;\n    auto sums = new long[result.length];\n    foreach(i, n; result)\n\
    \    {\n        sums[i] = n.abs.sum;\n    }\n    sort(result, sums);\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    int[] sum =\
    \ new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      sum[i] = 0;\n        while (nums[i] != 0)\n        {\n            sum[i]\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n    int[] index\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n       \
    \ index[i] = i;\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n\
    \        result[i] = nums[index[i]];\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    long[] sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] == sortedSums[i])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}",
  "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    }", "{\n    if (nums.length == 0)\n        return nums;\n    long[] result = new\
    \ long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        if\
    \ (temp < 0)\n            temp *= -1;\n        while (temp > 0)\n        {\n \
    \           sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long min = sum[i];\n\
    \        int index = i;\n        for (int j = i; j < nums.length; j++)\n     \
    \   {\n            if (sum[j] < min)\n            {\n                min = sum[j];\n\
    \                index = j;\n            }\n        }\n        result[i] = nums[index];\n\
    \        sum[index] = sum[i];\n        sum[i] = min;\n    }\n    return result;\n\
    }", "{\n    auto nums_with_points = zip(nums, map!((n) => n.abs.sumOfDigits)(nums));\n\
    \    return sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(nums_with_points).map!(a\
    \ => a[0]).array;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].to!string.sum!(a\
    \ => a.to!int);\n    }\n    auto sorted = sort!((a, b) => a < b)(sums);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[sums.indexOf(sorted[i])];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while\
    \ (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10 + sums[i] % 10;\n\
    \        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        int\
    \ min = i;\n        for (int j = i + 1; j < nums.length; j++)\n        {\n   \
    \         if (sums[j] < sums[min])\n            {\n                min = j;\n\
    \            }\n        }\n        result[i] = nums[min];\n        sums[min] =\
    \ sums[i];\n        nums[min] = nums[i];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}", "{\n    auto nums_with_index = zip(nums, iota(nums.length));\n\
    \    auto nums_with_index_and_sum = nums_with_index.map!(a => tuple(a[0], a[1],\
    \ a[0].sumDigits()));\n    auto sorted_nums_with_index_and_sum = nums_with_index_and_sum.sort!((a,\
    \ b) => a[2] < b[2] || (a[2] == b[2] && a[1] < b[1]));\n    return sorted_nums_with_index_and_sum.map!(a\
    \ => a[0]).array;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) =>\n    {\n        long a_sum = 0;\n        long b_sum = 0;\n        foreach(c;\
    \ a.to!string)\n        {\n            a_sum += c.to!long - '0'.to!long;\n   \
    \     }\n        foreach(c; b.to!string)\n        {\n            b_sum += c.to!long\
    \ - '0'.to!long;\n        }\n        return a_sum == b_sum ? a.compare(b) : a_sum.compare(b_sum);\n\
    \    });\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n  \
    \          sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n \
    \   int[] index = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    long[] sorted\
    \ = sums.dup;\n    sorted.sort;\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        int index = sorted.indexOf(sums[i]);\n        result[index] = nums[i];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        indexes[i] = i;\n    }\n    for (int i = 0;\
    \ i < sums.length; i++)\n    {\n        sums[i] = sums[i] % 10 + sums[i] / 10;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[(int)indexes[i]];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0;\
    \ i < sorted.length; i++)\n    {\n        for (int j = 0; j < sums.length; j++)\n\
    \        {\n            if (sorted[i] == sums[j])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nlong sumDigits(long num)\n\
    {\n    long sum = 0;\n    while (num != 0)\n    {\n        sum += num % 10;\n\
    \        num /= 10;\n    }\n    return sum;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum[i] = sum_of_digits(nums[i]);\n    }\n    int[] index\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        index[i] = i;\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[]\
    \ sums = new long[nums.length];\n    foreach (i, val; nums)\n    {\n        sums[i]\
    \ = val.abs;\n        while (sums[i] > 0)\n        {\n            sums[i] -= sums[i]\
    \ % 10;\n            sums[i] /= 10;\n        }\n    }\n    return nums.sort(sums);\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    long[] temp = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        temp[i] = nums[i];\n\
    \    }\n    sort(sum);\n    for (int i = 0; i < nums.length; i++)\n    {\n   \
    \     for (int j = 0; j < nums.length; j++)\n        {\n            if (sum[i]\
    \ == sum[j] && temp[j] != 0)\n            {\n                result[i] = temp[j];\n\
    \                temp[j] = 0;\n                break;\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, num; nums)\n    {\n\
    \        long sum = 0;\n        foreach(c; num.to!string)\n        {\n       \
    \     sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n   \
    \ }\n    auto sorted = sort(sums);\n    foreach(i, sum; sorted)\n    {\n     \
    \   foreach(j, num; nums)\n        {\n            if(sum == sums[j])\n       \
    \     {\n                result[i] = num;\n                sums[j] = -1;\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return\
    \ nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    auto tuple = tuple(nums, sums);\n    tuple.sort!((a, b) => a[1] <\
    \ b[1]);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = tuple[i][0];\n    }\n    return result;\n}\nlong sumDigits(long num)\n{\n\
    \    long sum = 0;\n    while (num != 0)\n    {\n        sum += num % 10;\n  \
    \      num /= 10;\n    }\n    return sum;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    long[] sums = new long[nums.length];\n    foreach (i,\
    \ v; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(v))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    auto result = sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(zip(iota(nums.length),\
    \ sums));\n    return result.map!(a => nums[a[0]]).array;\n}", "{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n", "{\n    auto nums_with_points = new tuple[nums.length];\n    foreach\
    \ (i, n; nums)\n    {\n        nums_with_points[i] = tuple(n, n.abs.sumDigits);\n\
    \    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0]\
    \ < b[0]));\n    return nums_with_points.map!(a => a[0]).array;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        long sum_of_digits = 0;\n        while (num != 0)\n        {\n      \
    \      sum_of_digits += num % 10;\n            num /= 10;\n        }\n       \
    \ sum[i] = sum_of_digits;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        long temp = sum[i];\n        sum[i] = sum[min_index];\n\
    \        sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            if (sums[i] > 0)\n                sums[i] = sums[i] + (sums[i] %\
    \ 10);\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n \
    \       long min = sums[i];\n        int index = i;\n        for (int j = i; j\
    \ < nums.length; j++)\n        {\n            if (sums[j] < min)\n           \
    \ {\n                min = sums[j];\n                index = j;\n            }\n\
    \        }\n        result[i] = nums[index];\n        sums[index] = long.max;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    long[] index = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \     sum[i] = 0;\n        long n = nums[i];\n        while (n != 0)\n       \
    \ {\n            sum[i] += n % 10;\n            n /= 10;\n        }\n    }\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n       \
    \     {\n                long temp = sum[i];\n                sum[i] = sum[j];\n\
    \                sum[j] = temp;\n                temp = nums[i];\n           \
    \     nums[i] = nums[j];\n                nums[j] = temp;\n                temp\
    \ = index[i];\n                index[i] = index[j];\n                index[j]\
    \ = temp;\n            }\n            else if (sum[i] == sum[j])\n           \
    \ {\n                if (index[i] > index[j])\n                {\n           \
    \         long temp = sum[i];\n                    sum[i] = sum[j];\n        \
    \            sum[j] = temp;\n                    temp = nums[i];\n           \
    \         nums[i] = nums[j];\n                    nums[j] = temp;\n          \
    \          temp = index[i];\n                    index[i] = index[j];\n      \
    \              index[j] = temp;\n                }\n            }\n        }\n\
    \    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] =\
    \ nums[i];\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n \
    \   auto sums = nums.map!(a => a.abs.sumOfDigits).dup;\n    auto indices = nums.map!(a\
    \ => a.indexOf).dup;\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b]\
    \ && a < b))(indices);\n    foreach (i, index; indices)\n        result[i] = nums[index];\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long sum = 0;\n        long n = nums[i];\n        while (n != 0)\n\
    \        {\n            sum += n % 10;\n            n /= 10;\n        }\n    \
    \    sums[i] = sum;\n    }\n    int[] indexes = sort(sums);\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n   \
    \ }\n    return result;\n}", "{\n    return nums.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        sums[i]\
    \ = n.abs.sumDigits;\n    }\n    auto t = tuple(nums, sums);\n    t.sort!((a,\
    \ b) => a[1] < b[1]);\n    foreach(i, n; t)\n    {\n        result[i] = n[0];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    auto pairs = zip(nums, sums);\n\
    \    pairs.sort!((a, b) => a[1] < b[1]);\n    foreach (i, pair; pairs)\n    {\n\
    \        result[i] = pair[0];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n     \
    \   while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n   \
    \         sums[i] += nums[i] % 10;\n        }\n    }\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        long min = sums[i];\n        int index = i;\n\
    \        for (int j = i; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ < min)\n            {\n                min = sums[j];\n                index\
    \ = j;\n            }\n        }\n        sums[index] = sums[i];\n        sums[i]\
    \ = min;\n        result[i] = nums[index];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sortedSums = sums.dup;\n    sort(sortedSums);\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sortedSums[i] == sums[j])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[j] < sum[min])\n            {\n              \
    \  min = j;\n            }\n        }\n        long temp = sum[i];\n        sum[i]\
    \ = sum[min];\n        sum[min] = temp;\n        temp = nums[i];\n        nums[i]\
    \ = nums[min];\n        nums[min] = temp;\n    }\n    return nums;\n}", "{\n \
    \   long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] != 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n        }\n    }\n    long[] sorted = sums.dup;\n\
    \    sorted.sort;\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    int[] sorted_sums = sums.dup;\n    sort(sorted_sums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sorted_sums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    if (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, num; nums)\n    {\n        long sum = 0;\n        foreach (c;\
    \ to!string(num))\n            sum += c.to!long - '0'.to!long;\n        sums[i]\
    \ = sum;\n    }\n    auto zipped = zip(sums, nums);\n    zipped.sort!((a, b) =>\
    \ a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n    return zipped.map!(a =>\
    \ a[1]).array;\n}", "{\n    long[] result;\n    long[] sums;\n    long[] indices;\n\
    \    long[] sorted_indices;\n    long[] sorted_sums;\n    long[] sorted_nums;\n\
    \    long i;\n    long j;\n    long temp;\n    long temp_sum;\n    long temp_index;\n\
    \    long sum;\n    long index;\n    long[] digits;\n    long[] sorted_digits;\n\
    \    long[] sorted_digits_indices;\n    long[] sorted_digits_sums;\n    long[]\
    \ sorted_digits_nums;\n    long[] sorted_digits_indices_sums;\n    long[] sorted_digits_indices_nums;\n\
    \    long[] sorted_digits_sums_nums;\n    long[] sorted_digits_indices_sums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices;\n    long[] sorted_digits_indices_sums_nums_sums;\n\
    \    long[] sorted_digits_indices_sums_nums_nums;\n    long[] sorted_digits_indices_sums_nums_indices_sums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_nums;\n    long[] sorted_digits_indices_sums_nums_sums_nums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums;\n    long[] sorted_digits_indices_sums_nums_indices_sums_nums_indices;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums_sums;\n    long[]\
    \ sorted_digits_indices_sums_nums_indices_sums_nums_nums;\n    long[] sorted_digits_indices_sums_nums_indices_sums_nums_indices_sums;\n\
    \    long[] sorted_digits_indices_sums_nums_indices_sums_nums_", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n    }\n    sort(sums, indices);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    if (nums.length == 0)\n        return\
    \ nums;\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        int sum = 0;\n        while (nums[i] != 0)\n        {\n\
    \            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n   \
    \     sums[i] = sum;\n    }\n    long[] result = new long[nums.length];\n    int[]\
    \ indices = new int[nums.length];\n    for (int i = 0; i < indices.length; i++)\n\
    \        indices[i] = i;\n    indices.sort!((a, b) => sums[a] < sums[b]);\n  \
    \  for (int i = 0; i < indices.length; i++)\n        result[i] = nums[indices[i]];\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto nums_with_points = new long[][2](nums.length);\n    foreach (i, n; nums)\n\
    \    {\n        nums_with_points[i][0] = n;\n        nums_with_points[i][1] =\
    \ n.abs.sumDigits;\n    }\n    nums_with_points.sort!((a, b) => a[1] < b[1] ||\
    \ (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a => a[0]).array;\n\
    }", "{\n    auto list = new long[nums.length];\n    auto sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        list[i] = nums[i];\n\
    \        sum[i] = 0;\n        int temp = nums[i];\n        while (temp != 0)\n\
    \        {\n            sum[i] += temp % 10;\n            temp /= 10;\n      \
    \  }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int\
    \ j = 0; j < nums.length - 1; j++)\n        {\n            if (sum[j] > sum[j\
    \ + 1])\n            {\n                long temp = sum[j];\n                sum[j]\
    \ = sum[j + 1];\n                sum[j + 1] = temp;\n                temp = list[j];\n\
    \                list[j] = list[j + 1];\n                list[j + 1] = temp;\n\
    \            }\n        }\n    }\n    return list;\n}", "{\n    auto sum = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    return nums.enumerate.sort!((a,\
    \ b) => sum(a[1]) < sum(b[1]) || (sum(a[1]) == sum(b[1]) && a[0] < b[0])).map!(a\
    \ => a[1]).array;\n}", "{\n    if (nums.length == 0)\n        return nums;\n \
    \   long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        sums[i] = sum(n.digits);\n    }\n  \
    \  auto t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n    foreach\
    \ (i, tup; t)\n    {\n        result[i] = tup[0];\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    if (nums.length\
    \ == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        foreach\
    \ (c; nums[i].to!string)\n        {\n            if (c.isDigit)\n            \
    \    sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n    }\n\
    \    long[] sorted = nums.dup;\n    sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b))(sorted);\n    return sorted;\n}", "{\n    long[] res =\
    \ nums.dup;\n    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ res;\n}", "{\n    long[] result = new long[nums.length];\n    auto sum = new\
    \ int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n      \
    \  int num = nums[i];\n        if (num < 0)\n            num = -num;\n       \
    \ while (num > 0)\n        {\n            sum[i] += num % 10;\n            num\
    \ /= 10;\n        }\n    }\n    auto index = sort(sum);\n    for (int i = 0; i\
    \ < nums.length; i++)\n        result[i] = nums[index[i]];\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].to!string.sum!(a\
    \ => a.to!int);\n    }\n    auto sorted = sums.dup.sort;\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[sums.indexOf(sorted[i])];\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    long[] temp;\n   \
    \ long[] temp2;\n    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n   \
    \ long[] temp6;\n    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n   \
    \ long[] temp10;\n    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n\
    \    long[] temp14;\n    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n\
    \    long[] temp18;\n    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n\
    \    long[] temp22;\n    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n\
    \    long[] temp26;\n    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n\
    \    long[] temp30;\n    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n\
    \    long[] temp34;\n    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n\
    \    long[] temp38;\n    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n\
    \    long[] temp42;\n    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n\
    \    long[] temp46;\n    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n\
    \    long[] temp50;\n    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n\
    \    long[] temp54;\n    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n\
    \    long[] temp58;\n    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n\
    \    long[] temp62;\n    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n\
    \    long[] temp66;\n    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n\
    \    long[] temp70;\n    long[] temp71;\n    long[] temp72;\n", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    for (int i = 0; i < nums.length; i++) {\n        int min = minIndex(sums);\n\
    \        result[i] = nums[min];\n        sums[min] = long.max;\n    }\n    return\
    \ result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    auto arr\
    \ = new tuple!(long, long)[nums.length];\n    foreach (i, n; nums)\n    {\n  \
    \      long sum = 0;\n        foreach (c; n.to!string)\n            sum += c.to!long\
    \ - '0'.to!long;\n        arr[i] = tuple(sum, n);\n    }\n    arr.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n    foreach (i, a; arr)\n\
    \        nums[i] = a[1];\n    return nums;\n}", "{\n    auto result = nums.dup;\n\
    \    auto sums = nums.map!(a => a.abs.to!string.sum!(a => a.to!long - '0'.to!long));\n\
    \    result.sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        sums[i] = sum;\n    }\n    long[] sorted = sums.dup;\n    sorted.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n      \
    \      {\n                result[i] = nums[j];\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while (n != 0)\n    {\n \
    \       sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "{\n   \
    \ long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted_sums = sums.dup;\n    sorted_sums.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long sum = sorted_sums[i];\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j]\
    \ == sum)\n            {\n                result[i] = nums[j];\n             \
    \   sums[j] = -1;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sums = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n  \
    \  {\n        sums[i] = 0;\n        long n = nums[i];\n        while (n != 0)\n\
    \        {\n            sums[i] += n % 10;\n            n /= 10;\n        }\n\
    \    }\n    int[] indices = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n        indices[i] = i;\n    sort(indices, (a, b) => sums[a] == sums[b]\
    \ ? a - b : sums[a] - sums[b]);\n    for (int i = 0; i < nums.length; i++)\n \
    \       result[i] = nums[indices[i]];\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i];\n        while (sums[i] != 0)\n    \
    \    {\n            sums[i] = sums[i] / 10;\n            sums[i] += nums[i] %\
    \ 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      long min = sums[i];\n        int min_index = i;\n        for (int j = i;\
    \ j < nums.length; j++)\n        {\n            if (sums[j] < min)\n         \
    \   {\n                min = sums[j];\n                min_index = j;\n      \
    \      }\n        }\n        sums[min_index] = sums[i];\n        sums[i] = min;\n\
    \        result[i] = nums[min_index];\n    }\n    return result;\n}", "{\n   \
    \ return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sum = new int[nums.length];\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        while (num != 0)\n        {\n            sum[i] += num % 10;\n      \
    \      num /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n   \
    \ }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        long sum = 0;\n        long num = nums[i];\n        while (num\
    \ != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        sums[i] = sum;\n    }\n    auto tuple = tuple(nums, sums);\n\
    \    tuple.sort!((a, b) => a[1] < b[1]);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = tuple[i][0];\n    }\n    return result;\n}",
  "{\n    int[] sums = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while\
    \ (sums[i] > 0)\n        {\n            sums[i] = sums[i] % 10 + sums[i] / 10;\n\
    \        }\n    }\n    return sort!((a, b) => sums[a] < sums[b] || (sums[a] ==\
    \ sums[b] && a < b))(iota(nums.length)).map!(a => nums[a]).array;\n}", "{\n  \
    \  long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n\
    \        if (temp < 0)\n            temp = -temp;\n        while (temp > 0)\n\
    \        {\n            sum[i] += temp % 10;\n            temp /= 10;\n      \
    \  }\n    }\n    int[] index = new int[nums.length];\n    for (int i = 0; i <\
    \ nums.length; i++)\n        index[i] = i;\n    sort!((a, b) => sum[a] < sum[b]\
    \ || (sum[a] == sum[b] && a < b))(index);\n    for (int i = 0; i < nums.length;\
    \ i++)\n        result[i] = nums[index[i]];\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    int[] sorted_sums = sums.dup;\n    sort(sorted_sums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sorted_sums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[j] == sorted[i])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num != 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indexes[i] = i;\n    }\n    indexes.sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}", "{\n    if (nums.length == 0)\n  \
    \      return nums;\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while (sums[i] >\
    \ 0)\n        {\n            sums[i] = sums[i] - sums[i] % 10;\n            sums[i]\
    \ /= 10;\n        }\n    }\n    int[] indexes = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n        indexes[i] = i;\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length - 1;\
    \ j++)\n        {\n            if (sums[j] > sums[j + 1])\n            {\n   \
    \             long temp = sums[j];\n                sums[j] = sums[j + 1];\n \
    \               sums[j + 1] = temp;\n                int temp2 = indexes[j];\n\
    \                indexes[j] = indexes[j + 1];\n                indexes[j + 1]\
    \ = temp2;\n            }\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n        result[i] = nums[indexes[i]];\n    return result;\n}", "{\n  \
    \  if (nums.length == 0)\n        return nums;\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n    \
    \    long n = nums[i];\n        if (n < 0)\n            n = -n;\n        while\
    \ (n > 0)\n        {\n            sums[i] += n % 10;\n            n /= 10;\n \
    \       }\n    }\n    return nums.dup.sort!((a, b) => sums[a] < sums[b] || (sums[a]\
    \ == sums[b] && a < b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indexes = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n \
    \       sums[i] = 0;\n        long num = nums[i];\n        while (num != 0)\n\
    \        {\n            sums[i] += num % 10;\n            num /= 10;\n       \
    \ }\n    }\n    mergeSort(sums, indexes, 0, nums.length - 1);\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] indexes\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[indexes[i]];\n    }\n    return result;\n}\nlong sumDigits(long n)\n\
    {\n    long sum = 0;\n    while (n != 0)\n    {\n        sum += n % 10;\n    \
    \    n /= 10;\n    }\n    return sum;\n}", "{\n    return nums.sort!((a, b) =>\
    \ \n    {\n        long aSum = 0;\n        long bSum = 0;\n        foreach(n;\
    \ a.digits)\n            aSum += n;\n        foreach(n; b.digits)\n          \
    \  bSum += n;\n        return aSum == bSum ? a.indexOf(nums) - b.indexOf(nums)\
    \ : aSum - bSum;\n    });\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    long[] sorted = sums.dup;\n   \
    \ sort(sorted);\n    for (int i = 0; i < sorted.length; i++)\n    {\n        for\
    \ (int j = 0; j < sums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) =>\n    {\n        long sumA = 0;\n     \
    \   long sumB = 0;\n        foreach(c; a.to!string())\n        {\n           \
    \ sumA += c.to!long() - '0'.to!long();\n        }\n        foreach(c; b.to!string())\n\
    \        {\n            sumB += c.to!long() - '0'.to!long();\n        }\n    \
    \    return sumA < sumB;\n    });\n}", "{\n    auto nums_with_points = zip(nums,\
    \ map!(a => a.sum, map!(a => a.digits, nums)));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0],\
    \ nums_with_points);\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sum = new long[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        long temp = sum[i];\n        sum[i] = sum[min_index];\n\
    \        sum[min_index] = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n\
    \        nums[min_index] = temp;\n    }\n    return nums;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n\
    \        int minIndex = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sums[j] < min)\n            {\n                min\
    \ = sums[j];\n                minIndex = j;\n            }\n        }\n      \
    \  sums[minIndex] = sums[i];\n        sums[i] = min;\n        result[i] = nums[minIndex];\n\
    \    }\n    return result;\n}", "{\n    if (nums.length == 0)\n        return\
    \ nums;\n    long[] sums = new long[nums.length];\n    foreach (i, v; nums)\n\
    \    {\n        if (v < 0)\n            v = -v;\n        long sum = 0;\n     \
    \   while (v > 0)\n        {\n            sum += v % 10;\n            v /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    long[] result = new long[nums.length];\n\
    \    foreach (i, v; nums)\n    {\n        long min = sums[0];\n        long index\
    \ = 0;\n        foreach (j, v2; sums)\n        {\n            if (v2 < min)\n\
    \            {\n                min = v2;\n                index = j;\n      \
    \      }\n        }\n        result[i] = nums[index];\n        sums[index] = max(sums);\n\
    \    }\n    return result;\n}", "{\n    auto result = nums.dup;\n    result.sort!((a,\
    \ b) => (a.sumDigits() == b.sumDigits()) ? a < b : a.sumDigits() < b.sumDigits());\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    long[] sums = new long[nums.length];\n    foreach (i, n; nums)\n    {\n \
    \       sums[i] = n.abs.sumDigits;\n    }\n    long[] result = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long min = sums[0];\n        long min_index\
    \ = 0;\n        foreach (j, s; sums)\n        {\n            if (s < min)\n  \
    \          {\n                min = s;\n                min_index = j;\n     \
    \       }\n        }\n        result[i] = nums[min_index];\n        sums[min_index]\
    \ = long.max;\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    long[] sorted = sums.dup;\n   \
    \ sorted.sort();\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp =\
    \ nums[i];\n        while (temp != 0)\n        {\n            sum[i] += temp %\
    \ 10;\n            temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n\
    \            if (sum[i] > sum[j])\n            {\n                long temp =\
    \ sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n                temp = index[i];\n                index[i]\
    \ = index[j];\n                index[j] = temp;\n            }\n            else\
    \ if (sum[i] == sum[j])\n            {\n                if (index[i] > index[j])\n\
    \                {\n                    long temp = sum[i];\n                \
    \    sum[i] = sum[j];\n                    sum[j] = temp;\n                  \
    \  temp = nums[i];\n                    nums[i] = nums[j];\n                 \
    \   nums[j] = temp;\n                    temp = index[i];\n                  \
    \  index[i] = index[j];\n                    index[j] = temp;\n              \
    \  }\n            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    return result;\n}", "{\n    if\
    \ (nums.length == 0)\n        return [];\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, e; nums)\n    {\n        long sum = 0;\n        foreach (c; to!string(e))\n\
    \            sum += c.to!long - '0'.to!long;\n        sums[i] = sum;\n    }\n\
    \    long[] result = new long[nums.length];\n    foreach (i, e; nums)\n    {\n\
    \        long min = sums[0];\n        long index = 0;\n        foreach (j, f;\
    \ sums)\n        {\n            if (f < min)\n            {\n                min\
    \ = f;\n                index = j;\n            }\n        }\n        result[i]\
    \ = nums[index];\n        sums[index] = max(sums);\n    }\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    auto res = nums.dup;\n    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return res;\n}", "{\n    auto list = new long[nums.length];\n    auto sum\
    \ = new long[nums.length];\n    foreach(i, num; nums)\n    {\n        list[i]\
    \ = num;\n        sum[i] = 0;\n        foreach(j, digit; num.to!string)\n    \
    \    {\n            sum[i] += digit.to!long;\n        }\n    }\n    auto sorted\
    \ = sort(sum);\n    auto result = new long[nums.length];\n    foreach(i, num;\
    \ sorted)\n    {\n        foreach(j, num2; sum)\n        {\n            if(num\
    \ == num2)\n            {\n                result[i] = list[j];\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i];\n        while (sums[i] > 0)\n     \
    \   {\n            sums[i] = sums[i] / 10;\n            sums[i] += nums[i] % 10;\n\
    \            nums[i] = nums[i] / 10;\n        }\n    }\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        long min = sums[i];\n        int index =\
    \ i;\n        for (int j = i; j < nums.length; j++)\n        {\n            if\
    \ (sums[j] < min)\n            {\n                min = sums[j];\n           \
    \     index = j;\n            }\n        }\n        result[i] = nums[index];\n\
    \        sums[index] = sums[i];\n        sums[i] = min;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    int num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        int index = sums.indexOf(sorted[i]);\n   \
    \     result[i] = nums[index];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] indexes = sort!((a, b) => sums[a] < sums[b])(iota(nums.length));\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}", "{\n    int[] sums = new int[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n     \
    \   long n = nums[i];\n        while (n != 0)\n        {\n            sums[i]\
    \ += n % 10;\n            n /= 10;\n        }\n    }\n    return nums.dup.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  int[] indexes = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i].to!string.sumOfDigits();\n        indexes[i]\
    \ = i;\n    }\n    sort!((a, b) => a > b)(sums, indexes);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}", "{\n    auto sum = (long n) => n < 0 ? -n : n;\n    auto\
    \ sumDigits = (long n) => sum(n) % 10 + sum(n / 10);\n    auto sumDigits2 = (long\
    \ n) => sum(n) % 100 + sum(n / 100);\n    auto sumDigits3 = (long n) => sum(n)\
    \ % 1000 + sum(n / 1000);\n    auto sumDigits4 = (long n) => sum(n) % 10000 +\
    \ sum(n / 10000);\n    auto sumDigits5 = (long n) => sum(n) % 100000 + sum(n /\
    \ 100000);\n    auto sumDigits6 = (long n) => sum(n) % 1000000 + sum(n / 1000000);\n\
    \    auto sumDigits7 = (long n) => sum(n) % 10000000 + sum(n / 10000000);\n  \
    \  auto sumDigits8 = (long n) => sum(n) % 100000000 + sum(n / 100000000);\n  \
    \  auto sumDigits9 = (long n) => sum(n) % 1000000000 + sum(n / 1000000000);\n\
    \    auto sumDigits10 = (long n) => sum(n) % 10000000000 + sum(n / 10000000000);\n\
    \    auto sumDigits11 = (long n) => sum(n) % 100000000000 + sum(n / 100000000000);\n\
    \    auto sumDigits12 = (long n) => sum(n) % 1000000000000 + sum(n / 1000000000000);\n\
    \    auto sumDigits13 = (long n) => sum(n) % 10000000000000 + sum(n / 10000000000000);\n\
    \    auto sumDigits14 = (long n) => sum(n) % 100000000000000 + sum(n / 100000000000000);\n\
    \    auto sumDigits15 = (long n) => sum(n) % 1000000000000000 + sum(n / 1000000000000000);\n\
    \    auto sumDigits16 = (long n) => sum(n) % 10000000000000000 + sum(n / 10000000000000000);\n\
    \    auto sumDigits17 = (long n) => sum(n) % 100000000000000000 + sum(n / 100000000000000000);\n\
    \    auto sumDigits18 = (long", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) => \n    {\n        long aSum = 0;\n        long bSum = 0;\n        while\
    \ (a != 0)\n        {\n            aSum += a % 10;\n            a /= 10;\n   \
    \     }\n        while (b != 0)\n        {\n            bSum += b % 10;\n    \
    \        b /= 10;\n        }\n        return aSum < bSum;\n    });\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        sums[i] = sumDigits(nums[i]);\n    }\n    int[] indices = sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long temp = nums[i];\n        while (temp != 0)\n     \
    \   {\n            sum[i] += temp % 10;\n            temp /= 10;\n        }\n\
    \    }\n    int[] index = new int[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n    }\n    sort(sum, index);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        foreach (long digit; nums[i].to!string)\n\
    \        {\n            sum += digit.to!long;\n        }\n        sums[i] = sum;\n\
    \    }\n    auto sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] == sorted[i])\n            {\n                result[i] = nums[j];\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long n = nums[i];\n        while\
    \ (n != 0)\n        {\n            sum += n % 10;\n            n /= 10;\n    \
    \    }\n        sums[i] = sum;\n    }\n    long[] sorted = sums.dup;\n    sorted.sort;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n      \
    \      {\n                result[i] = nums[j];\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    int[] sorted = sums.dup;\n    sorted.sort;\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        int index = sums.indexOf(sorted[i]);\n   \
    \     result[i] = nums[index];\n    }\n    return result;\n}", "{\n    auto sum\
    \ = (long n) {\n        long sum = 0;\n        while (n != 0) {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        return sum;\n    };\n \
    \   auto compare = (long a, long b) {\n        return sum(a) < sum(b) || (sum(a)\
    \ == sum(b) && a < b);\n    };\n    return nums.sort!(compare);\n}", "{\n    auto\
    \ result = nums.dup;\n    result.sort!((a, b) => a.sumDigits.cmp(b.sumDigits));\n\
    \    return result;\n}", "{\n    auto sum = (long n) => n.to!string.map!(a =>\
    \ a.to!long).sum;\n    auto res = nums.dup;\n    res.sort!((a, b) => sum(a) <\
    \ sum(b) || (sum(a) == sum(b) && a > b));\n    return res;\n}", "{\n    auto arr\
    \ = nums.dup;\n    auto sum = 0;\n    auto sum_arr = new long[arr.length];\n \
    \   foreach(i, num; arr)\n    {\n        sum = 0;\n        foreach(j, digit; num.to!string)\n\
    \        {\n            sum += digit.to!long;\n        }\n        sum_arr[i] =\
    \ sum;\n    }\n    auto sorted_arr = sort(sum_arr);\n    auto result = new long[arr.length];\n\
    \    foreach(i, num; arr)\n    {\n        foreach(j, sum; sorted_arr)\n      \
    \  {\n            if(num.to!string.sum == sum)\n            {\n              \
    \  result[i] = num;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum[i] = 0;\n        while (nums[i] != 0)\n        {\n          \
    \  sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n        }\n    }\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        int min = i;\n       \
    \ for (int j = i + 1; j < nums.length; j++)\n        {\n            if (sum[j]\
    \ < sum[min])\n            {\n                min = j;\n            }\n      \
    \  }\n        if (min != i)\n        {\n            int temp = sum[i];\n     \
    \       sum[i] = sum[min];\n            sum[min] = temp;\n            temp = nums[i];\n\
    \            nums[i] = nums[min];\n            nums[min] = temp;\n        }\n\
    \    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] =\
    \ nums[i];\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while\
    \ (sums[i] > 0)\n        {\n            sums[i] = sums[i] % 10 + sums[i] / 10;\n\
    \        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long\
    \ min = sums[i];\n        int min_index = i;\n        for (int j = i; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] < min)\n            {\n           \
    \     min = sums[j];\n                min_index = j;\n            }\n        }\n\
    \        sums[min_index] = sums[i];\n        sums[i] = min;\n        result[i]\
    \ = nums[min_index];\n    }\n    return result;\n}", "{\n    if (nums.length ==\
    \ 0)\n        return nums;\n    long[] sums = new long[nums.length];\n    foreach\
    \ (i, v; nums)\n    {\n        sums[i] = v.abs;\n        while (sums[i] >= 10)\n\
    \        {\n            sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n  \
    \  }\n    long[] indices = new long[nums.length];\n    foreach (i, v; nums)\n\
    \    {\n        indices[i] = i;\n    }\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    long[] result = new long[nums.length];\n\
    \    foreach (i, v; indices)\n    {\n        result[i] = nums[v];\n    }\n   \
    \ return result;\n}", "{\n    auto result = nums.dup;\n    auto sums = nums.map!(n\
    \ => n.abs.sumDigits).array;\n    result.sort!((a, b) => sums[a] < sums[b] ||\
    \ (sums[a] == sums[b] && a < b));\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n\
    \            sums[i] += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n \
    \       }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        long\
    \ min = sums[i];\n        int minIndex = i;\n        for (int j = i; j < nums.length;\
    \ j++)\n        {\n            if (sums[j] < min)\n            {\n           \
    \     min = sums[j];\n                minIndex = j;\n            }\n        }\n\
    \        result[i] = nums[minIndex];\n        sums[minIndex] = sums[i];\n    \
    \    sums[i] = min;\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum[i] = 0;\n        long temp = nums[i];\n        while\
    \ (temp != 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      int min = i;\n        for (int j = i; j < nums.length; j++)\n        {\n\
    \            if (sum[j] < sum[min])\n            {\n                min = j;\n\
    \            }\n        }\n        long temp = sum[i];\n        sum[i] = sum[min];\n\
    \        sum[min] = temp;\n        temp = nums[i];\n        nums[i] = nums[min];\n\
    \        nums[min] = temp;\n    }\n    return nums;\n}", "{\n    auto nums_with_points\
    \ = zip(nums, map!(a => a.sumOfDigits())(nums));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sum = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    int[] index = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n    }\n   \
    \ sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n      \
    \  result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \  }\n    auto pairs = zip(nums, sums);\n    pairs.sort!((a, b) => a[1] < b[1]);\n\
    \    foreach (i, pair; pairs)\n    {\n        result[i] = pair[0];\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        sums[i] = nums[i] % 10;\n        nums[i] /= 10;\n        while\
    \ (nums[i] != 0)\n        {\n            sums[i] += nums[i] % 10;\n          \
    \  nums[i] /= 10;\n        }\n    }\n    int[] indexes = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n        indexes[i] = i;\n    indexes.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n    for (int i =\
    \ 0; i < nums.length; i++)\n        result[i] = nums[indexes[i]];\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        sums[i] = sumDigits(nums[i]);\n    }\n    sort(sums);\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sums[i] == sumDigits(nums[j]))\n          \
    \  {\n                result[i] = nums[j];\n                nums[j] = -1;\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    long sumDigits(long num)\n{\n    long sum = 0;\n    while (num > 0)\n    {\n \
    \       sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}", "{\n\
    \    auto result = nums.dup;\n    auto sums = new long[nums.length];\n    foreach(i,\
    \ num; nums)\n    {\n        sums[i] = num.digits.sum;\n    }\n    sort!((a, b)\
    \ => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n    return\
    \ result;\n}", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    long[] indices = new long[nums.length];\n    foreach(i,\
    \ n; nums)\n    {\n        sums[i] = sumDigits(n);\n        indices[i] = i;\n\
    \    }\n    sort!(\"a < b\")(sums, indices);\n    foreach(i, n; indices)\n   \
    \ {\n        result[i] = nums[n];\n    }\n    return result;\n}\nlong sumDigits(long\
    \ n)\n{\n    long sum = 0;\n    while(n != 0)\n    {\n        sum += n % 10;\n\
    \        n /= 10;\n    }\n    return sum;\n}", "{\n    return nums.sort!((a, b)\
    \ => sumDigits(a) < sumDigits(b));\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n  \
    \          sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        int min = sum[i];\n\
    \        int min_index = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[j] < min)\n            {\n                min\
    \ = sum[j];\n                min_index = j;\n            }\n        }\n      \
    \  int temp = sum[i];\n        sum[i] = sum[min_index];\n        sum[min_index]\
    \ = temp;\n        temp = nums[i];\n        nums[i] = nums[min_index];\n     \
    \   nums[min_index] = temp;\n    }\n    return nums;\n}", "{\n    auto result\
    \ = nums.dup;\n    result.sort!((a, b) =>\n    {\n        auto sumA = a.digits.sum;\n\
    \        auto sumB = b.digits.sum;\n        if (sumA == sumB)\n        {\n   \
    \         return a.indexOf(nums) < b.indexOf(nums);\n        }\n        return\
    \ sumA < sumB;\n    });\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while\
    \ (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    sort(sums);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[i] == sums[j])\n            {\n             \
    \   result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (nums.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        result = nums;\n        sort!((a, b) => a.sumDigits() < b.sumDigits())(result);\n\
    \        return result;\n    }\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i];\n        while (sums[i] != 0)\n    \
    \    {\n            sums[i] = sums[i] / 10;\n            if (sums[i] != 0)\n \
    \               sums[i] = sums[i] + (sums[i] % 10);\n        }\n    }\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n    \
    \    int min_index = i;\n        for (int j = i; j < nums.length; j++)\n     \
    \   {\n            if (sums[j] < min)\n            {\n                min = sums[j];\n\
    \                min_index = j;\n            }\n        }\n        sums[min_index]\
    \ = sums[i];\n        sums[i] = min;\n        result[i] = nums[min_index];\n \
    \   }\n    return result;\n}", "{\n    auto s = nums.dup;\n    s.sort!((a, b)\
    \ => (a.sumDigits() == b.sumDigits()) ? a < b : a.sumDigits() < b.sumDigits());\n\
    \    return s;\n}", "{\n    if (nums.length == 0)\n        return nums;\n    long[]\
    \ sums = new long[nums.length];\n    foreach (i, item; nums)\n    {\n        long\
    \ sum = 0;\n        foreach (c; item.to!string)\n        {\n            if (c.isDigit)\n\
    \                sum += c.to!long - '0'.to!long;\n        }\n        sums[i] =\
    \ sum;\n    }\n    auto t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n\
    \    return t[0];\n}", "{\n    auto result = nums.dup;\n    result.sort!((a, b)\
    \ => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    long[] res\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] indexes = sort(sums);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        res[i] = nums[indexes[i]];\n    }\n    return res;\n}",
  "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sum = new long[nums.length];\n    long[] index = new long[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n     \
    \   sum[i] = 0;\n        long num = nums[i];\n        while (num != 0)\n     \
    \   {\n            sum[i] += num % 10;\n            num /= 10;\n        }\n  \
    \  }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] -= sums[i] % 10;\n\
    \            sums[i] /= 10;\n        }\n    }\n    auto sorted = sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n      \
    \      {\n                result[i] = nums[j];\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[j] < sum[min])\n            {\n              \
    \  min = j;\n            }\n        }\n        if (min != i)\n        {\n    \
    \        long temp = sum[i];\n            sum[i] = sum[min];\n            sum[min]\
    \ = temp;\n            temp = nums[i];\n            nums[i] = nums[min];\n   \
    \         nums[min] = temp;\n        }\n    }\n    return nums;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n =\
    \ nums[i];\n        while (n != 0)\n        {\n            sums[i] += n % 10;\n\
    \            n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n\
    \    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    int[] sums = new int[nums.length];\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    auto result = nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n\
    \    return result;\n}", "{\n    auto result = nums.dup;\n    auto sums = new\
    \ long[result.length];\n    foreach(i, nums; i < result.length)\n    {\n     \
    \   sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while(sums[i] > 0)\n\
    \        {\n            sums[i] = sums[i] % 10 + sums[i] / 10;\n        }\n  \
    \  }\n    auto indices = new long[result.length];\n    foreach(i, nums; i < result.length)\n\
    \    {\n        indices[i] = i;\n    }\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    foreach(i, nums; i < result.length)\n\
    \    {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (int digit; nums[i].digits)\n        {\n            sum += digit;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n \
    \   }\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i];\n        while (sums[i] > 0)\n     \
    \   {\n            sums[i] = sums[i] - sums[i] % 10;\n            sums[i] = sums[i]\
    \ / 10;\n        }\n    }\n    int[] indexes = new int[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        indexes[i] = i;\n    }\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < nums.length; j++)\n        {\n            if (sums[i] > sums[j])\n     \
    \       {\n                long temp = sums[i];\n                sums[i] = sums[j];\n\
    \                sums[j] = temp;\n                int temp2 = indexes[i];\n  \
    \              indexes[i] = indexes[j];\n                indexes[j] = temp2;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}",
  "{\n    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    int[] indexes\
    \ = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        indexes[i] = i;\n    }\n    indexes.sort((a, b) => sums[a] < sums[b]\
    \ ? -1 : sums[a] > sums[b] ? 1 : a < b ? -1 : 1);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }", "{\n    auto sum = (long n) => n < 0 ? -n : n;\n    auto sumDigits = (long\
    \ n) => n < 0 ? sum(n) : n == 0 ? 0 : n % 10 + sumDigits(n / 10);\n    auto sums\
    \ = nums.map!(sumDigits);\n    auto indices = iota(nums.length);\n    sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n    return\
    \ indices.map!(i => nums[i]).array;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n    }\n    int[] indices\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[indices[i]];\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = 0;\n        long num\
    \ = nums[i];\n        while (num != 0)\n        {\n            sums[i] += num\
    \ % 10;\n            num /= 10;\n        }\n    }\n    int[] indices = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n \
    \   }\n    quickSort(sums, indices, 0, nums.length - 1);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n\
    \    return result;\n}", "{\n    if (nums.length == 0)\n        return nums;\n\
    \    auto tuples = new Tuple!(long, long)[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        tuples[i] = tuple(n, n.abs.digits.sum);\n    }\n    tuples.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    foreach (i, t; tuples)\n\
    \    {\n        nums[i] = t[0];\n    }\n    return nums;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i].abs.to!string.sum.to!int;\n\
    \    }\n    auto sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length; j++)\n        {\n           \
    \ if (sums[j] == sorted[i])\n            {\n                result[i] = nums[j];\n\
    \                sums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i] < 0 ? -nums[i] : nums[i];\n        while\
    \ (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10 + sums[i] % 10;\n\
    \        }\n    }\n    long[] sorted = sums.dup;\n    sorted.sort();\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sorted[i] == sums[j])\n            {\n    \
    \            result[i] = nums[j];\n                sums[j] = -1;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  if (nums.length == 0)\n        return nums;\n    long[] sums = new long[nums.length];\n\
    \    foreach (i, n; nums)\n    {\n        long sum = 0;\n        while (n != 0)\n\
    \        {\n            sum += n % 10;\n            n /= 10;\n        }\n    \
    \    sums[i] = sum;\n    }\n    long[] result = nums.dup;\n    sort!((a, b) =>\
    \ sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n    return result;\n\
    }", "{\n    long[] res = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long n = nums[i];\n        while (n != 0)\n        {\n            sum +=\
    \ n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n\
    \        int min_index = i;\n        for (int j = i; j < nums.length; j++)\n \
    \       {\n            if (sums[j] < min)\n            {\n                min\
    \ = sums[j];\n                min_index = j;\n            }\n        }\n     \
    \   res[i] = nums[min_index];\n        sums[min_index] = sums[i];\n    }\n   \
    \ return res;\n}", "{\n    auto result = nums.dup;\n    auto sums = nums.map!(x\
    \ => x.abs.sumDigits);\n    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b]\
    \ && a < b))(result);\n    return result;\n}", "{\n    if (nums.length == 0)\n\
    \        return nums;\n    long[] sums = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        foreach\
    \ (c; nums[i].to!string)\n        {\n            if (c.isDigit)\n            \
    \    sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n    }\n\
    \    auto sorted = sort!((a, b) => a[0] < b[0])(zip(sums, nums));\n    return\
    \ sorted.map!(a => a[1]).array;\n}", "{\n    if (nums.length == 0)\n        return\
    \ nums;\n    auto arr = nums.dup;\n    auto sums = new long[arr.length];\n   \
    \ foreach (i, num; arr)\n    {\n        long sum = 0;\n        foreach (j, digit;\
    \ num.to!string)\n        {\n            sum += digit.to!long - '0'.to!long;\n\
    \        }\n        sums[i] = sum;\n    }\n    auto indices = new long[arr.length];\n\
    \    foreach (i, _; arr)\n        indices[i] = i;\n    auto sorted = sort!((a,\
    \ b) => a < b)(sums);\n    auto result = new long[arr.length];\n    foreach (i,\
    \ _; arr)\n    {\n        auto index = indices[sorted[i]];\n        result[i]\
    \ = arr[index];\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sum = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long num = nums[i];\n        long sum_of_digits = 0;\n\
    \        while (num != 0)\n        {\n            sum_of_digits += num % 10;\n\
    \            num /= 10;\n        }\n        sum[i] = sum_of_digits;\n    }\n \
    \   long[] sorted_sum = sum.dup;\n    sort(sorted_sum);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sum[j] == sorted_sum[i])\n            {\n        \
    \        result[i] = nums[j];\n                sum[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num != 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i] == sums[j])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum[i] = abs(nums[i]);\n\
    \        while (sum[i] > 0)\n        {\n            sum[i] = sum[i] % 10 + sum[i]\
    \ / 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        int min = i;\n        for (int j = i + 1; j < nums.length; j++)\n   \
    \     {\n            if (sum[j] < sum[min])\n            {\n                min\
    \ = j;\n            }\n        }\n        long temp = sum[i];\n        sum[i]\
    \ = sum[min];\n        sum[min] = temp;\n        temp = nums[i];\n        nums[i]\
    \ = nums[min];\n        nums[min] = temp;\n    }\n    return nums;\n}", "{\n \
    \   long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n    \
    \    foreach (int digit; nums[i].digits)\n        {\n            sum += digit;\n\
    \        }\n        sums[i] = sum;\n    }\n    int[] indices = sums.indices.sort(sums);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indices = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        indices[i] = i;\n \
    \       sums[i] = sumDigits(nums[i]);\n    }\n    sort(sums, indices);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, num; nums)\n    {\n\
    \        long sum = 0;\n        foreach(c; to!string(num))\n        {\n      \
    \      sum += to!long(c);\n        }\n        sums[i] = sum;\n    }\n    foreach(i,\
    \ num; nums)\n    {\n        long min = sums[i];\n        long min_index = i;\n\
    \        foreach(j, sum; sums[i..$])\n        {\n            if(sum < min)\n \
    \           {\n                min = sum;\n                min_index = j;\n  \
    \          }\n        }\n        result[i] = nums[min_index];\n        nums[min_index]\
    \ = nums[i];\n        sums[min_index] = sums[i];\n    }\n    return result;\n}",
  "{\n    auto sum = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return\
    \ nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}", "{\n\
    \    auto sums = new long[nums.length];\n    foreach(i, ref n; nums)\n    {\n\
    \        sums[i] = n.abs.sumDigits;\n    }\n    return nums.sort!((a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b));\n}", "{\n    long[] res = nums.dup;\n\
    \    res.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return res;\n}\nlong\
    \ sumDigits(long n)\n{\n    long sum = 0;\n    while (n != 0)\n    {\n       \
    \ sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, n; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(n))\n\
    \        {\n            if(c.isDigit)\n                sum += c.to!long;\n   \
    \     }\n        sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i,\
    \ n; nums)\n    {\n        foreach(j, s; sums)\n        {\n            if(s ==\
    \ sorted[i])\n            {\n                result[i] = nums[j];\n          \
    \      break;\n            }\n        }\n    }\n    return result;\n}", "{\n \
    \   auto arr = nums.dup;\n    auto sums = arr.map!(a => a.abs.sumDigits).array;\n\
    \    auto indices = iota(arr.length).array;\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(indices);\n    return indices.map!(i => arr[i]).array;\n\
    }", "{\n    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i] <\
    \ 0 ? -nums[i] : nums[i];\n        while (sums[i] > 0)\n        {\n          \
    \  sums[i] = sums[i] / 10 + sums[i] % 10;\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        int min = i;\n        for (int j =\
    \ i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < sums[min])\n\
    \            {\n                min = j;\n            }\n        }\n        if\
    \ (min != i)\n        {\n            long temp = sums[i];\n            sums[i]\
    \ = sums[min];\n            sums[min] = temp;\n            temp = nums[i];\n \
    \           nums[i] = nums[min];\n            nums[min] = temp;\n        }\n \
    \   }\n    return nums;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        sums[i] = sumDigits(nums[i]);\n    }\n    sort(sums);\n    for\
    \ (int i = 0; i < nums.length; i++) {\n        result[i] = nums[indexOf(sums,\
    \ sums[i])];\n    }\n    return result;\n}", "{\n    long[] result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}", "{\n\
    \    return nums.sort!((a, b) => sumDigits(a) < sumDigits(b));\n}", "{\n    if\
    \ (nums.length == 0)\n        return nums;\n    auto sum = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        auto temp = nums[i];\n\
    \        while (temp != 0)\n        {\n            sum[i] += temp % 10;\n    \
    \        temp /= 10;\n        }\n    }\n    auto result = new long[nums.length];\n\
    \    auto index = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n    }\n    auto temp = new long[nums.length];\n\
    \    merge_sort(sum, index, temp, 0, nums.length - 1);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n   \
    \ return result;\n}", "{\n    auto sum = (long n) => n.digits.sum;\n    return\
    \ nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n\
    \        int sum = 0;\n        while (num != 0)\n        {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n\
    \    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        int index = 0;\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[j] == sorted[i])\n            {\n           \
    \     index = j;\n                break;\n            }\n        }\n        result[i]\
    \ = nums[index];\n    }\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    long[] indices = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long num = nums[i];\n        while (num != 0)\n        {\n            sum\
    \ += num % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n  \
    \      indices[i] = i;\n    }\n    sort(sums, indices);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n \
    \   return result;\n}", "{\n    long[] result = new long[nums.length];\n    int[]\
    \ sum = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        int temp = nums[i];\n        while (temp != 0)\n        {\n     \
    \       sum[i] += temp % 10;\n            temp /= 10;\n        }\n    }\n    int[]\
    \ index = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        index[i] = i;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = 0; j < nums.length - 1; j++)\n        {\n       \
    \     if (sum[j] > sum[j + 1])\n            {\n                int temp = sum[j];\n\
    \                sum[j] = sum[j + 1];\n                sum[j + 1] = temp;\n  \
    \              temp = index[j];\n                index[j] = index[j + 1];\n  \
    \              index[j + 1] = temp;\n            }\n        }\n    }\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = nums.dup;\n    result.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n    return result;\n}", "{\n    auto result\
    \ = nums.dup;\n    auto sums = nums.map!(a => a.abs.sumDigits).dup;\n    auto\
    \ indices = iota(nums.length).dup;\n    auto tmp = new long[][3](nums.length);\n\
    \    foreach(i, ref e; tmp)\n    {\n        e[0] = sums[i];\n        e[1] = result[i];\n\
    \        e[2] = indices[i];\n    }\n    tmp.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[2] < b[2]));\n    foreach(i, ref e; result)\n    {\n        e =\
    \ tmp[i][1];\n    }\n    return result;\n}", "{\n    auto result = nums.dup;\n\
    \    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return result;\n\
    }", "{\n    auto nums_with_points = nums.map!(n => tuple(n, n.abs.digits.sum));\n\
    \    nums_with_points.sort!((a, b) => (a[1] == b[1]) ? (a[0] < b[0]) : (a[1] <\
    \ b[1]));\n    return nums_with_points.map!(t => t[0]).array;\n}", "{\n    long[]\
    \ result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n\
    \        while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - (sums[i]\
    \ % 10);\n            sums[i] = sums[i] / 10;\n        }\n    }\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int min = i;\n        for (int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if (sums[j] < sums[min])\n\
    \            {\n                min = j;\n            }\n        }\n        long\
    \ temp = sums[min];\n        sums[min] = sums[i];\n        sums[i] = temp;\n \
    \       temp = nums[min];\n        nums[min] = nums[i];\n        nums[i] = temp;\n\
    \    }\n    return nums;\n}", "{\n    auto result = nums.dup;\n    auto sums =\
    \ nums.map!(a => a.abs.sumDigits).array;\n    auto indices = iota(nums.length).array;\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(indices);\n\
    \    foreach (i, ref n; result)\n        n = nums[indices[i]];\n    return result;\n\
    }", "{\n    long[] result = nums.dup;\n    result.sort!((a, b) => sumDigits(a)\
    \ < sumDigits(b));\n    return result;\n}", "{\n    long[] result = new long[nums.length];\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, e; nums)\n    {\n  \
    \      sums[i] = sumDigits(e);\n    }\n    auto sort = sort!((a, b) => a < b);\n\
    \    sort(sums);\n    foreach(i, e; sums)\n    {\n        foreach(j, f; nums)\n\
    \        {\n            if(sumDigits(f) == e)\n            {\n               \
    \ result[i] = f;\n                nums[j] = 0;\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\nlong sumDigits(long n)\n{\n\
    \    long sum = 0;\n    while(n != 0)\n    {\n        sum += n % 10;\n       \
    \ n /= 10;\n    }\n    return sum;\n}", "{\n    auto result = nums.dup;\n    auto\
    \ sums = nums.map!(x => sum(x.digits));\n    sort!((a, b) => sums[a] < sums[b]\
    \ || (sums[a] == sums[b] && a < b))(result);\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
