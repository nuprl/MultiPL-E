name: HumanEval_104_unique_digits
language: humaneval_to_dlang.py
results:
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i < 10)\n \
    \       {\n            result ~= i;\n        }\n        else\n        {\n    \
    \        bool is_unique = true;\n            while(i > 0)\n            {\n   \
    \             if(i % 2 == 0)\n                {\n                    is_unique\
    \ = false;\n                    break;\n                }\n                i /=\
    \ 10;\n            }\n            if(is_unique)\n            {\n             \
    \   result ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7w93ii1v.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp7w93ii1v.__unittest_L44_C1()\
    \ [0x427fc6]\\n??:? void tmp7w93ii1v.__modtest() [0x42822c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cedf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430849]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd49]\\n??:? runModuleUnitTests [0x42ccb5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428883]\\n??:? _d_run_main [0x4287ee]\\n??:? main [0x42823f]\\\
    n??:? __libc_start_main [0xe6b6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.canFind!(a\
    \ => a % 2 == 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjeqrw3g.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmppjeqrw3g.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjeqrw3g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.to!string.countif!(\"\
    a == '2' || a == '4' || a == '6' || a == '8' || a == '0'\") == 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8845fmo.d(20): Error: no property `to` for type `long`\\n/tmp/tmps8845fmo.d(25):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps8845fmo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu45sek50.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpu45sek50.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpu45sek50.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x3a848554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc__zervq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpc__zervq.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpc__zervq.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xb1341554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long num; x)\n    {\n        if(num.toString.length\
    \ == 1)\n        {\n            result ~= num;\n        }\n        else\n    \
    \    {\n            bool isEven = false;\n            foreach(char ch; num.toString)\n\
    \            {\n                if(ch.to!int % 2 == 0)\n                {\n  \
    \                  isEven = true;\n                    break;\n              \
    \  }\n            }\n            if(!isEven)\n            {\n                result\
    \ ~= num;\n            }\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nfomc41.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp7nfomc41.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp7nfomc41.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7nfomc41.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2y_estdt.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y_estdt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpod8o1_94.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod8o1_94.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjk7wgyrt.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpjk7wgyrt.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk7wgyrt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2gvx8fdq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp2gvx8fdq.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp2gvx8fdq.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x25c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo1eplh0f.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpo1eplh0f.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpo1eplh0f.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x5702e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vid84ek.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vid84ek.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_unique = false;\n                    break;\n           \
    \     }\n            }\n            if(is_unique)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptveitqsa.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmptveitqsa.d(27): Error: no property `toString` for type `long`\\n/tmp/tmptveitqsa.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmptveitqsa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n\
    \            result ~= i;\n        }\n        else\n        {\n            bool\
    \ is_even = false;\n            while(i != 0)\n            {\n               \
    \ if(i % 2 == 0)\n                {\n                    is_even = true;\n   \
    \                 break;\n                }\n                i /= 10;\n      \
    \      }\n            if(!is_even)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx9ut74ni.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284b5]\\n??:? void tmpx9ut74ni.__unittest_L44_C1()\
    \ [0x427fce]\\n??:? void tmpx9ut74ni.__modtest() [0x428234]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430771]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428904]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888b]\\n??:? _d_run_main [0x4287f6]\\n??:? main [0x428247]\\\
    n??:? __libc_start_main [0xc9663554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n    {\n\
    \        if(!hasEvenDigit(i))\n        {\n            res[count] = i;\n      \
    \      count++;\n        }\n    }\n    return res[0..count];\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83ok2wsc.d(21): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83ok2wsc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x)\n    {\n        if(num.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= num;\n        }\n    }\n \
    \   return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjtkdjn_q.d(20): Error: no property `to` for type `long`\\n/tmp/tmpjtkdjn_q.d(25):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjtkdjn_q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long num; x)\n    {\n        if(num % 2 != 0)\n  \
    \      {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcs25vau2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpcs25vau2.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpcs25vau2.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x3e295554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.toString.length\
    \ == 1)\n        {\n            result ~= num;\n        }\n        else\n    \
    \    {\n            bool isUnique = true;\n            foreach(char c; num.toString)\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 isUnique = false;\n                    break;\n            \
    \    }\n            }\n            if(isUnique)\n            {\n             \
    \   result ~= num;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvnh9nxnb.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpvnh9nxnb.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpvnh9nxnb.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvnh9nxnb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpviumryq5.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpviumryq5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpebfhvzzu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpebfhvzzu.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpebfhvzzu.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x3f0ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long num; x)\n    {\n        if(num % 2 !=\
    \ 0)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxmtsy94d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpxmtsy94d.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpxmtsy94d.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x33ece554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(num; x)\n    {\n        if(num % 2 != 0)\n       \
    \ {\n            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp735tuwsg.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp735tuwsg.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmp735tuwsg.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x915e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsuebmm7c.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsuebmm7c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqgf2el2w.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpqgf2el2w.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpqgf2el2w.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xcb846554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 isEven = true;\n                    break;\n               \
    \ }\n            }\n            if(!isEven)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpru66spqp.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpru66spqp.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpru66spqp.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpru66spqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n\
    \            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ res ~= i;\n            }\n        }\n    }\n    return res.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjp81tb3.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpkjp81tb3.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpkjp81tb3.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpkjp81tb3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz900i765.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz900i765.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpau4quq1k.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau4quq1k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    //\
    \ your code here\n    long[] result = new long[0];\n    foreach(long i; x)\n \
    \   {\n        bool isEven = false;\n        long temp = i;\n        while(temp\
    \ != 0)\n        {\n            if(temp % 2 == 0)\n            {\n           \
    \     isEven = true;\n                break;\n            }\n            temp\
    \ /= 10;\n        }\n        if(!isEven)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp59xbm6u9.d(37): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59xbm6u9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbehzdrw5.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbehzdrw5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x)\n    {\n        if(num.to!string.canFind(\"\
    2\") || num.to!string.canFind(\"4\") || num.to!string.canFind(\"6\") || num.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2hylve1n.d(20): Error: no property `to` for type `long`\\n/tmp/tmp2hylve1n.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp2hylve1n.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp2hylve1n.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hylve1n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9z3pd90.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpq9z3pd90.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpq9z3pd90.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x74eba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr83hhtow.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpr83hhtow.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpr83hhtow.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xe5e0f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            continue;\n        }\n        result ~= i;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprby7_sxa.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmprby7_sxa.__unittest_L28_C1()\
    \ [0x427f5e]\\n??:? void tmprby7_sxa.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x69a0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5h_fev7t.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp5h_fev7t.d(20): Error: no property `toString` for type `long`\\n/tmp/tmp5h_fev7t.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmp5h_fev7t.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp5h_fev7t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl7jwh2td.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7jwh2td.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72iarv62.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72iarv62.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ok8u_97.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ok8u_97.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 isEven = true;\n                    break;\n               \
    \ }\n            }\n            if(!isEven)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbd096xh.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpcbd096xh.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpcbd096xh.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcbd096xh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvgpif63y.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgpif63y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdk4z2dhn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpdk4z2dhn.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpdk4z2dhn.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x7ed3e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzfdrk9hy.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzfdrk9hy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n    {\n\
    \        if(!hasEvenDigit(i))\n        {\n            res[count] = i;\n      \
    \      count++;\n        }\n    }\n    res = res[0..count];\n    sort(res);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf24ur7lp.d(21): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpf24ur7lp.d(28): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf24ur7lp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj2yulc9x.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpj2yulc9x.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpj2yulc9x.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x6cde8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfsfuhnwd.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsfuhnwd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqse6a9t0.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpqse6a9t0.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpqse6a9t0.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xa9350554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ > 1)\n        {\n            bool isEven = false;\n            foreach(char\
    \ c; i.toString())\n            {\n                if(c.to!int() % 2 == 0)\n \
    \               {\n                    isEven = true;\n                    break;\n\
    \                }\n            }\n            if(!isEven)\n            {\n  \
    \              result ~= i;\n            }\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogdnd1tr.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpogdnd1tr.d(23): Error: no property `toString` for type `long`\\n/tmp/tmpogdnd1tr.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpogdnd1tr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd2jz90fw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpd2jz90fw.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpd2jz90fw.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xcb2cd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(num; x)\n    {\n        if(num % 2 != 0)\n       \
    \ {\n            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpok8vv_7t.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpok8vv_7t.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpok8vv_7t.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x902a0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp612olxa3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmp612olxa3.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmp612olxa3.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x9d1ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mqxl017.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mqxl017.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            res ~= i;\n        }\n    }\n    return\
    \ res.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3lz90elq.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmp3lz90elq.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lz90elq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpru0dxm80.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpru0dxm80.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ y = new long[0];\n    foreach(long i; x)\n    {\n        long j = i;\n     \
    \   bool flag = true;\n        while(j > 0)\n        {\n            if(j % 2 ==\
    \ 0)\n            {\n                flag = false;\n                break;\n \
    \           }\n            j /= 10;\n        }\n        if(flag)\n        {\n\
    \            y ~= i;\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpimf2d_mg.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmpimf2d_mg.__unittest_L38_C1()\
    \ [0x427f92]\\n??:? void tmpimf2d_mg.__modtest() [0x4281f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cea7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd3a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430885]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430811]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd11]\\n??:? runModuleUnitTests [0x42cc7d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884b]\\n??:? _d_run_main [0x4287b6]\\n??:? main [0x42820b]\\\
    n??:? __libc_start_main [0x24df5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.toString.canFind(\"\
    [02468]\"))\n            continue;\n        result ~= num;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl47ft49w.d(20): Error: no property `toString` for type `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl47ft49w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ y = new long[x.length];\n    int count = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n            y[count] = x[i];\n\
    \            count++;\n        }\n    }\n    long[] result = new long[count];\n\
    \    for (int i = 0; i < count; i++)\n    {\n        result[i] = y[i];\n    }\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0h2axnxs.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0h2axnxs.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsi2hnvlo.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpsi2hnvlo.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpsi2hnvlo.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsi2hnvlo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkxlp8wjc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpkxlp8wjc.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpkxlp8wjc.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x5a93554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0 && i.toString().count(\"0\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8i_kgri.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpy8i_kgri.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpy8i_kgri.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpy8i_kgri.d(20): Error:\
    \ no property `toString` for type `long`\\n/tmp/tmpy8i_kgri.d(20): Error: no property\
    \ `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpy8i_kgri.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1oiz2l47.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp1oiz2l47.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp1oiz2l47.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x1f7c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ovrxtwg.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ovrxtwg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_even = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_even = true;\n                    break;\n              \
    \  }\n            }\n            if(!is_even)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5t7qtd0.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpw5t7qtd0.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpw5t7qtd0.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw5t7qtd0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x)\n    {\n        if(num % 2 == 1)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprcl9tcxa.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmprcl9tcxa.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmprcl9tcxa.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xeb66d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(num; x)\n    {\n        if(num % 2 != 0)\n       \
    \ {\n            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn147gn3w.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpn147gn3w.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpn147gn3w.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xe5e23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    long[] temp = new long[x.length];\n    int\
    \ count = 0;\n    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n  \
    \          temp[count] = i;\n            count++;\n        }\n    }\n    sort(temp);\n\
    \    return temp;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ixe2p4o.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ixe2p4o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ulryeyb.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ulryeyb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3yf_dkm.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3yf_dkm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    foreach(num; x)\n    {\n\
    \        if(num % 2 != 0)\n        {\n            result[count] = num;\n     \
    \       count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprw1d9ab8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmprw1d9ab8.__unittest_L29_C1()\
    \ [0x427f86]\\n??:? void tmprw1d9ab8.__modtest() [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0xae74d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4p348hw.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmpw4p348hw.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4p348hw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsgjh7zti.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpsgjh7zti.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpsgjh7zti.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x50513554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit)\n                {\n           \
    \         if(c.to!long % 2 == 0)\n                    {\n                    \
    \    is_unique = false;\n                        break;\n                    }\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphz97ifkz.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmphz97ifkz.d(27): Error: no property `toString` for type `long`\\n/tmp/tmphz97ifkz.d(44):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmphz97ifkz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps1ao6fs9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmps1ao6fs9.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmps1ao6fs9.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x8058e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4i3o2ko7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp4i3o2ko7.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp4i3o2ko7.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xa3760554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4wdornhg.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4wdornhg.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpis0uz9yj.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpis0uz9yj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpza2n5lvu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpza2n5lvu.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpza2n5lvu.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xc5682554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ a = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            a ~= i;\n        }\n    }\n    return a;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp16wm14jh.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16wm14jh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm6krspk3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpm6krspk3.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpm6krspk3.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xdf48f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_u5fmig.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_u5fmig.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n \
    \   {\n        if(i % 2 != 0)\n        {\n            result[count] = i;\n   \
    \         count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptbpkulxw.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmptbpkulxw.__unittest_L29_C1()\
    \ [0x427f86]\\n??:? void tmptbpkulxw.__modtest() [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x238c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.to!string.countif!(a\
    \ => a.to!long % 2 == 0) == 0)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfjxo_d3p.d(20): Error: no property `to` for type `long`\\n/tmp/tmpfjxo_d3p.d(25):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfjxo_d3p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result.sort;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiyshvmbx.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpiyshvmbx.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpiyshvmbx.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpiyshvmbx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 isEven = true;\n                    break;\n               \
    \ }\n            }\n            if(!isEven)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0bp0k6zb.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp0bp0k6zb.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp0bp0k6zb.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0bp0k6zb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n\
    \            bool flag = true;\n            foreach(char c; i.toString())\n  \
    \          {\n                if(c.toString().to!int % 2 == 0)\n             \
    \   {\n                    flag = false;\n                    break;\n       \
    \         }\n            }\n            if(flag)\n            {\n            \
    \    res ~= i;\n            }\n        }\n    }\n    return res.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgn_3t_7v.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpgn_3t_7v.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpgn_3t_7v.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgn_3t_7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(num; x)\n    {\n        bool hasEven = false;\n  \
    \      long temp = num;\n        while(temp != 0)\n        {\n            if(temp\
    \ % 2 == 0)\n            {\n                hasEven = true;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if(!hasEven)\n   \
    \     {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpql9pq0tb.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42847d]\\n??:? void tmpql9pq0tb.__unittest_L38_C1()\
    \ [0x427f9a]\\n??:? void tmpql9pq0tb.__modtest() [0x428200]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bce6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430739]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430be8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcbd]\\n??:? runModuleUnitTests [0x42cc29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428853]\\n??:? _d_run_main [0x4287be]\\n??:? main [0x428213]\\\
    n??:? __libc_start_main [0x5a95b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result;\n    foreach(i; x)\n    {\n        if(i % 2 == 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq8xdoyv4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpq8xdoyv4.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpq8xdoyv4.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x287cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprg3nl_6v.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmprg3nl_6v.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmprg3nl_6v.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x9acb4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n     \
    \       {\n                is_unique = false;\n                break;\n      \
    \      }\n            i /= 10;\n        }\n        if(is_unique)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpahgs3r0r.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmpahgs3r0r.__unittest_L37_C1()\
    \ [0x427f8e]\\n??:? void tmpahgs3r0r.__modtest() [0x4281f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cea7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd3a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430885]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430811]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd11]\\n??:? runModuleUnitTests [0x42cc7d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884b]\\n??:? _d_run_main [0x4287b6]\\n??:? main [0x428207]\\\
    n??:? __libc_start_main [0xcabdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6r8hmao_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp6r8hmao_.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp6r8hmao_.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x6743e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result;\n    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp380tamar.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmp380tamar.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmp380tamar.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0xb752d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptzkqpcl8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmptzkqpcl8.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmptzkqpcl8.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xb458f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpli2v0qnq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpli2v0qnq.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpli2v0qnq.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xab656554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isUnique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    isUnique = false;\n                    break;\n\
    \                }\n            }\n            if(isUnique)\n            {\n \
    \               result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprui1v56d.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmprui1v56d.d(27): Error: no property `toString` for type `long`\\n/tmp/tmprui1v56d.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprui1v56d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeje29643.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeje29643.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(num; x)\n    {\n        if(num < 10)\n        {\n\
    \            result ~= num;\n        }\n        else\n        {\n            long\
    \ temp = num;\n            bool is_unique = true;\n            while(temp > 0)\n\
    \            {\n                if(temp % 2 == 0)\n                {\n       \
    \             is_unique = false;\n                    break;\n               \
    \ }\n                temp /= 10;\n            }\n            if(is_unique)\n \
    \           {\n                result ~= num;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi67paxva.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpi67paxva.__unittest_L45_C1()\
    \ [0x427fd6]\\n??:? void tmpi67paxva.__modtest() [0x42823c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430779]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430705]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcfd]\\n??:? runModuleUnitTests [0x42cc69]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42890c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428893]\\n??:? _d_run_main [0x4287fe]\\n??:? main [0x42824f]\\\
    n??:? __libc_start_main [0x8fd7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result;\n    foreach(e; x)\n    {\n        if(e.to!string.canFind(\"2\") ||\
    \ e.to!string.canFind(\"4\") || e.to!string.canFind(\"6\") || e.to!string.canFind(\"\
    8\"))\n        {\n            result ~= e;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3z_ktf9n.d(20): Error: no property `to` for type `long`\\n/tmp/tmp3z_ktf9n.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp3z_ktf9n.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp3z_ktf9n.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z_ktf9n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8_a732mv.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp8_a732mv.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp8_a732mv.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x4b241554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm0ie6q4.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm0ie6q4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpieww_8o8.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieww_8o8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0 && i.toString().count(\"0\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvp6vtv7j.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpvp6vtv7j.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpvp6vtv7j.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpvp6vtv7j.d(20): Error:\
    \ no property `toString` for type `long`\\n/tmp/tmpvp6vtv7j.d(20): Error: no property\
    \ `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvp6vtv7j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0 && i.toString().count(\"0\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7a_y2whu.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp7a_y2whu.d(20): Error: no property `toString` for type `long`\\n/tmp/tmp7a_y2whu.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmp7a_y2whu.d(20): Error:\
    \ no property `toString` for type `long`\\n/tmp/tmp7a_y2whu.d(20): Error: no property\
    \ `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7a_y2whu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0red57zp.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp0red57zp.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmp0red57zp.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x4d55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps5j1rsph.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5j1rsph.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjk1wytnz.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpjk1wytnz.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpjk1wytnz.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x31899554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxuk91hah.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuk91hah.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   is_unique = false;\n                    break;\n         \
    \       }\n            }\n            if(is_unique)\n            {\n         \
    \       result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyel30yk8.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpyel30yk8.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpyel30yk8.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyel30yk8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_unique = false;\n                    break;\n           \
    \     }\n            }\n            if(is_unique)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwt7jiln.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmprwt7jiln.d(27): Error: no property `toString` for type `long`\\n/tmp/tmprwt7jiln.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprwt7jiln.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6raoc93f.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp6raoc93f.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp6raoc93f.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xe2b08554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvq2yv00p.d(25): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvq2yv00p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphl5ooda8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmphl5ooda8.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmphl5ooda8.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x39f9d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        bool hasEven =\
    \ false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n      \
    \      {\n                hasEven = true;\n                break;\n          \
    \  }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxi7bah66.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmpxi7bah66.__unittest_L37_C1()\
    \ [0x427f8e]\\n??:? void tmpxi7bah66.__modtest() [0x4281f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cea7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd3a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430885]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430811]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd11]\\n??:? runModuleUnitTests [0x42cc7d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884b]\\n??:? _d_run_main [0x4287b6]\\n??:? main [0x428207]\\\
    n??:? __libc_start_main [0xd830b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdxghlho0.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxghlho0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            continue;\n        }\n        else\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_twpmg5.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpn_twpmg5.__unittest_L31_C1()\
    \ [0x427f5e]\\n??:? void tmpn_twpmg5.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x1b0f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length; i++)\n\
    \    {\n        if (x[i] % 2 != 0)\n        {\n            y[j] = x[i];\n    \
    \        j++;\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxpjs2xr2.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmpxpjs2xr2.__unittest_L29_C1()\
    \ [0x427f8a]\\n??:? void tmpxpjs2xr2.__modtest() [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x1948a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_0tiatve.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp_0tiatve.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp_0tiatve.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xd5c6c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp596pj6zr.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp596pj6zr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyerofvh2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpyerofvh2.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpyerofvh2.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x63e8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl1g8g5o6.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpl1g8g5o6.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpl1g8g5o6.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpl1g8g5o6.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpl1g8g5o6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfz1au03j.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpfz1au03j.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpfz1au03j.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x844af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ik0_cz4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp7ik0_cz4.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp7ik0_cz4.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x4229b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    for (long i = 0; i < x.length; i++)\n    {\n    \
    \    if (x[i] % 2 != 0)\n        {\n            result ~= x[i];\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt4nduu9a.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpt4nduu9a.__unittest_L27_C1()\
    \ [0x427f82]\\n??:? void tmpt4nduu9a.__modtest() [0x4281e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430875]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd75]\\n??:? runModuleUnitTests [0x42cce1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281fb]\\\
    n??:? __libc_start_main [0x5f1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.to!string.countif!(\"\
    a == '2' || a == '4' || a == '6' || a == '8' || a == '0'\") == 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2xjyq5a.d(20): Error: no property `to` for type `long`\\n/tmp/tmpj2xjyq5a.d(25):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpj2xjyq5a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51_rlhii.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp51_rlhii.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp51_rlhii.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp51_rlhii.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_unique = false;\n                    break;\n           \
    \     }\n            }\n            if(is_unique)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl1lp3pza.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpl1lp3pza.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpl1lp3pza.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpl1lp3pza.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   is_unique = false;\n                    break;\n         \
    \       }\n            }\n            if(is_unique)\n            {\n         \
    \       result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_bra88y0.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp_bra88y0.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp_bra88y0.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_bra88y0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqezucu4l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpqezucu4l.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpqezucu4l.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x3b49554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe7a5r_9d.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpe7a5r_9d.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7a5r_9d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1hpf0rj3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp1hpf0rj3.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp1hpf0rj3.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x23a45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpri1l6nnf.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpri1l6nnf.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpri1l6nnf.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x38f4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n\
    \            result ~= i;\n        }\n        else\n        {\n            bool\
    \ is_unique = true;\n            while(i > 0)\n            {\n               \
    \ if(i % 2 == 0)\n                {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if(is_unique)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbz0oskbt.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284b5]\\n??:? void tmpbz0oskbt.__unittest_L44_C1()\
    \ [0x427fce]\\n??:? void tmpbz0oskbt.__modtest() [0x428234]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430771]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428904]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888b]\\n??:? _d_run_main [0x4287f6]\\n??:? main [0x428247]\\\
    n??:? __libc_start_main [0xed212554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            continue;\n        }\n        else\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmebkka83.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpmebkka83.__unittest_L31_C1()\
    \ [0x427f5e]\\n??:? void tmpmebkka83.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xdb454554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x)\n    {\n        if(num < 10)\n  \
    \      {\n            result ~= num;\n        }\n        else\n        {\n   \
    \         bool isUnique = true;\n            long temp = num;\n            while(temp\
    \ > 0)\n            {\n                if(temp % 2 == 0)\n                {\n\
    \                    isUnique = false;\n                    break;\n         \
    \       }\n                temp /= 10;\n            }\n            if(isUnique)\n\
    \            {\n                result ~= num;\n            }\n        }\n   \
    \ }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp0_hwbm9.d(43): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0_hwbm9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpim8gam75.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpim8gam75.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpim8gam75.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x187c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    int[]\
    \ evens = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(num; x)\n   \
    \ {\n        bool hasEven = false;\n        foreach(digit; num.toString())\n \
    \       {\n            if(evens.canFind(digit.to!int))\n            {\n      \
    \          hasEven = true;\n                break;\n            }\n        }\n\
    \        if(!hasEven)\n        {\n            result ~= num;\n        }\n    }\n\
    \    return result.sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv13q5lfj.d(22): Error: no property `toString` for type `long`\\\
    n/tmp/tmpv13q5lfj.d(35): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv13q5lfj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppwwiwq8i.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmppwwiwq8i.d(27): Error: no property `toString` for type `long`\\n/tmp/tmppwwiwq8i.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppwwiwq8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqd6t__jp.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpqd6t__jp.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd6t__jp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9j9t8e30.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp9j9t8e30.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmp9j9t8e30.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x9ecda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9hnpckq.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmph9hnpckq.d(20): Error: no property `toString` for type `long`\\n/tmp/tmph9hnpckq.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmph9hnpckq.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmph9hnpckq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n \
    \   {\n        if(i < 10)\n        {\n            result[count] = i;\n       \
    \     count++;\n        }\n        else\n        {\n            long temp = i;\n\
    \            bool isUnique = true;\n            while(temp > 0)\n            {\n\
    \                if(temp % 2 == 0)\n                {\n                    isUnique\
    \ = false;\n                    break;\n                }\n                temp\
    \ /= 10;\n            }\n            if(isUnique)\n            {\n           \
    \     result[count] = i;\n                count++;\n            }\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr13iq_yd.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284e5]\\n??:? void tmpr13iq_yd.__unittest_L48_C1()\
    \ [0x427ffe]\\n??:? void tmpr13iq_yd.__modtest() [0x428264]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c59f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b432]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430649]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b409]\\n??:? runModuleUnitTests [0x42c375]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42892f]\\n??:? _d_run_main [0x42889a]\\n??:? main [0x428277]\\\
    n??:? __libc_start_main [0x23bfc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxidv689.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpuxidv689.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxidv689.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgn0nhx6h.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpgn0nhx6h.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpgn0nhx6h.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgn0nhx6h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9q1696i.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpf9q1696i.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9q1696i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1yq0o4t6.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yq0o4t6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ y = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n     \
    \       y ~= i;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0c327wb.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0c327wb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x)\n    {\n        if(num.to!string.length\
    \ == 1)\n        {\n            result ~= num;\n        }\n        else\n    \
    \    {\n            bool even = false;\n            foreach(digit; num.to!string)\n\
    \            {\n                if(digit.to!long % 2 == 0)\n                {\n\
    \                    even = true;\n                    break;\n              \
    \  }\n            }\n            if(!even)\n            {\n                result\
    \ ~= num;\n            }\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_7hedvi.d(20): Error: no property `to` for type `long`\\n/tmp/tmp1_7hedvi.d(27):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp1_7hedvi.d(41): Error: no\
    \ property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1_7hedvi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 == 1))\n            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmez5lrvu.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmpmez5lrvu.d(23): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmez5lrvu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptchlti2b.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmptchlti2b.d(20): Error: no property `toString` for type `long`\\n/tmp/tmptchlti2b.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmptchlti2b.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmptchlti2b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    int[]\
    \ even = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(num; x)\n    {\n\
    \        bool isEven = false;\n        while(num > 0)\n        {\n           \
    \ if(even.canFind(num % 10))\n            {\n                isEven = true;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if(!isEven)\n            result ~= num;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm8q3h4jp.d(24): Error: no property `canFind` for type `int[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8q3h4jp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjuzic7v.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjuzic7v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.toDigit % 2 == 0)\n        \
    \        {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9ohf8sdg.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp9ohf8sdg.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp9ohf8sdg.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp9ohf8sdg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool hasEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   hasEven = true;\n                    break;\n            \
    \    }\n            }\n            if(!hasEven)\n            {\n             \
    \   result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqw6nfypi.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpqw6nfypi.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpqw6nfypi.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpqw6nfypi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf1tzb_z1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpf1tzb_z1.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpf1tzb_z1.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xc7084554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().all!(a\
    \ => a.toString().to!long % 2 != 0))\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvwcladsf.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpvwcladsf.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwcladsf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_unique = false;\n                    break;\n           \
    \     }\n            }\n            if(is_unique)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmper3a9ei9.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmper3a9ei9.d(27): Error: no property `toString` for type `long`\\n/tmp/tmper3a9ei9.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmper3a9ei9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0az41n6.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmpu0az41n6.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0az41n6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp42g151xi.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42g151xi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd1qpne8s.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpd1qpne8s.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpd1qpne8s.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xbf99554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsqxuqo43.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpsqxuqo43.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpsqxuqo43.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsqxuqo43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfppwjnxb.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfppwjnxb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpstzzou_7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpstzzou_7.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpstzzou_7.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xc43b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool even = false;\n            foreach(char j; i.toString())\n\
    \            {\n                if(j.to!long % 2 == 0)\n                {\n  \
    \                  even = true;\n                    break;\n                }\n\
    \            }\n            if(!even)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    result.sort;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02uv8ult.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp02uv8ult.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp02uv8ult.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp02uv8ult.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0ysah7l.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0ysah7l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long num; x)\n    {\n        bool is_unique\
    \ = true;\n        while(num > 0)\n        {\n            if(num % 2 == 0)\n \
    \           {\n                is_unique = false;\n                break;\n  \
    \          }\n            num /= 10;\n        }\n        if(is_unique)\n     \
    \   {\n            result ~= num;\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzl74jn4n.d(35): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzl74jn4n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.to!string.length ==\
    \ 1)\n        {\n            result ~= i;\n        }\n        else\n        {\n\
    \            bool isUnique = true;\n            foreach(char c; i.to!string)\n\
    \            {\n                if(c.isDigit)\n                {\n           \
    \         if(c.to!int % 2 == 0)\n                    {\n                     \
    \   isUnique = false;\n                        break;\n                    }\n\
    \                }\n            }\n            if(isUnique)\n            {\n \
    \               result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zauzd43.d(20): Error: no property `to` for type `long`\\n/tmp/tmp6zauzd43.d(27):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp6zauzd43.d(44): Error: no\
    \ property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp6zauzd43.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhf0l4x2.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpvhf0l4x2.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpvhf0l4x2.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvhf0l4x2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            continue;\n        }\n        else\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpln8p9oti.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpln8p9oti.__unittest_L31_C1()\
    \ [0x427f5e]\\n??:? void tmpln8p9oti.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x73e05554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2oc4_bt.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpy2oc4_bt.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2oc4_bt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.to!string.length ==\
    \ 1)\n        {\n            result ~= i;\n        }\n        else\n        {\n\
    \            bool is_even = false;\n            foreach(char c; i.to!string)\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_even = true;\n                    break;\n              \
    \  }\n            }\n            if(!is_even)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01e_lq7q.d(20): Error: no property `to` for type `long`\\n/tmp/tmp01e_lq7q.d(27):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp01e_lq7q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool isEven = false;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int() % 2 == 0)\n                {\n \
    \                   isEven = true;\n                    break;\n             \
    \   }\n            }\n            if(!isEven)\n            {\n               \
    \ result ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuosspo46.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpuosspo46.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpuosspo46.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuosspo46.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo23g1q33.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpo23g1q33.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpo23g1q33.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xa6a57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl13jejw6.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpl13jejw6.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl13jejw6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpegfcdypg.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpegfcdypg.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpegfcdypg.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x48f1c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        bool hasEven = false;\n\
    \        foreach(char c; to!string(i))\n        {\n            if(c == '0' ||\
    \ c == '2' || c == '4' || c == '6' || c == '8')\n            {\n             \
    \   hasEven = true;\n                break;\n            }\n        }\n      \
    \  if(!hasEven)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfpgqpcox.d(21): Error: template instance `to!string` template\
    \ `to` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpgqpcox.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5yg_e3z8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp5yg_e3z8.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmp5yg_e3z8.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x4b300554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(num; x) \n    {\n        bool isUnique =\
    \ true;\n        while(num > 0) \n        {\n            if(num % 2 == 0) \n \
    \           {\n                isUnique = false;\n                break;\n   \
    \         }\n            num /= 10;\n        }\n        if(isUnique) \n      \
    \  {\n            result ~= num;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu6vd7c32.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmpu6vd7c32.__unittest_L37_C1()\
    \ [0x427f8e]\\n??:? void tmpu6vd7c32.__modtest() [0x4281f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cea7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd3a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430885]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430811]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd11]\\n??:? runModuleUnitTests [0x42cc7d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884b]\\n??:? _d_run_main [0x4287b6]\\n??:? main [0x428207]\\\
    n??:? __libc_start_main [0x9fc3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp81pb_hp1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp81pb_hp1.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp81pb_hp1.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x73bb6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long num; x)\n    {\n        if(num % 2 !=\
    \ 0)\n        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkyulqwt5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpkyulqwt5.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpkyulqwt5.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x6b0b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61if2hsx.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61if2hsx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4q6fgrz5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp4q6fgrz5.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp4q6fgrz5.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x83382554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n\
    \            bool flag = true;\n            foreach(char c; i.toString())\n  \
    \          {\n                if(c.isDigit && c.to!int % 2 == 0)\n           \
    \     {\n                    flag = false;\n                    break;\n     \
    \           }\n            }\n            if(flag)\n            {\n          \
    \      res ~= i;\n            }\n        }\n    }\n    return res.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1lzvtky4.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp1lzvtky4.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp1lzvtky4.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1lzvtky4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            res ~= i;\n     \
    \   }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89xqsl13.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp89xqsl13.d(20): Error: no property `toString` for type `long`\\n/tmp/tmp89xqsl13.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmp89xqsl13.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp89xqsl13.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2g68aax9.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2g68aax9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplcvo0hl_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmplcvo0hl_.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmplcvo0hl_.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xb0877554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a\
    \ % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprrjbgdq.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmpprrjbgdq.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprrjbgdq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n      \
    \  {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk3xz8f1s.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpk3xz8f1s.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpk3xz8f1s.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xaf106554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    auto\
    \ result = [];\n    foreach(num; x)\n    {\n        auto is_unique = true;\n \
    \       foreach(digit; num.to!string)\n        {\n            if(digit.to!long\
    \ % 2 == 0)\n            {\n                is_unique = false;\n             \
    \   break;\n            }\n        }\n        if(is_unique)\n        {\n     \
    \       result ~= num;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppzi3477f.d(21): Error: no property `to` for type `long`\\n/tmp/tmppzi3477f.d(31):\
    \ Error: cannot append type `long` to type `void[]`\\n/tmp/tmppzi3477f.d(34):\
    \ Error: no property `sort` for type `void[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmppzi3477f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyppjxaky.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpyppjxaky.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpyppjxaky.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x6ed19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        bool is_unique\
    \ = true;\n        foreach(char c; to!string(i))\n        {\n            if(c\
    \ % 2 == 0)\n            {\n                is_unique = false;\n             \
    \   break;\n            }\n        }\n        if(is_unique)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01f1hjnp.d(21): Error: template instance `to!string` template\
    \ `to` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01f1hjnp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] < 10)\n        {\n            result[j] = x[i];\n\
    \            j++;\n        }\n        else\n        {\n            long temp =\
    \ x[i];\n            bool flag = true;\n            while (temp > 0)\n       \
    \     {\n                if (temp % 2 == 0)\n                {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \         temp /= 10;\n            }\n            if (flag)\n            {\n \
    \               result[j] = x[i];\n                j++;\n            }\n     \
    \   }\n    }\n    long[] final_result = new long[j];\n    for (int i = 0; i <\
    \ j; i++)\n    {\n        final_result[i] = result[i];\n    }\n    return final_result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvg0kq_n7.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285b5]\\n??:? void tmpvg0kq_n7.__unittest_L53_C1()\
    \ [0x4280d2]\\n??:? void tmpvg0kq_n7.__modtest() [0x428338]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c66f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b502]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43078d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430719]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4d9]\\n??:? runModuleUnitTests [0x42c445]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289ff]\\n??:? _d_run_main [0x42896a]\\n??:? main [0x42834b]\\\
    n??:? __libc_start_main [0x1f6ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool flag = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.toDigit % 2 == 0)\n        \
    \        {\n                    flag = false;\n                    break;\n  \
    \              }\n            }\n            if(flag)\n            {\n       \
    \         result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4wjlowau.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp4wjlowau.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp4wjlowau.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4wjlowau.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjmipuoap.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmipuoap.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgz9p_oev.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgz9p_oev.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.to!int % 2 == 0)\n                {\n   \
    \                 is_unique = false;\n                    break;\n           \
    \     }\n            }\n            if(is_unique)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87ambukv.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp87ambukv.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp87ambukv.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp87ambukv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vhcv5z0.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vhcv5z0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n \
    \   {\n        if(i % 2 != 0)\n        {\n            result[count] = i;\n   \
    \         count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3nrpjz6b.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmp3nrpjz6b.__unittest_L29_C1()\
    \ [0x427f86]\\n??:? void tmp3nrpjz6b.__modtest() [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x2d33f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        long temp = i;\n\
    \        bool flag = true;\n        while(temp > 0)\n        {\n            if(temp\
    \ % 2 == 0)\n            {\n                flag = false;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if(flag)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn6307gxb.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428475]\\n??:? void tmpn6307gxb.__unittest_L38_C1()\
    \ [0x427f92]\\n??:? void tmpn6307gxb.__modtest() [0x4281f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cea7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd3a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430885]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430811]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd11]\\n??:? runModuleUnitTests [0x42cc7d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42884b]\\n??:? _d_run_main [0x4287b6]\\n??:? main [0x42820b]\\\
    n??:? __libc_start_main [0x2d595554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyfje0lym.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfje0lym.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = [];\n    foreach(long num; x)\n    {\n        if(num.toString.length\
    \ == 1)\n        {\n            result ~= num;\n        }\n        else\n    \
    \    {\n            bool is_unique = true;\n            foreach(char c; num.toString)\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= num;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1vps60y.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpe1vps60y.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpe1vps60y.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpe1vps60y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        bool hasEven =\
    \ false;\n        foreach(char c; to!string(i))\n        {\n            if(c ==\
    \ '0' || c == '2' || c == '4' || c == '6' || c == '8')\n            {\n      \
    \          hasEven = true;\n                break;\n            }\n        }\n\
    \        if(!hasEven)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2z5aj9h.d(21): Error: template instance `to!string` template\
    \ `to` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2z5aj9h.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n    >>>\
    \ unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152,\
    \ 323, 1422, 10])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz5y7hn0y.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpz5y7hn0y.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpz5y7hn0y.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xe6a47554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
