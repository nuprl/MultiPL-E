name: HumanEval_96_count_up_to
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes\
  \ an non-negative integer and returns an array of the first n\n    integers that\
  \ are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n\
  \    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20)\
  \ => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\
  \    \n*/\nlong[] count_up_to(long n) \n"
tests: "unittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L)\
  \ == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L)\
  \ == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L)\
  \ == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n\
  \    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L,\
  \ 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
  \ 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L,\
  \ 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L,\
  \ 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result;\n    if (n <= 1)\n        return result;\n  \
    \  foreach (i; 2..n)\n    {\n        if (isPrime(i))\n            result ~= i;\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    if (n <= 1)\n    \
    \    return result;\n    else\n    {\n        result ~= 2;\n        for (long\
    \ i = 3; i < n; i += 2)\n        {\n            bool isPrime = true;\n       \
    \     for (long j = 3; j <= sqrt(i); j += 2)\n            {\n                if\
    \ (i % j == 0)\n                {\n                    isPrime = false;\n    \
    \                break;\n                }\n            }\n            if (isPrime)\n\
    \                result ~= i;\n        }\n        return result;\n    }\n}", "{\n\
    \    long[] result;\n    if (n == 0)\n        return result;\n    foreach (i;\
    \ 1..n)\n    {\n        if (isPrime(i))\n            result ~= i;\n    }\n   \
    \ return result;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return\
    \ result;\n    for (long i = 2; i < n; i++)\n    {\n        bool is_prime = true;\n\
    \        for (long j = 2; j < i; j++)\n        {\n            if (i % j == 0)\n\
    \            {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n        if (is_prime)\n            result ~= i;\n   \
    \ }\n    return result;\n}", "{\n    long[] res;\n    if (n < 2) return res;\n\
    \    res ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j <= sqrt(i); j++)\n        {\n          \
    \  if (i % j == 0)\n            {\n                isPrime = false;\n        \
    \        break;\n            }\n        }\n        if (isPrime) res ~= i;\n  \
    \  }\n    return res;\n}", "{\n    long[] result;\n    if (n < 2)\n        return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n    \
    \    bool isPrime = true;\n        foreach (long prime; result)\n        {\n \
    \           if (i % prime == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n;\
    \ i += 2)\n    {\n        bool isPrime = true;\n        foreach (long j; result)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (n <= 1)\n        return result;\n    else\n    {\n        result ~= 2;\n\
    \        for (long i = 3; i < n; i += 2)\n        {\n            bool isPrime\
    \ = true;\n            for (long j = 3; j < i; j += 2)\n            {\n      \
    \          if (i % j == 0)\n                {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n                result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n < 2) \n    {\n        return result;\n \
    \   }\n    result ~= 2;\n    for (long i = 3; i < n; i += 2) \n    {\n       \
    \ if (isPrime(i)) \n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] primes;\n    if (n < 2) \n    {\n      \
    \  return primes;\n    }\n    else \n    {\n        primes ~= 2;\n        foreach\
    \ (i; 3..n) \n        {\n            bool isPrime = true;\n            foreach\
    \ (j; primes) \n            {\n                if (i % j == 0) \n            \
    \    {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) \n            {\n   \
    \             primes ~= i;\n            }\n        }\n        return primes;\n\
    \    }\n}", "{\n    long[] result;\n    if (n <= 1)\n        return result;\n\
    \    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime\
    \ = true;\n        for (long j = 3; j < i; j += 2)\n        {\n            if\
    \ (i % j == 0)\n            {\n                isPrime = false;\n            \
    \    break;\n            }\n        }\n        if (isPrime)\n            result\
    \ ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if (n <= 1)\
    \ \n    {\n        return result;\n    }\n    result ~= 2;\n    for (long i =\
    \ 3; i < n; i += 2) \n    {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j < sqrt(i) + 1; j += 2) \n        {\n            if (i % j == 0) \n\
    \            {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n        if (is_prime) \n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] primes;\n  \
    \  foreach(i; 1..n)\n    {\n        if(isPrime(i))\n        {\n            primes\
    \ ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[] primes = new\
    \ long[];\n    for (long i = 2; i < n; i++)\n    {\n        if (isPrime(i))\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] primes;\n    if (n < 2)\n        return primes;\n    primes ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n  \
    \      for (long j = 0; j < primes.length; j++)\n        {\n            if (i\
    \ % primes[j] == 0)\n            {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if (isPrime)\n           \
    \ primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] result;\n    if\
    \ (n <= 1)\n        return result;\n    result ~= 2;\n    for (long i = 3; i <\
    \ n; i += 2)\n    {\n        bool isPrime = true;\n        for (long j = 3; j\
    \ <= sqrt(i); j += 2)\n        {\n            if (i % j == 0)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] primes = new long[];\n    if (n < 2) return primes;\n    foreach\
    \ (i; 2 .. n)\n    {\n        if (isPrime(i))\n        {\n            primes ~=\
    \ i;\n        }\n    }\n    return primes;\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 2..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] primes = new long[];\n\
    \    if (n <= 1) return primes;\n    foreach (i; 2 .. n)\n    {\n        if (isPrime(i))\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n <= 1) return result;\n    foreach (i; 2 .. n)\n\
    \    {\n        if (i.isPrime)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    foreach(i; 0..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    for (long i = 2; i\
    \ < n; i++)\n    {\n        bool isPrime = true;\n        for (long j = 2; j <\
    \ i; j++)\n        {\n            if (i % j == 0)\n            {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return\
    \ result;\n    else\n    {\n        for (long i = 2; i < n; i++)\n        {\n\
    \            bool isPrime = true;\n            for (long j = 2; j <= sqrt(i);\
    \ j++)\n            {\n                if (i % j == 0)\n                {\n  \
    \                  isPrime = false;\n                    break;\n            \
    \    }\n            }\n            if (isPrime)\n                result ~= i;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] result;\n    if\
    \ (n <= 1)\n        return result;\n    else\n    {\n        result ~= 2;\n  \
    \      foreach (i; 3..n)\n        {\n            bool isPrime = true;\n      \
    \      foreach (j; 2..i)\n            {\n                if (i % j == 0)\n   \
    \             {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime)\n                result\
    \ ~= i;\n        }\n        return result;\n    }\n}", "{\n    long[] result;\n\
    \    if (n <= 1)\n        return result;\n    else\n    {\n        result ~= 2;\n\
    \        foreach (i; 3..n)\n        {\n            bool isPrime = true;\n    \
    \        foreach (j; 2..i)\n            {\n                if (i % j == 0)\n \
    \               {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime)\n                result\
    \ ~= i;\n        }\n        return result;\n    }\n}", "{\n    long[] primes =\
    \ [];\n    if (n < 2)\n        return primes;\n    primes ~= 2;\n    for (long\
    \ i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n        foreach\
    \ (long prime; primes)\n        {\n            if (i % prime == 0)\n         \
    \   {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime)\n            primes ~= i;\n    }\n    return\
    \ primes;\n}", "{\n    long[] primes = new long[];\n    for (long i = 2; i < n;\
    \ i++)\n    {\n        if (isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 0..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] primes = new long[];\n\
    \    for (long i = 2; i < n; i++) \n    {\n        if (isPrime(i)) \n        {\n\
    \            primes ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[]\
    \ result;\n    foreach(i;0..n)\n    {\n        if(isPrime(i))\n        {\n   \
    \         result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ primes = new long[];\n    if (n < 2)\n        return primes;\n    foreach (i;\
    \ 2 .. n)\n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] res;\n\
    \    long i;\n    if (n <= 1)\n        return res;\n    res ~= 2;\n    for (i\
    \ = 3; i < n; i += 2)\n    {\n        if (isPrime(i))\n            res ~= i;\n\
    \    }\n    return res;\n}", "{\n    long[] result;\n    if (n < 2)\n        return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n    \
    \    bool isPrime = true;\n        foreach (long j; result)\n        {\n     \
    \       if (i % j == 0)\n            {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if (isPrime)\n       \
    \     result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  foreach(i; 0..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] primes = new\
    \ long[];\n    if (n < 2) return primes;\n    primes ~= 2;\n    for (long i =\
    \ 3; i < n; i += 2) \n    {\n        bool isPrime = true;\n        foreach (long\
    \ prime; primes) \n        {\n            if (i % prime == 0) \n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) primes ~= i;\n    }\n    return primes;\n}", "{\n\
    \    long[] result;\n    if (n <= 1)\n        return result;\n    for (long i\
    \ = 2; i < n; i++) \n    {\n        if (isPrime(i))\n            result ~= i;\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    if (n == 0)\n    \
    \    return result;\n    else if (n == 1)\n        return result;\n    else\n\
    \    {\n        result ~= 2;\n        for (long i = 3; i < n; i++)\n        {\n\
    \            bool isPrime = true;\n            for (long j = 2; j < i; j++)\n\
    \            {\n                if (i % j == 0)\n                {\n         \
    \           isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime)\n                result ~= i;\n     \
    \   }\n        return result;\n    }\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 0..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] result;\n    foreach(i;\
    \ 0..n)\n    {\n        if(isPrime(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] res;\n    if (n <= 1)\n\
    \        return res;\n    res ~= 2;\n    for (long i = 3; i < n; i += 2)\n   \
    \ {\n        if (isPrime(i))\n            res ~= i;\n    }\n    return res;\n}",
  "{\n    long[] result;\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] primes = new long[];\n    if (n <= 1)\n        return primes;\n \
    \   for (long i = 2; i < n; i++)\n    {\n        bool isPrime = true;\n      \
    \  foreach (long j; primes)\n        {\n            if (i % j == 0)\n        \
    \    {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime)\n            primes ~= i;\n    }\n    return\
    \ primes;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return result;\n\
    \    else\n    {\n        result ~= 2;\n        for (long i = 3; i < n; i += 2)\n\
    \        {\n            bool isPrime = true;\n            for (long j = 2; j <=\
    \ cast(long)sqrt(i); j++)\n            {\n                if (i % j == 0)\n  \
    \              {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime)\n                result\
    \ ~= i;\n        }\n        return result;\n    }\n}", "{\n    long[] result;\n\
    \    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n\
    \    for (long i = 2; i < n; i++)\n    {\n        if (isPrime(i))\n          \
    \  result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n    foreach(i;\
    \ 0..n)\n    {\n        if(isPrime(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result;\n    if (n <\
    \ 2)\n        return result;\n    result ~= 2;\n    for (long i = 3; i < n; i\
    \ += 2)\n    {\n        bool isPrime = true;\n        foreach (long j; result)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n < 2) return result;\n    result ~= 2;\n    foreach (i; 3..n) \n    {\n\
    \        bool isPrime = true;\n        foreach (j; 2..i) \n        {\n       \
    \     if (i % j == 0) \n            {\n                isPrime = false;\n    \
    \            break;\n            }\n        }\n        if (isPrime) \n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] primes = new long[];\n    if (n < 2) return primes;\n    foreach (i;\
    \ 2 .. n) \n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i) \n\
    \        {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ \n        {\n            primes ~= i;\n        }\n    }\n    return primes;\n\
    }", "{\n    long[] primes = new long[];\n    if (n < 2) \n    {\n        return\
    \ primes;\n    }\n    else \n    {\n        primes ~= 2;\n        for (long i\
    \ = 3; i < n; i += 2) \n        {\n            bool isPrime = true;\n        \
    \    foreach (long prime; primes) \n            {\n                if (i % prime\
    \ == 0) \n                {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ \n            {\n                primes ~= i;\n            }\n        }\n  \
    \      return primes;\n    }\n}", "{\n    long[] result = [];\n    if (n < 2)\n\
    \        return result;\n    for (long i = 2; i < n; i++)\n    {\n        bool\
    \ isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++)\n        {\n  \
    \          if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ [];\n    if (n < 2)\n        return result;\n    foreach (i; 2..n)\n    {\n\
    \        if (isPrime(i))\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n < 2)\n        return result;\n    result\
    \ ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n\
    \        for (long j = 3; j <= sqrt(i); j += 2)\n        {\n            if (i\
    \ % j == 0)\n            {\n                isPrime = false;\n               \
    \ break;\n            }\n        }\n        if (isPrime)\n            result ~=\
    \ i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if (n <= 1) return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n    \
    \    bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j += 2)\n  \
    \      {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    long i;\n    long j;\n    long isPrime;\n    for (i = 2; i < n; i++) \n \
    \   {\n        isPrime = 1;\n        for (j = 2; j <= i / 2; j++) \n        {\n\
    \            if (i % j == 0) \n            {\n                isPrime = 0;\n \
    \               break;\n            }\n        }\n        if (isPrime == 1) \n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    if (n <= 1) return result;\n    foreach (i; 2 ..\
    \ n) \n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i) \n   \
    \     {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ result ~= i;\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    if (n < 2)\n        return result;\n    for (long i = 2; i < n; i++)\n  \
    \  {\n        bool isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] res;\n\
    \    if (n < 2) return res;\n    res ~= 2;\n    for (long i = 3; i < n; i += 2)\n\
    \    {\n        bool isPrime = true;\n        foreach (long j; res)\n        {\n\
    \            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) res ~=\
    \ i;\n    }\n    return res;\n}", "{\n    long[] result = [];\n    if (n < 2)\n\
    \        return result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n\
    \    {\n        bool isPrime = true;\n        foreach (long j; result)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n < 2) \n    {\n        return result;\n    }\n    result ~= 2;\n    for\
    \ (long i = 3; i < n; i += 2) \n    {\n        if (isPrime(i)) \n        {\n \
    \           result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ primes = new long[];\n    if (n < 2) return primes;\n    foreach (i; 2 .. n)\
    \ \n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i) \n      \
    \  {\n            if (i % j == 0) \n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) primes\
    \ ~= i;\n    }\n    return primes;\n}", "{\n    long[] primes = new long[];\n\
    \    for (long i = 2; i < n; i++) \n    {\n        bool isPrime = true;\n    \
    \    for (long j = 2; j <= sqrt(i); j++) \n        {\n            if (i % j ==\
    \ 0) \n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) \n        {\n            primes\
    \ ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[] result;\n  \
    \  if (n <= 1)\n        return result;\n    long i = 2;\n    while (i < n)\n \
    \   {\n        if (isPrime(i))\n            result ~= i;\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n    \
    \    bool isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    foreach(i; 2..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n <= 1)\n        return result;\n    if (n == 2)\n        return [2];\n\
    \    foreach (i; 2..n)\n    {\n        bool isPrime = true;\n        foreach (j;\
    \ 2..i)\n        {\n            if (i % j == 0 && i != j)\n            {\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n == 0)\n        return result;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        bool isPrime = true;\n        for (long j\
    \ = 2; j <= i / 2; j++)\n        {\n            if (i % j == 0)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n <= 1)\n        return result;\n    else\n\
    \    {\n        result ~= 2;\n        for (long i = 3; i < n; i += 2)\n      \
    \  {\n            bool isPrime = true;\n            for (long j = 2; j <= sqrt(i);\
    \ j++)\n            {\n                if (i % j == 0)\n                {\n  \
    \                  isPrime = false;\n                    break;\n            \
    \    }\n            }\n            if (isPrime)\n                result ~= i;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] primes = new long[];\n\
    \    if (n > 1) \n    {\n        foreach (i; 2 .. n) \n        {\n           \
    \ bool isPrime = true;\n            foreach (j; 2 .. i) \n            {\n    \
    \            if (i % j == 0) \n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) \n            {\n                primes ~= i;\n       \
    \     }\n        }\n    }\n    return primes;\n}", "{\n    long[] primes = [];\n\
    \    if (n <= 2)\n        return primes;\n    else\n    {\n        primes ~= 2;\n\
    \        for (long i = 3; i < n; i += 2)\n        {\n            bool isPrime\
    \ = true;\n            for (long j = 3; j <= sqrt(i); j += 2)\n            {\n\
    \                if (i % j == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n                primes ~= i;\n        }\n    }\n    return\
    \ primes;\n}", "{\n    long[] result;\n    long i;\n    for (i = 2; i < n; i++)\
    \ \n    {\n        if (isPrime(i)) \n        {\n            result ~= i;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long[] primes = new long[];\n\
    \    if (n < 2) return primes;\n    for (long i = 2; i < n; i++)\n    {\n    \
    \    bool isPrime = true;\n        for (long j = 2; j < i; j++)\n        {\n \
    \           if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \    {\n            primes ~= i;\n        }\n    }\n    return primes;\n}", "{\n\
    \    long[] result;\n    if (n <= 1)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool is_prime = true;\n \
    \       for (long j = 3; j < sqrt(i) + 1; j += 2)\n        {\n            if (i\
    \ % j == 0)\n            {\n                is_prime = false;\n              \
    \  break;\n            }\n        }\n        if (is_prime)\n            result\
    \ ~= i;\n    }\n    return result;\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 1..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] result;\n    if (n <=\
    \ 1)\n        return result;\n    else\n    {\n        result ~= 2;\n        for\
    \ (long i = 3; i < n; i += 2)\n        {\n            bool isPrime = true;\n \
    \           for (long j = 3; j <= sqrt(i); j += 2)\n            {\n          \
    \      if (i % j == 0)\n                {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n                result ~= i;\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] result;\n    if (n < 2) \n    {\n        return result;\n\
    \    }\n    else \n    {\n        result ~= 2;\n        for (long i = 3; i < n;\
    \ i += 2) \n        {\n            bool isPrime = true;\n            for (long\
    \ j = 3; j < i; j += 2) \n            {\n                if (i % j == 0) \n  \
    \              {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) \n            {\n\
    \                result ~= i;\n            }\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        return result;\n    for (long i = 2; i < n; i++)\n \
    \   {\n        if (isPrime(i))\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n < 2)\n        return result;\n    foreach\
    \ (i; 2..n)\n    {\n        if (isPrime(i))\n            result ~= i;\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return\
    \ result;\n    else\n    {\n        result ~= 2;\n        for (long i = 3; i <\
    \ n; i += 2)\n        {\n            bool isPrime = true;\n            for (long\
    \ j = 3; j <= sqrt(i); j += 2)\n            {\n                if (i % j == 0)\n\
    \                {\n                    isPrime = false;\n                   \
    \ break;\n                }\n            }\n            if (isPrime)\n       \
    \         result ~= i;\n        }\n        return result;\n    }\n}", "{\n   \
    \ long[] result;\n    if (n < 2)\n        return result;\n    foreach (i; 2..n)\n\
    \    {\n        if (isPrime(i))\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n <= 1)\n        return result;\n    else\n\
    \    {\n        result ~= 2;\n        for (long i = 3; i < n; i++)\n        {\n\
    \            bool isPrime = true;\n            for (long j = 2; j < i; j++)\n\
    \            {\n                if (i % j == 0)\n                {\n         \
    \           isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime)\n                result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result;\n    foreach(i;2..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    if (n < 2)\n     \
    \   return result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n  \
    \  {\n        bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j +=\
    \ 2)\n        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (n <= 1)\n        return result;\n    else\n    {\n        result ~= 2;\n\
    \        for (long i = 3; i < n; i += 2)\n        {\n            bool isPrime\
    \ = true;\n            for (long j = 2; j <= sqrt(i); j++)\n            {\n  \
    \              if (i % j == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n                result ~= i;\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] result;\n    if (n <= 1)\n        return\
    \ result;\n    result ~= 2;\n    foreach (i; 3..n)\n    {\n        bool isPrime\
    \ = true;\n        foreach (j; 2..sqrt(i))\n        {\n            if (i % j ==\
    \ 0)\n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime)\n            result ~= i;\n  \
    \  }\n    return result;\n}", "{\n    long[] result = [];\n    if (n < 2) \n \
    \   {\n        return result;\n    }\n    result ~= 2;\n    for (long i = 3; i\
    \ < n; i += 2) \n    {\n        bool isPrime = true;\n        for (long j = 3;\
    \ j <= sqrt(i); j += 2) \n        {\n            if (i % j == 0) \n          \
    \  {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) \n        {\n            result ~= i;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] res;\n    long i = 2;\n \
    \   while(i < n)\n    {\n        if(isPrime(i))\n        {\n            res ~=\
    \ i;\n        }\n        i++;\n    }\n    return res;\n}", "{\n    long[] primes;\n\
    \    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n        {\n            primes\
    \ ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[] result;\n  \
    \  if (n < 2)\n        return result;\n    result ~= 2;\n    foreach (i; 3..n)\n\
    \    {\n        bool isPrime = true;\n        foreach (j; result)\n        {\n\
    \            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes =\
    \ [];\n    if (n < 2)\n        return primes;\n    foreach (i; 2 .. n)\n    {\n\
    \        bool isPrime = true;\n        foreach (j; 2 .. i)\n        {\n      \
    \      if (i % j == 0)\n            {\n                isPrime = false;\n    \
    \            break;\n            }\n        }\n        if (isPrime)\n        \
    \    primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] result;\n   \
    \ if (n == 0)\n        return result;\n    else\n    {\n        result = new long[];\n\
    \        for (long i = 2; i < n; i++)\n        {\n            if (isPrime(i))\n\
    \                result ~= i;\n        }\n        return result;\n    }\n}", "{\n\
    \    long[] result;\n    if (n == 0)\n        return result;\n    else if (n ==\
    \ 1)\n        return result;\n    else\n    {\n        result ~= 2;\n        foreach\
    \ (i; 3..n)\n        {\n            if (isPrime(i))\n                result ~=\
    \ i;\n        }\n        return result;\n    }\n}", "{\n    long[] result = [];\n\
    \    if (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n;\
    \ i += 2)\n    {\n        bool isPrime = true;\n        for (long j = 3; j <=\
    \ sqrt(i); j += 2)\n        {\n            if (i % j == 0)\n            {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) result ~= i;\n    }\n    return result;\n}", "{\n\
    \    long[] primes = new long[];\n    if (n < 2) return primes;\n    foreach (i;\
    \ 2 .. n)\n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] primes = new long[];\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] primes;\n    foreach(i; 0..n) \n    {\n        if(isPrime(i))\n \
    \           primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] result;\n\
    \    if (n <= 1)\n        return result;\n    result ~= 2;\n    for (long i =\
    \ 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n        for (long j\
    \ = 3; j < i; j += 2)\n        {\n            if (i % j == 0)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n < 2)\n        return result;\n    //result\
    \ ~= 2;\n    foreach (i; 2..n)\n    {\n        bool isPrime = true;\n        foreach\
    \ (j; 2..i)\n        {\n            if (i % j == 0)\n            {\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if (isPrime)\n            result ~= i;\n    }\n    return result;\n}",
  "{\n    long[] result;\n    if (n > 1)\n    {\n        result ~= 2;\n        foreach\
    \ (i; 3..n)\n        {\n            bool isPrime = true;\n            foreach\
    \ (j; 2..i)\n            {\n                if (i % j == 0)\n                {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime)\n            {\n           \
    \     result ~= i;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] primes;\n    long i;\n    long j;\n    long k;\n    long m;\n    long[]\
    \ result;\n    if (n < 2)\n    {\n        return [];\n    }\n    primes = [2];\n\
    \    for (i = 3; i < n; i++)\n    {\n        k = 0;\n        m = sqrt(i);\n  \
    \      for (j = 0; j < primes.length; j++)\n        {\n            if (primes[j]\
    \ > m)\n            {\n                k = 1;\n                break;\n      \
    \      }\n            if (i % primes[j] == 0)\n            {\n               \
    \ break;\n            }\n        }\n        if (k == 1)\n        {\n         \
    \   primes ~= i;\n        }\n    }\n    return primes;\n}", "{\n    if (n < 2)\
    \ \n        return [];\n    long[] primes = [2];\n    for (long i = 3; i < n;\
    \ i += 2) \n    {\n        bool isPrime = true;\n        foreach (long prime;\
    \ primes) \n        {\n            if (i % prime == 0) \n            {\n     \
    \           isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime) \n            primes ~= i;\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n <= 1)\n        return result;\n    if (n == 2)\n\
    \        return [2];\n    if (n == 3)\n        return [2,3];\n    result ~= 2;\n\
    \    result ~= 3;\n    foreach (i; 4..n)\n    {\n        bool isPrime = true;\n\
    \        foreach (j; 2..i)\n        {\n            if (i % j == 0)\n         \
    \   {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime)\n            result ~= i;\n    }\n    return\
    \ result;\n}", "{\n    long[] result;\n    long i;\n    if (n < 2)\n        return\
    \ result;\n    result ~= 2;\n    for (i = 3; i < n; i += 2)\n    {\n        if\
    \ (isPrime(i))\n            result ~= i;\n    }\n    return result;\n}", "{\n\
    \    long[] result;\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n   \
    \     {\n            result ~= i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result;\n    if (n <= 1)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool is_prime = true;\n \
    \       foreach (long j; result)\n        {\n            if (i % j == 0)\n   \
    \         {\n                is_prime = false;\n                break;\n     \
    \       }\n        }\n        if (is_prime)\n            result ~= i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 1..n)\n \
    \   {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    foreach(i;0..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    if (n <= 1) \n   \
    \ {\n        return result;\n    }\n    else \n    {\n        result ~= 2;\n \
    \       foreach (i; 3..n) \n        {\n            if (isPrime(i)) \n        \
    \    {\n                result ~= i;\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    long[] result;\n    if (n == 0)\n        return\
    \ result;\n    if (n == 1)\n        return result;\n    if (n == 2)\n        return\
    \ [2];\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n       \
    \ bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j += 2)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes;\n\
    \    if (n < 2)\n        return primes;\n    else\n    {\n        primes ~= 2;\n\
    \        for (long i = 3; i < n; i += 2)\n        {\n            bool isPrime\
    \ = true;\n            foreach (long prime; primes)\n            {\n         \
    \       if (i % prime == 0)\n                {\n                    isPrime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (isPrime)\n                primes ~= i;\n        }\n    }\n    return\
    \ primes;\n}", "{\n    long[] result;\n    if (n == 0)\n        return result;\n\
    \    else\n    {\n        result = new long[];\n        foreach (i; 2..n)\n  \
    \      {\n            if (isPrime(i))\n                result ~= i;\n        }\n\
    \        return result;\n    }\n}", "{\n    long[] result = new long[];\n    if\
    \ (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n\
    \    {\n        bool isPrime = true;\n        foreach (long j; result)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) result\
    \ ~= i;\n    }\n    return result;\n}", "{\n    long[] result = [];\n    if (n\
    \ < 2) return result;\n    if (n == 2) return [2];\n    result ~= 2;\n    for\
    \ (long i = 3; i < n; i += 2) \n    {\n        if (isPrime(i)) result ~= i;\n\
    \    }\n    return result;\n}", "{\n    long[] primes;\n    long i;\n    long\
    \ j;\n    long k;\n    if (n < 2)\n    {\n        return [];\n    }\n    primes\
    \ = [2];\n    for (i = 3; i < n; i++)\n    {\n        for (j = 0; j < primes.length;\
    \ j++)\n        {\n            if (i % primes[j] == 0)\n            {\n      \
    \          break;\n            }\n        }\n        if (j == primes.length)\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n < 2) \n    {\n        return result;\n    }\n\
    \    result ~= 2;\n    for (long i = 3; i < n; i += 2) \n    {\n        bool is_prime\
    \ = true;\n        foreach (long j; result) \n        {\n            if (i % j\
    \ == 0) \n            {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) \n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n <= 1) \n    {\n        return result;\n    }\n    else \n    {\n    \
    \    result = new long[];\n        for (long i = 2; i < n; i++) \n        {\n\
    \            if (isPrime(i)) \n            {\n                result ~= i;\n \
    \           }\n        }\n        return result;\n    }\n}", "{\n    long[] result;\n\
    \    if (n < 2)\n        return result;\n    for (long i = 2; i < n; i++)\n  \
    \  {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++)\n   \
    \     {\n            if (i % j == 0)\n            {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes\
    \ = new long[];\n    if (n == 0)\n        return primes;\n    for (long i = 2;\
    \ i < n; i++)\n    {\n        bool isPrime = true;\n        for (long j = 2; j\
    \ <= sqrt(i); j++)\n        {\n            if (i % j == 0)\n            {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime)\n            primes ~= i;\n    }\n    return primes;\n\
    }", "{\n    long[] primes = [];\n    if (n <= 1)\n        return primes;\n   \
    \ foreach (i; 2..n)\n    {\n        bool isPrime = true;\n        foreach (j;\
    \ 2..i)\n        {\n            if (i % j == 0 && i != j)\n            {\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if (isPrime)\n            primes ~= i;\n    }\n    return primes;\n\
    }", "{\n    long[] result = [];\n    if (n < 2) return result;\n    result ~=\
    \ 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n\
    \        foreach (long j; result)\n        {\n            if (i % j == 0)\n  \
    \          {\n                isPrime = false;\n                break;\n     \
    \       }\n        }\n        if (isPrime)\n            result ~= i;\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    if (n == 0)\n        return\
    \ result;\n    if (n == 1)\n        return result;\n    for (long i = 2; i < n;\
    \ i++)\n    {\n        if (isPrime(i))\n            result ~= i;\n    }\n    return\
    \ result;\n}", "{\n    long[] result;\n    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] primes = new long[];\n    if (n < 2) return primes;\n    foreach\
    \ (i; 2 .. n)\n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n == 0) return result;\n    if (n == 1) return result;\n\
    \    if (n == 2) return [2];\n    result ~= 2;\n    for (long i = 3; i < n; i\
    \ += 2) \n    {\n        bool isPrime = true;\n        foreach (long j; result)\
    \ \n        {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes;\n    if\
    \ (n < 2)\n        return primes;\n    else\n    {\n        bool[] isPrime = new\
    \ bool[n];\n        foreach (i; 0 .. n)\n            isPrime[i] = true;\n    \
    \    isPrime[0] = false;\n        isPrime[1] = false;\n        foreach (i; 2 ..\
    \ n)\n        {\n            if (isPrime[i])\n            {\n                for\
    \ (long j = i * i; j < n; j += i)\n                    isPrime[j] = false;\n \
    \           }\n        }\n        foreach (i; 0 .. n)\n        {\n           \
    \ if (isPrime[i])\n                primes ~= i;\n        }\n        return primes;\n\
    \    }\n}", "{\n    long[] result = [];\n    if (n < 2) return result;\n    result\
    \ ~= 2;\n    foreach (i; 3..n) \n    {\n        bool isPrime = true;\n       \
    \ foreach (j; result) \n        {\n            if (i % j == 0) \n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) \n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result;\n    if (n == 0)\n    \
    \    return result;\n    if (n == 1)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i++)\n    {\n        bool isPrime = true;\n     \
    \   for (long j = 2; j < i; j++)\n        {\n            if (i % j == 0)\n   \
    \         {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime)\n            result ~= i;\n    }\n \
    \   return result;\n}", "{\n    long[] result;\n    if (n == 0) \n    {\n    \
    \    return result;\n    }\n    if (n == 1) \n    {\n        return result;\n\
    \    }\n    for (long i = 2; i < n; i++) \n    {\n        if (isPrime(i)) \n \
    \       {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] primes = new long[];\n    if (n <= 1) return primes;\n    foreach\
    \ (i; 2 .. n) \n    {\n        bool isPrime = true;\n        foreach (j; 2 ..\
    \ i) \n        {\n            if (i % j == 0) \n            {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] primes\
    \ = new long[];\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n       \
    \ {\n            primes ~= i;\n        }\n    }\n    return primes;\n}", "{\n\
    \    long[] result = [];\n    if (n < 2) return result;\n    result ~= 2;\n  \
    \  for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n    \
    \    foreach (long j; result)\n        {\n            if (i % j == 0)\n      \
    \      {\n                isPrime = false;\n                break;\n         \
    \   }\n        }\n        if (isPrime) result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] primes = new long[];\n    if (n < 2) return primes;\n    for\
    \ (long i = 2; i < n; i++)\n    {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++)\n        {\n            if (i % j == 0)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime)\n        {\n            primes ~= i;\n        }\n\
    \    }\n    return primes;\n}", "{\n    long[] primes = new long[];\n    foreach(i;\
    \ 1..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] result;\n    if (n ==\
    \ 0)\n        return result;\n    else\n    {\n        result ~= 2;\n        for\
    \ (long i = 3; i < n; i += 2)\n        {\n            bool isPrime = true;\n \
    \           for (long j = 2; j < i; j++)\n            {\n                if (i\
    \ % j == 0)\n                {\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if (isPrime)\n\
    \                result ~= i;\n        }\n        return result;\n    }\n}", "{\n\
    \    long[] primes = new long[];\n    if (n < 2)\n        return primes;\n   \
    \ primes ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime\
    \ = true;\n        foreach (long prime; primes)\n        {\n            if (i\
    \ % prime == 0)\n            {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        if (isPrime)\n            primes\
    \ ~= i;\n    }\n    return primes;\n}", "{\n    long[] result = [];\n    foreach(i;\
    \ 1..n)\n    {\n        if(isPrime(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] prime_numbers = [];\n\
    \    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n        {\n            prime_numbers\
    \ ~= i;\n        }\n    }\n    return prime_numbers;\n}", "{\n    long[] result\
    \ = new long[];\n    if (n < 2)\n        return result;\n    for (long i = 2;\
    \ i < n; i++)\n    {\n        bool isPrime = true;\n        for (long j = 2; j\
    \ <= sqrt(i); j++)\n        {\n            if (i % j == 0)\n            {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n == 0)\n        return result;\n    else\n\
    \    {\n        foreach (i; 2..n)\n        {\n            if (isPrime(i))\n  \
    \              result ~= i;\n        }\n        return result;\n    }\n}", "{\n\
    \    long[] primes = new long[];\n    if (n < 2) return primes;\n    primes ~=\
    \ 2;\n    for (long i = 3; i < n; i += 2) \n    {\n        bool isPrime = true;\n\
    \        foreach (long prime; primes) \n        {\n            if (i % prime ==\
    \ 0) \n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) \n        {\n            primes\
    \ ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[] result = [];\n\
    \    if (n == 0) \n    {\n        return result;\n    }\n    else if (n == 1)\
    \ \n    {\n        return result;\n    }\n    else \n    {\n        for (long\
    \ i = 2; i < n; i++) \n        {\n            if (isPrime(i)) \n            {\n\
    \                result ~= i;\n            }\n        }\n        return result;\n\
    \    }\n}", "{\n    long[] result;\n    if (n < 2)\n        return result;\n \
    \   else\n    {\n        result ~= 2;\n        for (long i = 3; i < n; i += 2)\n\
    \        {\n            bool isPrime = true;\n            for (long j = 3; j <\
    \ i; j += 2)\n            {\n                if (i % j == 0)\n               \
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime)\n                result\
    \ ~= i;\n        }\n        return result;\n    }\n}", "{\n    long[] primes;\n\
    \    foreach(i; 2..n)\n    {\n        if(isPrime(i))\n        {\n            primes\
    \ ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[] result;\n  \
    \  if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n\
    \    result ~= 2;\n    foreach (i; 3..n)\n    {\n        bool isPrime = true;\n\
    \        foreach (j; 2..i)\n        {\n            if (i % j == 0)\n         \
    \   {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime)\n            result ~= i;\n    }\n    return\
    \ result;\n}", "{\n    long[] primes;\n    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n < 2)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n  \
    \      foreach (long j; result)\n        {\n            if (i % j == 0)\n    \
    \        {\n                isPrime = false;\n                break;\n       \
    \     }\n        }\n        if (isPrime)\n            result ~= i;\n    }\n  \
    \  return result;\n}", "{\n    long[] result;\n    if (n < 2)\n        return\
    \ result;\n    else\n    {\n        result ~= 2;\n        for (long i = 3; i <\
    \ n; i += 2)\n        {\n            bool isPrime = true;\n            for (long\
    \ j = 3; j <= sqrt(i); j += 2)\n            {\n                if (i % j == 0)\n\
    \                {\n                    isPrime = false;\n                   \
    \ break;\n                }\n            }\n            if (isPrime)\n       \
    \         result ~= i;\n        }\n        return result;\n    }\n}", "{\n   \
    \ long[] primes = [];\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n \
    \       {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] primes = new long[];\n    if (n < 2)\n        return primes;\n  \
    \  foreach (i; 2 .. n)\n    {\n        bool isPrime = true;\n        foreach (j;\
    \ 2 .. i)\n        {\n            if (i % j == 0)\n            {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime)\n            primes ~= i;\n    }\n    return primes;\n}", "{\n\
    \    long[] primes;\n    if (n < 2)\n        return primes;\n    else\n    {\n\
    \        primes ~= 2;\n        foreach (i; 3..n)\n        {\n            bool\
    \ isPrime = true;\n            foreach (j; primes)\n            {\n          \
    \      if (i % j == 0)\n                {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n                primes ~= i;\n        }\n    }\n    return primes;\n\
    }", "{\n    long[] result;\n    if (n < 2)\n        return result;\n    foreach\
    \ (i; 2..n)\n    {\n        bool isPrime = true;\n        foreach (j; 2..i)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes\
    \ = new long[];\n    if (n == 0)\n        return primes;\n    for (long i = 2;\
    \ i < n; i++)\n    {\n        bool isPrime = true;\n        for (long j = 2; j\
    \ < i; j++)\n        {\n            if (i % j == 0)\n            {\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if (isPrime)\n            primes ~= i;\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n == 0) \n    {\n        return result;\n    }\n\
    \    else if (n == 1) \n    {\n        return result;\n    }\n    else \n    {\n\
    \        result = new long[n];\n        long i = 0;\n        long j = 0;\n   \
    \     for (i = 2; i < n; i++) \n        {\n            for (j = 2; j <= i; j++)\
    \ \n            {\n                if (i % j == 0) \n                {\n     \
    \               break;\n                }\n            }\n            if (i ==\
    \ j) \n            {\n                result[i] = i;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    long[] primes = new long[];\n    if\
    \ (n < 2)\n        return primes;\n    primes ~= 2;\n    for (long i = 3; i <\
    \ n; i += 2)\n    {\n        bool isPrime = true;\n        foreach (long j; primes)\n\
    \        {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] primes\
    \ = [];\n    foreach(i; 2..n)\n    {\n        if(isPrime(i))\n        {\n    \
    \        primes ~= i;\n        }\n    }\n    return primes;\n}", "{\n    long[]\
    \ result;\n    if (n <= 1) \n    {\n        return result;\n    }\n    result\
    \ ~= 2;\n    for (long i = 3; i < n; i += 2) \n    {\n        bool isPrime = true;\n\
    \        for (long j = 2; j <= sqrt(i); j++) \n        {\n            if (i %\
    \ j == 0) \n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) \n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n\
    \    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime\
    \ = true;\n        for (long j = 3; j <= sqrt(i); j += 2)\n        {\n       \
    \     if (i % j == 0)\n            {\n                isPrime = false;\n     \
    \           break;\n            }\n        }\n        if (isPrime)\n         \
    \   result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if\
    \ (n <= 1) return result;\n    foreach (i; 2 .. n)\n    {\n        bool isPrime\
    \ = true;\n        foreach (j; 2 .. i)\n        {\n            if (i % j == 0)\n\
    \            {\n                isPrime = false;\n                break;\n   \
    \         }\n        }\n        if (isPrime)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 0..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}", "{\n    long[] result;\n    if (n <=\
    \ 1)\n        return result;\n    result ~= 2;\n    for (long i = 3; i < n; i\
    \ += 2)\n    {\n        bool isPrime = true;\n        for (long j = 3; j <= sqrt(i);\
    \ j += 2)\n        {\n            if (i % j == 0)\n            {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime)\n            result ~= i;\n    }\n    return result;\n}", "{\n\
    \    long[] primes = [];\n    if (n == 0)\n        return primes;\n    if (n ==\
    \ 1)\n        return primes;\n    if (n == 2)\n        return [2];\n    if (n\
    \ == 3)\n        return [2,3];\n    if (n == 4)\n        return [2,3];\n    if\
    \ (n == 5)\n        return [2,3,5];\n    if (n == 6)\n        return [2,3,5];\n\
    \    if (n == 7)\n        return [2,3,5,7];\n    if (n == 8)\n        return [2,3,5,7];\n\
    \    if (n == 9)\n        return [2,3,5,7];\n    if (n == 10)\n        return\
    \ [2,3,5,7];\n    if (n == 11)\n        return [2,3,5,7,11];\n    if (n == 12)\n\
    \        return [2,3,5,7,11];\n    if (n == 13)\n        return [2,3,5,7,11,13];\n\
    \    if (n == 14)\n        return [2,3,5,7,11,13];\n    if (n == 15)\n       \
    \ return [2,3,5,7,11,13];\n    if (n == 16)\n        return [2,3,5,7,11,13];\n\
    \    if (n == 17)\n        return [2,3,5,7,11,13,17];\n    if (n == 18)\n    \
    \    return [2,3,5,7,11,13,17];\n    if (n == 19)\n        return [2,3,5,7,11,13,17,19];\n\
    \    if (n == 20)\n        return [2,3,5,7,11,13,17,19];\n    if (n == 21)\n \
    \       return [2,3,5,7,11,13,17,19];\n    if (n == 22)\n        return [2,3,5,7,11,13,17,19];\n\
    \    if (n == 23)", "{\n    long[] result = new long[];\n    if (n <= 1)\n   \
    \     return result;\n    foreach (i; 2..n)\n    {\n        if (isPrime(i))\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    foreach(i; 0..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  if (n < 2)\n        return result;\n    result ~= 2;\n    for (long i = 3;\
    \ i < n; i += 2)\n    {\n        bool isPrime = true;\n        for (long j = 2;\
    \ j < i; j++)\n        {\n            if (i % j == 0)\n            {\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime)\n            result ~= i;\n    }\n    return result;\n}",
  "{\n    long[] primes = new long[];\n    foreach(i; 1..n)\n    {\n        if(isPrime(i))\n\
    \        {\n            primes ~= i;\n        }\n    }\n    return primes;\n}",
  "{\n    long[] result;\n    if (n <= 1)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n  \
    \      for (long j = 3; j <= sqrt(i); j += 2)\n        {\n            if (i %\
    \ j == 0)\n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime)\n            result ~= i;\n  \
    \  }\n    return result;\n}", "{\n    long[] result;\n    if (n < 2)\n       \
    \ return result;\n    for (long i = 2; i < n; i++)\n    {\n        if (isPrime(i))\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    if (n <= 1)\n        return result;\n    result ~= 2;\n \
    \   for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n   \
    \     for (long j = 3; j <= sqrt(i); j += 2)\n        {\n            if (i % j\
    \ == 0)\n            {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime)\n            result ~= i;\n  \
    \  }\n    return result;\n}", "{\n    long[] result;\n    if (n < 2)\n       \
    \ return result;\n    for (long i = 2; i < n; i++)\n    {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j < i; j++)\n        {\n            if (i\
    \ % j == 0)\n            {\n                isPrime = false;\n               \
    \ break;\n            }\n        }\n        if (isPrime)\n            result ~=\
    \ i;\n    }\n    return result;\n}", "{\n    long[] primes;\n    foreach(i; 2..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n        }\n\
    \    }\n    return primes;\n}", "{\n    long[] result;\n    if (n < 2) return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2) \n    {\n   \
    \     bool isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++) \n   \
    \     {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if\
    \ (n < 2)\n        return result;\n    else\n    {\n        result ~= 2;\n   \
    \     for (long i = 3; i < n; i += 2)\n        {\n            bool isPrime = true;\n\
    \            foreach (long j; result)\n            {\n                if (i %\
    \ j == 0)\n                {\n                    isPrime = false;\n         \
    \           break;\n                }\n            }\n            if (isPrime)\n\
    \                result ~= i;\n        }\n        return result;\n    }\n}", "{\n\
    \    long[] result;\n    if (n <= 1)\n        return result;\n    result ~= 2;\n\
    \    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n  \
    \      for (long j = 3; j < sqrt(i) + 1; j += 2)\n        {\n            if (i\
    \ % j == 0)\n            {\n                isPrime = false;\n               \
    \ break;\n            }\n        }\n        if (isPrime)\n            result ~=\
    \ i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if (n < 2)\n\
    \        return result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n\
    \    {\n        bool isPrime = true;\n        foreach (long j; result)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        result ~= i;\n    }\n    return result;\n}", "{\n    long[] res = new\
    \ long[];\n    if (n < 2)\n        return res;\n    foreach (i; 2..n)\n    {\n\
    \        bool isPrime = true;\n        foreach (j; 2..i)\n        {\n        \
    \    if (i % j == 0 && i != j)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        res ~= i;\n    }\n    return res;\n}", "{\n    long[] result;\n    if\
    \ (n > 1) \n    {\n        result ~= 2;\n        foreach (i; 3..n) \n        {\n\
    \            bool isPrime = true;\n            foreach (j; 2..i) \n          \
    \  {\n                if (i % j == 0) \n                {\n                  \
    \  isPrime = false;\n                    break;\n                }\n         \
    \   }\n            if (isPrime) \n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    if (n < 2) return result;\n    for (long i = 2; i < n; i++) \n  \
    \  {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++) \n  \
    \      {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ \n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] primes = new long[];\n    if (n < 2)\n        return primes;\n\
    \    foreach (i; 2 .. n)\n    {\n        bool isPrime = true;\n        foreach\
    \ (j; 2 .. i)\n        {\n            if (i % j == 0)\n            {\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime)\n            primes ~= i;\n    }\n    return primes;\n}",
  "{\n    long[] result = [];\n    if (n < 2)\n        return result;\n    result\
    \ ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n\
    \        foreach (long j; result)\n        {\n            if (i % j == 0)\n  \
    \          {\n                isPrime = false;\n                break;\n     \
    \       }\n        }\n        if (isPrime)\n            result ~= i;\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    foreach(i; 0..n)\n    {\n\
    \        if(isPrime(i))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result;\n    if (n < 2)\n        return\
    \ result;\n    else\n    {\n        result ~= 2;\n        for (long i = 3; i <\
    \ n; i++)\n        {\n            bool isPrime = true;\n            for (long\
    \ j = 2; j < i; j++)\n            {\n                if (i % j == 0)\n       \
    \         {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime)\n                result\
    \ ~= i;\n        }\n        return result;\n    }\n}", "{\n    long[] result;\n\
    \    if (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n;\
    \ i += 2)\n    {\n        bool isPrime = true;\n        for (long j = 2; j <=\
    \ sqrt(i); j++)\n        {\n            if (i % j == 0)\n            {\n     \
    \           isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime)\n            result ~= i;\n    }\n    return result;\n}",
  "{\n    long[] res;\n    if (n < 2)\n        return res;\n    res ~= 2;\n    for\
    \ (long i = 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n        for\
    \ (long j = 3; j <= sqrt(i); j += 2)\n        {\n            if (i % j == 0)\n\
    \            {\n                isPrime = false;\n                break;\n   \
    \         }\n        }\n        if (isPrime)\n            res ~= i;\n    }\n \
    \   return res;\n}", "{\n    long[] result;\n    if (n <= 1)\n        return result;\n\
    \    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n        bool isPrime\
    \ = true;\n        for (long j = 3; j <= sqrt(i); j += 2)\n        {\n       \
    \     if (i % j == 0)\n            {\n                isPrime = false;\n     \
    \           break;\n            }\n        }\n        if (isPrime)\n         \
    \   result ~= i;\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    foreach(i; 2..n)\n    {\n        if(isPrime(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n  \
    \  foreach(i; 0..n) \n    {\n        if(isPrime(i)) \n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    if (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n;\
    \ i += 2) \n    {\n        bool isPrime = true;\n        foreach (long j; result)\
    \ \n        {\n            if (i % j == 0) \n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ result ~= i;\n    }\n    return result;\n}", "{\n    long[] result;\n    if\
    \ (n < 2) return result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n\
    \    {\n        bool isPrime = true;\n        for (long j = 3; j < sqrt(i) + 1;\
    \ j += 2)\n        {\n            if (i % j == 0)\n            {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime) result ~= i;\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return\
    \ result;\n    result ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n    \
    \    bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j += 2)\n  \
    \      {\n            if (i % j == 0)\n            {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            result ~= i;\n    }\n    return result;\n}", "{\n    long[] primes\
    \ = new long[];\n    if (n < 2)\n        return primes;\n    foreach (i; 2 ..\
    \ n)\n    {\n        bool isPrime = true;\n        foreach (j; 2 .. i)\n     \
    \   {\n            if (i % j == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \        primes ~= i;\n    }\n    return primes;\n}", "{\n    long[] result;\n\
    \    if (n == 0)\n        return result;\n    result ~= 2;\n    for (long i =\
    \ 3; i < n; i += 2)\n    {\n        bool isPrime = true;\n        for (long j\
    \ = 2; j < i; j++)\n        {\n            if (i % j == 0)\n            {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime)\n            result ~= i;\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    if (n < 2)\n        return result;\n    else\n\
    \    {\n        result ~= 2;\n        for (long i = 3; i < n; i += 2)\n      \
    \  {\n            bool isPrime = true;\n            for (long j = 3; j < i; j\
    \ += 2)\n            {\n                if (i % j == 0)\n                {\n \
    \                   isPrime = false;\n                    break;\n           \
    \     }\n            }\n            if (isPrime)\n                result ~= i;\n\
    \        }\n        return result;\n    }\n}", "{\n    long[] primes;\n    foreach(i;2..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n        }\n\
    \    }\n    return primes;\n}", "{\n    long[] result;\n    foreach(i; 0..n)\n\
    \    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] res;\n    if (n <= 1)\n       \
    \ return res;\n    res ~= 2;\n    for (long i = 3; i < n; i += 2)\n    {\n   \
    \     bool isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++)\n    \
    \    {\n            if (i % j == 0)\n            {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime)\n\
    \            res ~= i;\n    }\n    return res;\n}", "{\n    long[] result;\n \
    \   if (n > 1)\n    {\n        result = new long[n];\n        long i = 0;\n  \
    \      foreach (long j; 2 .. n)\n        {\n            if (isPrime(j))\n    \
    \        {\n                result[i] = j;\n                i++;\n           \
    \ }\n        }\n        result = result[0 .. i];\n    }\n    else\n    {\n   \
    \     result = new long[0];\n    }\n    return result;\n}", "{\n    long[] result;\n\
    \    if (n < 2) \n    {\n        return result;\n    }\n    result ~= 2;\n   \
    \ for (long i = 3; i < n; i += 2) \n    {\n        bool isPrime = true;\n    \
    \    foreach (long j; result) \n        {\n            if (i % j == 0) \n    \
    \        {\n                isPrime = false;\n                break;\n       \
    \     }\n        }\n        if (isPrime) \n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] primes;\n    foreach(i;\
    \ 2..n)\n    {\n        if(isPrime(i))\n        {\n            primes ~= i;\n\
    \        }\n    }\n    return primes;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
