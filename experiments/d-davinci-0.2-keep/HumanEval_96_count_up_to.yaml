name: HumanEval_96_count_up_to
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes\
  \ an non-negative integer and returns an array of the first n\n    integers that\
  \ are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n\
  \    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20)\
  \ => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n\
  \    \n*/\nlong[] count_up_to(long n) \n"
tests: "unittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L)\
  \ == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L)\
  \ == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L)\
  \ == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n\
  \    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L,\
  \ 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
  \ 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L,\
  \ 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L,\
  \ 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
