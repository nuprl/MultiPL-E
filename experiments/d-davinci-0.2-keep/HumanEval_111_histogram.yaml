name: HumanEval_111_histogram
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a\
  \ b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n\
  \    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b':\
  \ 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string]) histogram(string\
  \ test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
