name: HumanEval_111_histogram
language: humaneval_to_dlang.py
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a\
  \ b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n\
  \    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b':\
  \ 4}\n    histogram('') == {}\n\n    \n*/\nNullable!(long[string]) histogram(string\
  \ test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n\
    \        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) ret = null;\n\
    \    long[string] hist = new long[string];\n    foreach(c; test.split())\n   \
    \ {\n        hist[c]++;\n    }\n    long max = hist.values.max;\n    if(max >\
    \ 0)\n    {\n        ret = new long[string];\n        foreach(k, v; hist)\n  \
    \      {\n            if(v == max)\n            {\n                ret[k] = v;\n\
    \            }\n        }\n    }\n    return ret;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n    {\n\
    \        if (word.length == 0)\n            continue;\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n\
    \        if (value == max)\n            result.get.put(key, value);\n    }\n \
    \   return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    foreach (c;\
    \ test.split)\n    {\n        if (result.get(c) is null)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    long[string] counts;\n   \
    \ foreach (word; words)\n    {\n        if (counts.count(word) == 0)\n       \
    \     counts[word] = 1;\n        else\n            counts[word] += 1;\n    }\n\
    \    long max = 0;\n    foreach (word; counts.keys)\n    {\n        if (counts[word]\
    \ > max)\n            max = counts[word];\n    }\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    auto letterCount = new long[string];\n    foreach (letter; letters)\n\
    \    {\n        if (letterCount.count(letter) == 0)\n            letterCount[letter]\
    \ = 1;\n        else\n            letterCount[letter]++;\n    }\n    long maxCount\
    \ = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n\
    \        if (letterCount[letter] == maxCount)\n            result.insert(letter,\
    \ maxCount);\n    }\n    return result;\n}", "{\n    auto result = new long[string];\n\
    \    if (test.length == 0)\n        return null;\n    foreach (c; test.split)\n\
    \    {\n        if (result.counts(c))\n            result[c]++;\n        else\n\
    \            result[c] = 1;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ ret;\n    if(test.length == 0)\n        return ret;\n    auto words = test.split;\n\
    \    long[string] counts;\n    foreach(word; words)\n    {\n        if(counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach(word; counts.keys)\n\
    \    {\n        if(counts[word] == max)\n            ret.get.put(word, max);\n\
    \    }\n    return ret;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.string;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.uni;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.uni;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.string;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.uni;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.uni;\n    import std.algorithm;\n  \
    \  import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.string;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.uni;\n    import\
    \ std.algorithm;\n    import std.array;\n    import", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto counts = new long[string];\n    foreach (word;\
    \ words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word] += 1;\n    }\n    long max = 0;\n\
    \    foreach (key, value; counts)\n    {\n        if (value > max)\n         \
    \   max = value;\n    }\n    foreach (key, value; counts)\n    {\n        if (value\
    \ == max)\n            result.insert(key, value);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    result = new long[string];\n    foreach (c; test.split)\n\
    \    {\n        if (result.get(c))\n            result[c]++;\n        else\n \
    \           result[c] = 1;\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(!result.contains(c))\n\
    \            result[c] = 0;\n        result[c]++;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n      \
    \  return result;\n    long[string] dict;\n    foreach(char c; test)\n    {\n\
    \        if(c == ' ')\n            continue;\n        if(dict.count(c) == 0)\n\
    \            dict[c] = 1;\n        else\n            dict[c]++;\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(string key; dict.keys)\n    {\n\
    \        if(dict[key] == max)\n            result.get.insert(key, max);\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    auto hist = new long[string];\n    foreach (word; words)\n    {\n    \
    \    if (word.length == 0)\n            continue;\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word] +=\
    \ 1;\n    }\n    long max = 0;\n    foreach (key, value; hist)\n    {\n      \
    \  if (value > max)\n            max = value;\n    }\n    foreach (key, value;\
    \ hist)\n    {\n        if (value == max)\n            result.add(key);\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (word; counts.keys)\n\
    \    {\n        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    long[string] hist;\n    foreach\
    \ (c; test.split())\n    {\n        if (hist.count(c) == 0)\n            hist[c]\
    \ = 1;\n        else\n            hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach (k, v; hist)\n    {\n        if (v == max)\n            result[k]\
    \ = v;\n    }\n    return result;\n}", "{\n    if (test.empty)\n        return\
    \ null;\n    auto result = new long[string];\n    auto words = test.split;\n \
    \   foreach (word; words)\n    {\n        if (result.count(word))\n          \
    \  result[word]++;\n        else\n            result[word] = 1;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n        return result;\n    auto words = test.split(\" \");\n    auto counts\
    \ = new long[string];\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split;\n \
    \   long[string] counts;\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    auto result = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        result[c]++;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    long[string] counts;\n    foreach (word; words)\n    {\n        if (counts.count(word)\
    \ == 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = 0;\n    foreach (count; counts)\n    {\n        if (count.value\
    \ > max)\n            max = count.value;\n    }\n    long[string] max_counts;\n\
    \    foreach (count; counts)\n    {\n        if (count.value == max)\n       \
    \     max_counts[count.key] = count.value;\n    }\n    return max_counts;\n}",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    long[string] dict;\n    foreach (c; test.split)\n    {\n      \
    \  if (c in dict)\n            dict[c]++;\n        else\n            dict[c] =\
    \ 1;\n    }\n    long max = maxElement(dict.values);\n    long[string] maxDict;\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            maxDict[k]\
    \ = v;\n    }\n    return maxDict;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    auto dict = new long[string];\n    foreach (word; words)\n    {\n\
    \        if (word in dict)\n            dict[word]++;\n        else\n        \
    \    dict[word] = 1;\n    }\n    long max = dict.values.max;\n    foreach (key,\
    \ value; dict)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; letters)\n    {\n     \
    \   if (counts.count(letter) == 0)\n            counts[letter] = 1;\n        else\n\
    \            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.put(key, value);\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            if(result.count(c) == 0)\n            {\n                result[c]\
    \ = 1;\n            }\n            else\n            {\n                result[c]++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto result = new long[string];\n    foreach (c; test.split)\n\
    \    {\n        if (result.count(c) == 0)\n            result[c] = 1;\n      \
    \  else\n            result[c]++;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] counts;\n    foreach (word; words)\n  \
    \  {\n        if (counts.count(word) == 0)\n            counts[word] = 1;\n  \
    \      else\n            counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (word; counts.keys)\n    {\n        if (counts[word] == max)\n  \
    \          result.get.put(word, max);\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(long[string]) result;\n    if (test.length == 0)\n        return result;\n\
    \    long[string] dict;\n    foreach (letter; test.split()) \n    {\n        if\
    \ (dict.count(letter) == 0)\n            dict[letter] = 1;\n        else\n   \
    \         dict[letter]++;\n    }\n    long max = maxElement(dict.values);\n  \
    \  foreach (key, value; dict) \n    {\n        if (value == max)\n           \
    \ result.insert(key);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n    {\n\
    \        if (word in dict)\n            dict[word] += 1;\n        else\n     \
    \       dict[word] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result.get.insert(key,\
    \ value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split;\n\
    \    long[string] histogram;\n    foreach (word; words)\n    {\n        if (histogram.count(word)\
    \ == 0)\n            histogram[word] = 1;\n        else\n            histogram[word]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    foreach (key, value;\
    \ histogram)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return null;\n    auto letters = test.split;\n \
    \   long[string] counts;\n    foreach (letter; letters)\n    {\n        if (counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.counts.",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    auto counts = new long[words.length];\n\
    \    foreach (i, word; words)\n    {\n        counts[i] = 0;\n        foreach\
    \ (j, w; words)\n        {\n            if (word == w)\n                counts[i]++;\n\
    \        }\n    }\n    long max = maxElement(counts);\n    auto maxWords = new\
    \ long[words.length];\n    long maxWordsCount = 0;\n    foreach (i, count; counts)\n\
    \    {\n        if (count == max)\n        {\n            maxWords[maxWordsCount]\
    \ = i;\n            maxWordsCount++;\n        }\n    }\n    auto resultMap = new\
    \ long[maxWordsCount];\n    foreach (i, maxWord; maxWords)\n    {\n        resultMap[i]\
    \ = max;\n    }\n    result = resultMap;\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto dict = new long[string];\n    foreach (word; words)\n\
    \    {\n        if (dict.count(word) == 0)\n            dict[word] = 1;\n    \
    \    else\n            dict[word]++;\n    }\n    long max = 0;\n    foreach (key,\
    \ value; dict)\n    {\n        if (value > max)\n            max = value;\n  \
    \  }\n    foreach (key, value; dict)\n    {\n        if (value == max)\n     \
    \       result.insert(key);\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split) \n    {\n        if(c.length == 1)\n   \
    \     {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    long[string] counts;\n   \
    \ foreach (word; words)\n    {\n        counts[word]++;\n    }\n    long max =\
    \ maxElement(counts.values);\n    foreach (key, value; counts)\n    {\n      \
    \  if (value == max)\n            result.get!(long[string])[key] = value;\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    auto wordCount = words.length;\n    long[string] counts;\n    foreach\
    \ (word; words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word]++;\n    }\n    long max = 0;\n\
    \    foreach (word; counts.keys)\n    {\n        if (counts[word] > max)\n   \
    \         max = counts[word];\n    }\n    long[string] maxCounts;\n    foreach\
    \ (word; counts.keys)\n    {\n        if (counts[word] == max)\n            maxCounts[word]\
    \ = max;\n    }\n    return maxCounts;\n}", "{\n    import std.algorithm : max;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : map, filter, each, zip, take, countUntil, count;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Nullable;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons :", "{\n    long[string] result;\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(result.count(c)\
    \ == 0)\n            result[c] = 1;\n        else\n            result[c]++;\n\
    \    }\n    return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(c in result)\n            result[c]++;\n  \
    \      else\n            result[c] = 1;\n    }\n    return result;\n}", "{\n \
    \   Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split;\n    long[string] hist;\n    foreach (word;\
    \ words)\n    {\n        if (word.length != 1)\n            return result;\n \
    \       hist[word]++;\n    }\n    long max = maxElement(hist.values);\n    foreach\
    \ (key, value; hist)\n    {\n        if (value == max)\n            result.get.put(key,\
    \ value);\n    }\n    return result;\n}", "{\n    auto result = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n       \
    \ {\n            result[c] = 1;\n        }\n        else\n        {\n        \
    \    result[c]++;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    result.init\
    \ = true;\n    long[string] dict;\n    foreach (c; test.split)\n    {\n      \
    \  if (c in dict)\n            dict[c]++;\n        else\n            dict[c] =\
    \ 1;\n    }\n    long max = dict.values.max;\n    foreach (k, v; dict)\n    {\n\
    \        if (v == max)\n            result.value[k] = v;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) res;\n    if (test.length == 0)\n        return\
    \ res;\n    auto words = test.split(\" \");\n    auto dict = new long[string];\n\
    \    foreach (word; words)\n    {\n        if (dict.count(word) == 0)\n      \
    \      dict[word] = 1;\n        else\n            dict[word]++;\n    }\n    long\
    \ max = dict.values.max;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ == max)\n            res.insert(key);\n    }\n    return res;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split;\n    long[string] dict;\n    foreach (word; words)\n    {\n    \
    \    if (dict.count(word) == 0)\n            dict[word] = 1;\n        else\n \
    \           dict[word]++;\n    }\n    long max = 0;\n    foreach (key, value;\
    \ dict)\n    {\n        if (value > max)\n            max = value;\n    }\n  \
    \  long[string] result_dict;\n    foreach (key, value; dict)\n    {\n        if\
    \ (value == max)\n            result_dict[key] = value;\n    }\n    result = result_dict;\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (letter; counts.keys)\n\
    \    {\n        if (counts[letter] == max)\n            result.insert(letter,\
    \ counts);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    auto letterCount = new long[string];\n    foreach (letter; letters)\n\
    \    {\n        if (letterCount.count(letter) == 0)\n            letterCount[letter]\
    \ = 1;\n        else\n            letterCount[letter]++;\n    }\n    auto maxCount\
    \ = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n\
    \        if (letterCount[letter] == maxCount)\n            result.insert(letter);\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    \n    long[string]\
    \ dict;\n    foreach (c; test.split)\n    {\n        if (c in dict)\n        \
    \    dict[c]++;\n        else\n            dict[c] = 1;\n    }\n    \n    long\
    \ max = maxElement(dict.values);\n    foreach (k, v; dict)\n    {\n        if\
    \ (v == max)\n            result.insert(k);\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    long[string] counts;\n   \
    \ foreach (word; words)\n    {\n        if (counts.count(word) == 0)\n       \
    \     counts[word] = 1;\n        else\n            counts[word]++;\n    }\n  \
    \  long max = maxElement(counts.values);\n    foreach (word; counts.keys)\n  \
    \  {\n        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0) \n    {\n        return result;\n    }\n    auto letters\
    \ = test.split;\n    long[string] letterCounts;\n    foreach (letter; letters)\
    \ \n    {\n        if (letterCounts.contains(letter)) \n        {\n          \
    \  letterCounts[letter]++;\n        } \n        else \n        {\n           \
    \ letterCounts[letter] = 1;\n        }\n    }\n    long maxCount = max(letterCounts.values);\n\
    \    foreach (letter; letterCounts.keys) \n    {\n        if (letterCounts[letter]\
    \ == maxCount) \n        {\n            result.emplace(letterCounts);\n      \
    \      break;\n        }\n    }\n    return result;\n}", "{\n    auto result =\
    \ new long[string];\n    if (test.length == 0)\n        return null;\n    foreach\
    \ (c; test.split)\n    {\n        if (result.counts(c))\n            result[c]++;\n\
    \        else\n            result[c] = 1;\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    \n    auto words = test.split(' ');\n    auto wordCount = words.length;\n\
    \    auto wordMap = new long[string];\n    foreach (word; words)\n    {\n    \
    \    if (wordMap.count(word) == 0)\n            wordMap[word] = 1;\n        else\n\
    \            wordMap[word]++;\n    }\n    \n    auto max = wordMap.values.max;\n\
    \    foreach (word; wordMap.keys)\n    {\n        if (wordMap[word] == max)\n\
    \            result.get.put(word, wordMap[word]);\n    }\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    auto words = test.split(\" \");\n    long[string] dict;\n\
    \    foreach (word; words)\n    {\n        if (word in dict)\n            dict[word]\
    \ += 1;\n        else\n            dict[word] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get.put(key, value);\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length)\n\
    \        {\n            if(result.count(c))\n            {\n                result[c]++;\n\
    \            }\n            else\n            {\n                result[c] = 1;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split;\n    auto hist = new long[string];\n    foreach (word; words)\n\
    \    {\n        if (hist.count(word) == 0)\n            hist[word] = 1;\n    \
    \    else\n            hist[word]++;\n    }\n    long max = 0;\n    foreach (word;\
    \ hist.keys)\n    {\n        if (hist[word] > max)\n            max = hist[word];\n\
    \    }\n    foreach (word; hist.keys)\n    {\n        if (hist[word] == max)\n\
    \            result.insert(word, hist[word]);\n    }\n    return result;\n}",
  "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    long[string] dict;\n    foreach (c; test.split)\n    {\n      \
    \  if (c in dict)\n            dict[c]++;\n        else\n            dict[c] =\
    \ 1;\n    }\n    long max = maxElement(dict.values);\n    foreach (k, v; dict)\n\
    \    {\n        if (v == max)\n            result.insert(k);\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach (word; words)\n    {\n        if (dict.count(word) == 0)\n\
    \            dict[word] = 1;\n        else\n            dict[word]++;\n    }\n\
    \    long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n    \
    \    if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    \n    long[string] dict;\n    string[] words = test.split(\"\
    \ \");\n    foreach (word; words)\n    {\n        if (word.length == 0)\n    \
    \        continue;\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word]++;\n    }\n    \n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get.insert(key, value);\n    }\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto result = new long[string];\n    auto words = test.split;\n\
    \    foreach (word; words)\n    {\n        if (result.count(word))\n         \
    \   result[word]++;\n        else\n            result[word] = 1;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (word; words)\n    {\n        if (counts.count(word) ==\
    \ 0)\n            counts[word] = 1;\n        else\n            counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = new long[string];\n    foreach(word; words)\n    {\n        if(dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = dict.values.max;\n    foreach(key, value; dict)\n    {\n\
    \        if(value == max)\n            result.get.put(key, value);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto dict = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = dict.values.max;\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; letters)\n    {\n     \
    \   if (counts.count(letter) == 0)\n            counts[letter] = 1;\n        else\n\
    \            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.insert(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n            counts[letter] = 1;\n\
    \        else\n            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.insert(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n            counts[letter] = 1;\n\
    \        else\n            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == max)\n\
    \            result.insert(letter, counts);\n    }\n    return result;\n}", "{\n\
    \    if (test.empty)\n        return null;\n    auto result = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (result.count(c) == 0)\n     \
    \       result[c] = 1;\n        else\n            result[c]++;\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    foreach(c; test.split())\n  \
    \  {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n    long\
    \ max = maxElement(result.values);\n    long[string] finalResult;\n    foreach(k,\
    \ v; result)\n    {\n        if(v == max)\n        {\n            finalResult[k]\
    \ = v;\n        }\n    }\n    return finalResult;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n    {\n\
    \        if (word.length == 0)\n            continue;\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ > max)\n            max = value;\n    }\n    long[string] resultDict;\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            resultDict[key]\
    \ = value;\n    }\n    result = resultDict;\n    return result;\n}", "{\n    auto\
    \ result = new long[string];\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (test.empty)\n        return null;\n    auto result = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (c in result)\n            result[c]++;\n\
    \        else\n            result[c] = 1;\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto letters = test.split(\" \");\n    auto counts = new long[string];\n\
    \    foreach (letter; letters)\n    {\n        if (counts.count(letter) == 0)\n\
    \            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (letter; letters)\n\
    \    {\n        if (counts[letter] == max)\n            result[letter] = max;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    auto hist = new long[string];\n    foreach (word; words)\n    {\n    \
    \    if (hist.count(word) == 0)\n            hist[word] = 1;\n        else\n \
    \           hist[word]++;\n    }\n    long max = 0;\n    foreach (word; hist.keys)\n\
    \    {\n        if (hist[word] > max)\n            max = hist[word];\n    }\n\
    \    foreach (word; hist.keys)\n    {\n        if (hist[word] == max)\n      \
    \      result[word] = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n    {\n\
    \        if (word in dict)\n            dict[word]++;\n        else\n        \
    \    dict[word] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    result = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (result.get(c) is null)\n    \
    \        result[c] = 1;\n        else\n            result[c]++;\n    }\n    return\
    \ result;\n}", "{\n    auto result = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        if(result.counts[c] == 0)\n            result[c] = 1;\n      \
    \  else\n            result[c]++;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] counts;\n    foreach (word; words)\n  \
    \  {\n        if (counts.count(word) == 0)\n            counts[word] = 1;\n  \
    \      else\n            counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    long[string] max_counts;\n    foreach (key, value; counts)\n    {\n     \
    \   if (value == max)\n            max_counts[key] = value;\n    }\n    return\
    \ max_counts;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long maxCount = max(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == maxCount)\n            result.insert(key);\n    }\n\
    \    return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length)\n        {\n            if(result.count(c)\
    \ == 0)\n            {\n                result[c] = 1;\n            }\n      \
    \      else\n            {\n                result[c] += 1;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n            continue;\n        if (dict.count(word) == 0)\n         \
    \   dict[word] = 1;\n        else\n            dict[word]++;\n    }\n    long\
    \ max = dict.values.max;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ == max)\n            result.emplace(key, value);\n    }\n    return result;\n\
    }", "{\n    if (test.empty)\n        return null;\n    long[string] result;\n\
    \    foreach (c; test.split)\n    {\n        if (result.count(c) == 0)\n     \
    \       result[c] = 1;\n        else\n            result[c]++;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n        return result;\n    long[string] hist = new long[string];\n    foreach\
    \ (c; test.split)\n    {\n        if (hist.count(c) == 0)\n            hist[c]\
    \ = 1;\n        else\n            hist[c]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach (k, v; hist)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (word\
    \ in dict)\n            dict[word]++;\n        else\n            dict[word] =\
    \ 1;\n    }\n    long max = maxElement(dict.values);\n    foreach (key, value;\
    \ dict)\n    {\n        if (value == max)\n            result.insert(key);\n \
    \   }\n    return result;\n}", "{\n    if (test.empty)\n        return null;\n\
    \    auto result = new long[string];\n    foreach (c; test.split)\n    {\n   \
    \     if (result.count(c) == 0)\n            result[c] = 1;\n        else\n  \
    \          result[c]++;\n    }\n    return result;\n}", "{\n    auto result =\
    \ new long[string];\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    import std.algorithm : max;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : filter, map, reduce, zip;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Nullable;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split(\" \"))\n    {\n        if(c.length\
    \ == 0)\n            continue;\n        if(result.count(c) == 0)\n           \
    \ result[c] = 1;\n        else\n            result[c]++;\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_result;\n    foreach(k, v; result)\n    {\n        if(v\
    \ == max)\n        {\n            max_result[k] = v;\n        }\n    }\n    return\
    \ max_result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    \n    long[string] dict;\n    string[] words\
    \ = test.split(\" \");\n    foreach (word; words)\n    {\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    \n    long max = maxElement(dict.values);\n    long[string] maxDict;\n\
    \    foreach (word; dict.keys)\n    {\n        if (dict[word] == max)\n      \
    \      maxDict[word] = max;\n    }\n    \n    result = maxDict;\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] result;\n    if (test.length == 0)\n        return null;\n \
    \   foreach (c; test.split)\n    {\n        if (result.count(c) == 0)\n      \
    \      result[c] = 1;\n        else\n            result[c]++;\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n\
    \        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n   \
    \     }\n        else\n        {\n            result[c] += 1;\n        }\n   \
    \ }\n    long max = maxElement(result.values);\n    long[string] max_result;\n\
    \    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n        {\n\
    \            max_result[c] = max;\n        }\n    }\n    return max_result;\n}",
  "{\n    auto result = new long[string];\n    foreach(c; test.split)\n    {\n   \
    \     if(result.count(c) == 0)\n        {\n            result[c] = 1;\n      \
    \  }\n        else\n        {\n            result[c]++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    auto result = Nullable!(long[string])();\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    auto dict = long[string]();\n    foreach (word; words)\n    {\n      \
    \  if (word.length == 0)\n            continue;\n        if (dict.count(word)\
    \ == 0)\n            dict[word] = 1;\n        else\n            dict[word]++;\n\
    \    }\n    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ > max)\n            max = value;\n    }\n    result = long[string]();\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result[key]\
    \ = value;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; letters)\n    {\n     \
    \   if (counts.count(letter) == 0)\n            counts[letter] = 1;\n        else\n\
    \            counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.insert(key, value);\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split()) \n    {\n        if(result.count(c)\
    \ == 0) \n        {\n            result[c] = 1;\n        } \n        else \n \
    \       {\n            result[c]++;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n        return\
    \ result;\n    auto words = test.split;\n    long[string] hist;\n    foreach(word;\
    \ words)\n    {\n        if(hist.count(word) == 0)\n            hist[word] = 1;\n\
    \        else\n            hist[word]++;\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(key, value; hist)\n    {\n        if(value == max)\n            result.get.put(key,\
    \ value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] dict;\n \
    \   foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    long[string] maxDict;\n    foreach (k, v; dict)\n    {\n        if (v ==\
    \ max)\n            maxDict[k] = v;\n    }\n    return maxDict;\n}", "{\n    auto\
    \ result = new long[string];\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}",
  "{\n    auto result = new long[string];\n    foreach(char c; test)\n    {\n    \
    \    if(c == ' ')\n            continue;\n        result[c]++;\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm : max;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.range : filter, map, reduce, zip;\n\
    \    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Nullable;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.type", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ dict = words.assocArray;\n    auto max = dict.values.max;\n    foreach (word;\
    \ dict)\n    {\n        if (word.value == max)\n            result.insert(word.key,\
    \ max);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] dict;\n \
    \   foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.get.put(k,\
    \ v);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach (word; words)\n    {\n        if (word.length\
    \ == 0)\n            continue;\n        if (dict.count(word) == 0)\n         \
    \   dict[word] = 1;\n        else\n            dict[word]++;\n    }\n    long\
    \ max = 0;\n    foreach (key, value; dict)\n    {\n        if (value > max)\n\
    \            max = value;\n    }\n    long[string] res;\n    foreach (key, value;\
    \ dict)\n    {\n        if (value == max)\n            res[key] = value;\n   \
    \ }\n    return res;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n            dict[c]++;\n        else\n       \
    \     dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0) \n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\
    \ \n    {\n        counts[letter]++;\n    }\n    long max = max(counts.values);\n\
    \    foreach (letter; counts.keys) \n    {\n        if (counts[letter] == max)\
    \ \n        {\n            result.set(counts);\n            break;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] dict;\n \
    \   foreach (ch; test.split)\n    {\n        if (ch in dict)\n            dict[ch]++;\n\
    \        else\n            dict[ch] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, val; dict)\n    {\n        if (val == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(result.counts[c] == 0)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    return result;\n}",
  "{\n    auto result = new long[string];\n    foreach(c; test.split())\n    {\n \
    \       if(result.count(c) == 0)\n        {\n            result[c] = 1;\n    \
    \    }\n        else\n        {\n            result[c]++;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.get.put(key, value);\n \
    \   }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ wordCount = words.length;\n    auto wordDict = new long[string];\n    foreach\
    \ (word; words)\n    {\n        if (wordDict.count(word) == 0)\n            wordDict[word]\
    \ = 1;\n        else\n            wordDict[word]++;\n    }\n    auto maxCount\
    \ = max(wordDict.values);\n    foreach (word; wordDict.keys)\n    {\n        if\
    \ (wordDict[word] == maxCount)\n            result[word] = maxCount;\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    long[string] dict;\n    foreach (ch; test.split)\n\
    \    {\n        if (ch in dict)\n            dict[ch]++;\n        else\n     \
    \       dict[ch] = 1;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] letterCount;\n    foreach (letter; letters)\n    {\n\
    \        if (letterCount.count(letter) == 0)\n            letterCount[letter]\
    \ = 1;\n        else\n            letterCount[letter]++;\n    }\n    long maxCount\
    \ = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n\
    \        if (letterCount[letter] == maxCount)\n            result.get.put(letter,\
    \ maxCount);\n    }\n    return result;\n}", "{\n    auto result = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         result[c]++;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n            counts[letter] = 1;\n\
    \        else\n            counts[letter] += 1;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto wordCount = words.length;\n    auto counts = new\
    \ long[wordCount];\n    foreach (i, word; words)\n    {\n        counts[i] = 0;\n\
    \        foreach (j, w; words)\n        {\n            if (word == w)\n      \
    \          counts[i]++;\n        }\n    }\n    auto max = maxElement(counts);\n\
    \    auto maxCount = counts[max];\n    result = new long[string];\n    foreach\
    \ (i, word; words)\n    {\n        if (counts[i] == maxCount)\n            result[word]\
    \ = maxCount;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ ret = null;\n    long[string] ret_ = new long[string];\n    long max = 0;\n\
    \    foreach(c; test.split)\n    {\n        if(ret_.count(c) == 0)\n        {\n\
    \            ret_[c] = 1;\n        }\n        else\n        {\n            ret_[c]++;\n\
    \        }\n        if(ret_[c] > max)\n        {\n            max = ret_[c];\n\
    \        }\n    }\n    foreach(c; ret_.keys)\n    {\n        if(ret_[c] == max)\n\
    \        {\n            ret = ret_;\n            break;\n        }\n    }\n  \
    \  return ret;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ hist = new long[string];\n    foreach (word; words)\n    {\n        if (hist.count(word)\
    \ == 0)\n            hist[word] = 1;\n        else\n            hist[word]++;\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach (key, value; hist)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    auto\
    \ counts = long[string](words.length);\n    foreach (word; words)\n    {\n   \
    \     counts[word]++;\n    }\n    long max = 0;\n    foreach (count; counts)\n\
    \    {\n        if (count > max)\n            max = count;\n    }\n    result\
    \ = long[string](max);\n    foreach (count; counts)\n    {\n        if (count\
    \ == max)\n            result[counts.idup] = count;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    auto words = test.split(\" \");\n    long[string] map;\n\
    \    foreach (word; words)\n    {\n        if (map.count(word) == 0)\n       \
    \     map[word] = 1;\n        else\n            map[word]++;\n    }\n    long\
    \ max = maxElement(map.values);\n    foreach (key, value; map)\n    {\n      \
    \  if (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    auto words = test.split(\" \");\n    long[string] histo;\n\
    \    foreach (word; words)\n    {\n        if (histo.count(word) == 0)\n     \
    \       histo[word] = 1;\n        else\n            histo[word] += 1;\n    }\n\
    \    long max = maxElement(histo.values);\n    foreach (word; histo.keys)\n  \
    \  {\n        if (histo[word] == max)\n            result.get.put(word, max);\n\
    \    }\n    return result;\n}", "{\n    import std.algorithm : max, min;\n   \
    \ import std.array : array;\n    import std.conv : to;\n    import std.range :\
    \ map, filter, zip, joiner;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Nullable;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n   ", "{\n    auto result = new long[string];\n    foreach(c; test.split())\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c]++;\n        }\n   \
    \ }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    result = new long[string];\n    string[]\
    \ words = test.split(\" \");\n    foreach (word; words)\n    {\n        if (result.get(word))\n\
    \            result.get(word)++;\n        else\n            result.set(word, 1);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split;\n \
    \   long[string] dict;\n    foreach (word; words)\n    {\n        if (word in\
    \ dict)\n            dict[word] += 1;\n        else\n            dict[word] =\
    \ 1;\n    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto letters = test.split(\" \");\n    long[string]\
    \ letterCounts;\n    foreach (letter; letters)\n    {\n        if (letterCounts.count(letter)\
    \ == 0)\n            letterCounts[letter] = 1;\n        else\n            letterCounts[letter]++;\n\
    \    }\n    long maxCount = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n\
    \    {\n        if (letterCounts[letter] == maxCount)\n            result[letter]\
    \ = maxCount;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    long[string]\
    \ histogram;\n    foreach (c; test.split)\n    {\n        if (c in histogram)\n\
    \            histogram[c]++;\n        else\n            histogram[c] = 1;\n  \
    \  }\n    long max = maxElement(histogram.values);\n    foreach (key, value; histogram)\n\
    \    {\n        if (value == max)\n            result.insert(key);\n    }\n  \
    \  return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach\
    \ (char c; test)\n    {\n        if (c == ' ')\n            continue;\n      \
    \  if (dict.count(c) == 0)\n            dict[c] = 1;\n        else\n         \
    \   dict[c]++;\n    }\n    long max = 0;\n    foreach (char c; test)\n    {\n\
    \        if (c == ' ')\n            continue;\n        if (dict[c] > max)\n  \
    \          max = dict[c];\n    }\n    foreach (char c; test)\n    {\n        if\
    \ (c == ' ')\n            continue;\n        if (dict[c] == max)\n           \
    \ result[c] = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0) \n    {\n        return result;\n    }\n\
    \    auto words = test.split(\" \");\n    long[string] counts;\n    foreach (word;\
    \ words) \n    {\n        if (counts.count(word) == 0) \n        {\n         \
    \   counts[word] = 1;\n        }\n        else \n        {\n            counts[word]++;\n\
    \        }\n    }\n    long max = maxElement(counts.values);\n    foreach (word;\
    \ counts.keys) \n    {\n        if (counts[word] == max) \n        {\n       \
    \     result.set(counts);\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new long[string];\n    foreach(c; test.split())\n  \
    \  {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    long[string] histogram;\n    foreach (word; words)\n    {\n        if\
    \ (histogram.find(word) == null)\n            histogram[word] = 1;\n        else\n\
    \            histogram[word]++;\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach (word; histogram.keys)\n    {\n        if (histogram[word] == max)\n\
    \            result.get.put(word, max);\n    }\n    return result;\n}", "{\n \
    \   Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    long[string] dict;\n    foreach\
    \ (word; words)\n    {\n        if (dict.count(word) == 0)\n            dict[word]\
    \ = 1;\n        else\n            dict[word] += 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get!(long[string])[key] = value;\n    }\n    return result;\n}", "{\n\
    \    auto result = new long[string];\n    foreach(c; test.split())\n    {\n  \
    \      if(result.find(c) is null)\n        {\n            result[c] = 1;\n   \
    \     }\n        else\n        {\n            result[c]++;\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            if(result.count(c)\
    \ == 0)\n            {\n                result[c] = 1;\n            }\n      \
    \      else\n            {\n                result[c]++;\n            }\n    \
    \    }\n    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n\
    \    return result;\n}", "{\n    if (test.empty)\n        return null;\n    auto\
    \ result = new long[string];\n    foreach (ch; test.split)\n    {\n        if\
    \ (result.count(ch) == 0)\n            result[ch] = 1;\n        else\n       \
    \     result[ch] += 1;\n    }\n    return result;\n}", "{\n    auto result = new\
    \ long[string];\n    foreach(c; test.split)\n    {\n        if(result.find(c)\
    \ is null)\n        {\n            result[c] = 1;\n        }\n        else\n \
    \       {\n            result[c]++;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split;\n    auto hist = new long[string];\n \
    \   foreach (word; words)\n    {\n        hist[word]++;\n    }\n    long max =\
    \ maxElement(hist.values);\n    foreach (key, value; hist)\n    {\n        if\
    \ (value == max)\n            result.get.put(key, value);\n    }\n    return result;\n\
    }", "{\n    auto result = new long[string];\n    foreach(c; test.split)\n    {\n\
    \        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n   \
    \     }\n        else\n        {\n            result[c]++;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    else \n    {\n        result\
    \ = new long[string];\n        foreach (letter; test.split(\" \")) \n        {\n\
    \            if (result.get(letter) is null) \n            {\n               \
    \ result[letter] = 1;\n            }\n            else \n            {\n     \
    \           result[letter]++;\n            }\n        }\n        return result;\n\
    \    }\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n\
    \        return result;\n    auto letters = test.split(\" \");\n    auto counts\
    \ = new long[string];\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    auto max = maxElement(counts.values);\n    foreach (letter; letters)\n\
    \    {\n        if (counts[letter] == max)\n            result.get.put(letter,\
    \ counts[letter]);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto dict = new long[string];\n    foreach (word; words)\n\
    \    {\n        if (dict.count(word) == 0)\n            dict[word] = 1;\n    \
    \    else\n            dict[word] += 1;\n    }\n    long max = 0;\n    foreach\
    \ (word; dict.keys)\n    {\n        if (dict[word] > max)\n            max = dict[word];\n\
    \    }\n    auto max_dict = new long[string];\n    foreach (word; dict.keys)\n\
    \    {\n        if (dict[word] == max)\n            max_dict[word] = dict[word];\n\
    \    }\n    return max_dict;\n}", "{\n    Nullable!(long[string]) result;\n  \
    \  if (test.length == 0)\n        return result;\n    auto letters = test.split();\n\
    \    long[string] counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n            result.insert(key, value);\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto words = test.split(\" \");\n    long[string]\
    \ dict;\n    foreach(word; words)\n    {\n        if(word in dict)\n         \
    \   dict[word]++;\n        else\n            dict[word] = 1;\n    }\n    long\
    \ max = maxElement(dict.values);\n    long[string] max_dict;\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n            max_dict[key] = value;\n\
    \    }\n    result = max_dict;\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto result = new long[string];\n    foreach (c; test.split)\n\
    \    {\n        if (c.length != 1)\n            continue;\n        if (result.contains(c))\n\
    \            result[c]++;\n        else\n            result[c] = 1;\n    }\n \
    \   return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if(test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] letterCounts;\n    foreach(letter; letters)\n    {\n\
    \        if(letterCounts.count(letter) == 0)\n            letterCounts[letter]\
    \ = 1;\n        else\n            letterCounts[letter]++;\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    foreach(letter; letterCounts.keys)\n    {\n\
    \        if(letterCounts[letter] == maxCount)\n            result.get.insert(letter,\
    \ letterCounts[letter]);\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c]++;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        if(result.count(c) ==\
    \ 0)\n        {\n            result[c] = 1;\n        }\n        else\n       \
    \ {\n            result[c] += 1;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    long[string] dict;\n    foreach\
    \ (word; words)\n    {\n        if (word in dict)\n            dict[word] += 1;\n\
    \        else\n            dict[word] = 1;\n    }\n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto letters\
    \ = test.split(\" \");\n    long[string] dict;\n    foreach (letter; letters)\
    \ \n    {\n        if (letter in dict)\n            dict[letter]++;\n        else\n\
    \            dict[letter] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict) \n    {\n        if (value == max)\n         \
    \   result.insert(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ ret = null;\n    if(test.length == 0)\n        return ret;\n    long[string]\
    \ d = new long[string];\n    foreach(c; test.split(\" \"))\n    {\n        d[c]++;\n\
    \    }\n    long max = maxElement(d.values);\n    ret = new long[string];\n  \
    \  foreach(k, v; d)\n    {\n        if(v == max)\n            ret[k] = v;\n  \
    \  }\n    return ret;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]++;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    auto counts = long[string](words.length);\n    foreach (word; words)\n\
    \    {\n        counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto dict =\
    \ new long[string];\n    foreach (c; test.split)\n    {\n        if (c in dict)\n\
    \            dict[c]++;\n        else\n            dict[c] = 1;\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach (c; dict.keys)\n    {\n        if\
    \ (dict[c] == max)\n            result.insert(c);\n    }\n    return result;\n\
    }", "{\n    long[string] counts;\n    foreach(c; test.split)\n    {\n        counts[c]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    Nullable!(long[string])\
    \ result;\n    foreach(c; counts.keys)\n    {\n        if(counts[c] == max)\n\
    \        {\n            result.insert(c, counts[c]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n        return result;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach (letter; letters)\n    {\n    \
    \    if (letterCount.count(letter) == 0)\n            letterCount[letter] = 1;\n\
    \        else\n            letterCount[letter] += 1;\n    }\n    long maxCount\
    \ = max(letterCount.values);\n    foreach (letter; letterCount.keys)\n    {\n\
    \        if (letterCount[letter] == maxCount)\n            result.get.put(letter,\
    \ maxCount);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    auto hist = new long[string];\n    foreach (word; words)\n    {\n\
    \        if (hist.count(word) == 0)\n            hist[word] = 1;\n        else\n\
    \            hist[word]++;\n    }\n    long max = hist.values.max;\n    foreach\
    \ (key, value; hist)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    auto result = new long[string]();\n  \
    \  foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(!result.count(c))\n            result[c] = 0;\n        result[c]++;\n\
    \    }\n    if(result.empty)\n        return null;\n    long max = maxElement(result.values);\n\
    \    foreach(ref value; result.values)\n    {\n        if(value != max)\n    \
    \        result.remove(value);\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] result;\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split;\n    long[string] counts;\n    foreach\
    \ (word; words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] hist;\n    foreach (word; words)\n    {\n\
    \        if (hist.count(word) == 0)\n            hist[word] = 1;\n        else\n\
    \            hist[word]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   foreach (key, value; hist)\n    {\n        if (value == max)\n           \
    \ result.insert(key);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] counts;\n    foreach (word; words)\n  \
    \  {\n        if (counts.count(word) == 0)\n            counts[word] = 1;\n  \
    \      else\n            counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.insert(key);\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    string[] words = test.split();\n    foreach(word; words)\n    {\n\
    \        if(result.count(word) == 0)\n        {\n            result[word] = 1;\n\
    \        }\n        else\n        {\n            result[word] += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] letterCounts;\n    foreach (letter; letters)\n    {\n\
    \        if (letterCounts.count(letter) == 0)\n            letterCounts[letter]\
    \ = 1;\n        else\n            letterCounts[letter]++;\n    }\n    long max\
    \ = maxElement(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n\
    \    {\n        if (letterCounts[letter] == max)\n            result.get.put(letter,\
    \ max);\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split) \n    {\n        result[c]++;\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n        return\
    \ result;\n    auto words = test.split(\" \");\n    auto counts = new long[string];\n\
    \    foreach (word; words)\n    {\n        if (counts.count(word) == 0)\n    \
    \        counts[word] = 1;\n        else\n            counts[word]++;\n    }\n\
    \    long max = 0;\n    foreach (count; counts)\n    {\n        if (count.value\
    \ > max)\n            max = count.value;\n    }\n    foreach (count; counts)\n\
    \    {\n        if (count.value == max)\n            result.insert(count.key,\
    \ count.value);\n    }\n    return result;\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.stdio;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.algorithm :\
    \ max;\n    import std.range : iota;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.string : split;\n    import std.typecons : Nullable;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : Tuple;\n    import std", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split;\n    long[string] counts;\n    foreach (word; words)\n    {\n  \
    \      if (counts.count(word) == 0)\n            counts[word] = 1;\n        else\n\
    \            counts[word] += 1;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto counts = new long[string];\n    foreach (word;\
    \ words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word]++;\n    }\n    auto max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.get.insert(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split;\n    auto wordCount = words.length;\n    auto wordMap = new long[string];\n\
    \    foreach (word; words)\n    {\n        if (wordMap.count(word) == 0)\n   \
    \         wordMap[word] = 1;\n        else\n            wordMap[word]++;\n   \
    \ }\n    auto maxCount = max(wordMap.values);\n    foreach (word; wordMap.keys)\n\
    \    {\n        if (wordMap[word] == maxCount)\n            result.get.insert(word,\
    \ maxCount);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto dict = new long[string];\n\
    \    foreach (c; test.split)\n    {\n        if (dict.count(c) == 0)\n       \
    \     dict[c] = 1;\n        else\n            dict[c]++;\n    }\n    long max\
    \ = dict.values.max;\n    foreach (k, v; dict)\n    {\n        if (v == max)\n\
    \            result.insert(k);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    long[string]\
    \ dict;\n    foreach (ch; test.split)\n    {\n        if (ch in dict)\n      \
    \      dict[ch]++;\n        else\n            dict[ch] = 1;\n    }\n    long max\
    \ = maxElement(dict.values);\n    foreach (key, value; dict)\n    {\n        if\
    \ (value == max)\n            result.insert(key);\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n     \
    \   return result;\n    long[string] dict;\n    foreach (c; test.split)\n    {\n\
    \        if (dict.count(c) == 0)\n            dict[c] = 1;\n        else\n   \
    \         dict[c]++;\n    }\n    long max = maxElement(dict.values);\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n            result.insert(key);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    \n    auto words = test.split(\"\
    \ \");\n    long[string] histo;\n    foreach (word; words)\n    {\n        histo[word]++;\n\
    \    }\n    \n    long max = maxElement(histo.values);\n    foreach (word; histo.keys)\n\
    \    {\n        if (histo[word] == max)\n            result.get!(long[string])[word]\
    \ = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    auto words = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (word; words)\n    {\n        if\
    \ (counts.count(word) == 0)\n            counts[word] = 1;\n        else\n   \
    \         counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (word; words)\n    {\n        if (counts[word] == max)\n        \
    \    result.insert(word, counts);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split;\n    auto hist = new long[string];\n    foreach (word; words)\n\
    \    {\n        hist[word]++;\n    }\n    auto max = hist.values.max;\n    foreach\
    \ (key, value; hist)\n    {\n        if (value == max)\n            result.get.put(key,\
    \ value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] dict;\n \
    \   foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.insert(k);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n        return result;\n    auto dict = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(dict.count(c))\n            dict[c]++;\n       \
    \ else\n            dict[c] = 1;\n    }\n    long max = dict.values.max;\n   \
    \ foreach(string key; dict.keys)\n    {\n        if(dict[key] == max)\n      \
    \      result.get.put(key, max);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    auto counts = new long[string];\n    foreach (word;\
    \ words)\n    {\n        if (counts.count(word) == 0)\n            counts[word]\
    \ = 1;\n        else\n            counts[word]++;\n    }\n    long max = 0;\n\
    \    foreach (word; counts.keys)\n    {\n        if (counts[word] > max)\n   \
    \         max = counts[word];\n    }\n    foreach (word; counts.keys)\n    {\n\
    \        if (counts[word] == max)\n            result.insert(word, counts[word]);\n\
    \    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto words = test.split(\" \"\
    );\n    auto hist = new long[string]();\n    foreach (word; words)\n    {\n  \
    \      if (hist.count(word) == 0)\n            hist[word] = 1;\n        else\n\
    \            hist[word]++;\n    }\n    long max = 0;\n    foreach (word; hist.keys)\n\
    \    {\n        if (hist[word] > max)\n            max = hist[word];\n    }\n\
    \    foreach (word; hist.keys)\n    {\n        if (hist[word] == max)\n      \
    \      result.insert(word);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto letters\
    \ = test.split;\n    long[string] dict;\n    foreach (letter; letters)\n    {\n\
    \        if (dict.count(letter) == 0)\n            dict[letter] = 1;\n       \
    \ else\n            dict[letter] += 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.get.put(key, value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    \n    auto words\
    \ = test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n  \
    \  {\n        if (dict.count(word) == 0)\n            dict[word] = 1;\n      \
    \  else\n            dict[word]++;\n    }\n    \n    long max = dict.values.max;\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n          \
    \  result.insert(key);\n    }\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n        return result;\n    auto words =\
    \ test.split(\" \");\n    long[string] counts;\n    foreach (word; words)\n  \
    \  {\n        if (counts.count(word) == 0)\n            counts[word] = 1;\n  \
    \      else\n            counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        \
    \    result.insert(key);\n    }\n    return result;\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.stdio;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n     \
    \   return result;\n    }\n    else\n    {\n        auto words = test.split(\"\
    \ \");\n        auto word_count = words.length;\n        auto word_dict = new\
    \ long[string];\n        foreach (word; words)\n        {\n            if (word_dict.count(word)\
    \ == 0)\n            {\n                word_dict[word] = 1;\n            }\n\
    \            else\n            {\n                word_dict[word] += 1;\n    \
    \        }\n        }\n        long max_count = 0;\n        foreach (word; word_dict.keys)\n\
    \        {\n            if (word_dict[word] > max_count)\n            {\n    \
    \            max_count = word_dict[word];\n            }\n        }\n        foreach\
    \ (word; word_dict.keys)\n        {\n            if (word_dict[word] == max_count)\n\
    \            {\n                result[word] = max_count;\n            }\n   \
    \     }\n        return result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n        return result;\n    long[string] dict;\n \
    \   foreach (c; test.split)\n    {\n        if (c in dict)\n            dict[c]++;\n\
    \        else\n            dict[c] = 1;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach (k, v; dict)\n    {\n        if (v == max)\n            result.get.put(k,\
    \ v);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0) \n    {\n        return result;\n    }\n    auto words\
    \ = test.split(\" \");\n    long[string] histogram;\n    foreach (word; words)\
    \ \n    {\n        if (histogram.count(word) == 0) \n        {\n            histogram[word]\
    \ = 1;\n        }\n        else \n        {\n            histogram[word] += 1;\n\
    \        }\n    }\n    long max = maxElement(histogram.values);\n    foreach (key,\
    \ value; histogram) \n    {\n        if (value == max) \n        {\n         \
    \   result.get.put(key, value);\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new long[string];\n    foreach(c; test.split())\n    {\n  \
    \      if(!result.count(c))\n            result[c] = 0;\n        result[c]++;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n        return result;\n    auto letters = test.split(\"\
    \ \");\n    auto letterCount = new long[string];\n    foreach (letter; letters)\n\
    \    {\n        if (letterCount.count(letter) == 0)\n            letterCount[letter]\
    \ = 1;\n        else\n            letterCount[letter]++;\n    }\n    auto max\
    \ = maxElement(letterCount.values);\n    foreach (letter; letterCount.keys)\n\
    \    {\n        if (letterCount[letter] == max)\n            result.insert(letter,\
    \ letterCount[letter]);\n    }\n    return result;\n}", "{\n    auto result =\
    \ new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length)\n\
    \        {\n            if(result.count(c))\n            {\n                result[c]++;\n\
    \            }\n            else\n            {\n                result[c] = 1;\n\
    \            }\n        }\n    }\n    if(result.length)\n    {\n        return\
    \ result;\n    }\n    return null;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
