name: HumanEval_127_intersection
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnv1ocft5.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpnv1ocft5.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpnv1ocft5.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnv1ocft5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0)\n        return \"NO\";\n    if (length == 1)\n        return\
    \ \"NO\";\n    if (length == 2)\n        return \"YES\";\n    if (length % 2 ==\
    \ 0)\n        return \"NO\";\n    for (long i = 3; i <= sqrt(length); i += 2)\n\
    \    {\n        if (length % i == 0)\n            return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohsc0aww.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpohsc0aww.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpohsc0aww.d(37): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpohsc0aww.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc9l7236a.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpc9l7236a.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpc9l7236a.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9l7236a.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4on3jrty.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp4on3jrty.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp4on3jrty.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4on3jrty.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0) return \"NO\";\n    if (length == 1) return \"NO\";\n  \
    \  if (length == 2) return \"YES\";\n    for (long i = 2; i < length; i++)\n \
    \   {\n        if (length % i == 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp91tvg_u8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp91tvg_u8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp91tvg_u8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpycsi_kc6.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpycsi_kc6.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpycsi_kc6.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycsi_kc6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9810pyeh.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp9810pyeh.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp9810pyeh.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9810pyeh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54mouupn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp54mouupn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp54mouupn.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54mouupn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) \n    {\n\
    \        return \"NO\";\n    }\n    return isPrime(end - start + 1) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcb8af6h2.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpcb8af6h2.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpcb8af6h2.d(32): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcb8af6h2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    auto length = end - start + 1;\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkw84vey.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpwkw84vey.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpwkw84vey.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkw84vey.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp44zes4ji.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp44zes4ji.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp44zes4ji.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44zes4ji.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5eydwznr.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp5eydwznr.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp5eydwznr.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5eydwznr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n \
    \   alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L,\
    \ 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"\
    NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n \
    \   assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpumkpclx8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpumkpclx8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpumkpclx8.d(33): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumkpclx8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long a = interval1[0];\n    long b =\
    \ interval1[1];\n    long c = interval2[0];\n    long d = interval2[1];\n    long\
    \ start = max(a, c);\n    long end = min(b, d);\n    if (start > end)\n      \
    \  return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n      \
    \  return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long i\
    \ = 2; i < len; i++)\n    {\n        if (len % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnvndwzs.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmprnvndwzs.d(31): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprnvndwzs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long diff = end - start;\n\
    \    return isPrime(diff) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy92tbzqc.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy92tbzqc.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpy92tbzqc.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy92tbzqc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhd75_zh.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmplhd75_zh.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmplhd75_zh.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhd75_zh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu0dtwxg4.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpu0dtwxg4.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpu0dtwxg4.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0dtwxg4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzfz65b3.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjzfz65b3.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpjzfz65b3.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzfz65b3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphx3gdx0f.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmphx3gdx0f.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmphx3gdx0f.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphx3gdx0f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxzfjqr_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsxzfjqr_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsxzfjqr_.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsxzfjqr_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start1 = interval1[0];\n    long\
    \ end1 = interval1[1];\n    long start2 = interval2[0];\n    long end2 = interval2[1];\n\
    \    long start = max(start1, start2);\n    long end = min(end1, end2);\n    if\
    \ (start > end)\n        return \"NO\";\n    if (isPrime(end - start + 1))\n \
    \       return \"YES\";\n    return \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkuk8er58.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpkuk8er58.d(31): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpkuk8er58.d(34): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkuk8er58.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahod2p2x.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpahod2p2x.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpahod2p2x.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahod2p2x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i < length; i += 2)\n        if (length % i == 0)\n     \
    \       return \"NO\";\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprwws7z2l.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmprwws7z2l.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprwws7z2l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr83lsppn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpr83lsppn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpr83lsppn.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr83lsppn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptomxip13.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmptomxip13.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmptomxip13.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptomxip13.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph4onifm0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmph4onifm0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmph4onifm0.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4onifm0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 2) return \"NO\";\n    if (len == 2) return \"YES\";\n   \
    \ if (len % 2 == 0) return \"NO\";\n    for (long i = 3; i <= sqrt(len); i +=\
    \ 2)\n    {\n        if (len % i == 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpekxhhlpy.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpekxhhlpy.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpekxhhlpy.d(32): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpekxhhlpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    auto len = end - start + 1;\n    return isPrime(len) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4plq6wmd.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp4plq6wmd.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp4plq6wmd.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4plq6wmd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn__1ykv2.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpn__1ykv2.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpn__1ykv2.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn__1ykv2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyphonfe.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpbyphonfe.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpbyphonfe.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyphonfe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_kigwod.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp1_kigwod.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp1_kigwod.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_kigwod.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7y9c4qh_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp7y9c4qh_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp7y9c4qh_.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y9c4qh_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0) return \"NO\";\n    return isPrime(len) ? \"YES\" : \"\
    NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahmngqiy.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpahmngqiy.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpahmngqiy.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahmngqiy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjw22cqnn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjw22cqnn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpjw22cqnn.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjw22cqnn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    return isPrime(len) ? \"YES\" :\
    \ \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpma7kfc40.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpma7kfc40.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpma7kfc40.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpma7kfc40.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxup1sn8o.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpxup1sn8o.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpxup1sn8o.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxup1sn8o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    long length = end - start + 1;\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcopl09_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpdcopl09_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpdcopl09_.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcopl09_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    if (len %\
    \ 2 == 0)\n        return \"NO\";\n    for (auto i = 3; i * i <= len; i += 2)\n\
    \        if (len % i == 0)\n            return \"NO\";\n    return \"YES\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchqp1xth.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpchqp1xth.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpchqp1xth.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 2) return \"NO\";\n    if (len == 2) return \"YES\";\n   \
    \ for (long i = 2; i < len; i++) {\n        if (len % i == 0) return \"NO\";\n\
    \    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy7qu50yx.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy7qu50yx.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpy7qu50yx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long\
    \ i = 2; i < len; i++)\n        if (len % i == 0)\n            return \"NO\";\n\
    \    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_mxwh4co.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_mxwh4co.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_mxwh4co.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0) return \"NO\";\n    if (length == 0) return \"YES\";\n  \
    \  if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n   \
    \ if (length % 2 == 0) return \"NO\";\n    for (long i = 3; i <= sqrt(length);\
    \ i += 2)\n    {\n        if (length % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxb70vo9l.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpxb70vo9l.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpxb70vo9l.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxb70vo9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz8f8uop0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpz8f8uop0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpz8f8uop0.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8f8uop0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long\
    \ i = 2; i <= sqrt(len); i++)\n    {\n        if (len % i == 0)\n            return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0cnyhdx.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpd0cnyhdx.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpd0cnyhdx.d(35): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd0cnyhdx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjo235ndc.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjo235ndc.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpjo235ndc.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjo235ndc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lkmrnq2.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp9lkmrnq2.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp9lkmrnq2.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lkmrnq2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mcudsyg.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp9mcudsyg.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp9mcudsyg.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9mcudsyg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (auto\
    \ i = 2; i < len; i++)\n    {\n        if (len % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_9xnnlb1.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_9xnnlb1.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_9xnnlb1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpay0yc4fi.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpay0yc4fi.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpay0yc4fi.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay0yc4fi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppmbeiik_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmppmbeiik_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmppmbeiik_.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppmbeiik_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3cngv89a.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp3cngv89a.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp3cngv89a.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cngv89a.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqecrb2sh.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpqecrb2sh.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpqecrb2sh.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqecrb2sh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsaftjece.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsaftjece.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsaftjece.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpsaftjece.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 0)\n        return \"NO\";\n    return isPrime(len) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt65_7oke.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpt65_7oke.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpt65_7oke.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt65_7oke.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwi81nxhp.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpwi81nxhp.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpwi81nxhp.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwi81nxhp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0) return \"NO\";\n    if (length == 0) return \"YES\";\n  \
    \  if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n   \
    \ if (length % 2 == 0) return \"NO\";\n    for (long i = 3; i <= sqrt(length);\
    \ i += 2)\n    {\n        if (length % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1nuz4dse.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp1nuz4dse.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp1nuz4dse.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1nuz4dse.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    for (long i = 2; i < length; i++)\n    {\n     \
    \   if (length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3s93250.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpw3s93250.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpw3s93250.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpklo8uy40.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpklo8uy40.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpklo8uy40.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklo8uy40.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    return isPrime(len) ?\
    \ \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n \
    \   assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpau9_eols.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpau9_eols.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpau9_eols.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau9_eols.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgq8e74ie.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpgq8e74ie.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpgq8e74ie.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgq8e74ie.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    auto len = end - start + 1;\n    return isPrime(len) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnn4554hv.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpnn4554hv.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpnn4554hv.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn4554hv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2grilvw6.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp2grilvw6.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp2grilvw6.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2grilvw6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long\
    \ i = 2; i < len; i++)\n        if (len % i == 0)\n            return \"NO\";\n\
    \    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvq7gc_4e.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpvq7gc_4e.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpvq7gc_4e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    auto length = end - start + 1;\n    if (length == 1) return \"\
    NO\";\n    if (length == 2) return \"YES\";\n    if (length % 2 == 0) return \"\
    NO\";\n    for (auto i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length\
    \ % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_tpwxos.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp4_tpwxos.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp4_tpwxos.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 2) return \"NO\";\n    for (long i = 2; i <= sqrt(len); i++)\
    \ {\n        if (len % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n\
    unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xn4teu1.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp6xn4teu1.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp6xn4teu1.d(30): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6xn4teu1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0)\n        return \"NO\";\n    return isPrime(len) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj0t_s38.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmplj0t_s38.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmplj0t_s38.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj0t_s38.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotqg8j15.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpotqg8j15.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpotqg8j15.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotqg8j15.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzua9ug1i.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpzua9ug1i.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpzua9ug1i.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzua9ug1i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0) return \"NO\";\n    if (length == 0) return \"YES\";\n  \
    \  return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvopujnt.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpbvopujnt.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpbvopujnt.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvopujnt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbf2o32oe.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpbf2o32oe.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpbf2o32oe.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf2o32oe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpygcycp2v.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpygcycp2v.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpygcycp2v.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygcycp2v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7t7samoh.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp7t7samoh.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp7t7samoh.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t7samoh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnhj6j6s3.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpnhj6j6s3.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpnhj6j6s3.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhj6j6s3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jtjh3lr.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp5jtjh3lr.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp5jtjh3lr.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jtjh3lr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgg52k5t8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpgg52k5t8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpgg52k5t8.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg52k5t8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9y4mu_b0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp9y4mu_b0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp9y4mu_b0.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9y4mu_b0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    if (start == end) return \"YES\";\n    if (isPrime(end - start\
    \ + 1)) return \"YES\";\n    return \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsruq8m1q.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsruq8m1q.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsruq8m1q.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsruq8m1q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1pkk3z22.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp1pkk3z22.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp1pkk3z22.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1pkk3z22.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0)\n        return \"NO\";\n    if (len == 1)\n        return\
    \ \"YES\";\n    if (len == 2)\n        return \"NO\";\n    if (len == 3)\n   \
    \     return \"YES\";\n    if (len % 2 == 0)\n        return \"NO\";\n    if (len\
    \ % 3 == 0)\n        return \"NO\";\n    if (len % 5 == 0)\n        return \"\
    NO\";\n    if (len % 7 == 0)\n        return \"NO\";\n    return \"YES\";\n}\n\
    unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40253m9a.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp40253m9a.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp40253m9a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len <= 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    return isPrime(len)\
    \ ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu5u8dq09.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpu5u8dq09.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpu5u8dq09.d(35): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5u8dq09.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60_f4_l0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp60_f4_l0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp60_f4_l0.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60_f4_l0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7sa9xjx.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpc7sa9xjx.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpc7sa9xjx.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7sa9xjx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy1eb4fzq.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy1eb4fzq.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpy1eb4fzq.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1eb4fzq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (auto\
    \ i = 2; i < len; i++)\n    {\n        if (len % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7yp0wwe.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpr7yp0wwe.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr7yp0wwe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptx9x0z03.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmptx9x0z03.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmptx9x0z03.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptx9x0z03.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    // your code here\n    long start = max(interval1[0],\
    \ interval2[0]);\n    long end = min(interval1[1], interval2[1]);\n    long length\
    \ = end - start;\n    if (length < 0)\n        return \"NO\";\n    if (length\
    \ == 0)\n        return \"YES\";\n    if (length == 1)\n        return \"NO\"\
    ;\n    if (length == 2)\n        return \"YES\";\n    if (length % 2 == 0)\n \
    \       return \"NO\";\n    for (long i = 3; i <= sqrt(length); i += 2)\n    {\n\
    \        if (length % i == 0)\n            return \"NO\";\n    }\n    return \"\
    YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp03gfkhue.d(27): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp03gfkhue.d(28): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp03gfkhue.d(40): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp03gfkhue.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw5du1bib.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpw5du1bib.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpw5du1bib.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5du1bib.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp39m_lzic.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp39m_lzic.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp39m_lzic.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39m_lzic.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0) return \"NO\";\n    if (length == 0) return \"YES\";\n  \
    \  if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n   \
    \ if (length % 2 == 0) return \"NO\";\n    for (long i = 3; i < length; i += 2)\n\
    \    {\n        if (length % i == 0) return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_tcqtysw.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_tcqtysw.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_tcqtysw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    if (start == end)\n        return \"YES\";\n    if (start\
    \ == 2)\n        return \"YES\";\n    if (start % 2 == 0)\n        return \"NO\"\
    ;\n    for (long i = 3; i <= sqrt(end); i += 2)\n    {\n        if (start % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpycq129e1.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpycq129e1.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpycq129e1.d(36): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpycq129e1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3es7q8s.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpw3es7q8s.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpw3es7q8s.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpw3es7q8s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    if (start == end) return \"YES\";\n    return isPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplblebhb9.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmplblebhb9.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmplblebhb9.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplblebhb9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0) return \"NO\";\n    if (len == 0) return \"YES\";\n    if (len\
    \ == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    if (len % 2 ==\
    \ 0) return \"NO\";\n    for (auto i = 3; i <= sqrt(len); i += 2)\n    {\n   \
    \     if (len % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_rdp77cn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_rdp77cn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_rdp77cn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i < length; i += 2)\n        if (length % i == 0)\n     \
    \       return \"NO\";\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ho_sqxt.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp1ho_sqxt.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1ho_sqxt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpksyqs2ib.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpksyqs2ib.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpksyqs2ib.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksyqs2ib.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_yix813i.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_yix813i.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_yix813i.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_yix813i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    if (start == end) return \"YES\";\n    return isPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsypa3sut.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsypa3sut.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsypa3sut.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsypa3sut.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 2) return \"NO\";\n    for (long i = 2; i < len; i++)\n  \
    \      if (len % i == 0)\n            return \"NO\";\n    return \"YES\";\n}\n\
    unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuzly4l2e.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpuzly4l2e.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpuzly4l2e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjyx18rrm.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjyx18rrm.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpjyx18rrm.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjyx18rrm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6o_vdit.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpv6o_vdit.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpv6o_vdit.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6o_vdit.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    long len = end - start + 1;\n    return isPrime(len) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7izlzyan.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp7izlzyan.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp7izlzyan.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7izlzyan.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzkq86z0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpzzkq86z0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpzzkq86z0.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzkq86z0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n7_hvof.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp3n7_hvof.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp3n7_hvof.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n7_hvof.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxg4v0so.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpuxg4v0so.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpuxg4v0so.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxg4v0so.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_dnzd9o.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp2_dnzd9o.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp2_dnzd9o.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_dnzd9o.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0)\n        return \"NO\";\n    if (length == 1)\n        return\
    \ \"NO\";\n    if (length == 2)\n        return \"YES\";\n    if (length % 2 ==\
    \ 0)\n        return \"NO\";\n    for (long i = 3; i <= sqrt(length); i += 2)\n\
    \    {\n        if (length % i == 0)\n            return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi7tjztve.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpi7tjztve.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpi7tjztve.d(37): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpi7tjztve.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    for (long i = 2; i <= sqrt(length); i++)\n    {\n        if (length\
    \ % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjs2mzr6w.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjs2mzr6w.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpjs2mzr6w.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjs2mzr6w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps470u0n7.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmps470u0n7.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmps470u0n7.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps470u0n7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2shwti6_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp2shwti6_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp2shwti6_.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2shwti6_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmigc_081.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpmigc_081.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpmigc_081.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmigc_081.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgg1ijcyy.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpgg1ijcyy.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpgg1ijcyy.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg1ijcyy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    if (len == 0)\n        return \"\
    YES\";\n    return isPrime(len) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyan9a02b.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpyan9a02b.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpyan9a02b.d(33): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyan9a02b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmiul7q0k.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpmiul7q0k.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpmiul7q0k.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmiul7q0k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long\
    \ i = 2; i < len; i++)\n        if (len % i == 0)\n            return \"NO\";\n\
    \    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg1ufekeu.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpg1ufekeu.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpg1ufekeu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start1 = interval1[0];\n    long\
    \ end1 = interval1[1];\n    long start2 = interval2[0];\n    long end2 = interval2[1];\n\
    \    long start = max(start1, start2);\n    long end = min(end1, end2);\n    if\
    \ (start > end)\n        return \"NO\";\n    long length = end - start + 1;\n\
    \    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n        return\
    \ \"YES\";\n    for (long i = 2; i < length; i++)\n    {\n        if (length %\
    \ i == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptv0lbh6i.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmptv0lbh6i.d(31): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmptv0lbh6i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy9zk2a9b.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy9zk2a9b.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpy9zk2a9b.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9zk2a9b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplo6gxzss.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmplo6gxzss.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmplo6gxzss.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplo6gxzss.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfryz3il4.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpfryz3il4.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpfryz3il4.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfryz3il4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long length = end - start + 1;\n    if (length == 1)\n\
    \        return \"NO\";\n    if (length == 2)\n        return \"YES\";\n    for\
    \ (long i = 2; i < length; i++)\n    {\n        if (length % i == 0)\n       \
    \     return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf8otiy_z.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpf8otiy_z.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpf8otiy_z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    if (len == 0)\n        return \"\
    YES\";\n    return isPrime(len) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa0gv8mcw.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpa0gv8mcw.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpa0gv8mcw.d(33): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0gv8mcw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start1 = interval1[0];\n    long\
    \ end1 = interval1[1];\n    long start2 = interval2[0];\n    long end2 = interval2[1];\n\
    \    long start = max(start1, start2);\n    long end = min(end1, end2);\n    if\
    \ (start > end)\n        return \"NO\";\n    if (isPrime(end - start + 1))\n \
    \       return \"YES\";\n    return \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7t57w29h.d(30): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp7t57w29h.d(31): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp7t57w29h.d(34): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t57w29h.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsq_nqcbd.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsq_nqcbd.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsq_nqcbd.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsq_nqcbd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long diff = end - start;\n\
    \    if (diff < 0) return \"NO\";\n    if (diff == 0) return \"YES\";\n    if\
    \ (diff == 1) return \"NO\";\n    if (diff == 2) return \"YES\";\n    if (diff\
    \ % 2 == 0) return \"NO\";\n    for (long i = 3; i <= sqrt(diff); i += 2)\n  \
    \  {\n        if (diff % i == 0) return \"NO\";\n    }\n    return \"YES\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zj3w_i8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp4zj3w_i8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp4zj3w_i8.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp4zj3w_i8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp44ok62n8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp44ok62n8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp44ok62n8.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44ok62n8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeuppnpk9.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpeuppnpk9.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpeuppnpk9.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeuppnpk9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_h0uast4.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_h0uast4.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_h0uast4.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_h0uast4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    return isPrime(len) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmput1jc_wn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmput1jc_wn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmput1jc_wn.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput1jc_wn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqyk6mumf.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpqyk6mumf.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpqyk6mumf.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqyk6mumf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk3uz95s1.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpk3uz95s1.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpk3uz95s1.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3uz95s1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    foreach (i; 2 ..\
    \ length)\n    {\n        if (length % i == 0)\n            return \"NO\";\n \
    \   }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjp79chj.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpjjp79chj.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjjp79chj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbpkvicmy.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpbpkvicmy.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpbpkvicmy.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpkvicmy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptgdnp0yl.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmptgdnp0yl.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmptgdnp0yl.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgdnp0yl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb91ruc81.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpb91ruc81.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpb91ruc81.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb91ruc81.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (auto\
    \ i = 2; i < len; i++)\n    {\n        if (len % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7czagff.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpr7czagff.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpr7czagff.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nnfne8s.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp7nnfne8s.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp7nnfne8s.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nnfne8s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0)\n        return \"NO\";\n    if (len == 1)\n        return\
    \ \"YES\";\n    if (len % 2 == 0)\n        return \"NO\";\n    for (long i = 3;\
    \ i <= sqrt(len); i += 2)\n        if (len % i == 0)\n            return \"NO\"\
    ;\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp20ka06nf.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp20ka06nf.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp20ka06nf.d(35): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp20ka06nf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0) return \"NO\";\n    if (len == 0) return \"YES\";\n    if (len\
    \ == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    if (len % 2 ==\
    \ 0) return \"NO\";\n    for (int i = 3; i <= sqrt(len); i += 2) {\n        if\
    \ (len % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n\
    \    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L,\
    \ 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"\
    NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n \
    \   assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmic95j0u.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpmic95j0u.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmic95j0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    if (start == end)\n        return isPrime(start) ? \"\
    YES\" : \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\n\
    unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupx27x0p.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpupx27x0p.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpupx27x0p.d(31): Error: undefined identifier\
    \ `isPrime`\\n/tmp/tmpupx27x0p.d(32): Error: undefined identifier `isPrime`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupx27x0p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    auto len = end - start + 1;\n    return isPrime(len) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1v_rbr5.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpa1v_rbr5.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpa1v_rbr5.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1v_rbr5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    for (long\
    \ i = 2; i < len; i++)\n        if (len % i == 0)\n            return \"NO\";\n\
    \    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6erlndmb.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp6erlndmb.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6erlndmb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5r3u0om3.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp5r3u0om3.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp5r3u0om3.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r3u0om3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_10tsxm.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp3_10tsxm.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp3_10tsxm.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_10tsxm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    if (start == end)\n        return \"YES\";\n    return\
    \ isPrime(end - start) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29j132rw.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp29j132rw.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp29j132rw.d(32): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29j132rw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyoy8up5l.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpyoy8up5l.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpyoy8up5l.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyoy8up5l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc44a5cnk.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpc44a5cnk.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpc44a5cnk.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc44a5cnk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0) return \"NO\";\n    if (len == 1) return \"YES\";\n  \
    \  if (len == 2) return \"NO\";\n    if (len == 3) return \"YES\";\n    if (len\
    \ % 2 == 0) return \"NO\";\n    if (len % 3 == 0) return \"NO\";\n    if (len\
    \ % 5 == 0) return \"NO\";\n    if (len % 7 == 0) return \"NO\";\n    return \"\
    YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp3heqr_y.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpp3heqr_y.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpp3heqr_y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5ok5wom.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy5ok5wom.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpy5ok5wom.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5ok5wom.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyir87ej0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpyir87ej0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpyir87ej0.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyir87ej0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_btomnbd.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_btomnbd.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_btomnbd.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_btomnbd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    // your code goes here\n    long start\
    \ = max(interval1[0], interval2[0]);\n    long end = min(interval1[1], interval2[1]);\n\
    \    long diff = end - start;\n    if (diff < 0)\n        return \"NO\";\n   \
    \ if (diff == 0)\n        return \"YES\";\n    if (diff == 1)\n        return\
    \ \"NO\";\n    if (diff == 2)\n        return \"YES\";\n    if (diff % 2 == 0)\n\
    \        return \"NO\";\n    for (long i = 3; i <= sqrt(diff); i += 2)\n    {\n\
    \        if (diff % i == 0)\n            return \"NO\";\n    }\n    return \"\
    YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx5e_ls6v.d(27): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpx5e_ls6v.d(28): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpx5e_ls6v.d(40): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpx5e_ls6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zro3d4y.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_zro3d4y.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_zro3d4y.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_zro3d4y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    if (len == 0)\n        return \"\
    YES\";\n    if (len == 1)\n        return \"NO\";\n    if (len == 2)\n       \
    \ return \"YES\";\n    if (len % 2 == 0)\n        return \"NO\";\n    for (auto\
    \ i = 3; i <= sqrt(len); i += 2)\n    {\n        if (len % i == 0)\n         \
    \   return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpelj2atev.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpelj2atev.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpelj2atev.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0virnbrn.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp0virnbrn.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp0virnbrn.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0virnbrn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0) return \"NO\";\n    if (length == 1) return \"NO\";\n  \
    \  if (length == 2) return \"YES\";\n    if (length % 2 == 0) return \"NO\";\n\
    \    for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length %\
    \ i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_8ag83h.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpm_8ag83h.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpm_8ag83h.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm_8ag83h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 0) return \"NO\";\n    if (len == 1) return \"YES\";\n   \
    \ if (len == 2) return \"NO\";\n    if (len % 2 == 0) return \"NO\";\n    for\
    \ (long i = 3; i * i <= len; i += 2) {\n        if (len % i == 0) return \"NO\"\
    ;\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5dig2kad.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp5dig2kad.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5dig2kad.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupsf2vu8.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpupsf2vu8.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpupsf2vu8.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupsf2vu8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto length = end - start;\n\
    \    if (length < 0) return \"NO\";\n    if (length == 0) return \"YES\";\n  \
    \  if (length == 1) return \"NO\";\n    if (length == 2) return \"YES\";\n   \
    \ if (length % 2 == 0) return \"NO\";\n    for (auto i = 3; i <= sqrt(length);\
    \ i += 2)\n    {\n        if (length % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87slnift.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp87slnift.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp87slnift.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpur0gfiti.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpur0gfiti.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpur0gfiti.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpur0gfiti.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfn5nlk2.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpqfn5nlk2.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpqfn5nlk2.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfn5nlk2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long diff = end - start;\n\
    \    if (diff < 0)\n        return \"NO\";\n    return isPrime(diff) ? \"YES\"\
    \ : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprdk5yefi.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmprdk5yefi.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmprdk5yefi.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdk5yefi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    return isPrime(length) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkkg8auv.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpbkkg8auv.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpbkkg8auv.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkkg8auv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0)\n        return \"NO\";\n    if (length == 1)\n        return\
    \ \"NO\";\n    if (length == 2)\n        return \"YES\";\n    if (length % 2 ==\
    \ 0)\n        return \"NO\";\n    for (long i = 3; i <= sqrt(length); i += 2)\n\
    \    {\n        if (length % i == 0)\n            return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpavwsvt1z.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpavwsvt1z.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpavwsvt1z.d(37): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpavwsvt1z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    for (long i = 2; i < length; i++)\n    {\n     \
    \   if (length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zmep4pg.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp8zmep4pg.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp8zmep4pg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzdeqq88l.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpzdeqq88l.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpzdeqq88l.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdeqq88l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsq2d75od.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsq2d75od.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsq2d75od.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsq2d75od.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    return isPrime(len) ? \"YES\" :\
    \ \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2fn_6y9.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpe2fn_6y9.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpe2fn_6y9.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2fn_6y9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo2r2e79m.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpo2r2e79m.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpo2r2e79m.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2r2e79m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt59etf8f.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpt59etf8f.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpt59etf8f.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt59etf8f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppy3vtp7c.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmppy3vtp7c.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmppy3vtp7c.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy3vtp7c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvlqx1h2.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmppvlqx1h2.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmppvlqx1h2.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppvlqx1h2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    if (start == end) return \"YES\";\n    return isPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvd84doln.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpvd84doln.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpvd84doln.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd84doln.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i < length; i += 2)\n        if (length % i == 0)\n     \
    \       return \"NO\";\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpam5ujxta.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpam5ujxta.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpam5ujxta.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length % i\
    \ == 0)\n            return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6j0la6r.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_6j0la6r.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_6j0la6r.d(39): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_6j0la6r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_vexoziu.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_vexoziu.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_vexoziu.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vexoziu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length <= 0) return \"NO\";\n    if (length == 1) return \"NO\";\n  \
    \  if (length == 2) return \"YES\";\n    if (length % 2 == 0) return \"NO\";\n\
    \    for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length %\
    \ i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp68m7422_.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp68m7422_.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp68m7422_.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp68m7422_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    // your code goes here\n    auto start\
    \ = max(interval1[0], interval2[0]);\n    auto end = min(interval1[1], interval2[1]);\n\
    \    if (start > end) return \"NO\";\n    return isPrime(end - start + 1) ? \"\
    YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzz8zqp5.d(27): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpqzz8zqp5.d(28): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpqzz8zqp5.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzz8zqp5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1j55jqrp.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp1j55jqrp.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp1j55jqrp.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j55jqrp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4uuiy1_u.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp4uuiy1_u.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp4uuiy1_u.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4uuiy1_u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0) return \"NO\";\n    if (len == 1) return \"YES\";\n  \
    \  if (len == 2) return \"NO\";\n    for (long i = 2; i < len; i++)\n    {\n \
    \       if (len % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeu5ue4yj.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpeu5ue4yj.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpeu5ue4yj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7d4dg20.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpb7d4dg20.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpb7d4dg20.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7d4dg20.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    return isPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph4mhszng.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmph4mhszng.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmph4mhszng.d(28): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4mhszng.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 0)\n        return\
    \ \"YES\";\n    if (length == 1)\n        return \"NO\";\n    if (length == 2)\n\
    \        return \"YES\";\n    if (length % 2 == 0)\n        return \"NO\";\n \
    \   for (long i = 3; i * i <= length; i += 2)\n        if (length % i == 0)\n\
    \            return \"NO\";\n    return \"YES\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qb831_r.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp9qb831_r.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp9qb831_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0)\n        return \"NO\";\n    return isPrime(len) ? \"YES\" :\
    \ \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcblke8ru.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpcblke8ru.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpcblke8ru.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcblke8ru.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4it9mi6.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpr4it9mi6.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpr4it9mi6.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4it9mi6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp38q42lor.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp38q42lor.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp38q42lor.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38q42lor.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    long len = end - start + 1;\n    if (len == 2)\n     \
    \   return \"YES\";\n    if (len % 2 == 0)\n        return \"NO\";\n    for (long\
    \ i = 3; i * i <= len; i += 2)\n        if (len % i == 0)\n            return\
    \ \"NO\";\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87cw1868.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp87cw1868.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp87cw1868.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl950h35a.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpl950h35a.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpl950h35a.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl950h35a.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0j4q2b4.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpn0j4q2b4.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpn0j4q2b4.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0j4q2b4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx9bl_myr.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpx9bl_myr.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpx9bl_myr.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9bl_myr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len < 0) return \"NO\";\n    if (len == 1) return \"YES\";\n   \
    \ if (len == 2) return \"NO\";\n    if (len % 2 == 0) return \"NO\";\n    for\
    \ (long i = 3; i <= sqrt(len); i += 2)\n    {\n        if (len % i == 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkpus7jo0.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpkpus7jo0.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpkpus7jo0.d(33): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkpus7jo0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    // your code here\n    long start = max(interval1[0],\
    \ interval2[0]);\n    long end = min(interval1[1], interval2[1]);\n    if (start\
    \ > end) return \"NO\";\n    long length = end - start + 1;\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsuo2dl0a.d(27): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpsuo2dl0a.d(28): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpsuo2dl0a.d(31): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsuo2dl0a.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    if (length < 0)\n        return \"NO\";\n    if (length == 1)\n        return\
    \ \"NO\";\n    if (length == 2)\n        return \"YES\";\n    for (long i = 2;\
    \ i < length; i++)\n    {\n        if (length % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphz46ypou.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmphz46ypou.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphz46ypou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqf96tkag.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpqf96tkag.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpqf96tkag.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf96tkag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    auto len = end - start + 1;\n    if (len == 1)\n     \
    \   return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    if (len %\
    \ 2 == 0)\n        return \"NO\";\n    for (int i = 3; i <= sqrt(len); i += 2)\n\
    \    {\n        if (len % i == 0)\n            return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpluzjfou9.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpluzjfou9.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpluzjfou9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    auto len = end - start;\n\
    \    if (len < 0) return \"NO\";\n    if (len == 0) return \"YES\";\n    if (len\
    \ == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    for (int i = 2;\
    \ i < len; i++)\n    {\n        if (len % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfs_w0_63.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpfs_w0_63.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpfs_w0_63.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end)\n     \
    \   return \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n\
    }\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk84ytd6.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpyk84ytd6.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpyk84ytd6.d(30): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk84ytd6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0)\n        return \"NO\";\n    if (len == 1)\n        return\
    \ \"YES\";\n    if (len == 2)\n        return \"NO\";\n    if (len % 2 == 0)\n\
    \        return \"NO\";\n    for (long i = 3; i <= sqrt(len); i += 2)\n    {\n\
    \        if (len % i == 0)\n            return \"NO\";\n    }\n    return \"YES\"\
    ;\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_a2wumah.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmp_a2wumah.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmp_a2wumah.d(37): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_a2wumah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long len = end - start +\
    \ 1;\n    if (len <= 0)\n        return \"NO\";\n    if (len == 1)\n        return\
    \ \"YES\";\n    if (len == 2)\n        return \"NO\";\n    for (long i = 2; i\
    \ <= sqrt(len); i++)\n    {\n        if (len % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy5n_d90h.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpy5n_d90h.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpy5n_d90h.d(35): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpy5n_d90h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    long length = end - start;\n\
    \    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate\
    \ = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"\
    NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L,\
    \ -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L,\
    \ 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) ==\
    \ \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n \
    \   assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0_ajln5.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpo0_ajln5.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpo0_ajln5.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0_ajln5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    long start = max(interval1[0], interval2[0]);\n\
    \    long end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi4tujswr.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpi4tujswr.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpi4tujswr.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4tujswr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n \
    \   intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5,\
    \ 5)) ==> \"YES\"\n    \n*/\nstring intersection(Tuple!(long, long) interval1,\
    \ Tuple!(long, long) interval2) \n{\n    auto start = max(interval1[0], interval2[0]);\n\
    \    auto end = min(interval1[1], interval2[1]);\n    if (start > end) return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgzh6p_r3.d(26): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmpgzh6p_r3.d(27): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\n/tmp/tmpgzh6p_r3.d(29): Error: undefined identifier\
    \ `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzh6p_r3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
