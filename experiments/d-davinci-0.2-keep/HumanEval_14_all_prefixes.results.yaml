name: HumanEval_14_all_prefixes
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpashe3iz0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpashe3iz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvyfp1_ff.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvyfp1_ff.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpvyfp1_ff.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpvyfp1_ff.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpvyfp1_ff.d(85): Error: expression expected, not `;`\\n/tmp/tmpvyfp1_ff.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpvyfp1_ff.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpvyfp1_ff.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpvyfp1_ff.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpvyfp1_ff.d(91): Error: expression expected, not `}`\\n/tmp/tmpvyfp1_ff.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpvyfp1_ff.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpvyfp1_ff.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpvyfp1_ff.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpvyfp1_ff.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyfp1_ff.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7e97tic2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e97tic2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hz_mqt5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hz_mqt5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphdr5brxc.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmphdr5brxc.d(84): Error: found `{` when expecting `,`\\n/tmp/tmphdr5brxc.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmphdr5brxc.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmphdr5brxc.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmphdr5brxc.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmphdr5brxc.d(85): Error: expression expected, not `;`\\n/tmp/tmphdr5brxc.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmphdr5brxc.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmphdr5brxc.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmphdr5brxc.d(89): Error: found `;` when expecting `,`\\n/tmp/tmphdr5brxc.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmphdr5brxc.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmphdr5brxc.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmphdr5brxc.d(91): Error: expression expected, not `}`\\n/tmp/tmphdr5brxc.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmphdr5brxc.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmphdr5brxc.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmphdr5brxc.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmphdr5brxc.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdr5brxc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1vt6mzz.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1vt6mzz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpexjknckk.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexjknckk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkz7pbux5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkz7pbux5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqwtaodcw.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwtaodcw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqjbgzvp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqjbgzvp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsdtjs07p.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdtjs07p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvn8c_sa4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn8c_sa4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n        result ~=\
    \ string[0..i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1arylkgb.d(11): Error: `string` is used as a type\\n/tmp/tmp1arylkgb.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1arylkgb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplkjdr5k0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkjdr5k0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaio6haeb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaio6haeb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4o5u_drc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4o5u_drc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpitu59hof.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitu59hof.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.traits;\n    import std.algorithm;\n    import std.range;\n  \
    \  import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.traits;\n    import std.algorithm;\n    import std.range;\n  \
    \  import std.conv;\n    import std.string;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.traits;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.string;\n    import std.array;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk27qnqzx.d(81): Error: identifier expected following `package`\\\
    n/tmp/tmpk27qnqzx.d(81): Error: `;` expected\\n/tmp/tmpk27qnqzx.d(89): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk27qnqzx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp459dywww.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp459dywww.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybcvkste.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybcvkste.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjhqyb5g6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjhqyb5g6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5jr2l2mq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jr2l2mq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ku8fw6d.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ku8fw6d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp200nashb.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmp200nashb.d(84): Error: found `{` when expecting `,`\\n/tmp/tmp200nashb.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp200nashb.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp200nashb.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmp200nashb.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp200nashb.d(85): Error: expression expected, not `;`\\n/tmp/tmp200nashb.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp200nashb.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp200nashb.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp200nashb.d(89): Error: found `;` when expecting `,`\\n/tmp/tmp200nashb.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmp200nashb.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp200nashb.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp200nashb.d(91): Error: expression expected, not `}`\\n/tmp/tmp200nashb.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp200nashb.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp200nashb.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp200nashb.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp200nashb.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp200nashb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbp7l6cmi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp7l6cmi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohzd_2pa.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohzd_2pa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprnw074yi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnw074yi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1q9kqrb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1q9kqrb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporpu4k4g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporpu4k4g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfyl3srti.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfyl3srti.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings_2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings_3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgyi6cpi.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmpcgyi6cpi.d(80): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpcgyi6cpi.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpcgyi6cpi.d(87): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcgyi6cpi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9re7hsdv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9re7hsdv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplcyej3tf.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcyej3tf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3zvqkqw.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3zvqkqw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8m9hxwz8.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m9hxwz8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjaplfb0u.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjaplfb0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjvgmkzim.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvgmkzim.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    foreach(j; i .. string.length) \n        {\n            result ~= string[i\
    \ ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa4o3cq8t.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmpa4o3cq8t.d(80): Error: found `{` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(81):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpa4o3cq8t.d(81): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(81): Error: expression expected,\
    \ not `=`\\n/tmp/tmpa4o3cq8t.d(81): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpa4o3cq8t.d(81): Error: expression expected, not `;`\\n/tmp/tmpa4o3cq8t.d(83):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(83): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(84): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpa4o3cq8t.d(85): Error: found `;` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(86):\
    \ Error: expression expected, not `}`\\n/tmp/tmpa4o3cq8t.d(87): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpa4o3cq8t.d(87): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpa4o3cq8t.d(87): Error: expression expected, not `}`\\n/tmp/tmpa4o3cq8t.d(87):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpa4o3cq8t.d(87): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpa4o3cq8t.d(87): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpa4o3cq8t.d(87):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpa4o3cq8t.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4o3cq8t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp871xzpq3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp871xzpq3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw31zsk0f.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw31zsk0f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ahtqmyx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ahtqmyx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gugaz49.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gugaz49.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    return iota(string.length + 1).map!(i => string[0 .. i])();\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfonsbp2v.d(11): Error: undefined identifier `iota`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfonsbp2v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkbw1u2b.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkbw1u2b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmek23o1j.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmek23o1j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjglwrhfq.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjglwrhfq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzp66z5f4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzp66z5f4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5w0mvinh.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w0mvinh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcp5pu_1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcp5pu_1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nnw84ua.d(81): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0nnw84ua.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpicwwkzj5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicwwkzj5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnjkyjirc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjkyjirc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpnd27fr.d(83): Error: found `unittest` instead of statement\\\
    n/tmp/tmpxpnd27fr.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpxpnd27fr.d(91): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxpnd27fr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn_yi2if.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn_yi2if.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2rwaw1hi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rwaw1hi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29nr02an.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29nr02an.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpigp6ljbw.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigp6ljbw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqgutg_6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqgutg_6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprj5vj8o0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprj5vj8o0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7vsbz48.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7vsbz48.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjuu57ec7.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjuu57ec7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5qs4ama.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5qs4ama.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkb1hjjn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkb1hjjn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi91t7dj4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi91t7dj4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplm0zso5g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm0zso5g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcw6cyytm.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpcw6cyytm.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpcw6cyytm.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpcw6cyytm.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpcw6cyytm.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpcw6cyytm.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpcw6cyytm.d(85): Error: expression expected, not `;`\\n/tmp/tmpcw6cyytm.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpcw6cyytm.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpcw6cyytm.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpcw6cyytm.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpcw6cyytm.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpcw6cyytm.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpcw6cyytm.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpcw6cyytm.d(91): Error: expression expected, not `}`\\n/tmp/tmpcw6cyytm.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpcw6cyytm.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpcw6cyytm.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpcw6cyytm.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpcw6cyytm.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcw6cyytm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt23j3hi_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt23j3hi_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpud7v297_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud7v297_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmviog6i_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmviog6i_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1fkihord.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fkihord.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu7mkrdst.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7mkrdst.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6mwh9h2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6mwh9h2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6ce3hls.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6ce3hls.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpblni8vr3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblni8vr3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjduay4gy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjduay4gy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n        result ~=\
    \ string[0..i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8svcgvx6.d(11): Error: `string` is used as a type\\n/tmp/tmp8svcgvx6.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8svcgvx6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19o584_7.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19o584_7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxfqx23y5.d(11): Error: `string` is used as a type\\n/tmp/tmpxfqx23y5.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfqx23y5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjqsgmvmd.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqsgmvmd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nh_4q85.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nh_4q85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuo88wi4y.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo88wi4y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphbrpr9s9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbrpr9s9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplqjus6ve.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqjus6ve.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ivrlqq1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ivrlqq1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0i_xb8an.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0i_xb8an.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkae_hqcp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkae_hqcp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpikgnwsho.d(11): Error: `string` is used as a type\\n/tmp/tmpikgnwsho.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikgnwsho.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc767f3dd.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc767f3dd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_66ytxa2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_66ytxa2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp674arkbt.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp674arkbt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg4n23d_v.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4n23d_v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzewb19ve.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzewb19ve.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb2vbn727.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2vbn727.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgyhwj0gm.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyhwj0gm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81hylj1l.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81hylj1l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1c5vw44m.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c5vw44m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(string s; string[]) \n    {\n        result\
    \ ~= s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadssv3_e.d(11): Error: `string` is used as a type\\n/tmp/tmpadssv3_e.d(12):\
    \ Error: `string` is used as a type\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpadssv3_e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hgawzpy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hgawzpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwfux3xp0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfux3xp0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphvd_il8m.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvd_il8m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09yrmxs1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09yrmxs1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_r74qg3u.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_r74qg3u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphuat6iv5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuat6iv5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_r13tix.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_r13tix.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yv7mno4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yv7mno4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfo78o0l9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfo78o0l9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8asfdrxo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8asfdrxo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length) \n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1xx5u4f.d(11): Error: `string` is used as a type\\n/tmp/tmpf1xx5u4f.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1xx5u4f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9dc_v60.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9dc_v60.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7qbdqi2m.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbdqi2m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolc4bhjj.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolc4bhjj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n        ret ~=\
    \ string[0 .. i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa1nxkt8g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1nxkt8g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_spkqrf0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_spkqrf0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp61pg1qei.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61pg1qei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i\
    \ .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings('abc')\n   \
    \ ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaivbj7gs.d(81): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaivbj7gs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtnt26h5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtnt26h5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1qdkn7u.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1qdkn7u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2w89noax.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2w89noax.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1xvhyunb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xvhyunb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vb4wx6v.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vb4wx6v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7c0ffte.d(83): Error: found `unittest` instead of statement\\\
    n/tmp/tmph7c0ffte.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmph7c0ffte.d(91): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph7c0ffte.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzf7m7msn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzf7m7msn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_cx1haa.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_cx1haa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppncam3m5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppncam3m5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2f9p2pi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2f9p2pi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpankeb9cp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpankeb9cp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vm6c69c.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vm6c69c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmd_c4pwq.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmd_c4pwq.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpmd_c4pwq.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpmd_c4pwq.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpmd_c4pwq.d(85): Error: expression expected, not `;`\\n/tmp/tmpmd_c4pwq.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpmd_c4pwq.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpmd_c4pwq.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpmd_c4pwq.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpmd_c4pwq.d(91): Error: expression expected, not `}`\\n/tmp/tmpmd_c4pwq.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpmd_c4pwq.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpmd_c4pwq.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpmd_c4pwq.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpmd_c4pwq.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmd_c4pwq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkfqrkqe.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmkfqrkqe.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpmkfqrkqe.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpmkfqrkqe.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpmkfqrkqe.d(85): Error: expression expected, not `;`\\n/tmp/tmpmkfqrkqe.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpmkfqrkqe.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpmkfqrkqe.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpmkfqrkqe.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpmkfqrkqe.d(91): Error: expression expected, not `}`\\n/tmp/tmpmkfqrkqe.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpmkfqrkqe.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpmkfqrkqe.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpmkfqrkqe.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpmkfqrkqe.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkfqrkqe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvq703dyu.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvq703dyu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnysu2olw.d(83): Error: found `unittest` instead of statement\\\
    n/tmp/tmpnysu2olw.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpnysu2olw.d(91): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpnysu2olw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7h7qjio.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7h7qjio.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    import std.algorithm : map;\n    import std.range : iota;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.string : take;\n    return\
    \ iota(string.length).map!(i => string.take(i + 1)).array;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpay56nxhc.d(15): Error: module `std.string` import `take` not\
    \ found\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay56nxhc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcm_w_60t.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcm_w_60t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0ms0hnh.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0ms0hnh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppwpph4it.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwpph4it.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwiyya94a.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiyya94a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7wlxzol.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7wlxzol.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptp7z0nl7.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp7z0nl7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74yyysc_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74yyysc_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length) \n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcen5w1bq.d(11): Error: `string` is used as a type\\n/tmp/tmpcen5w1bq.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcen5w1bq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpow2mrmu2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow2mrmu2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyb8dsrx2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyb8dsrx2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqzrddabc.d(81): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzrddabc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4v0y4usq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v0y4usq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmi79c13p.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmi79c13p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxx99or1y.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxx99or1y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfugervlz.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfugervlz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpljm82sgo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljm82sgo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpurqaqfhj.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurqaqfhj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptjux3272.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjux3272.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpywopolxr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywopolxr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pnkh7q1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pnkh7q1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqn8hzsyc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqn8hzsyc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48q7qglx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48q7qglx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length) \n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi605gl4v.d(11): Error: `string` is used as a type\\n/tmp/tmpi605gl4v.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi605gl4v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztdz31yn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztdz31yn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpav6scr8i.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav6scr8i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpso71j4xo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpso71j4xo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmrglj_du.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrglj_du.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', '\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk8l8hn6.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk8l8hn6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n \
    \       result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfn5ed_yx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfn5ed_yx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp74xtxtze.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74xtxtze.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyx978n5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyx978n5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpponwa57j.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpponwa57j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmqdtlon.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmqdtlon.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotlakfhx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotlakfhx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkqddhep2.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpkqddhep2.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpkqddhep2.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpkqddhep2.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpkqddhep2.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpkqddhep2.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpkqddhep2.d(85): Error: expression expected, not `;`\\n/tmp/tmpkqddhep2.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpkqddhep2.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpkqddhep2.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpkqddhep2.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpkqddhep2.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpkqddhep2.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpkqddhep2.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpkqddhep2.d(91): Error: expression expected, not `}`\\n/tmp/tmpkqddhep2.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpkqddhep2.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpkqddhep2.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpkqddhep2.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpkqddhep2.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqddhep2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkhr2tfl.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpbkhr2tfl.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpbkhr2tfl.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpbkhr2tfl.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpbkhr2tfl.d(85): Error: expression expected, not `;`\\n/tmp/tmpbkhr2tfl.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpbkhr2tfl.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpbkhr2tfl.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpbkhr2tfl.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpbkhr2tfl.d(91): Error: expression expected, not `}`\\n/tmp/tmpbkhr2tfl.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpbkhr2tfl.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpbkhr2tfl.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpbkhr2tfl.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpbkhr2tfl.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkhr2tfl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpio2hc_qv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpio2hc_qv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes\
    \ ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzmhefb8w.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmhefb8w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes('abc')\n\
    \    ['c', 'bc', 'abc']\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings_2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings('abc')\n\
    \    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \n*/\nstring[] all_substrings_3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~=\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6rbw01hl.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmp6rbw01hl.d(84): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp6rbw01hl.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp6rbw01hl.d(91): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6rbw01hl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbrbgbdfj.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrbgbdfj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtw85z85.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtw85z85.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp740xp3d5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp740xp3d5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nb862md.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nb862md.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1d8gm6z.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1d8gm6z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6klndra5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6klndra5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu2bn4x18.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2bn4x18.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3f8jq9b9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f8jq9b9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz3n1zydb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3n1zydb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.string;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n\
    \    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.traits;\n   \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4d8b1u1.d(78): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4d8b1u1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeejiny_u.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeejiny_u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9yyk4r1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9yyk4r1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsesz26qe.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsesz26qe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc6zxu4hb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6zxu4hb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp98t2h9tu.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98t2h9tu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7n1qdl6g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7n1qdl6g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(int i; 0..string.length)\n    {\n        result\
    \ ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy6hknkwy.d(11): Error: `string` is used as a type\\n/tmp/tmpy6hknkwy.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6hknkwy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyku1ifoo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyku1ifoo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuw_p6hc3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuw_p6hc3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57ausndu.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57ausndu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfst2yypi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfst2yypi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj2b92mrv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2b92mrv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy046b_jp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy046b_jp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc3is5o92.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3is5o92.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_eniu11.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_eniu11.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89kobh38.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89kobh38.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0\
    \ .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrk6qhew.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrk6qhew.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes('abc')\n\
    \    ['a', 'ab', 'abc']\n    \n*/\nstring[] all_prefixes(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result\
    \ ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprgg8oco3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgg8oco3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
