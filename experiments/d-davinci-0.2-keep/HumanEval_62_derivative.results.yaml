name: HumanEval_62_derivative
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the value of a polynomial at a\
    \ given point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n       \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nks_61k.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nks_61k.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++) \n    {\n        res[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    57\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> polyval([3, 1, 2, 4, 5], 2)\n    57\n    >>> polyval([1, 2, 3], 2)\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83_c8tj4.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83_c8tj4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 0.6666666666666666,\
    \ 1.25, 1.2]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpml9z6pjw.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpml9z6pjw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  foreach (i, x; xs) \n    {\n        if (i == 0) continue;\n        result[i\
    \ - 1] = x * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n   \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tybwpnk.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tybwpnk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    75\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    75\n    >>> value([1, 2, 3], 2)\n    17\n    \n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([1, 2, 3],\
    \ 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([1, 2, 3], 2)\n \
    \   17\n    >>> polyval([1, 2, 3], 3)\n    34\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n   \
    \ >>> polyval([1, 2, 3], 3)\n    34\n*/\nlong polyval\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx689ghcd.d(78): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx689ghcd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\n    20\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp253dx9y4.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp253dx9y4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++) \n    {\n        res[i] = (i + 1) * xs[i +\
    \ 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    49\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> polyval([3, 1, 2, 4, 5], 2)\n    49\n    >>> polyval([1, 2, 3], 2)\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnhcheyxv.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhcheyxv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo4h6seoe.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpo4h6seoe.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo4h6seoe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppgjo6z9m.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgjo6z9m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    foreach\
    \ (i, x; xs) \n    {\n        if (i == 0) \n            continue;\n        res[i\
    \ - 1] = i * x;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    foreach\
    \ (i, x; xs) \n    {\n        if (i == 0) \n            continue;\n        res[i\
    \ - 1] = x * i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the value of a polynomial at a\
    \ given point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    45\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    45\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    45\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    45\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n       \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj9kf8130.d(74): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9kf8130.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp102e804m.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp102e804m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> value([3, 1, 2, 4, 5], 2)\n    49\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> value([3, 1,\
    \ 2, 4, 5], 2)\n    49\n*/\nlong value(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> value([3, 1, 2, 4, 5], 2)\n    49\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n   \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ditp1td.d(77): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ditp1td.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_cp9t9e7.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_cp9t9e7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    67\n    >>>\
    \ value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    67\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (long i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1,\
    \ 2, 3], 3)\n    34\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n\
    \    34\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (long i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (long i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n \
    \   >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprdjfx5f_.d(81): Error: found `unittest` instead of statement\\\
    n/tmp/tmprdjfx5f_.d(86): Error: found `;` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdjfx5f_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpktp31vd1.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpktp31vd1.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpktp31vd1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  foreach (i, x; xs) \n    {\n        if (i > 0) \n        {\n            result[i\
    \ - 1] = i * x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7itcwzl7.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7itcwzl7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n-1];\n\
    \    for (int i = 0; i < n-1; i++)\n        ys[i] = xs[i+1] * (i+1);\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>>\
    \ integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[] xs)\
    \ \n{\n    int n = xs.length;\n    long[] ys = new long[n+1];\n    for (int i\
    \ = 0; i < n; i++)\n        ys[i+1] = xs[i] / (i+1);\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    79\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n\
    \    for (int i = 0; i < n; i++)\n        y += xs[i] * pow(x, i);\n    return\
    \ y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    79\n    >>> evaluate([1, 2, 3], 2)\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgazywds0.d(57): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgazywds0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp34yteewd.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34yteewd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n   \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgf98pyzn.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf98pyzn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++) \n    {\n        res[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at point x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    55\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        res += xs[i] * pow(x, i);\n\
    \    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at point x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    55\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1i95uueh.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i95uueh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial at x.\n    >>> evaluate([1, 2, 3], 2)\n    17\n    >>> evaluate([1,\
    \ 2, 3], 0)\n    1\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial at x.\n    >>> evaluate([1, 2, 3],\
    \ 2)\n    17\n    >>> evaluate([1, 2, 3], 0)\n    1\n    >>> evaluate([1, 2, 3],\
    \ 1)\n    6\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> evaluate([1, 2, 3], 2)\n    17\n    >>> evaluate([1, 2, 3], 0)\n\
    \    1\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n    >>> evaluate([1, 2\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpofricmpl.d(76): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofricmpl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1,\
    \ 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n      \
    \  result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at a point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n  \
    \  49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    \
    \    result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at a point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n       \
    \ result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at a point.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hytvvs3.d(72): Error: semicolon expected, not `unittest`\\n/tmp/tmp3hytvvs3.d(72):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3hytvvs3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    65\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    65\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    65\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    81\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    81\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hg1cj7v.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hg1cj7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    65\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    65\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmfkfrubw.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfkfrubw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i]\
    \ * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph_dhye90.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42850d]\\n??:? void tmph_dhye90.__unittest_L22_C1()\
    \ [0x427fa6]\\n??:? void tmph_dhye90.__modtest() [0x428290]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b47e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430709]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430695]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b455]\\n??:? runModuleUnitTests [0x42c3c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428957]\\n??:? _d_run_main [0x4288c2]\\n??:? main [0x4282a3]\\\
    n??:? __libc_start_main [0x6b655554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    return [0] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    97\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    foreach (i, a; xs) \n    {\n        y\
    \ += a * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    97\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long y = 0;\n    foreach (i, a; xs) \n    {\n        y += a * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] +\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_mnbj0h.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_mnbj0h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    85\n    >>> value([1,\
    \ 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    85\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ value([3, 1, 2, 4, 5], 2)\n    85\n    >>> value([1, 2, 3], 3)\n    20\n   \
    \ \n*/\nlong value(long[] xs, long x) \n{\n    long res = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> value([3, 1, 2, 4, 5], 2)\n    85\n    >>> value([1, 2, 3], 3)\n    20\n\
    \    \n*/\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxelrkbbn.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxelrkbbn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsy78p4sn.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy78p4sn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 0.666667,\
    \ 1.25, 1.2]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ value([3, 1, 2, 4, 5], 2)\n    47\n    >>> value([1, 2, 3], 2)\n    17\n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> value([3,\
    \ 1, 2, 4, 5], 2)\n    47\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3, 1, 2, 4, 5],\
    \ 2)\n    47\n    >>> value([1,\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6c4gwht7.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c4gwht7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1,\
    \ 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n      \
    \  result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n       \
    \ result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++)\n        result\
    \ += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyx47bq4a.d(73): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyx47bq4a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([1, 2, 3], 4)\n    57\n    >>> evaluate([1,\
    \ 2, 3], 0)\n    1\n    >>> evaluate([1, 2, 3], -1)\n    -4\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([1,\
    \ 2, 3], 4)\n    57\n    >>> evaluate([1, 2, 3], 0)\n    1\n    >>> evaluate([1,\
    \ 2, 3], -1)\n    -4\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([1, 2, 3], 4)\n    57\n    >>> evaluate([1,\
    \ 2, 3], 0)\n    1\n    >>> evaluate([1, 2, 3], -1)\n    -4\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([1,\
    \ 2, 3], 4)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcj083_a0.d(76): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcj083_a0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    73\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    73\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt76x3k5g.d(64): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt76x3k5g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm76ut2t2.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm76ut2t2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_e65602.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_e65602.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    81\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return a list of roots of this polynomial.\n    >>> roots([3, 1, 2, 4, 5])\n\
    \    [-1.0, -1.0, -1.0]\n    >>> roots([1, 2\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdqato3kl.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqato3kl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    28\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    28\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    28\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i]\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgf3xmyz0.d(66): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpgf3xmyz0.d(76): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpgf3xmyz0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    69\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    69\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk3v83xgu.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3v83xgu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    75\n    >>>\
    \ value([1, 2, 3], 1)\n    6\n    \n*/\nlong value(long[] xs, long x) \n{\n  \
    \  long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    75\n    >>>\
    \ value([1, 2, 3], 1)\n    6\n    \n*/\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n \
    \   61\n    >>> evaluate([1, 2, 3], 0)\n    1\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 0)\n    1\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 0)\n    1\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 0)\n    1\n*/\nlong evaluate(long[]\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2au4lap0.d(78): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2au4lap0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([1, 2, 3], 5)\n    86\n*/\nlong value(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> value([1, 2, 3], 5)\n    86\n*/\nlong\
    \ value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> value([1,\
    \ 2, 3], 5)\n    86\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([1, 2, 3], 5)\n    86\n*/\nlong value(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> value([1, 2, 3], 5)\n    86\n\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoxk2rwq_.d(78): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxk2rwq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = (i + 1) * xs[i + 1];\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([1,\
    \ 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1,\
    \ 2, 3], 3)\n    34\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long res\
    \ = 0\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3wzihx5.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpw3wzihx5.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw3wzihx5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n \
    \   47\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2, 3], 1)\n    6\n*/\nlong evaluate(long[]\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8j9ukpt.d(78): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8j9ukpt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    81\n    >>> value([1,\
    \ 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    81\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    63\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    63\n    >>> value([1, 2, 3], 2)\n    17\n    \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpid84er4q.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid84er4q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    47\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4,\
    \ 5], 2)\n    47\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a6pa6r7.d(63): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a6pa6r7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  foreach (i, x; xs) \n    {\n        if (i > 0) \n        {\n            result[i\
    \ - 1] = i * x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i]\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7f7iceji.d(66): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp7f7iceji.d(76): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp7f7iceji.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{ \n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{ \n    return [0] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    81\n    >>> evaluate([1, 2, 3], 3)\n    30\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a\
    \ => a[0] * pow(x, a[1])).sum;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    81\n    >>> evaluate([1, 2,\
    \ 3], 3)\n    30\n    \n*/\nlong evaluate(long[] xs, long x) \n{ \n    return\
    \ xs.zip(xs.length.iota).map!(a => a[0] * pow(x, a[1])).sum;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x +\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfri35uzv.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfri35uzv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n    >>> integral([1,\
    \ 2, 3, 4])\n    [0, 1, 1, 1, 1]\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3,\
    \ 0.5, 0.6666666666666666, 1.25, 1.2]\n*/\nlong[] integral(long[] xs) \n{\n  \
    \  long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([1, 2, 3],\
    \ 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n    >>> polyval([1, 2, 3],\
    \ 4)\n    57\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n\
    \    34\n    >>> polyval([1, 2, 3], 4)\n    57\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] *\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0m6vvq0_.d(73): Error: expression expected, not `unittest`\\\
    n/tmp/tmp0m6vvq0_.d(74): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp0m6vvq0_.d(83): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0m6vvq0_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x = x0.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    79\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x0)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x0, i);\n    }\n    return result;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of this polynomial at x = x0.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    79\n    >>> evaluate([1, 2\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4wyl384q.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4wyl384q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>>\
    \ integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n        ys[i + 1] = xs[i] / (i + 1);\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    97\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    \
    \    y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    97\n    >>>\
    \ value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs, long x)\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpah5mh4id.d(65): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah5mh4id.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    41\n    >>> value([1,\
    \ 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    41\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value(2, [1, 2, 3])\n    17\n    >>> value(3, [1, 2, 3])\n  \
    \  34\n*/\nlong value(long x, long[] xs) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> value(2, [1, 2, 3])\n    17\n    >>> value(3, [1, 2, 3])\n    34\n*/\n\
    long value(long x, long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> value(2,\
    \ [1, 2, 3])\n    17\n    >>> value(3, [1, 2, 3])\n    34\n*/\nlong value(long\
    \ x, long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value(2, [1, 2, 3])\n\
    \    17\n    >>> value(3, [1, 2, 3])\n    34\n*/\nlong value(long x, long[] xs)\
    \ \n{\n    long result = 0;\n    for (int i = 0\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9oxw90s4.d(81): Error: semicolon expected, not `unittest`\\n/tmp/tmp9oxw90s4.d(81):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmp9oxw90s4.d(82): Error:\
    \ found `{` when expecting `;` following `for` condition\\n/tmp/tmp9oxw90s4.d(83):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp9oxw90s4.d(83): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmp9oxw90s4.d(83): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oxw90s4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n    >>> integral([1, 2, 3, 4])\n\
    \    [0, 1, 1, 1, 1]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result =\
    \ new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n        result[i\
    \ + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at a point.\n    >>> evaluate([1, 2, 3], 4)\n    57\n    >>> evaluate([1,\
    \ 2, 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    -2\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at a point.\n    >>> evaluate([1, 2, 3], 4)\n    57\n\
    \    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    -2\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a point.\n    >>> evaluate([1,\
    \ 2, 3], 4)\n    57\n    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9_v2u5f.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9_v2u5f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbon9au79.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbon9au79.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    69\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    69\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    if (xs.length == 0)\n    {\n        return xs;\n\
    \    }\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 3)\n\
    \    28\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpke0b_ntc.d(64): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpke0b_ntc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppuk34xrc.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuk34xrc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i + 1)\
    \ * xs[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 1.25, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n  \
    \  \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    71\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    71\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp92buy3ma.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92buy3ma.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>>\
    \ integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n        ys[i + 1] = xs[i] / (i + 1);\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    61\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    61\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x)\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplmvhkled.d(65): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmvhkled.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0,\
    \ 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n    return [0] ~ xs.map!(a =>\
    \ a / cast(long)(xs.length + 1)).array;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    57\n    >>> polyval([1,\
    \ 2, 3], 2)\n    17\n*/\nlong polyval(long[] xs, long x) \n{\n    return xs.zip(xs.map!(a\
    \ => a * x).array).map!(a => a[0] * a[1]).sum;\n}\n/*\n    Return the value of\
    \ a polynomial at a given point.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    57\n\
    \    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[] xs, long x) \n\
    {\n    return xs.zip(xs.map!(a => a * x).array).map!(a => a[0] * a[1]).sum;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.zip(xs.map!(a => a * x).array).map!(a => a[0]\
    \ * a[1]).sum;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> polyval([3, 1, 2, 4\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp70ntf7bd.d(61): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70ntf7bd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * iota(1, a.length\
    \ + 1)).array;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0,\
    \ 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n    return [0] ~ xs.map!(a =>\
    \ a / iota(1, a.length + 1)).array;\n}\n/*\n    Return the value of a polynomial.\n\
    \    >>> polyval([1, 2, 3], 2)\n    17\n    >>> polyval([1, 2, 3], 3)\n    34\n\
    */\nlong polyval(long[] xs, long x) \n{\n    return xs.map!(a => a * x ^ iota(0,\
    \ a.length)).sum;\n}\n/*\n    Return the value of a polynomial at x = 1.\n   \
    \ >>> poly1d([1, 2, 3])\n    6\n    >>> poly1d([1, 2, 3, 4])\n    10\n*/\nlong\
    \ poly1d(long[] xs) \n{\n    return xs.sum;\n}\n/*\n    Return the value of a\
    \ polynomial at x = -1.\n    >>> poly1d([1, 2, 3])\n    0\n    >>> poly1d([1,\
    \ 2, 3, 4])\n    -2\n*/\nlong poly1dm1(long[] xs) \n{\n    return xs.map!(a =>\
    \ a * (-1) ^ iota(0, a.length)).sum;\n}\n/*\n    Return the value of a polynomial\
    \ at x = 0.\n    >>> poly0d([1, 2, 3])\n    3\n    >>> poly0d([1, 2, 3, 4])\n\
    \    4\n*/\nlong poly0d(long[] xs) \n{\n    return xs.back;\n}\n/*\n    Return\
    \ the value of a polynomial at x = -2\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09tntcsl.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09tntcsl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (long i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (long i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    51\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    51\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = (i + 1) * xs[i\
    \ + 1];\n    return result;\n}\n/*\n    Return the value of a polynomial at a\
    \ point.\n    >>> value(2, [3, 1, 2, 4, 5])\n    49\n    >>> value(3, [1, 2, 3])\n\
    \    20\n*/\nlong value(long x, long[] xs) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at a point.\n    >>> value(2,\
    \ [3, 1, 2, 4, 5])\n    49\n    >>> value(3, [1, 2, 3])\n    20\n*/\nlong value(long\
    \ x, long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a point.\n    >>> value(2, [3, 1, 2, 4, 5])\n \
    \   49\n    >>> value(3, [1, 2, 3])\n    20\n*/\nlong value(long x, long[] xs)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n       \
    \ result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at a point.\n    >>> value(2, [3, 1, 2, 4, 5])\n    49\n   \
    \ >>> value(3, [1, 2, 3])\n    20\n*/\nlong value(long x, long[] xs) \n{\n   \
    \ long result = 0;\n    for (int i = 0; i < xs.length;\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptpb7xve1.d(73): Error: expression expected, not `unittest`\\\
    n/tmp/tmptpb7xve1.d(74): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpb7xve1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (size_t i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (size_t i = 0;\
    \ i < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 1)\n    15\n    >>> polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 1)\n    15\n    >>> polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong\
    \ polyval(long[] x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4m9_s2e3.d(65): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m9_s2e3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc8a4jf1v.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8a4jf1v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    73\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    73\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpascj8vcb.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpascj8vcb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nlong[] derivative(long[] xs, int\
    \ n) \n{\n    if (n == 0)\n    {\n        return xs;\n    }\n    return derivative(derivative(xs),\
    \ n - 1);\n}\nlong[] derivative(long[] xs, int n, int m) \n{\n    if (n == 0)\n\
    \    {\n        return xs;\n    }\n    return derivative(derivative(xs, m), n\
    \ - 1, m);\n}\nlong[] derivative(long[] xs, int n, int m, int k) \n{\n    if (n\
    \ == 0)\n    {\n        return xs;\n    }\n    return derivative(derivative(xs,\
    \ m, k), n - 1, m, k);\n}\nlong[] derivative(long[] xs, int n, int m, int k, int\
    \ l) \n{\n    if (n == 0)\n    {\n        return xs;\n    }\n    return derivative(derivative(xs,\
    \ m, k, l), n - 1, m, k, l);\n}\nlong[] derivative(long[] xs, int n, int m, int\
    \ k, int l, int o) \n{\n    if (n == 0)\n    {\n        return xs;\n    }\n  \
    \  return derivative(derivative(xs, m, k, l, o), n - 1, m, k, l, o);\n}\nlong[]\
    \ derivative(long[] xs, int n, int m, int k, int l, int o, int p) \n{\n    if\
    \ (n == 0)\n    {\n        return xs;\n    }\n    return derivative(derivative(xs,\
    \ m, k, l, o, p), n - 1, m, k, l, o, p);\n}\nlong[] derivative(long[] xs, int\
    \ n, int m, int k, int l,\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvx_og60b.d(71): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpvx_og60b.d(71): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvx_og60b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    61\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    61\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (long i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3,\
    \ 0.5, 2, 4, 5]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (long i = 0; i < xs.length; i++) \n    {\n        result[i +\
    \ 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at a point x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    51\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (long i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at a point\
    \ x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    51\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a point x.\n    >>> polyval([3, 1,\
    \ 2, 4, 5], 2)\n    51\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < xs.length; i++) \n    {\n        result += xs\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuy2if_7c.d(75): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpuy2if_7c.d(85): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpuy2if_7c.d(85): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy2if_7c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    67\n    >>> evaluate([1, 2, 3], 2)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp95k3ghmd.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95k3ghmd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26_i4pxr.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmp26_i4pxr.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp26_i4pxr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkga5f73o.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkga5f73o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    57\n    >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgupjoqdt.d(71): Error: expression expected, not `unittest`\\\
    n/tmp/tmpgupjoqdt.d(72): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmpgupjoqdt.d(73): Error: expression expected, not `alias`\\n/tmp/tmpgupjoqdt.d(73):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmpgupjoqdt.d(73): Error:\
    \ found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgupjoqdt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([1, 2, 3], 4)\n    57\n\
    \    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    4\n\
    \    >>> evaluate([1, 2, 3], -2)\n    7\n    >>> evaluate([1, 2, 3], -3)\n   \
    \ 12\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([1, 2, 3], 4)\n    57\n    >>> evaluate([1, 2,\
    \ 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    4\n    >>> evaluate([1,\
    \ 2, 3], -2)\n    7\n    >>> evaluate([1, 2, 3], -3)\n    12\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([1,\
    \ 2, 3], 4)\n    57\n    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([1,\
    \ 2, 3], -1)\n    4\n    >>> evaluate([1, 2, 3], -2)\n    7\n    >>> evaluate([1,\
    \ 2, 3],\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztdybr_u.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztdybr_u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\n    20\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf_opwdq.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf_opwdq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    foreach\
    \ (i, x; xs)\n    {\n        if (i == 0)\n            continue;\n        res[i\
    \ - 1] = x * i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> polyval([1\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjsdgt06.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjsdgt06.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    91\n    >>>\
    \ value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the polynomial in the form of a string.\n    >>> str([3, 1, 2, 4,\
    \ 5])\n    '3 + x + 2x^2 + 4x^3 + 5x^4'\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5et7qacj.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5et7qacj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    51\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    51\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbjgyanl.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpcbjgyanl.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcbjgyanl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpihhvhxbp.d(15): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihhvhxbp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++) \n    {\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n    >>> evaluate([1, 2, 3], 0)\n    1\n    >>> evaluate([1,\
    \ 2, 3], 1)\n    6\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzc_4hyj.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzc_4hyj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    57\n    >>> evaluate([1, 2, 3], 3)\n    20\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwg5ks00q.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwg5ks00q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n\
    \    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3],\
    \ 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_r0x4sz1.d(74): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmp_r0x4sz1.d(84): Error: found `main` when expecting `.` following void\\\
    n/tmp/tmp_r0x4sz1.d(84): Error: found `(` when expecting identifier following\
    \ `void`.\\n/tmp/tmp_r0x4sz1.d(84): Error: found `)` when expecting `;` following\
    \ `for` condition\\n/tmp/tmp_r0x4sz1.d(84): Error: found `End of File` when expecting\
    \ `)`\\n/tmp/tmp_r0x4sz1.d(84): Error: found `End of File` instead of statement\\\
    n/tmp/tmp_r0x4sz1.d(84): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_r0x4sz1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (long i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (long i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n  \
    \  return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n*/\nlong evaluate(\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbsz2ypr2.d(68): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpbsz2ypr2.d(68): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsz2ypr2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    97\n    >>>\
    \ polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong polyval(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    97\n    >>> polyval([1, 2, 3], 2)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdu8q5ja.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdu8q5ja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    47\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    return [0] ~ xs.map!(a => a / cast(long)(xs.length + 1)).array;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.zip(xs.length.iota).map!(a => a[0] * pow(x, a[1])).sum;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.zip(xs.length.iota).map!(a => a[0] * pow(x, a[1])).sum;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwq9l3t6x.d(56): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwq9l3t6x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2,\
    \ 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x,\
    \ i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the integral of this\
    \ polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3,\
    \ 0.5, 0.6666666666666666, 1.25]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\ndouble[] integral(long[] xs) \n{\n    double[] res = new double[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ roots of this polynomial.\n    >>> roots([3, 1, 2, 4, 5])\n    [-1.0, -0.5,\
    \ -0.25]\n    >>> roots([1, 2, 3\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7nh0dgmr.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nh0dgmr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ret = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ret = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        ret[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ ret;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    53\n    >>> evaluate([1, 2, 3], 2)\n    17\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long ret = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        ret += xs[i] * pow(x, i);\n    }\n\
    \    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    53\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n    \n*/\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndy9me3j.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndy9me3j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    97\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    97\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    83\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    83\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    83\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0qbrpae.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmpj0qbrpae.d(71):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpj0qbrpae.d(72): Error:\
    \ found `{` when expecting `;` following `for` condition\\n/tmp/tmpj0qbrpae.d(73):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpj0qbrpae.d(73): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmpj0qbrpae.d(73): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0qbrpae.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> polyval([1, 2, 3], 3)\n    20\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> polyval([1, 2, 3], 3)\n    20\n    \n*/\nlong\
    \ polyval(\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxuhgqdyw.d(65): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxuhgqdyw.d(65): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuhgqdyw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    if (xs.length == 0)\n    {\n        return new\
    \ long[0];\n    }\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 1)\n    6\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 1)\n    6\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2,\
    \ 3], 1)\n    6\n*/\nlong evaluate(long[] x\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmy88v7te.d(72): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmy88v7te.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (long i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n \
    \   return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 1, 1.25]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (long i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\nlong\
    \ value(long[] xs, long x) \n{\n    long res = 0;\n    for (long i = 0; i < xs.length;\
    \ i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    67\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs,\
    \ long x) \n{\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbcbw3hmw.d(67): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcbw3hmw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> polyval([3, 1, 2,\
    \ 4, 5], 2)\n    41\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    41\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    41\n    >>> polyval([1\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkbies3p.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkbies3p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    63\n    >>>\
    \ value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    63\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    87\n    >>> polyval([1, 2, 3], 3)\n    20\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long y = 0;\n    foreach (i, a; xs)\n  \
    \  {\n        y += a * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    87\n    >>> polyval([1, 2, 3], 3)\n    20\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    foreach (i, a; xs)\n    {\n        y +=\
    \ a * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpennwxo0r.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpennwxo0r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 1.25, 5]\n    >>> integral([1, 2, 3])\n   \
    \ [0, 1, 1, 1]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new\
    \ long[xs.length + 1];\n    ys[0] = 0;\n    foreach (i, x; xs)\n    {\n      \
    \  ys[i + 1] = x / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    97\n    >>>\
    \ polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong polyval(long[] xs, long x) \n\
    {\n    long y = 0;\n    foreach (i, x; xs)\n    {\n        y += x * pow(x, i);\n\
    \    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ that is the product of this\n    polynomial and the given polynomial.\n    >>>\
    \ polymul([3, 1, 2, 4, 5], [1, 2, 3])\n    [3, 7, 17, 22, 27, 20]\n    >>> polymul([1,\
    \ 2, 3], [1, 2, 3])\n    [1, 4, 10, 12, 9]\n    \n*/\nlong[]\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_pzzoyr.d(68): Error: no identifier for declarator `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_pzzoyr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    61\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long res\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgadogte4.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpgadogte4.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgadogte4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> value([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    63\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x)\
    \ \n{\n    long result = 0;\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1dzlq_7.d(64): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1dzlq_7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    67\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebynryfl.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebynryfl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    47\n    >>> polyval([1, 2, 3], 3)\n    20\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    47\n    >>> polyval([1, 2, 3], 3)\n    20\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    47\n    >>> polyval([1\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjabkivvl.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjabkivvl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    53\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    53\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjbe_p8d2.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpjbe_p8d2.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpjbe_p8d2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    83\n    >>> value([1,\
    \ 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    83\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the value of a polynomial at a\
    \ given point.\n    >>> evaluate([1, 2, 3], 5)\n    76\n    >>> evaluate([1, 2,\
    \ 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    4\n    >>> evaluate([1,\
    \ 2, 3], -2)\n    5\n    >>> evaluate([1, 2, 3], -3)\n    6\n    >>> evaluate([1,\
    \ 2, 3], -4)\n    7\n    >>> evaluate([1, 2, 3], -5)\n    8\n    >>> evaluate([1,\
    \ 2, 3], -6)\n    9\n    >>> evaluate([1, 2, 3], -7)\n    10\n    >>> evaluate([1,\
    \ 2, 3], -8)\n    11\n    >>> evaluate([1, 2, 3], -9)\n    12\n    >>> evaluate([1,\
    \ 2, 3], -10)\n    13\n    >>> evaluate([1, 2, 3], -11)\n    14\n    >>> evaluate([1,\
    \ 2, 3], -12)\n    15\n    >>> evaluate([1, 2, 3], -13)\n    16\n    >>> evaluate([1,\
    \ 2, 3], -14)\n    17\n    >>> evaluate([1, 2, 3], -15)\n    18\n    >>> evaluate([1,\
    \ 2, 3], -16)\n    19\n    >>> evaluate([1, 2, 3], -17)\n    20\n    >>> evaluate([1,\
    \ 2, 3], -18)\n    21\n    >>> evaluate([1, 2, 3], -19)\n    22\n    >>> evaluate([1,\
    \ 2, 3], -20)\n    23\n    >>> evaluate([1, 2, 3], -21)\n    24\n    >>> evaluate([1,\
    \ 2, 3], -22)\n    25\n    >>> evaluate([1, 2, 3], -23)\n    26\n    >>> evaluate([1,\
    \ 2, 3],\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi6ios2k2.d(20): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6ios2k2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++) \n    {\n        res[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3], 3)\n    20\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprff8yfwv.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprff8yfwv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    97\n    >>> evaluate([1, 2, 3], 2)\n    17\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    97\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n    \n*/\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    79\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    79\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate2(long[]\
    \ xs, long x) \n{\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbis1o569.d(63): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbis1o569.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  foreach (i, x; xs) \n    {\n        if (i > 0) \n        {\n            result[i\
    \ - 1] = x * i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n*/\nlong[] integral(long[] xs) \n{\n\
    \    long[] res = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    55\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5],\
    \ 2)\n    55\n*/\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n   \
    \ for (int i = 0; i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n   \
    \ return res;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    55\n*/\nlong polyval(long[] xs, long x) \n{\n    long res\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        res += xs[i] * pow(x,\
    \ i);\n    return res;\n}\n/*\n    Return the value of a polynomial at x.\n  \
    \  >>> polyval([3, 1,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsyl52160.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyl52160.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i] *\
    \ (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpenzx9_v4.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42850d]\\n??:? void tmpenzx9_v4.__unittest_L22_C1()\
    \ [0x427fa6]\\n??:? void tmpenzx9_v4.__modtest() [0x428290]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b47e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430709]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430695]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b455]\\n??:? runModuleUnitTests [0x42c3c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428957]\\n??:? _d_run_main [0x4288c2]\\n??:? main [0x4282a3]\\\
    n??:? __libc_start_main [0x52bc8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\n    28\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\n\
    \    28\n    \n*/\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    79\n    >>>\
    \ value([1, 2, 3], 3)\n    20\n*/\nlong value(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    79\n    >>>\
    \ value([1, 2, 3], 3)\n    20\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt5r03fr7.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5r03fr7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1, 2, 3], 10)\n    123\n    >>> polyval([1, 2, 3], 0)\n\
    \    3\n    >>> polyval([1, 2, 3], -1)\n    4\n    >>> polyval([1, 2, 3], -2)\n\
    \    9\n    >>> polyval([1, 2, 3], -3)\n    20\n    >>> polyval([1, 2, 3], -4)\n\
    \    45\n    >>> polyval([1, 2, 3], -5)\n    100\n    >>> polyval([1, 2, 3], -6)\n\
    \    221\n    >>> polyval([1, 2, 3], -7)\n    490\n    >>> polyval([1, 2, 3],\
    \ -8)\n    1071\n    >>> polyval([1, 2, 3], -9)\n    2346\n    >>> polyval([1,\
    \ 2, 3], -10)\n    5115\n    >>> polyval([1, 2, 3], -11)\n    11236\n    >>> polyval([1,\
    \ 2, 3], -12)\n    24291\n    >>> polyval([1, 2, 3], -13)\n    52890\n    >>>\
    \ polyval([1, 2, 3], -14)\n    114511\n    >>> polyval([1, 2, 3], -15)\n    247960\n\
    \    >>> polyval([1, 2, 3], -16)\n    534121\n    >>> polyval([1, 2, 3], -17)\n\
    \    1148490\n    >>> polyval([1, 2, 3], -18)\n    2466891\n    >>> polyval([1,\
    \ 2, 3], -19)\n    5284420\n    >>> polyval([1, 2, 3], -20)\n    11289741\n  \
    \  >>> polyval([1, 2, 3\nunittest\n{\n    alias candidate = derivative;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdkruox89.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdkruox89.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> polyval([1,\
    \ 2, 3], 2)\n    17\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaokbjkop.d(78): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaokbjkop.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n\
    \    >>> evaluate([1, 2, 3], 2)\n    17\n    >>> evaluate([1, 2, 3], 3)\n    34\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n    return res;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n    >>> evaluate([1, 2, 3], 3)\n    34\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([1, 2, 3], 2)\n    17\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    34\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n\
    \    return res;\n}\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    67\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    67\n    >>> evaluate([1, 2, 3], 2)\n    17\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbl4lc3sk.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl4lc3sk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3],\
    \ 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3],\
    \ 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n        res += xs[i] * pow(x, i);\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3],\
    \ 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n        res += xs\nunittest\n{\n   \
    \ alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwhmi5g2d.d(69): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpwhmi5g2d.d(79): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpwhmi5g2d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    61\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    61\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (size_t i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (size_t i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value\
    \ of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    101\n   \
    \ >>> polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong polyval(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the value of this polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    101\n    >>> polyval([1, 2\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwodlcv07.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwodlcv07.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    95\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    28\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4,\
    \ 5], 2)\n    95\n    >>> evaluate([1, 2, 3], 3)\n    28\n    \n\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tkcm35a.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tkcm35a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{ \n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 0.666666, 1.25, 1.25]\n    >>> integral([1, 2,\
    \ 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[] xs) \n{ \n    return [0] ~\
    \ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n/*\n    Return the value\
    \ of a polynomial at a given point.\n    >>> value([3, 1, 2, 4, 5], 2)\n    63\n\
    \    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[] xs, long x) \n{ \n\
    \    return xs.zip(xs.map!(a => cast(long)(xs.length - 1)).array).map!(a => a[0]\
    \ * pow(x, a[1])).sum;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> value([3, 1, 2, 4, 5], 2)\n    63\n    >>> value([1, 2, 3],\
    \ 2)\n    17\n*/\nlong value(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a\
    \ => cast(long)(xs.length - 1)).array).map!(a => a[0] * pow(x, a[1])).sum;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> value([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[]\
    \ xs, long x) \n{ \n    return xs.zip(xs.map!(a => cast(long)(xs.length - 1)).array).map!(a\
    \ => a[0] * pow(x, a[1])).\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsl93hl41.d(60): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpsl93hl41.d(61): Error: found `{` when expecting `;` following\
    \ `return` statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl93hl41.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\n    26\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n    >>> evaluate([1, 2, 3], 3)\n\
    \    26\n    \n*/\nlong evaluate\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpugb3qry7.d(71): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugb3qry7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polynomial([3, 1, 2, 4, 5], 2)\n    63\n    >>> polynomial([1, 2, 3], 2)\n \
    \   17\n    \n*/\nlong polynomial(long[] xs, long x) \n{\n    long res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x,\
    \ i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the polynomial in string\
    \ form.\n    >>> polynomial_string([3, 1, 2, 4, 5])\n    '3 + x + 2x^2 + 4x^3\
    \ +\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwo9iotp4.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwo9iotp4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 0.66666667,\
    \ 1.25, 1.25]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    67\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n \
    \   >>> polyval([3, 1, 2, 4, 5], 2)\n    67\n    >>> polyval([1, 2, 3], 2)\n \
    \   17\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3, 1, 2, 4, 5], 2)\n   \nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsb923qx5.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsb923qx5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return\
    \ ys;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48rbpg_x.d(71): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48rbpg_x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return a list of coefficients\
    \ of the polynomial\n    x^n + x^(n-1) + ... + x + 1\n    >>> polynomial(0)\n\
    \    [1]\n    >>> polynomial(1)\n    [1, 1]\n    >>> polynomial(2)\n    [1, 2,\
    \ 1]\n    >>> polynomial(3)\n    [1, 3, 3, 1]\n    >>> polynomial(4)\n    [1,\
    \ 4, 6, 4, 1]\n    >>> polynomial(5)\n    [1, 5, 10, 10, 5, 1]\n*/\nlong[] polynomial(int\
    \ n) \n{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    for (int\
    \ i = 1; i <= n; i++)\n    {\n        result[i] = result[i - 1] * (n + 1 - i)\
    \ / i;\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\n\
    \    x^n + x^(n-1) + ... + x + 1\n    at x = x0.\n    >>> value(0, 3)\n    1\n\
    \    >>> value(1, 3)\n    4\n    >>> value(2, 3)\n    10\n    >>> value(3, 3)\n\
    \    20\n    >>> value(4, 3)\n    35\n    >>> value(5, 3)\n    56\n*/\nlong value(int\
    \ n, long x0) \n{\n    long[] xs = polynomial(n);\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x0, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of the polynomial\n  \
    \ \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnd8an9qj.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnd8an9qj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    81\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    81\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmxsnltsr.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxsnltsr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 0.6666666666666666,\
    \ 1.25, 1.2]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n    17\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n \
    \   >>> polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3], 2)\n \
    \   17\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3, 1, 2, 4, 5], 2)\n    63\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0_jlicj.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0_jlicj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 0.666666, 1.25, 1.25]\n    >>> integral([1, 2, 3])\n    [0, 1,\
    \ 1, 1]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    47\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    47\n    >>> evaluate([1, 2, 3], 3\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahky7att.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahky7att.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    67\n    >>> evaluate([1, 2, 3], 2\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcextan8.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcextan8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([1, 2, 3], 4)\n    57\n\
    \    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    0\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([1, 2, 3], 4)\n    57\n    >>> evaluate([1, 2,\
    \ 3], 0)\n    3\n    >>> evaluate([1, 2, 3], -1)\n    0\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([1,\
    \ 2, 3], 4)\n    57\n    >>> evaluate([1, 2, 3], 0)\n    3\n    >>> evaluate([1,\
    \ 2, 3], -1)\n    0\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wmo2re3.d(76): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wmo2re3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 3)\n    18\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < x\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppgf1cdky.d(73): Error: found `unittest` when expecting `;` following\
    \ `for` condition\\n/tmp/tmppgf1cdky.d(83): Error: found `void` when expecting\
    \ `)`\\n/tmp/tmppgf1cdky.d(83): Error: found `{` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgf1cdky.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a point.\n    >>> value([3, 1,\
    \ 2, 4, 5], 2)\n    49\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> value([3, 1, 2, 4,\
    \ 5], 2)\n    49\n    >>> value([1, 2, 3], 2)\n    17\n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> value([3, 1, 2, 4,\
    \ 5], 2)\n    49\n    >>> value([1, 2, 3], 2)\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ksfmh6e.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ksfmh6e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    auto n = xs.length;\n    if (n == 0)\n    {\n\
    \        return [];\n    }\n    else\n    {\n        return xs[1 .. n].map!((x,\
    \ i) => (i + 1) * x);\n    }\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((x,\
    \ i) => x * pow(x, i)).sum;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((x,\
    \ i) => x * pow(x, i)).sum;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((x,\
    \ i) => x * pow(x, i)).sum;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((x,\
    \ i) => x * pow(x, i)).sum;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1,\
    \ 2, 3], 2)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mu4nuz_.d(69): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9mu4nuz_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\nlong evaluate\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_qplgzy.d(71): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_qplgzy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 0)\n    3\n    >>> polyval([3, 1, 2, 4, 5], 1)\n  \
    \  15\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    59\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return value of this polynomial at x.\n    >>> polyval([3, 1, 2,\
    \ 4\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmk4ekmce.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmk4ekmce.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n    61\n    >>>\
    \ value([1, 2, 3], 2)\n    17\n    \n*/\nlong value(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    61\n    >>> value([1, 2, 3], 2)\n    17\n    \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1nbay7u.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1nbay7u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at x.\n \
    \   >>> polyval([3, 1, 2, 4, 5], 2)\n    73\n    >>> polyval([1, 2, 3], 2)\n \
    \   17\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n   \
    \ for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    73\n    >>> polyval([1, 2, 3],\
    \ 2)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjd538gpy.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjd538gpy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i\
    \ + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2.0, 4.0,\
    \ 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfypxtcc8.d(64): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfypxtcc8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4,\
    \ 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3, 1, 2, 4, 5], 2)\n    67\n    >>> polyval([1, 2, 3], 3)\n    20\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ xs(x) * ys(x).\n    >>> polymul([1, 2, 3], [1, 2, 3])\n    [1, 4, 10, 12\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjdtybee.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjdtybee.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = (i + 1) * xs[i + 1];\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> polyval([3,\
    \ 1, 2, 4, 5], 2)\n    89\n    >>> polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the value of this polynomial at x.\n    >>> polyval([3, 1, 2, 4,\
    \ 5], 2)\n    89\n    >>> polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong polyval(long[]\
    \ xs, long x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfx14r6zj.d(65): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfx14r6zj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    95\n    >>>\
    \ evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n{\n \
    \   long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n      \
    \  result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    95\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 0.666666,\
    \ 1.25, 1.2]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ evaluate([3, 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n    17\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n \
    \   >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1, 2, 3], 2)\n\
    \    17\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> evaluate([3, 1, 2, 4, 5], 2)\n    57\n    >>> evaluate([1,\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9t6d5knk.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9t6d5knk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 2)\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zl8psia.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zl8psia.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    123\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3,\
    \ 1, 2, 4, 5], 2)\n    123\n    >>> evaluate([1, 2, 3], 2)\n    17\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long res\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsujvnm_.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpzsujvnm_.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzsujvnm_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n    return\
    \ ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>>\
    \ integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n\
    \    long[] ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n        ys[i + 1] = xs[i] / (i + 1);\n    return ys;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    63\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    63\n   \
    \ >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[] xs, long x) \n\
    {\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprjt9564c.d(63): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjt9564c.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    return xs[0 .. $ - 1].map!((a, b) => a * b)(iota(xs.length\
    \ - 1));\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3,\
    \ 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n    >>> integral([1, 2, 3])\n    [0,\
    \ 1, 1, 3]\n*/\nlong[] integral(long[] xs) \n{\n    return [0L] ~ xs.map!((a,\
    \ b) => a / (b + 1))(iota(xs.length));\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1, 2, 3],\
    \ 3)\n    18\n*/\nlong polyval(long[] xs, long x) \n{\n    return xs.map!((a,\
    \ b) => a * pow(x, b))(iota(xs.length)).sum;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1,\
    \ 2, 3], 3)\n    18\n*/\nlong polyval(long[] xs, long x) \n{\n    return xs.map!((a,\
    \ b) => a * pow(x, b))(iota(xs.length)).sum;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([1,\
    \ 2, 3], 3)\n    18\n*/\nlong polyval(long[] xs, long x) \n{\n    return xs.map!((a,\
    \ b) => a * pow(x, b))(iota(xs.length)).sum;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    63\n    >>> polyval([\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprffy8br8.d(61): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprffy8br8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    */\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5], 2)\n    49\n   \
    \ >>> evaluate([1, 2, 3], 3)\n    20\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3, 1, 2, 4, 5],\
    \ 2)\n    49\n    >>> evaluate([1, 2, 3], 3)\n    20\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gtjwwgb.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gtjwwgb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (size_t i = 0; i < result.length; i++) \n    {\n        result[i] = (i\
    \ + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n  \
    \  [0, 3, 0.5, 2.0, 4.0, 5.0]\n    >>> integral([1, 2, 3])\n    [0, 1, 1, 1]\n\
    \    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (size_t i = 0; i < xs.length; i++) \n    {\n        result[i\
    \ + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3, 1, 2, 4, 5], 2)\n    67\n    >>>\
    \ polyval([1, 2, 3], 2)\n    17\n    \n*/\nlong polyval(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++) \n    {\n\
    \        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return coefficients of the polynomial that is the product of this\n    polynomial\
    \ and xs.\n    >>> polymul([3, 1, 2, 4\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dv7nak6.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dv7nak6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n*/\nlong[] integral(long[] xs)\
    \ \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2,\
    \ 4, 5], 2)\n    62\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4,\
    \ 5], 2)\n    62\n    >>> evaluate([1, 2, 3], 2)\n    17\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> evaluate([3, 1, 2, 4,\
    \ 5], 2)\n    62\n    >>> evaluate([1, 2, 3], 2)\n\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52p75xxu.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52p75xxu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n\
    \    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n*/\nlong[]\
    \ derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [0, 3, 0.5, 2, 4, 5]\n\
    \    >>> integral([1, 2, 3])\n    [0, 1, 1, 3]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++)\n        res[i + 1] = xs[i] / (i + 1);\n    return res;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3,\
    \ 1, 2, 4, 5], 2)\n    63\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\nlong\
    \ value(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n        res += xs[i] * pow(x, i);\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3, 1, 2, 4, 5], 2)\n\
    \    63\n    >>> value([1, 2, 3], 3)\n    28\n    \n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long res\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqh6xiha.d(67): Error: semicolon expected, not `unittest`\\n/tmp/tmpeqh6xiha.d(67):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpeqh6xiha.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
