name: HumanEval_144_simplify
language: humaneval_to_dlang.py
prompt: "import std.math;\n/*\nYour task is to implement a function that will simplify\
  \ the expression\n    x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n    otherwise. Both x and n, are string representation of a\
  \ fraction, and have the following format,\n    <numerator>/<denominator> where\
  \ both numerator and denominator are positive whole numbers.\n\n    You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n\n  \
  \  simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n \
  \   simplify(\"7/10\", \"10/2\") = False\n    \n*/\nbool simplify(string x, string\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\"\
  , \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"\
  5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n\
  \    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\"\
  , \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"\
  2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n\
  \    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\"\
  , \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"\
  1/5\", \"1/5\") == false);\n}\nvoid main(){}"
completions: ["{\n    int a = to!int(split(x, \"/\")[0]);\n    int b = to!int(split(x,\
    \ \"/\")[1]);\n    int c = to!int(split(n, \"/\")[0]);\n    int d = to!int(split(n,\
    \ \"/\")[1]);\n    return (a * d) % (b * c) == 0;\n}", "{\n    int x_numerator\
    \ = 0;\n    int x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator\
    \ = 0;\n    int i = 0;\n    while(x[i] != '/')\n    {\n        x_numerator = x_numerator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while(n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    int numerator = x_numerator * n_numerator;\n    int denominator =\
    \ x_denominator * n_denominator;\n    int gcd = gcd(numerator, denominator);\n\
    \    numerator /= gcd;\n    denominator /= gcd;\n    return numerator % denominator\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    int gcd = gcd(x_num, x_den);\n\
    \    x_num /= gcd;\n    x_den /= gcd;\n    gcd = gcd(n_num, n_den);\n    n_num\
    \ /= gcd;\n    n_den /= gcd;\n    return (x_num * n_den) % (x_den * n_num) ==\
    \ 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n \
    \   auto x_n_n = to!int(x_n[0]);\n    auto x_d = to!int(x_n[1]);\n    auto n_n_n\
    \ = to!int(n_n[0]);\n    auto n_d = to!int(n_n[1]);\n    auto x_n_n_n = x_n_n\
    \ * n_d;\n    auto n_n_n_n = n_n_n * x_d;\n    return x_n_n_n == n_n_n_n;\n}",
  "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    int x_num\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = stoi(n.substr(n.find(\"/\") + 1));\n    int gcd = gcd(x_den, n_den);\n   \
    \ int lcm = (x_den * n_den) / gcd;\n    int num = (x_num * (lcm / x_den)) * (n_num\
    \ * (lcm / n_den));\n    return num % lcm == 0;\n}", "{\n    int x_numerator =\
    \ to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n\
    \    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n\
    \    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    auto gcd = gcd(num, den);\n   \
    \ return den / gcd == 1;\n}", "{\n    int x_numerator = to!int(split(x, \"/\"\
    )[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n  \
    \  int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    int x1\
    \ = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x, \"/\")[1]);\n  \
    \  int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n, \"/\")[1]);\n\
    \    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    int x_numerator = 0;\n  \
    \  int x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator = 0;\n\
    \    int i = 0;\n    while(x[i] != '/')\n    {\n        x_numerator = x_numerator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while(n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    int numerator = x_numerator * n_numerator;\n    int denominator =\
    \ x_denominator * n_denominator;\n    int gcd = gcd(numerator, denominator);\n\
    \    numerator /= gcd;\n    denominator /= gcd;\n    return numerator % denominator\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n\
    \    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n == 0;\n}", "{\n\
    \    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n    auto x_numerator\
    \ = to!int(x_n[0]);\n    auto x_denominator = to!int(x_n[1]);\n    auto n_numerator\
    \ = to!int(n_n[0]);\n    auto n_denominator = to!int(n_n[1]);\n    auto result\
    \ = x_numerator * n_numerator;\n    auto result_denominator = x_denominator *\
    \ n_denominator;\n    auto gcd = gcd(result, result_denominator);\n    result\
    \ /= gcd;\n    result_denominator /= gcd;\n    return result % result_denominator\
    \ == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto\
    \ x_n = x_numerator * n_denominator;\n    auto n_x = n_numerator * x_denominator;\n\
    \    return x_n % n_x == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"\
    /\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    auto gcd = gcd(num, den);\n    return den\
    \ / gcd == 1;\n}", "{\n    int a, b, c, d;\n    sscanf(x.c_str(), \"%d/%d\", &a,\
    \ &b);\n    sscanf(n.c_str(), \"%d/%d\", &c, &d);\n    return (a * c) % (b * d)\
    \ == 0;\n}", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x,\
    \ \"/\")[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n,\
    \ \"/\")[1]);\n    return x1 * n2 % x2 == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int x_num\
    \ = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n\
    \    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n\
    \ = x_den * n_den;\n    return x_num_n % x_den_n == 0;\n}", "{\n    int x_num\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num * n_num) % (x_den *\
    \ n_den) == 0;\n}", "{\n    int x_num, x_den, n_num, n_den;\n    auto pos = x.find('/');\n\
    \    x_num = to!int(x[0..pos]);\n    x_den = to!int(x[pos+1..$]);\n    pos = n.find('/');\n\
    \    n_num = to!int(n[0..pos]);\n    n_den = to!int(n[pos+1..$]);\n    auto num\
    \ = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n\
    }", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n    int\
    \ pos = x.find(\"/\");\n    x_numerator = to!int(x[0..pos]);\n    x_denominator\
    \ = to!int(x[pos+1..$]);\n    pos = n.find(\"/\");\n    n_numerator = to!int(n[0..pos]);\n\
    \    n_denominator = to!int(n[pos+1..$]);\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int xNum = to!int(split(x,\
    \ \"/\")[0]);\n    int xDen = to!int(split(x, \"/\")[1]);\n    int nNum = to!int(split(n,\
    \ \"/\")[0]);\n    int nDen = to!int(split(n, \"/\")[1]);\n    return (xNum *\
    \ nDen) % (xDen * nNum) == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n    auto\
    \ n_n = n.split(\"/\");\n    int x_num = to!int(x_n[0]);\n    int x_den = to!int(x_n[1]);\n\
    \    int n_num = to!int(n_n[0]);\n    int n_den = to!int(n_n[1]);\n    int num\
    \ = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\n  \
    \      return true;\n    return false;\n}", "{\n    auto x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto\
    \ n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    int xn = to!int(split(x, \"\
    /\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd)\
    \ % (xd * nn) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n  \
    \  auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto gcd = gcd(x_num,\
    \ x_den);\n    x_num /= gcd;\n    x_den /= gcd;\n    gcd = gcd(n_num, n_den);\n\
    \    n_num /= gcd;\n    n_den /= gcd;\n    return x_num * n_num % (x_den * n_den)\
    \ == 0;\n}", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n,\
    \ \"/\");\n    return (to!int(x_split[0]) * to!int(n_split[1])) % to!int(n_split[0])\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto\
    \ x_n = x_numerator * n_denominator;\n    auto n_n = n_numerator * x_denominator;\n\
    \    return x_n % n_n == 0;\n}", "{\n    auto a = x.split(\"/\");\n    auto b\
    \ = n.split(\"/\");\n    return (to!int(a[0]) * to!int(b[1])) % (to!int(a[1])\
    \ * to!int(b[0])) == 0;\n}", "{\n    int numerator = 0;\n    int denominator =\
    \ 0;\n    int x_numerator = 0;\n    int x_denominator = 0;\n    int n_numerator\
    \ = 0;\n    int n_denominator = 0;\n    int i = 0;\n    while(x[i] != '/')\n \
    \   {\n        x_numerator = x_numerator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i++;\n    while(i < x.length())\n    {\n        x_denominator = x_denominator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i = 0;\n    while(n[i] != '/')\n\
    \    {\n        n_numerator = n_numerator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    i++;\n    while(i < n.length())\n    {\n        n_denominator = n_denominator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    numerator = x_numerator * n_numerator;\n\
    \    denominator = x_denominator * n_denominator;\n    if(numerator % denominator\
    \ == 0)\n        return true;\n    return false;\n}", "{\n    int xn = to!int(split(x,\
    \ \"/\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd)\
    \ % (xd * nn) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return denominator % numerator == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator * n_numerator * x_denominator)\
    \ % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_split = split(x,\
    \ \"/\");\n    auto n_split = split(n, \"/\");\n    auto x_num = to!int(x_split[0]);\n\
    \    auto x_den = to!int(x_split[1]);\n    auto n_num = to!int(n_split[0]);\n\
    \    auto n_den = to!int(n_split[1]);\n    auto result = x_num * n_num;\n    auto\
    \ result_den = x_den * n_den;\n    return result % result_den == 0;\n}", "{\n\
    \    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n    auto x_num\
    \ = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n\
    \    auto n_den = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den\
    \ = x_den * n_den;\n    auto gcd = gcd(num, den);\n    num /= gcd;\n    den /=\
    \ gcd;\n    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x, \"\
    /\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_n\
    \ = x.split(\"/\");\n    auto n_n = n.split(\"/\");\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    auto gcd = gcd(num, den);\n    return den / gcd == 1;\n}", "{\n\
    \    int xn = to!int(split(x, \"/\")[0]);\n    int xd = to!int(split(x, \"/\"\
    )[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n    int nd = to!int(split(n,\
    \ \"/\")[1]);\n    return (xn * nd) % (xd * nn) == 0;\n}", "{\n    int x1 = to!int(split(x,\
    \ \"/\")[0]);\n    int x2 = to!int(split(x, \"/\")[1]);\n    int n1 = to!int(split(n,\
    \ \"/\")[0]);\n    int n2 = to!int(split(n, \"/\")[1]);\n    return (x1 * n2)\
    \ % (x2 * n1) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n  \
    \  auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    auto a = split(x, \"/\");\n    auto b = split(n, \"/\");\n    return\
    \ (to!int(a[0]) * to!int(b[1])) % to!int(a[1]) == 0;\n}", "{\n    auto x_num =\
    \ to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n,\
    \ \"/\");\n    int x_num = to!int(x_split[0]);\n    int x_den = to!int(x_split[1]);\n\
    \    int n_num = to!int(n_split[0]);\n    int n_den = to!int(n_split[1]);\n  \
    \  int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = gcd(num,\
    \ den);\n    return den / gcd == 1;\n}", "{\n    auto x_n = split(x, '/');\n \
    \   auto n_n = split(n, '/');\n    auto x_num = to!int(x_n[0]);\n    auto x_den\
    \ = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    auto gcd =\
    \ gcd(num, den);\n    return den / gcd == 1;\n}", "{\n    auto x_n = split(x,\
    \ '/');\n    auto n_n = split(n, '/');\n    auto x_numerator = to!int(x_n[0]);\n\
    \    auto x_denominator = to!int(x_n[1]);\n    auto n_numerator = to!int(n_n[0]);\n\
    \    auto n_denominator = to!int(n_n[1]);\n    auto result = x_numerator * n_numerator;\n\
    \    auto result_denominator = x_denominator * n_denominator;\n    return result\
    \ % result_denominator == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto gcd = GCD(x_den,\
    \ n_den);\n    auto lcm = x_den * n_den / gcd;\n    auto x_num_lcm = x_num * lcm\
    \ / x_den;\n    auto n_num_lcm = n_num * lcm / n_den;\n    return x_num_lcm %\
    \ n_num_lcm == 0;\n}", "{\n    int x_num, x_den, n_num, n_den;\n    auto slash\
    \ = x.find(\"/\");\n    x_num = stoi(x.substr(0, slash));\n    x_den = stoi(x.substr(slash\
    \ + 1));\n    slash = n.find(\"/\");\n    n_num = stoi(n.substr(0, slash));\n\
    \    n_den = stoi(n.substr(slash + 1));\n    return (x_num * n_den) % (x_den *\
    \ n_num) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int x1\
    \ = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x, \"/\")[1]);\n  \
    \  int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n, \"/\")[1]);\n\
    \    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    auto x_n = split(x, '/');\n\
    \    auto n_n = split(n, '/');\n    auto x_num = to!int(x_n[0]);\n    auto x_den\
    \ = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int\
    \ x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    double result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    return (result % 1 ==\
    \ 0);\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den =\
    \ to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return den % num == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator =\
    \ to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto product_numerator\
    \ = x_numerator * n_numerator;\n    auto product_denominator = x_denominator *\
    \ n_denominator;\n    auto gcd = gcd(product_numerator, product_denominator);\n\
    \    return product_numerator / gcd == product_denominator / gcd;\n}", "{\n  \
    \  int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    double x_value = x_numerator / cast(double)x_denominator;\n    double n_value\
    \ = n_numerator / cast(double)n_denominator;\n    double result = x_value * n_value;\n\
    \    return result == cast(int)result;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto x_n = x_num * n_num;\n    auto x_d = x_den * n_den;\n    return x_n\
    \ % x_d == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n    int xd =\
    \ to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n    int\
    \ nd = to!int(split(n, \"/\")[1]);\n    int gcd = gcd(xd, nd);\n    int lcm =\
    \ (xd * nd) / gcd;\n    return (xn * nn) % lcm == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    double result = (x_numerator * n_numerator)\
    \ / (x_denominator * n_denominator);\n    return result == floor(result);\n}",
  "{\n    int x1 = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x, \"/\"\
    )[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n,\
    \ \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    int a, b, c,\
    \ d;\n    sscanf(x.c_str(), \"%d/%d\", &a, &b);\n    sscanf(n.c_str(), \"%d/%d\"\
    , &c, &d);\n    return (a * d) % (b * c) == 0;\n}", "{\n    auto x_numerator =\
    \ x.split(\"/\")[0].to!int;\n    auto x_denominator = x.split(\"/\")[1].to!int;\n\
    \    auto n_numerator = n.split(\"/\")[0].to!int;\n    auto n_denominator = n.split(\"\
    /\")[1].to!int;\n    auto result = x_numerator * n_numerator;\n    auto denominator\
    \ = x_denominator * n_denominator;\n    return result % denominator == 0;\n}",
  "{\n    // your code\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_den = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = gcd(num, den);\n\
    \    num /= gcd;\n    den /= gcd;\n    return num % den == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n  \
    \  auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    auto result = x_numerator * n_numerator;\n\
    \    auto result_denominator = x_denominator * n_denominator;\n    return result\
    \ % result_denominator == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"\
    /\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    auto result = x_numerator * n_numerator;\n    auto denominator = x_denominator\
    \ * n_denominator;\n    return denominator % result == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\
    }", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto gcd = GCD(x_den, n_den);\n    return (x_num\
    \ * n_num) % (x_den * n_den / gcd) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    double result = x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    return result == floor(result);\n}", "{\n    auto x_n = split(x, '/');\n\
    \    auto n_n = split(n, '/');\n    return (to!int(x_n[0]) * to!int(n_n[1])) %\
    \ to!int(x_n[1]) == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n\
    \    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return x_num *\
    \ n_den % x_den == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int x_numerator_simplified\
    \ = x_numerator * n_denominator;\n    int x_denominator_simplified = x_denominator\
    \ * n_numerator;\n    return x_numerator_simplified % x_denominator_simplified\
    \ == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n    int x_denominator\
    \ = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"\
    /\")]);\n    int n_denominator = to!int(n[n.find(\"/\")+1..$]);\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return (numerator % denominator == 0);\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int x_numerator_new\
    \ = x_numerator * n_denominator;\n    int x_denominator_new = x_denominator *\
    \ n_numerator;\n    if (x_numerator_new % x_denominator_new == 0)\n    {\n   \
    \     return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
  "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_n\
    \ = split(x, '/');\n    auto n_n = split(n, '/');\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    auto result = x_num * n_num;\n    auto result_den\
    \ = x_den * n_den;\n    return result % result_den == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_simplified = x_num * n_den;\n    auto n_num_simplified\
    \ = n_num * x_den;\n    auto den_simplified = x_den * n_den;\n    return x_num_simplified\
    \ == n_num_simplified && x_num_simplified % den_simplified == 0;\n}", "{\n   \
    \ int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n   \
    \ int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n\
    \    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd) % (xd * nn) ==\
    \ 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n \
    \   return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n\
    \    auto x_numerator = to!int(x[0..x.find('/')]);\n    auto x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    auto n_numerator = to!int(n[0..n.find('/')]);\n    auto n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    auto result = x_numerator * n_numerator;\n    auto result_denominator = x_denominator\
    \ * n_denominator;\n    return result % result_denominator == 0;\n}", "{\n   \
    \ int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator =\
    \ stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"\
    /\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto gcd = gcd(x_num * n_den, x_den * n_num);\n\
    \    return (x_num * n_den / gcd) % (x_den * n_num / gcd) == 0;\n}", "{\n    int\
    \ x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    int numerator = x_numerator * n_numerator;\n    int denominator = x_denominator\
    \ * n_denominator;\n    return (numerator % denominator == 0);\n}", "{\n    int\
    \ x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n\
    \    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x,\
    \ \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"\
    /\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    int x_num_n = x_num * n_num;\n    int x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ denominator % numerator == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\"\
    )[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto res_num = x_num * n_num;\n    auto res_den\
    \ = x_den * n_den;\n    return res_num % res_den == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n\
    \ = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n\
    \ == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n    int xd = to!int(split(x,\
    \ \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n    int nd = to!int(split(n,\
    \ \"/\")[1]);\n    return (xn * nd) % (xd * nn) == 0;\n}", "{\n    int x_numerator\
    \ = 0;\n    int x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator\
    \ = 0;\n    int i = 0;\n    while(x[i] != '/')\n    {\n        x_numerator = x_numerator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while(n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    int numerator = x_numerator * n_numerator;\n    int denominator =\
    \ x_denominator * n_denominator;\n    int gcd = gcd(numerator, denominator);\n\
    \    if(gcd == 1)\n        return true;\n    return false;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    float x_result = (float)x_numerator\
    \ / x_denominator;\n    float n_result = (float)n_numerator / n_denominator;\n\
    \    float result = x_result * n_result;\n    return (result == (int)result);\n\
    }", "{\n    int x_num = stoi(x.substr(0, x.find('/')));\n    int x_den = stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_den = stoi(n.substr(n.find('/')\
    \ + 1));\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    auto x_nums = split(x, \"/\");\n    auto\
    \ n_nums = split(n, \"/\");\n    auto x_num = to!int(x_nums[0]);\n    auto x_den\
    \ = to!int(x_nums[1]);\n    auto n_num = to!int(n_nums[0]);\n    auto n_den =\
    \ to!int(n_nums[1]);\n    auto x_simplified = x_num * n_den;\n    auto n_simplified\
    \ = n_num * x_den;\n    return x_simplified % n_simplified == 0;\n}", "{\n   \
    \ int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"\
    /\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    int gcd = gcd(x_num, n_den);\n    int lcm = lcm(x_den, n_num);\n\
    \    return (x_num * n_den) % (gcd * lcm) == 0;\n}", "{\n    int xn = to!int(split(x,\
    \ \"/\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    int gcd = gcd(xd,\
    \ nd);\n    return (xn * nn) % (xd * nd / gcd) == 0;\n}", "{\n    auto x_num =\
    \ to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    auto gcd = gcd(num, den);\n    return num / gcd == den / gcd;\n}", "{\n \
    \   auto a = split(x, \"/\");\n    auto b = split(n, \"/\");\n    return to!int(a[0])\
    \ * to!int(b[1]) % to!int(a[1]) == 0;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_num, x_den, n_num, n_den;\n\
    \    int i = 0;\n    string temp = \"\";\n    while(x[i] != '/')\n    {\n    \
    \    temp += x[i];\n        i++;\n    }\n    x_num = stoi(temp);\n    temp = \"\
    \";\n    i++;\n    while(i < x.length())\n    {\n        temp += x[i];\n     \
    \   i++;\n    }\n    x_den = stoi(temp);\n    temp = \"\";\n    i = 0;\n    while(n[i]\
    \ != '/')\n    {\n        temp += n[i];\n        i++;\n    }\n    n_num = stoi(temp);\n\
    \    temp = \"\";\n    i++;\n    while(i < n.length())\n    {\n        temp +=\
    \ n[i];\n        i++;\n    }\n    n_den = stoi(temp);\n    int num = x_num * n_num;\n\
    \    int den = x_den * n_den;\n    int gcd = gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    if(num % den == 0)\n        return true;\n    return false;\n\
    }", "{\n    int x_num = stoi(x.substr(0, x.find('/')));\n    int x_den = stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_den = stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = gcd(num, den);\n    return den / gcd == 1;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator * n_numerator * x_denominator)\
    \ % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_n = split(x, '/');\n\
    \    auto n_n = split(n, '/');\n    auto x_num = to!int(x_n[0]);\n    auto x_den\
    \ = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    auto gcd =\
    \ gcd(num, den);\n    return num % den == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n\
    \    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto gcd = gcd(x_num * n_den,\
    \ x_den * n_num);\n    return (x_num * n_den / gcd) % (x_den * n_num / gcd) ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_arr = split(x, \"/\");\n    auto n_arr = split(n,\
    \ \"/\");\n    int x_num = to!int(x_arr[0]);\n    int x_den = to!int(x_arr[1]);\n\
    \    int n_num = to!int(n_arr[0]);\n    int n_den = to!int(n_arr[1]);\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    double x_decimal = x_numerator / cast(double)x_denominator;\n    double\
    \ n_decimal = n_numerator / cast(double)n_denominator;\n    double result = x_decimal\
    \ * n_decimal;\n    return result == cast(int)result;\n}", "{\n    int x_num =\
    \ to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n \
    \   int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n, \"\
    /\")[1]);\n    int gcd = gcd(x_num, x_den);\n    x_num /= gcd;\n    x_den /= gcd;\n\
    \    gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n    n_den /= gcd;\n    return\
    \ x_num * n_den == x_den * n_num;\n}", "{\n    auto x_num = to!int(split(x, \"\
    /\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    int result_numerator = x_numerator * n_numerator;\n\
    \    int result_denominator = x_denominator * n_denominator;\n    return (result_numerator\
    \ % result_denominator == 0);\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n\
    \    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\"\
    )[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd) % (xd *\
    \ nn) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto gcd = gcd(x_num, x_den);\n    x_num /=\
    \ gcd;\n    x_den /= gcd;\n    gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n \
    \   n_den /= gcd;\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n\
    \    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x,\
    \ \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    int gcd = gcd(x_num, x_den);\n    x_num /= gcd;\n    x_den\
    \ /= gcd;\n    gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n    n_den /= gcd;\n\
    \    return x_num * n_den == x_den * n_num;\n}", "{\n    int xn = to!int(split(x,\
    \ \"/\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    int gcd = gcd(xd,\
    \ nd);\n    xd /= gcd;\n    nd /= gcd;\n    return xn * nn % (xd * nd) == 0;\n\
    }", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto gcd = gcd(x_num * n_den, x_den * n_num);\n\
    \    return (x_num * n_den / gcd) % (x_den * n_num / gcd) == 0;\n}", "{\n    int\
    \ x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    auto x_nums\
    \ = split(x, \"/\");\n    auto n_nums = split(n, \"/\");\n    auto x_num = to!int(x_nums[0]);\n\
    \    auto x_den = to!int(x_nums[1]);\n    auto n_num = to!int(n_nums[0]);\n  \
    \  auto n_den = to!int(n_nums[1]);\n    auto x_num_n = x_num * n_den;\n    auto\
    \ x_den_n = x_den * n_num;\n    return x_num_n % x_den_n == 0;\n}", "{\n    auto\
    \ x_n = split(x, '/');\n    auto n_n = split(n, '/');\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_n = split(x, '/');\n\
    \    auto n_n = split(n, '/');\n    return (to!int(x_n[0]) * to!int(n_n[1])) %\
    \ to!int(x_n[1]) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = 0;\n    int x_denominator\
    \ = 0;\n    int n_numerator = 0;\n    int n_denominator = 0;\n    int i = 0;\n\
    \    while(x[i] != '/')\n    {\n        x_numerator = x_numerator * 10 + (x[i]\
    \ - '0');\n        i++;\n    }\n    i++;\n    while(i < x.length())\n    {\n \
    \       x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n   \
    \ }\n    i = 0;\n    while(n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    int numerator = x_numerator * n_numerator;\n    int denominator =\
    \ x_denominator * n_denominator;\n    int gcd = gcd(numerator, denominator);\n\
    \    numerator /= gcd;\n    denominator /= gcd;\n    if(numerator % denominator\
    \ == 0)\n        return true;\n    return false;\n}", "{\n    int x_numerator,\
    \ x_denominator, n_numerator, n_denominator;\n    int i = 0;\n    string temp\
    \ = \"\";\n    while(x[i] != '/')\n    {\n        temp += x[i];\n        i++;\n\
    \    }\n    x_numerator = to!int(temp);\n    temp = \"\";\n    i++;\n    while(i\
    \ < x.length)\n    {\n        temp += x[i];\n        i++;\n    }\n    x_denominator\
    \ = to!int(temp);\n    i = 0;\n    temp = \"\";\n    while(n[i] != '/')\n    {\n\
    \        temp += n[i];\n        i++;\n    }\n    n_numerator = to!int(temp);\n\
    \    temp = \"\";\n    i++;\n    while(i < n.length)\n    {\n        temp += n[i];\n\
    \        i++;\n    }\n    n_denominator = to!int(temp);\n    if(x_numerator *\
    \ n_denominator * n_numerator * x_denominator % (x_denominator * n_denominator)\
    \ == 0)\n        return true;\n    return false;\n}", "{\n    auto x_split = split(x,\
    \ \"/\");\n    auto n_split = split(n, \"/\");\n    auto x_num = to!int(x_split[0]);\n\
    \    auto x_den = to!int(x_split[1]);\n    auto n_num = to!int(n_split[0]);\n\
    \    auto n_den = to!int(n_split[1]);\n    auto result = x_num * n_num;\n    auto\
    \ den = x_den * n_den;\n    return result % den == 0;\n}", "{\n    int x_numerator,\
    \ x_denominator, n_numerator, n_denominator;\n    auto slash = x.find('/');\n\
    \    x_numerator = stoi(x.substr(0, slash));\n    x_denominator = stoi(x.substr(slash\
    \ + 1));\n    slash = n.find('/');\n    n_numerator = stoi(n.substr(0, slash));\n\
    \    n_denominator = stoi(n.substr(slash + 1));\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"\
    /\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    int xn = to!int(split(x, \"/\"\
    )[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd)\
    \ % (xd * nn) == 0;\n}", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n    int\
    \ x2 = to!int(split(x, \"/\")[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n\
    \    int n2 = to!int(split(n, \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) ==\
    \ 0;\n}", "{\n    int xNumerator = to!int(split(x, \"/\")[0]);\n    int xDenominator\
    \ = to!int(split(x, \"/\")[1]);\n    int nNumerator = to!int(split(n, \"/\")[0]);\n\
    \    int nDenominator = to!int(split(n, \"/\")[1]);\n    int resultNumerator =\
    \ xNumerator * nNumerator;\n    int resultDenominator = xDenominator * nDenominator;\n\
    \    return resultNumerator % resultDenominator == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n =\
    \ split(n, '/');\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x,\
    \ \"/\")[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n,\
    \ \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    auto x_n =\
    \ split(x, '/');\n    auto n_n = split(n, '/');\n    return (to!int(x_n[0]) *\
    \ to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    if (result_numerator % result_denominator\
    \ == 0)\n        return true;\n    else\n        return false;\n}", "{\n    int\
    \ xn = to!int(split(x, \"/\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n\
    \    int nn = to!int(split(n, \"/\")[0]);\n    int nd = to!int(split(n, \"/\"\
    )[1]);\n    return (xn * nd) % (xd * nn) == 0;\n}", "{\n    int x1 = 0, x2 = 0,\
    \ n1 = 0, n2 = 0;\n    int i = 0;\n    while (x[i] != '/')\n    {\n        x1\
    \ = x1 * 10 + x[i] - '0';\n        i++;\n    }\n    i++;\n    while (i < x.length())\n\
    \    {\n        x2 = x2 * 10 + x[i] - '0';\n        i++;\n    }\n    i = 0;\n\
    \    while (n[i] != '/')\n    {\n        n1 = n1 * 10 + n[i] - '0';\n        i++;\n\
    \    }\n    i++;\n    while (i < n.length())\n    {\n        n2 = n2 * 10 + n[i]\
    \ - '0';\n        i++;\n    }\n    if (x1 * n2 % x2 * n1 == 0)\n        return\
    \ true;\n    return false;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int gcd = gcd(x_denominator,\
    \ n_denominator);\n    return (x_numerator * n_denominator * gcd) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n   \
    \ int x2 = to!int(split(x, \"/\")[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n\
    \    int n2 = to!int(split(n, \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator\
    \ = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int gcd = gcd(x_denominator,\
    \ n_denominator);\n    int lcm = (x_denominator * n_denominator) / gcd;\n    int\
    \ numerator = (lcm / x_denominator) * x_numerator + (lcm / n_denominator) * n_numerator;\n\
    \    return numerator % lcm == 0;\n}", "{\n    auto x_num = to!int(split(x, \"\
    /\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n\
    \ = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return den % num == 0;\n}", "{\n    int x_num\
    \ = stoi(x.substr(0, x.find('/')));\n    int x_den = stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = stoi(n.substr(0, n.find('/')));\n    int n_den = stoi(n.substr(n.find('/')\
    \ + 1));\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto gcd = gcd(x_num, x_den);\n    x_num /= gcd;\n    x_den\
    \ /= gcd;\n    gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n    n_den /= gcd;\n\
    \    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    int gcd = gcd(result_numerator, result_denominator);\n    result_numerator\
    \ /= gcd;\n    result_denominator /= gcd;\n    return result_numerator % result_denominator\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    int xn = to!int(x.split(\"/\")[0]);\n    int xd\
    \ = to!int(x.split(\"/\")[1]);\n    int nn = to!int(n.split(\"/\")[0]);\n    int\
    \ nd = to!int(n.split(\"/\")[1]);\n    return (xn * nd) % (xd * nn) == 0;\n}",
  "{\n    int x1, x2, n1, n2;\n    sscanf(x.c_str(), \"%d/%d\", &x1, &x2);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &n1, &n2);\n    int gcd = gcd(x1, x2);\n    x1 /= gcd;\n    x2 /=\
    \ gcd;\n    gcd = gcd(n1, n2);\n    n1 /= gcd;\n    n2 /= gcd;\n    return x1\
    \ * n2 % x2 == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto res_num = x_num\
    \ * n_num;\n    auto res_den = x_den * n_den;\n    return res_num % res_den ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto a =\
    \ split(x, \"/\");\n    auto b = split(n, \"/\");\n    return (to!int(a[0]) *\
    \ to!int(b[1])) % to!int(a[1]) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_num, x_den, n_num, n_den;\n    int i = 0;\n \
    \   while (x[i] != '/')\n    {\n        x_num = x_num * 10 + (x[i] - '0');\n \
    \       i++;\n    }\n    i++;\n    while (i < x.length())\n    {\n        x_den\
    \ = x_den * 10 + (x[i] - '0');\n        i++;\n    }\n    i = 0;\n    while (n[i]\
    \ != '/')\n    {\n        n_num = n_num * 10 + (n[i] - '0');\n        i++;\n \
    \   }\n    i++;\n    while (i < n.length())\n    {\n        n_den = n_den * 10\
    \ + (n[i] - '0');\n        i++;\n    }\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    int gcd = gcd(num, den);\n    num /= gcd;\n    den\
    \ /= gcd;\n    return den == 1;\n}", "{\n    auto x_num = to!int(split(x, \"/\"\
    )[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto\
    \ n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_n = x_numerator * n_denominator;\n    auto n_n = n_numerator\
    \ * x_denominator;\n    return x_n % n_n == 0;\n}", "{\n    auto x_n = split(x,\
    \ '/');\n    auto n_n = split(n, '/');\n    return to!int(x_n[0]) * to!int(n_n[1])\
    \ % to!int(x_n[1]) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x1 = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x, \"/\"\
    )[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n,\
    \ \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    int x_num =\
    \ to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n \
    \   int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n, \"\
    /\")[1]);\n    int gcd = gcd(x_num, n_den);\n    int lcm = lcm(x_den, n_num);\n\
    \    return (x_num * n_den) % (gcd * lcm) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto result = x_num * n_num;\n    auto result_den = x_den * n_den;\n    return\
    \ result % result_den == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"\
    /\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    auto x_n = x_numerator * n_denominator;\n    auto n_n = n_numerator\
    \ * x_denominator;\n    return x_n % n_n == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    sscanf(x.c_str(), \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &n_numerator, &n_denominator);\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;\n}", "{\n    int x1, x2, n1, n2;\n    sscanf(x.c_str(), \"%d/%d\", &x1,\
    \ &x2);\n    sscanf(n.c_str(), \"%d/%d\", &n1, &n2);\n    return (x1 * n2) % (x2\
    \ * n1) == 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n,\
    \ '/');\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den ==\
    \ 0;\n}", "{\n    auto x_n = split(x, '/');\n    auto n_n = split(n, '/');\n \
    \   auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto n_num\
    \ = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto x_num_n = x_num\
    \ * n_den;\n    auto n_num_n = n_num * x_den;\n    return x_num_n % n_num_n ==\
    \ 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
