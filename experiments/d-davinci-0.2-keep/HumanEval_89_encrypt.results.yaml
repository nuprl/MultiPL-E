name: HumanEval_89_encrypt
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        int newIndex = (index + 2 * 2) % alphabet.length;\n\
    \        result ~= alphabet[newIndex];\n    }\n    return result;\n}\n/*\nCreate\
    \ a function decrypt that takes a string as an argument and\n    returns a string\
    \ decrypted with the alphabet being rotated. \n    The alphabet should be rotated\
    \ in a manner such that the letters \n    shift up by two multiplied to two places.\n\
    \    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns\
    \ 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n\
    */\nstring decrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        int newIndex = (index - 2 * 2) % alphabet.length;\n\
    \        if(newIndex < 0)\n            newIndex += alphabet.length;\n        result\
    \ ~= alphabet[newIndex];\n    }\n    return result;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt2(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        int newIndex = (index + 2 * 2\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv9qb7l2l.d(71): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpv9qb7l2l.d(73): Error: semicolon expected, not `{`\\n/tmp/tmpv9qb7l2l.d(85):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpv9qb7l2l.d(85): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9qb7l2l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr5erjmk1.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmpr5erjmk1.__unittest_L24_C1()\
    \ [0x427b52]\\n??:? void tmpr5erjmk1.__modtest() [0x427e10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e23]\\\
    n??:? __libc_start_main [0xaf841554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxn8hpppt.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn8hpppt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv78cpbea.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv78cpbea.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(i, c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuyj6titm.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyj6titm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)((c + (2 * 2)) % 256));\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo8i2b5w8.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmpo8i2b5w8.__unittest_L24_C1()\
    \ [0x427c7e]\\n??:? void tmpo8i2b5w8.__modtest() [0x427e10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e23]\\\
    n??:? __libc_start_main [0xa3368554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpstpi47m3.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstpi47m3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        index = (index + 2) * 2;\n        if(index >=\
    \ alphabet.length)\n        {\n            index = index - alphabet.length;\n\
    \        }\n        result ~= alphabet[index];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprcz___1b.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmprcz___1b.d(25): Error: cannot implicitly convert expression `cast(ulong)index\
    \ - alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprcz___1b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4l183psq.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp4l183psq.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp4l183psq.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xa73ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(i; 0 .. s.length)\n    {\n      \
    \  encrypted ~= alphabet[(alphabet.indexOf(s[i]) + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcaabxh1f.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcaabxh1f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6uigiuil.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uigiuil.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(c; s)\n    {\n        int index =\
    \ alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf16vay51.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf16vay51.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_0tge5tg.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0tge5tg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        result ~= alphabet[(index + 2) % alphabet.length];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeh6xz2eu.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeh6xz2eu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncuzmdte.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncuzmdte.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(c; s)\n    {\n        int index =\
    \ alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % 26];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cicrc63.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cicrc63.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)((c + 2) * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp81y5878u.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ + 2) * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81y5878u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx1n6zm_x.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpx1n6zm_x.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpx1n6zm_x.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x94a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkkzrcs6z.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkzrcs6z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4j_4igro.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j_4igro.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        encrypted ~= (c + 2 * 2).to!char;\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyeowb84.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyeowb84.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_lt0dt5b.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp_lt0dt5b.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp_lt0dt5b.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x6fb06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2*2).to!char;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnx36fd2u.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnx36fd2u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2bcnrpnd.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2bcnrpnd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    /*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop')\
    \ returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns\
    \ 'et'\n*/\nstring decrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c - 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkedbehel.d(20): Error: no property `to` for type `int`\\n/tmp/tmpkedbehel.d(40):\
    \ Error: no property `to` for type `int`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpkedbehel.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)(c + 2 * 2));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpomamrmzc.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmpomamrmzc.__unittest_L24_C1()\
    \ [0x427c76]\\n??:? void tmpomamrmzc.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x3e243554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprsz7gdk5.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmprsz7gdk5.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmprsz7gdk5.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xf72f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_cb6py0.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_cb6py0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuanz1gn2.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuanz1gn2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else\
    \ if(c == 'y')\n            result ~= 'a';\n        else\n            result ~=\
    \ c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3s0gcd0u.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmp3s0gcd0u.__unittest_L29_C1()\
    \ [0x427c5a]\\n??:? void tmp3s0gcd0u.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x24950554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret;\n    foreach(c; s)\n\
    \    {\n        int i = c;\n        if(i >= 97 && i <= 122)\n        {\n     \
    \       i += 2 * 2;\n            if(i > 122)\n            {\n                i\
    \ -= 26;\n            }\n        }\n        else if(i >= 65 && i <= 90)\n    \
    \    {\n            i += 2 * 2;\n            if(i > 90)\n            {\n     \
    \           i -= 26;\n            }\n        }\n        ret ~= cast(char)i;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n  \
    \  assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezfcitr6.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezfcitr6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    string result\
    \ = \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        result ~= new_alphabet[index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60lxbtdp.d(22): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60lxbtdp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        result ~= new_alphabet[index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimeixcki.d(22): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimeixcki.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp9dbw3xx.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2 * 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp9dbw3xx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6sx_fbh.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6sx_fbh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n        {\n            result ~= 'b';\n\
    \        }\n        else if(c == 'y')\n        {\n            result ~= 'a';\n\
    \        }\n        else\n        {\n            result ~= c + 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsnq6ivsd.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmpsnq6ivsd.__unittest_L35_C1()\
    \ [0x427c5a]\\n??:? void tmpsnq6ivsd.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x18378554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2) * 2];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpat8c47w6.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat8c47w6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (cast(char)(c + (c - 96) * 2));\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpobnqgqed.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmpobnqgqed.__unittest_L24_C1()\
    \ [0x427b4a]\\n??:? void tmpobnqgqed.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x5578554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret;\n    foreach(c; s)\n\
    \    {\n        ret ~= (c + 2 * 2);\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4g84srrx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp4g84srrx.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp4g84srrx.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xb1f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3qgxms_.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3qgxms_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb6jblsc7.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6jblsc7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            result\
    \ ~= alphabet[(index + (2 * 2)) % alphabet.length];\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdw3r79_g.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdw3r79_g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        int newIndex = (index + (2 * 2)) % 26;\n   \
    \     encrypted ~= alphabet[newIndex];\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5751_md4.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5751_md4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)((c - 'a' + 2) % 26 + 'a');\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ttkxxgg.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1ttkxxgg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_i00zm9.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_i00zm9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + (2 * 2)) % 26];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplpp49ghn.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpp49ghn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyf6iwrdw.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf6iwrdw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index == -1)\n        {\n            result ~= c;\n        }\n   \
    \     else\n        {\n            int newIndex = (index + (2 * 2)) % alphabet.length;\n\
    \            result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3im6y_2n.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmp3im6y_2n.d(28): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3im6y_2n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2) * 2];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps5ray8mx.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5ray8mx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvs0zkgzn.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs0zkgzn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcwqlfbd0.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwqlfbd0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        result ~=\
    \ alphabet[(alphabet.indexOf(c) + 2*2) % alphabet.length];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw02knm0t.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw02knm0t.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppa_cru_l.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa_cru_l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n            ret ~= 'b';\n        else if(c\
    \ == 'y')\n            ret ~= 'a';\n        else\n            ret ~= (char)(c\
    \ + 2);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45zw7il9.d(25): Error: C style cast illegal, use `cast(char)(c\
    \ + 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp45zw7il9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        encrypted ~= alphabet[(index+2*2)%alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplv340vru.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv340vru.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9bf50it3.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bf50it3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp1skouqi.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1skouqi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s) \n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1) \n        {\n            result\
    \ ~= alphabet[(index + 2) * 2];\n        }\n        else \n        {\n       \
    \     result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqwokq0f.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqwokq0f.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        int newIndex = (index + (2 * 2)) % 26;\n   \
    \     result ~= alphabet[newIndex];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4egz6w0p.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4egz6w0p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpye2_calf.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpye2_calf.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpye2_calf.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xf34d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\n/*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop')\
    \ returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns\
    \ 'et'\n*/\nstring decrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c - 2 * 2);\n    }\n    return result;\n\
    }\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns\
    \ a string encrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift down by two multiplied\
    \ to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns\
    \ 'ix'\n    \n*/\nstring encrypt2(string s) \n{\n    string result = \"\";\n \
    \   foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n \
    \   return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    decrypt('lm')\
    \ returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj')\
    \ returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt2(string s)\
    \ \n{\n    string result = \"\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvahj8yyc.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\n/tmp/tmpvahj8yyc.d(40): Error: C style cast illegal, use `cast(char)(c\
    \ - 2 * 2)`\\n/tmp/tmpvahj8yyc.d(61): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\n/tmp/tmpvahj8yyc.d(83): Error: semicolon expected, not `hi`\\n/tmp/tmpvahj8yyc.d(83):\
    \ Error: found `\") == \"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(83):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpvahj8yyc.d(84): Error: found `\") == \"` when expecting\
    \ `;` following statement\\n/tmp/tmpvahj8yyc.d(84): Error: found `\");\\\\x0a\
    \    assert(candidate(\"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(85):\
    \ Error: found `\") == \"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(85):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpvahj8yyc.d(86): Error: found `\") == \"` when expecting\
    \ `;` following statement\\n/tmp/tmpvahj8yyc.d(86): Error: found `\");\\\\x0a\
    \    assert(candidate(\"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(87):\
    \ Error: found `\") == \"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(87):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpvahj8yyc.d(88): Error: found `\") == \"` when expecting\
    \ `;` following statement\\n/tmp/tmpvahj8yyc.d(88): Error: found `\");\\\\x0a\
    \    assert(candidate(\"d` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(89):\
    \ Error: found `\") == \"` when expecting `;` following statement\\n/tmp/tmpvahj8yyc.d(89):\
    \ Error: found `\");\\\\x0a    assert(candidate(\"` when expecting `;` following\
    \ statement\\n/tmp/tmpvahj8yyc.d(90): Error: found `\") == \"` when expecting\
    \ `;` following statement\\n/tmp/tmpvahj8yyc.d(90): Error: unterminated string\
    \ constant starting at /tmp/tmpvahj8yyc.d(90)\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvahj8yyc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            result ~= alphabet[(index\
    \ + 2 * 2) % alphabet.length];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdplgefkt.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdplgefkt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebnagaoi.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnagaoi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpycfsis4a.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpycfsis4a.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpycfsis4a.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x8ea90554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s) \n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp338o5cr9.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp338o5cr9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjq92l53b.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjq92l53b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % 26];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmzvaa3yh.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzvaa3yh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ly4wl7u.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ly4wl7u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            index\
    \ = (index + 2) * 2;\n            if(index > alphabet.length)\n            {\n\
    \                index = index - alphabet.length;\n            }\n           \
    \ result ~= alphabet[index];\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uw59mnx.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmp7uw59mnx.d(27): Error: cannot implicitly convert expression `cast(ulong)index\
    \ - alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7uw59mnx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdy7r0ysr.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpdy7r0ysr.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpdy7r0ysr.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x9bd90554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8114hme.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8114hme.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % 26];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_j_vheh.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_j_vheh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprbrx5g3.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprbrx5g3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(c; s)\n    {\n        int index =\
    \ alphabet.find(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + 4) % alphabet.length];\n        }\n        else\n     \
    \   {\n            encrypted ~= c;\n        }\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82ydiuia.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82ydiuia.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)((c + 2) * 2));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_0isqktf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmp_0isqktf.__unittest_L24_C1()\
    \ [0x427b4a]\\n??:? void tmp_0isqktf.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x5b0fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        index = (index + 2) * 2;\n        if(index > 25)\n        {\n       \
    \     index = index - 26;\n        }\n        result ~= alphabet[index];\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n  \
    \  assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptq0dj_t_.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptq0dj_t_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp30be332h.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30be332h.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjkgvpcnh.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkgvpcnh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(immutable\
    \ c; s)\n    {\n        immutable i = c;\n        if(i >= 'a' && i <= 'z')\n \
    \       {\n            i = i + 2;\n            if(i > 'z')\n            {\n  \
    \              i = i - 'z' + 'a' - 1;\n            }\n        }\n        else\
    \ if(i >= 'A' && i <= 'Z')\n        {\n            i = i + 2;\n            if(i\
    \ > 'Z')\n            {\n                i = i - 'Z' + 'A' - 1;\n            }\n\
    \        }\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7up1i34o.d(23): Error: cannot modify `immutable` expression `i`\\\
    n/tmp/tmp7up1i34o.d(26): Error: cannot modify `immutable` expression `i`\\n/tmp/tmp7up1i34o.d(31):\
    \ Error: cannot modify `immutable` expression `i`\\n/tmp/tmp7up1i34o.d(34): Error:\
    \ cannot modify `immutable` expression `i`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmp7up1i34o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            int index\
    \ = c - 'a';\n            index = (index + 2) % 26;\n            result ~= (char)(index\
    \ + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n     \
    \       int index = c - 'A';\n            index = (index + 2) % 26;\n        \
    \    result ~= (char)(index + 'A');\n        }\n        else\n        {\n    \
    \        result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczflkyse.d(24): Error: C style cast illegal, use `cast(char)(index\
    \ + \\'a\\')`\\n/tmp/tmpczflkyse.d(30): Error: C style cast illegal, use `cast(char)(index\
    \ + \\'A\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczflkyse.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9skl006.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9skl006.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int i = cast(int)c;\n        i = i + 2 * 2;\n        result\
    \ ~= cast(char)i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5d_9lqbb.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmp5d_9lqbb.__unittest_L26_C1()\
    \ [0x427c76]\\n??:? void tmp5d_9lqbb.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x891bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            int newIndex = (index\
    \ + 2 * 2) % alphabet.length;\n            result ~= alphabet[newIndex];\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpth3fkxd9.d(21): Error: no property `find` for type `string`\\\
    n/tmp/tmpth3fkxd9.d(28): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpth3fkxd9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    foreach(char\
    \ c; s)\n    {\n        ret ~= (char)(c + 2 * 2);\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkf2619ux.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2619ux.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpey2g5amp.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey2g5amp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        if(c == 'z')\n            result ~= 'b';\n        else if(c ==\
    \ 'y')\n            result ~= 'a';\n        else\n            result ~= c + 2;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp619g4qpe.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmp619g4qpe.__unittest_L29_C1()\
    \ [0x427c5a]\\n??:? void tmp619g4qpe.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x72769554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptwhhdxzz.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwhhdxzz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq2e71jyj.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpq2e71jyj.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpq2e71jyj.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x807c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9op67cyy.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9op67cyy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            c =\
    \ (c - 'a' + 2 * 2) % 26 + 'a';\n        }\n        else if(c >= 'A' && c <= 'Z')\
    \ \n        {\n            c = (c - 'A' + 2 * 2) % 26 + 'A';\n        }\n    \
    \    result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2*2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj6ly11su.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6ly11su.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\
    \ \n    {\n        result ~= (cast(char)(c + (c > 'm' ? -13 : 13)));\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8lgq4e2c.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428095]\\n??:? void tmp8lgq4e2c.__unittest_L24_C1()\
    \ [0x427b56]\\n??:? void tmp8lgq4e2c.__modtest() [0x427e14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c72b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b63a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430011]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b611]\\n??:? runModuleUnitTests [0x42c501]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42846b]\\n??:? _d_run_main [0x4283d6]\\n??:? main [0x427e27]\\\
    n??:? __libc_start_main [0x3b15f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2pdipn9.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2pdipn9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1e5_m29c.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e5_m29c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            int newIndex = (index\
    \ + 2) * 2;\n            if(newIndex > alphabet.length)\n            {\n     \
    \           newIndex = newIndex - alphabet.length;\n            }\n          \
    \  result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6wr0hkeo.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmp6wr0hkeo.d(31): Error: cannot implicitly convert expression `cast(ulong)newIndex\
    \ - alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6wr0hkeo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw2mhpvsr.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpw2mhpvsr.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpw2mhpvsr.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x2dc50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(c; s)\n    {\n        int index =\
    \ alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdh7hec3p.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh7hec3p.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (cast(char)((c + 2) * 2));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4f73wylq.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmp4f73wylq.__unittest_L24_C1()\
    \ [0x427b4a]\\n??:? void tmp4f73wylq.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x46917554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ufnboxu.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ufnboxu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2) * 2];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqqpxb9l.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqqpxb9l.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_pjeg2qx.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pjeg2qx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3nki5utw.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nki5utw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index == -1)\n        {\n            result ~= c;\n        }\n   \
    \     else\n        {\n            index = (index + 2 * 2) % alphabet.length;\n\
    \            result ~= alphabet[index];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89ihazja.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmp89ihazja.d(28): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp89ihazja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n        else if(c >= 'A'\
    \ && c <= 'Z')\n        {\n            result ~= (char)(((c - 'A' + 2) % 26) +\
    \ 'A');\n        }\n        else\n        {\n            result ~= c;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgqffcqjn.d(22): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2) % 26 + \\'a\\')`\\n/tmp/tmpgqffcqjn.d(26): Error: C style cast\
    \ illegal, use `cast(char)((c - \\'A\\' + 2) % 26 + \\'A\\')`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqffcqjn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2*2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj4u_g75d.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpj4u_g75d.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpj4u_g75d.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x759a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporpplh_v.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporpplh_v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8w6n4gne.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w6n4gne.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp53on2tu1.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp53on2tu1.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp53on2tu1.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x4f212554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            result\
    \ ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n        else\n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5bcmk5pn.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bcmk5pn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + (2 * 2)) % 26];\n        }\n        else\n        {\n \
    \           encrypted ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwcmi__qd.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcmi__qd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        int newIndex = (index + 2*2) % alphabet.length;\n\
    \        encrypted ~= alphabet[newIndex];\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8s__56w.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmps8s__56w.d(22): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmps8s__56w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1pm9c87.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1pm9c87.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + (2 * 2));\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafbk3ngg.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpafbk3ngg.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpafbk3ngg.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x19172554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + (2 * 2)) % alphabet.length];\n        }\n        else\n\
    \        {\n            encrypted ~= c;\n        }\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4z75ffz2.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4z75ffz2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpswcaftgx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpswcaftgx.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpswcaftgx.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x21b85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpibu9vbab.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpibu9vbab.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpibu9vbab.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xd057f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index == -1)\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            int newIndex = (index\
    \ + (2 * 2)) % alphabet.length;\n            encrypted ~= alphabet[newIndex];\n\
    \        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmu70_21z.d(21): Error: no property `find` for type `string`\\\
    n/tmp/tmpmu70_21z.d(28): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmu70_21z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx0lsc4l9.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0lsc4l9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index != -1)\n        {\n            int newIndex\
    \ = (index + (2 * 2)) % alphabet.length;\n            result ~= alphabet[newIndex];\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n  \
    \  assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplgiyrnhr.d(21): Error: no property `find` for type `string`\\\
    n/tmp/tmplgiyrnhr.d(24): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplgiyrnhr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr5b5ad8g.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5b5ad8g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\
    \ \n    {\n        if(c == 'z') \n        {\n            result ~= 'b';\n    \
    \    } \n        else if(c == 'y') \n        {\n            result ~= 'a';\n \
    \       } \n        else \n        {\n            result ~= c + 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp83tppvrd.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmp83tppvrd.__unittest_L35_C1()\
    \ [0x427c5a]\\n??:? void tmp83tppvrd.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x1c754554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + 4) % 26];\n \
    \   }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_zj99lr.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_zj99lr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            int newIndex = (index\
    \ + (2 * 2)) % 26;\n            result ~= alphabet[newIndex];\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n  \
    \  assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1uuodtnm.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uuodtnm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3eenoxfi.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp3eenoxfi.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp3eenoxfi.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x277be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprvu52uqi.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvu52uqi.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == 'z')\n        {\n            result ~= 'b';\n   \
    \     }\n        else if(c == 'y')\n        {\n            result ~= 'a';\n  \
    \      }\n        else\n        {\n            result ~= c + 2;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvn1q6tbu.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmpvn1q6tbu.__unittest_L35_C1()\
    \ [0x427c5a]\\n??:? void tmpvn1q6tbu.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x1535d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7w5ub_3b.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp7w5ub_3b.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp7w5ub_3b.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x43a0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            encrypted ~= alphabet[(index\
    \ + 2*2) % alphabet.length];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpolmt6ta8.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolmt6ta8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.find(c);\n\
    \        if(index == -1)\n        {\n            result ~= c;\n        }\n   \
    \     else\n        {\n            int newIndex = (index + 2 * 2) % alphabet.length;\n\
    \            result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfx2_3ov7.d(21): Error: no property `find` for type `string`\\\
    n/tmp/tmpfx2_3ov7.d(28): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfx2_3ov7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)(c + 2 * 2));\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo7p4sg3y.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmpo7p4sg3y.__unittest_L24_C1()\
    \ [0x427c76]\\n??:? void tmpo7p4sg3y.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0xddb2d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qjxvss4.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qjxvss4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvjdv5gu_.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmpvjdv5gu_.__unittest_L24_C1()\
    \ [0x427b52]\\n??:? void tmpvjdv5gu_.__modtest() [0x427e10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e23]\\\
    n??:? __libc_start_main [0x5845b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgc8b434o.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgc8b434o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\
    \ \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdww1wer4.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdww1wer4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa16qcamm.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2 * 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpa16qcamm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp707vaudq.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp707vaudq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(immutable\
    \ char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9yxzp424.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yxzp424.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyd1wy2m1.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd1wy2m1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\
    \ \n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvlup20an.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmpvlup20an.__unittest_L24_C1()\
    \ [0x427b52]\\n??:? void tmpvlup20an.__modtest() [0x427e10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e23]\\\
    n??:? __libc_start_main [0x7698c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuddzrgbq.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuddzrgbq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        size_t\
    \ index = alphabet.find(c);\n        encrypted ~= alphabet[(index + (2 * 2)) %\
    \ alphabet.length];\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5t9q1bsm.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5t9q1bsm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo2e93wds.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpo2e93wds.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpo2e93wds.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xaf905554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (cast(char)((c + 2) % 26 + 'a'));\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp191n12ig.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42808d]\\n??:? void tmp191n12ig.__unittest_L24_C1()\
    \ [0x427b52]\\n??:? void tmp191n12ig.__modtest() [0x427e10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c723]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b632]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430009]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b609]\\n??:? runModuleUnitTests [0x42c4f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428463]\\n??:? _d_run_main [0x4283ce]\\n??:? main [0x427e23]\\\
    n??:? __libc_start_main [0xba5b1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf7vdfn3y.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7vdfn3y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            result ~= alphabet[(index\
    \ + 2 * 2) % alphabet.length];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5j8vke4q.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j8vke4q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9_m9xb5.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9_m9xb5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    decrypt('lm')\
    \ returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj')\
    \ returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string s) \n\
    {\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string decrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        decrypted ~= alphabet[(index - (2 * 2)) % alphabet.length];\n    }\n\
    \    return decrypted;\n}\n/*\nCreate a function encrypt that takes a string as\
    \ an argument and\n    returns a string encrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift down by two multiplied to two places.\n    For example:\n    encrypt('hi')\
    \ returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf')\
    \ returns 'kj'\n    encrypt('et') returns 'ix'\n    \n*/\nstring encrypt(string\
    \ s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n    }\n\
    \    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm89uhswf.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm89uhswf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        result ~= alphabet[(alphabet.indexOf(c)\
    \ + 2 * 2) % alphabet.length];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2c1rjdl.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2c1rjdl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk_mzr3r7.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpk_mzr3r7.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpk_mzr3r7.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x7f9f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7ffne8n.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7ffne8n.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppldcgo3k.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppldcgo3k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbg3xoa42.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpbg3xoa42.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpbg3xoa42.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x2662d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s) \n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1) \n        {\n            result\
    \ ~= alphabet[(index + 2) % alphabet.length];\n        }\n        else \n    \
    \    {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zxc6nm5.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zxc6nm5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw9pr3b17.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpw9pr3b17.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpw9pr3b17.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x7907e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            int\
    \ newIndex = (index + (2 * 2)) % alphabet.length;\n            result ~= alphabet[newIndex];\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    decrypt('lm')\
    \ returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj')\
    \ returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string s) \n\
    {\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        if(index != -1)\n        {\n            int newIndex = (index - (2 *\
    \ 2)) % alphabet.length;\n            if(newIndex < 0)\n            {\n      \
    \          newIndex += alphabet.length;\n            }\n            result ~=\
    \ alphabet[newIndex];\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx8f6otdn.d(81): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8f6otdn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index != -1)\n        {\n            result\
    \ ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n        else\n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjenf4vsc.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjenf4vsc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp41et4a7s.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp41et4a7s.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp41et4a7s.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x530e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret;\n    foreach(c; s)\n\
    \    {\n        ret ~= (c + 2 * 2).to!char;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnzzqd3e.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnzzqd3e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8gl0o588.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp8gl0o588.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmp8gl0o588.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x5a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % 26];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt2hw66nq.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2hw66nq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        encrypted ~= (cast(char)(c + 2 * 2));\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2k32co62.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmp2k32co62.__unittest_L24_C1()\
    \ [0x427c76]\\n??:? void tmp2k32co62.__modtest() [0x427e08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c71b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b62a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430001]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b601]\\n??:? runModuleUnitTests [0x42c4f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4284d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42845b]\\n??:? _d_run_main [0x4283c6]\\n??:? main [0x427e1b]\\\
    n??:? __libc_start_main [0x3bea0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == '\
    \ ')\n        {\n            result ~= ' ';\n            continue;\n        }\n\
    \        int index = alphabet.find(c);\n        int newIndex = (index + (2 * 2))\
    \ % alphabet.length;\n        result ~= alphabet[newIndex];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpalx79ow5.d(26): Error: no property `find` for type `string`\\\
    n/tmp/tmpalx79ow5.d(27): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpalx79ow5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\n/*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop')\
    \ returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns\
    \ 'et'\n*/\nstring decrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (c - 2 * 2).to!char;\n    }\n    return result;\n\
    }\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns\
    \ a string encrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift down by two multiplied\
    \ to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns\
    \ 'ix'\n    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n  \
    \  foreach(char c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n\
    \    return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    decrypt('lm')\
    \ returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj')\
    \ returns 'gf'\n    decrypt('ix') returns 'et'\n*/\nstring decrypt(string s) \n\
    \nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\")\
    \ == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjbc_d4xz.d(78): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbc_d4xz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpewl_ns1e.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewl_ns1e.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu61l9owh.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu61l9owh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7e_ktjh.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7e_ktjh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n        {\n            result ~= 'b';\n\
    \        }\n        else if(c == 'y')\n        {\n            result ~= 'a';\n\
    \        }\n        else\n        {\n            result ~= c + 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphbu6ii9b.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmphbu6ii9b.__unittest_L35_C1()\
    \ [0x427c5a]\\n??:? void tmphbu6ii9b.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x35f35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    foreach(char\
    \ c; s)\n    {\n        ret ~= (char)(c + 2 * 2);\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu17mfr8d.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu17mfr8d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0gahwcr.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0gahwcr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp03kmflsu.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2 * 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp03kmflsu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8k8ryhzb.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8k8ryhzb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(c; s)\n    {\n        int index = alphabet.indexOf(c);\n\
    \        int newIndex = (index + 2 * 2) % alphabet.length;\n        result ~=\
    \ alphabet[newIndex];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw983eyeu.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmpw983eyeu.d(22): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw983eyeu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdjwp7yet.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjwp7yet.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpil4bv4ho.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpil4bv4ho.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpil4bv4ho.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xb64fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2) * 2;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp91v4ptaz.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428135]\\n??:? void tmp91v4ptaz.__unittest_L24_C1()\
    \ [0x427bf6]\\n??:? void tmp91v4ptaz.__modtest() [0x427eb4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0d3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430085]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb9]\\n??:? runModuleUnitTests [0x42bea9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428584]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42850b]\\n??:? _d_run_main [0x428476]\\n??:? main [0x427ec7]\\\
    n??:? __libc_start_main [0x3f330554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd896kvxx.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd896kvxx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        if(index != -1)\n        {\n            encrypted\
    \ ~= alphabet[(index + (2 * 2)) % 26];\n        }\n        else\n        {\n \
    \           encrypted ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_sx6vnkq.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sx6vnkq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprqjsvcyl.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmprqjsvcyl.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmprqjsvcyl.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x36272554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        if(index == -1)\n        {\n            result\
    \ ~= c;\n        }\n        else\n        {\n            int newIndex = (index\
    \ + 2) * 2;\n            if(newIndex > alphabet.length)\n            {\n     \
    \           newIndex = newIndex - alphabet.length;\n            }\n          \
    \  result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp94uvrjfm.d(21): Error: no property `find` for type `string`\\\
    n/tmp/tmp94uvrjfm.d(31): Error: cannot implicitly convert expression `cast(ulong)newIndex\
    \ - alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp94uvrjfm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\";\n    foreach(char\
    \ c; s)\n    {\n        ret ~= (char)(c + 2 * 2);\n    }\n    return ret;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2pq41q7_.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pq41q7_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpklrhycro.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklrhycro.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsc6jnu2a.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc6jnu2a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpschwo1f3.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpschwo1f3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcc5eoa25.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpcc5eoa25.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpcc5eoa25.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xe24d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ml6kjs1.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ml6kjs1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpikqq1x46.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmpikqq1x46.__unittest_L24_C1()\
    \ [0x427d1e]\\n??:? void tmpikqq1x46.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0xd2b77554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2*2).to!char;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl35qfhah.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl35qfhah.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        if(c == 'z')\n            result ~= 'b';\n        else if(c ==\
    \ 'y')\n            result ~= 'a';\n        else\n            result ~= chr(ord(c)\
    \ + 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpffe30gbb.d(25): Error: undefined identifier `chr`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffe30gbb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybzielut.d(20): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpybzielut.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else\
    \ if(c == 'y')\n            result ~= 'a';\n        else\n            result ~=\
    \ c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy8h78qz0.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmpy8h78qz0.__unittest_L29_C1()\
    \ [0x427c5a]\\n??:? void tmpy8h78qz0.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0xefd37554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wpowipf.d(20): Error: C style cast illegal, use `cast(char)(c\
    \ + 2 * 2)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wpowipf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        int newIndex = (index + 2 * 2) % alphabet.length;\n\
    \        encrypted ~= alphabet[newIndex];\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_z8q9pfj.d(21): Error: no property `indexOf` for type `string`\\\
    n/tmp/tmp_z8q9pfj.d(22): Error: cannot implicitly convert expression `cast(ulong)(index\
    \ + 4) % alphabet.length` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_z8q9pfj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result;\n    foreach(c; s)\n\
    \    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82s40fgj.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82s40fgj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        encrypted ~= alphabet[(index + 2 * 2) % 26];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpciarwvgb.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpciarwvgb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else\
    \ if(c == 'y')\n            result ~= 'a';\n        else\n            result ~=\
    \ c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdar866rx.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428195]\\n??:? void tmpdar866rx.__unittest_L29_C1()\
    \ [0x427c5a]\\n??:? void tmpdar866rx.__modtest() [0x427f18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ba2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba05]\\n??:? runModuleUnitTests [0x42c8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42856b]\\n??:? _d_run_main [0x4284d6]\\n??:? main [0x427f2b]\\\
    n??:? __libc_start_main [0x9ac87554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= char(c + 2 * 2);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxrils5zt.d(20): Error: cannot implicitly convert expression `cast(int)c\
    \ + 4` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxrils5zt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string encrypted = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.find(c);\n        encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3tg_lknn.d(21): Error: no property `find` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tg_lknn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2seub77.d(20): Error: no property `to` for type `int`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2seub77.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns\
    \ 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\
    \    \n*/\nstring encrypt(string s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string result = \"\";\n    foreach(char c; s)\n    {\n        int index\
    \ = alphabet.indexOf(c);\n        result ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnf9lchto.d(21): Error: no property `indexOf` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnf9lchto.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
