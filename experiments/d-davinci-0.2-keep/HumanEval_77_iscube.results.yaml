name: HumanEval_77_iscube
language: humaneval_to_dlang.py
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvogqu_x3.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvogqu_x3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpatj0elgy.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpatj0elgy.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpatj0elgy.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xbd767554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphzzipzzl.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmphzzipzzl.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmphzzipzzl.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0x45b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(round(pow(a, 1.0/3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7vf5b3b9.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp7vf5b3b9.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp7vf5b3b9.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xeace8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph2gwtasx.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmph2gwtasx.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmph2gwtasx.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x1e6ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && pow(a,\
    \ 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9b17uqcm.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmp9b17uqcm.__unittest_L21_C1()\
    \ [0x427e54]\\n??:? void tmp9b17uqcm.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0x93841554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (int)pow(a, 1.0/3) == pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcj7vu29c.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcj7vu29c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfs7tr_0r.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpfs7tr_0r.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpfs7tr_0r.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x6b46b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gf3k3al.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmp9gf3k3al.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gf3k3al.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0ha2idyf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp0ha2idyf.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp0ha2idyf.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x8dd89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(floor(pow(a, 1.0 / 3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf6mso9qk.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpf6mso9qk.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpf6mso9qk.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x7c641554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == (int)pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2gwwnoz9.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gwwnoz9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc6ggh62i.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpc6ggh62i.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmpc6ggh62i.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0xef0cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0/3.0)\
    \ == int(pow(a, 1.0/3.0)));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt7lldt17.d(19): Error: cannot implicitly convert expression `pow(a,\
    \ 0.333333)` of type `real` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpt7lldt17.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0t3ut0vf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp0t3ut0vf.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp0t3ut0vf.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x93b5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxeszw_9s.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpxeszw_9s.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmpxeszw_9s.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0xca715554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9pvbu8tf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp9pvbu8tf.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp9pvbu8tf.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x7f4a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(round(pow(a,\
    \ 1.0 / 3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n  \
    \  assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd1vcnh4j.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a65]\\n??:? void tmpd1vcnh4j.__unittest_L21_C1()\
    \ [0x427e1c]\\n??:? void tmpd1vcnh4j.__modtest() [0x4287e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c84b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430871]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6b5]\\n??:? runModuleUnitTests [0x42c621]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eb4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e3b]\\n??:? _d_run_main [0x428da6]\\n??:? main [0x4287fb]\\\
    n??:? __libc_start_main [0x4f6a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0)\
    \ == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6k_yg5zf.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\n/tmp/tmp6k_yg5zf.d(19): Error: C style cast illegal, use\
    \ `cast(long)pow(a, 1.00000 / 3.00000)`\\n/tmp/tmp6k_yg5zf.d(19): Error: C style\
    \ cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k_yg5zf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp520aefzo.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42897d]\\n??:? void tmp520aefzo.__unittest_L21_C1()\
    \ [0x427d63]\\n??:? void tmp520aefzo.__modtest() [0x428700]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c74b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430771]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5b5]\\n??:? runModuleUnitTests [0x42c521]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dcc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d53]\\n??:? _d_run_main [0x428cbe]\\n??:? main [0x428713]\\\
    n??:? __libc_start_main [0xaa60554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0lmnqsiy.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmp0lmnqsiy.__unittest_L21_C1()\
    \ [0x427aed]\\n??:? void tmp0lmnqsiy.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x311d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? -a :\
    \ a) == pow(cast(long)pow(cast(long)(a < 0 ? -a : a), 1.0 / 3.0), 3);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphw8nh0vn.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428ad5]\\n??:? void tmphw8nh0vn.__unittest_L21_C1()\
    \ [0x427e0f]\\n??:? void tmphw8nh0vn.__modtest() [0x428854]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430855]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b70d]\\n??:? runModuleUnitTests [0x42c679]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f24]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428eab]\\n??:? _d_run_main [0x428e16]\\n??:? main [0x428867]\\\
    n??:? __libc_start_main [0xac7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpugibidsi.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpugibidsi.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpugibidsi.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0xde861554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjalcoyuy.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a95]\\n??:? void tmpjalcoyuy.__unittest_L21_C1()\
    \ [0x427de3]\\n??:? void tmpjalcoyuy.__modtest() [0x428818]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c863]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430889]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d38]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430815]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6cd]\\n??:? runModuleUnitTests [0x42c639]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ee4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e6b]\\n??:? _d_run_main [0x428dd6]\\n??:? main [0x42882b]\\\
    n??:? __libc_start_main [0xb3cb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp13r4kren.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmp13r4kren.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmp13r4kren.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x6cecd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) == floor(pow(a, 1.0 / 3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1yoh8x3a.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmp1yoh8x3a.__unittest_L21_C1()\
    \ [0x427e50]\\n??:? void tmp1yoh8x3a.__modtest() [0x42881c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x42882f]\\\
    n??:? __libc_start_main [0x96bbf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptuq2soyi.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmptuq2soyi.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuq2soyi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc7uviz6c.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpc7uviz6c.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc7uviz6c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi5ixck0r.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpi5ixck0r.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmpi5ixck0r.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x9d384554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0/3)\
    \ == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmrs3esqq.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpmrs3esqq.__unittest_L21_C1()\
    \ [0x427e50]\\n??:? void tmpmrs3esqq.__modtest() [0x42881c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x42882f]\\\
    n??:? __libc_start_main [0xf4c03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_8fx17wi.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a85]\\n??:? void tmp_8fx17wi.__unittest_L21_C1()\
    \ [0x427da4]\\n??:? void tmp_8fx17wi.__modtest() [0x428808]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c853]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430879]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430805]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6bd]\\n??:? runModuleUnitTests [0x42c629]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ed4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e5b]\\n??:? _d_run_main [0x428dc6]\\n??:? main [0x42881b]\\\
    n??:? __libc_start_main [0x8d50b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj4xl0nxr.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpj4xl0nxr.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpj4xl0nxr.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x3cd8d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpipbhhvr0.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipbhhvr0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprdf9h_5v.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmprdf9h_5v.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmprdf9h_5v.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x19053554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    // your code here\n    return a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc_sg373t.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a85]\\n??:? void tmpc_sg373t.__unittest_L22_C1()\
    \ [0x427da4]\\n??:? void tmpc_sg373t.__modtest() [0x428808]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c853]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430879]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430805]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6bd]\\n??:? runModuleUnitTests [0x42c629]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ed4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e5b]\\n??:? _d_run_main [0x428dc6]\\n??:? main [0x42881b]\\\
    n??:? __libc_start_main [0x5d292554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprs4a9j2j.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmprs4a9j2j.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs4a9j2j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp80exsqst.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmp80exsqst.__unittest_L21_C1()\
    \ [0x427d64]\\n??:? void tmp80exsqst.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c77b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b60e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43072d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5e5]\\n??:? runModuleUnitTests [0x42c551]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dfc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d83]\\n??:? _d_run_main [0x428cee]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0x99463554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0/3.0)\
    \ == int(pow(a, 1.0/3.0)));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp07udwlrb.d(19): Error: cannot implicitly convert expression `pow(a,\
    \ 0.333333)` of type `real` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp07udwlrb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && iscube(a, 1, a));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpigpfv5_b.d(19): Error: function `tmpigpfv5_b.iscube(long a)`\
    \ is not callable using argument types `(long, int, long)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigpfv5_b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpovvl1j28.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpovvl1j28.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpovvl1j28.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x4cbf9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzkzgykya.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpzkzgykya.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpzkzgykya.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0xba9e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptvscl8sb.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmptvscl8sb.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvscl8sb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptizvmp63.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmptizvmp63.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmptizvmp63.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xba12f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0i0eqcau.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmp0i0eqcau.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmp0i0eqcau.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x4f44554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkb7cttcz.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpkb7cttcz.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpkb7cttcz.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x40a4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpny5ocjv4.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpny5ocjv4.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpny5ocjv4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9lxjdutq.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmp9lxjdutq.__unittest_L21_C1()\
    \ [0x427d64]\\n??:? void tmp9lxjdutq.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c77b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b60e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43072d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5e5]\\n??:? runModuleUnitTests [0x42c551]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dfc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d83]\\n??:? _d_run_main [0x428cee]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0xbe84b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2rjtyfd4.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp2rjtyfd4.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp2rjtyfd4.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x81062554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmsiwz6kx.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpmsiwz6kx.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpmsiwz6kx.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xefb41554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(round(pow(a, 1.0 / 3.0)), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl3f1z7fl.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpl3f1z7fl.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpl3f1z7fl.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x57bb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && (long)pow(a, 1.0/3) == pow(a, 1.0/3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1473fuoe.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1473fuoe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4lp_x3ft.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp4lp_x3ft.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp4lp_x3ft.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x6cb8b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return\
    \ a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoyuaw9uo.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyuaw9uo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdtxzkv0p.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpdtxzkv0p.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtxzkv0p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && iscube(a, 2, a / 2));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3u6upjby.d(19): Error: function `tmp3u6upjby.iscube(long a)`\
    \ is not callable using argument types `(long, int, long)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u6upjby.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbyvu0__l.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpbyvu0__l.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpbyvu0__l.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x8e009554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcd2nftc8.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a85]\\n??:? void tmpcd2nftc8.__unittest_L21_C1()\
    \ [0x427da4]\\n??:? void tmpcd2nftc8.__modtest() [0x428808]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c853]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430879]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430805]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6bd]\\n??:? runModuleUnitTests [0x42c629]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ed4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e5b]\\n??:? _d_run_main [0x428dc6]\\n??:? main [0x42881b]\\\
    n??:? __libc_start_main [0x90ce7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp82yxzsxd.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp82yxzsxd.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp82yxzsxd.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x1c8a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqi2_9cky.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpqi2_9cky.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpqi2_9cky.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x38870554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm9dj5p8.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmm9dj5p8.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm9dj5p8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && iscube(a, 1, a));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1oo339q2.d(19): Error: function `tmp1oo339q2.iscube(long a)`\
    \ is not callable using argument types `(long, int, long)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1oo339q2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? a ==\
    \ -1 : isPowerOfThree(a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzm5cbspt.d(19): Error: undefined identifier `isPowerOfThree`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzm5cbspt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(round(pow(a, 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp763s3sye.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp763s3sye.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp763s3sye.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x4a160554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1)\
    \ || (a == 8) || (a == 27) || (a == 64) || (a == 125) || (a == 216) || (a == 343)\
    \ || (a == 512) || (a == 729) || (a == 1000) || (a == 1331) || (a == 1728) ||\
    \ (a == 2197) || (a == 2744) || (a == 3375) || (a == 4096) || (a == 4913) || (a\
    \ == 5832) || (a == 6859) || (a == 8000) || (a == 9261) || (a == 10648) || (a\
    \ == 12167) || (a == 13824) || (a == 15625) || (a == 17576) || (a == 19683) ||\
    \ (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791) || (a == 32768)\
    \ || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656) || (a == 50653)\
    \ || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921) || (a == 74088)\
    \ || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336) || (a == 103823)\
    \ || (a == 110592) || (a == 117649) || (a == 125000) || (a == 132651) || (a ==\
    \ 140608) || (a == 148877) || (a == 157464) || (a == 166375) || (a == 175616)\
    \ || (a == 185193) || (a == 195112) || (a == 205379) || (a == 216000) || (a ==\
    \ 226981) || (a == 238328) || (a == 250047) || (a == 262144) || (a == 274625)\
    \ || (a == 287496) || (a == 300763) || (a == 314432) || (a == 328509) || (a ==\
    \ 343000)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx28l4iqq.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpx28l4iqq.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx28l4iqq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2bsuxqex.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp2bsuxqex.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmp2bsuxqex.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0xc5fa9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && pow(a,\
    \ 1.0/3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1kgshp4k.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289b5]\\n??:? void tmp1kgshp4k.__unittest_L21_C1()\
    \ [0x427d6c]\\n??:? void tmp1kgshp4k.__modtest() [0x428738]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c783]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b616]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430735]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5ed]\\n??:? runModuleUnitTests [0x42c559]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e04]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d8b]\\n??:? _d_run_main [0x428cf6]\\n??:? main [0x42874b]\\\
    n??:? __libc_start_main [0x2ecb3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ ||\n        (a > 0 && (long)pow(a, 1.0/3) * (long)pow(a, 1.0/3) * (long)pow(a,\
    \ 1.0/3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk8e3ptz1.d(20): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpk8e3ptz1.d(20): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpk8e3ptz1.d(20): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8e3ptz1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1)\
    \ || (a == 64) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppug2a8ps.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmppug2a8ps.__unittest_L21_C1()\
    \ [0x427aed]\\n??:? void tmppug2a8ps.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x344e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && pow(a,\
    \ 1.0/3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa0e21p9h.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289b5]\\n??:? void tmpa0e21p9h.__unittest_L21_C1()\
    \ [0x427d6c]\\n??:? void tmpa0e21p9h.__modtest() [0x428738]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c783]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b616]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430735]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5ed]\\n??:? runModuleUnitTests [0x42c559]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e04]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d8b]\\n??:? _d_run_main [0x428cf6]\\n??:? main [0x42874b]\\\
    n??:? __libc_start_main [0xa771e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplp6gdtxr.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplp6gdtxr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa0006flz.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0006flz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0 / 3) == floor(pow(a, 1.0 / 3)));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptueck6od.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmptueck6od.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmptueck6od.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x55035554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0 / 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_b4ixor.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289bd]\\n??:? void tmp7_b4ixor.__unittest_L21_C1()\
    \ [0x427d93]\\n??:? void tmp7_b4ixor.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c78b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b61e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43073d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5f5]\\n??:? runModuleUnitTests [0x42c561]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d93]\\n??:? _d_run_main [0x428cfe]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x2395d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 ||\
    \ a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6bnf3_j6.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp6bnf3_j6.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6bnf3_j6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy72p8dq_.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpy72p8dq_.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpy72p8dq_.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x2bbfe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfpaaffyb.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428ab5]\\n??:? void tmpfpaaffyb.__unittest_L21_C1()\
    \ [0x427def]\\n??:? void tmpfpaaffyb.__modtest() [0x428834]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c883]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b716]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430835]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6ed]\\n??:? runModuleUnitTests [0x42c659]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f04]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e8b]\\n??:? _d_run_main [0x428df6]\\n??:? main [0x428847]\\\
    n??:? __libc_start_main [0x88372554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzidbq_ji.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzidbq_ji.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 ||\
    \ a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7mkvthq1.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp7mkvthq1.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7mkvthq1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? iscube(-a)\
    \ : iscube(round(pow(a, 1.0 / 3.0))));\n}\nunittest\n{\n    alias candidate =\
    \ iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n\
    \    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n  \
    \  assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm20ty6r.d(19): Error: function `tmpmm20ty6r.iscube(long a)`\
    \ is not callable using argument types `(real)`\\n/tmp/tmpmm20ty6r.d(19):    \
    \    cannot pass argument `round(pow(a, 0.333333))` of type `real` to parameter\
    \ `long a`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm20ty6r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && a == cbrt(a) * cbrt(a) * cbrt(a));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp90y24bo4.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ec5]\\n??:? void tmp90y24bo4.__unittest_L21_C1()\
    \ [0x427bda]\\n??:? void tmp90y24bo4.__modtest() [0x427c48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428314]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42829b]\\n??:? _d_run_main [0x428206]\\n??:? main [0x427c5b]\\\
    n??:? __libc_start_main [0x3e002554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8gbvvyhj.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp8gbvvyhj.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp8gbvvyhj.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xb5d24554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu_kmltpl.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpu_kmltpl.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmpu_kmltpl.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x379c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a,\
    \ 1.0/3) * (long)pow(a, 1.0/3) * (long)pow(a, 1.0/3) == a);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyso7boyk.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpyso7boyk.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpyso7boyk.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyso7boyk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && pow(a,\
    \ 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps0w25zci.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmps0w25zci.__unittest_L21_C1()\
    \ [0x427e54]\\n??:? void tmps0w25zci.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0xbf21d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpshlwc2ws.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpshlwc2ws.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpshlwc2ws.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xd707554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ui5e6hv.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmp5ui5e6hv.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ui5e6hv.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz2fv262j.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpz2fv262j.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpz2fv262j.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xa8294554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2st1jn7i.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmp2st1jn7i.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmp2st1jn7i.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0xf7ae9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0 / 3) == floor(pow(a, 1.0 / 3)));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6j21q7wv.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmp6j21q7wv.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmp6j21q7wv.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x51902554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6uemnvc7.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp6uemnvc7.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmp6uemnvc7.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x8861a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcdrhdxqk.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpcdrhdxqk.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpcdrhdxqk.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xef266554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7sl1ap57.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmp7sl1ap57.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmp7sl1ap57.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x66a19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpegdgkzh9.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpegdgkzh9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) == floor(pow(a, 1.0 / 3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbd8aoudw.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpbd8aoudw.__unittest_L21_C1()\
    \ [0x427e50]\\n??:? void tmpbd8aoudw.__modtest() [0x42881c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x42882f]\\\
    n??:? __libc_start_main [0xb0424554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphp5_ory4.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmphp5_ory4.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmphp5_ory4.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x2017c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0)\
    \ == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw235agq0.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\n/tmp/tmpw235agq0.d(19): Error: C style cast illegal, use\
    \ `cast(long)pow(a, 1.00000 / 3.00000)`\\n/tmp/tmpw235agq0.d(19): Error: C style\
    \ cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw235agq0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnvn0hd0r.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpnvn0hd0r.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpnvn0hd0r.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xae53c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprskhvs1g.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmprskhvs1g.__unittest_L21_C1()\
    \ [0x427d64]\\n??:? void tmprskhvs1g.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c77b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b60e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43072d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5e5]\\n??:? runModuleUnitTests [0x42c551]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dfc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d83]\\n??:? _d_run_main [0x428cee]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0x11a2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0 / 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6s99j2h0.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289bd]\\n??:? void tmp6s99j2h0.__unittest_L21_C1()\
    \ [0x427d93]\\n??:? void tmp6s99j2h0.__modtest() [0x428740]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c78b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b61e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43073d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5f5]\\n??:? runModuleUnitTests [0x42c561]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d93]\\n??:? _d_run_main [0x428cfe]\\n??:? main [0x428753]\\\
    n??:? __libc_start_main [0x4c10d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (int)pow(a, 1.0/3) == pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe343eu63.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe343eu63.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpykm9pfvv.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpykm9pfvv.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpykm9pfvv.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x4c6f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 ||\
    \ a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5t2wbcmp.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp5t2wbcmp.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp5t2wbcmp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0/3) == (int)pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvdec901b.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdec901b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3msdcrr9.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp3msdcrr9.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp3msdcrr9.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xb283a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcxhvax8j.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpcxhvax8j.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpcxhvax8j.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x7078f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4jedsj3m.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp4jedsj3m.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp4jedsj3m.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x7f13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp495a8t1k.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp495a8t1k.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp495a8t1k.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xc8655554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0)\
    \ == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8da5c6md.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\n/tmp/tmp8da5c6md.d(19): Error: C style cast illegal, use\
    \ `cast(long)pow(a, 1.00000 / 3.00000)`\\n/tmp/tmp8da5c6md.d(19): Error: C style\
    \ cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8da5c6md.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (int)pow(a, 1.0/3) == pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbnn0b9py.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnn0b9py.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80w4x5cu.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmp80w4x5cu.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80w4x5cu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 ||\
    \ a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9fx5yuw.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmpw9fx5yuw.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw9fx5yuw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && (long)pow(a,\
    \ 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx3lkdcx2.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3lkdcx2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpij_akckf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpij_akckf.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmpij_akckf.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0xa8406554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 ||\
    \ a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4lwhq6ys.d(20): Error: found `unittest` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp4lwhq6ys.d(33): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4lwhq6ys.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf40a92j8.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf40a92j8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a,\
    \ 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_t1okfw4.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmp_t1okfw4.__unittest_L21_C1()\
    \ [0x427dbc]\\n??:? void tmp_t1okfw4.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430891]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43081d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d5]\\n??:? runModuleUnitTests [0x42c641]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0xea49b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(double)a,\
    \ 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxp4bdodx.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42896d]\\n??:? void tmpxp4bdodx.__unittest_L21_C1()\
    \ [0x427d34]\\n??:? void tmpxp4bdodx.__modtest() [0x4286f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c73b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b5ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430761]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5a5]\\n??:? runModuleUnitTests [0x42c511]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dbc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d43]\\n??:? _d_run_main [0x428cae]\\n??:? main [0x428703]\\\
    n??:? __libc_start_main [0x4464554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? -a :\
    \ a) == pow(cast(long)pow(cast(long)abs(a), 1.0 / 3.0), 3);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp85bt2ook.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428b1d]\\n??:? void tmp85bt2ook.__unittest_L21_C1()\
    \ [0x427e43]\\n??:? void tmp85bt2ook.__modtest() [0x4288a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b77e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430911]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430dc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43089d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b755]\\n??:? runModuleUnitTests [0x42c6c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f6c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ef3]\\n??:? _d_run_main [0x428e5e]\\n??:? main [0x4288b3]\\\
    n??:? __libc_start_main [0xb9016554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? iscube(-a)\
    \ : iscube(pow(a, 1.0 / 3.0)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyr2r5cmu.d(19): Error: function `tmpyr2r5cmu.iscube(long a)`\
    \ is not callable using argument types `(real)`\\n/tmp/tmpyr2r5cmu.d(19):    \
    \    cannot pass argument `pow(a, 0.333333)` of type `real` to parameter `long\
    \ a`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyr2r5cmu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw4xr5yhh.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpw4xr5yhh.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpw4xr5yhh.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xde7e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2lvch8fl.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp2lvch8fl.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp2lvch8fl.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x666b3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkcq_s51s.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpkcq_s51s.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmpkcq_s51s.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x9e51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(floor(pow(a, 1.0 / 3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqk1yquix.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpqk1yquix.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpqk1yquix.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x3f56c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxb1wbhda.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpxb1wbhda.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpxb1wbhda.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xd7038554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && ispow(a, 1.0 / 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm2a8kehb.d(19): Error: undefined identifier `ispow`, did you\
    \ mean template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2a8kehb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphll9d_lx.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmphll9d_lx.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphll9d_lx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu8w09djo.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpu8w09djo.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpu8w09djo.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xbd658554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmhkhlp9c.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpmhkhlp9c.__unittest_L21_C1()\
    \ [0x427dc8]\\n??:? void tmpmhkhlp9c.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x53ed8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcdebdbjf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpcdebdbjf.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpcdebdbjf.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x6e9d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6cx0mx40.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp6cx0mx40.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp6cx0mx40.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x22a57554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(round(pow(a, 1.0 / 3.0)), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4yhbw__j.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yhbw__j.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxlfbkpiu.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpxlfbkpiu.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpxlfbkpiu.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xeaeaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaveni_z9.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpaveni_z9.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaveni_z9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjxx889zm.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpjxx889zm.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpjxx889zm.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x12a5c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? iscube(-a)\
    \ : iscube(pow(a, 1.0 / 3.0)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjr1w6_kd.d(19): Error: function `tmpjr1w6_kd.iscube(long a)`\
    \ is not callable using argument types `(real)`\\n/tmp/tmpjr1w6_kd.d(19):    \
    \    cannot pass argument `pow(a, 0.333333)` of type `real` to parameter `long\
    \ a`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjr1w6_kd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a,\
    \ 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz5pbmxmy.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpz5pbmxmy.__unittest_L21_C1()\
    \ [0x427dbc]\\n??:? void tmpz5pbmxmy.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430891]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43081d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d5]\\n??:? runModuleUnitTests [0x42c641]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0xbd1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxp41987j.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmpxp41987j.__unittest_L21_C1()\
    \ [0x427aed]\\n??:? void tmpxp41987j.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x6e333554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == (long)pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85e8iod9.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85e8iod9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(round(pow(a, 1.0 / 3.0)), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw5aw3fyv.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpw5aw3fyv.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpw5aw3fyv.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x36ea0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && pow(a,\
    \ 1.0/3) == floor(pow(a, 1.0/3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuhz9b2b2.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpuhz9b2b2.__unittest_L21_C1()\
    \ [0x427e54]\\n??:? void tmpuhz9b2b2.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c983]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b816]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430935]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7ed]\\n??:? runModuleUnitTests [0x42c759]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0x80adc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkes2nxj9.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpkes2nxj9.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpkes2nxj9.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x2c1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbyyrtws2.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpbyyrtws2.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpbyyrtws2.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x59153554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphpb63b_t.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmphpb63b_t.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmphpb63b_t.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x9b09e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprmrvy7_8.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmrvy7_8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvrpp_uk.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppvrpp_uk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3yjjrpte.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp3yjjrpte.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmp3yjjrpte.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0xa5bf8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0)\
    \ == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpprocppe_.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\n/tmp/tmpprocppe_.d(19): Error: C style cast illegal, use\
    \ `cast(long)pow(a, 1.00000 / 3.00000)`\\n/tmp/tmpprocppe_.d(19): Error: C style\
    \ cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprocppe_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a %\
    \ 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqfo0edtj.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmpqfo0edtj.__unittest_L21_C1()\
    \ [0x427ab8]\\n??:? void tmpqfo0edtj.__modtest() [0x427b64]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b77]\\\
    n??:? __libc_start_main [0x43023554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? a ==\
    \ -1 : a == (long)pow(a, 1.0/3));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsj46kxfg.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsj46kxfg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgw_vu_zh.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpgw_vu_zh.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmpgw_vu_zh.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0xb82bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq2ijo3fl.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpq2ijo3fl.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpq2ijo3fl.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xa9bd3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4di7yxor.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmp4di7yxor.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4di7yxor.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a))\
    \ || (a > 0 && iscube(a, 2, a / 2));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0zqila6.d(19): Error: function `tmpn0zqila6.iscube(long a)`\
    \ is not callable using argument types `(long, int, long)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0zqila6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a,\
    \ 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgny0wxit.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a9d]\\n??:? void tmpgny0wxit.__unittest_L21_C1()\
    \ [0x427dbc]\\n??:? void tmpgny0wxit.__modtest() [0x428820]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c86b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430891]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43081d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6d5]\\n??:? runModuleUnitTests [0x42c641]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e73]\\n??:? _d_run_main [0x428dde]\\n??:? main [0x428833]\\\
    n??:? __libc_start_main [0x4808e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprqb4w902.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmprqb4w902.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmprqb4w902.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xafe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0egph2vt.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp0egph2vt.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp0egph2vt.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x896be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ha0m95n.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp1ha0m95n.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmp1ha0m95n.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0x5d3ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? -a :\
    \ a) == pow(round(pow(a, 1.0 / 3.0)), 3);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpklen67ul.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a8d]\\n??:? void tmpklen67ul.__unittest_L21_C1()\
    \ [0x427e40]\\n??:? void tmpklen67ul.__modtest() [0x42880c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c873]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b706]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430899]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d48]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430825]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6dd]\\n??:? runModuleUnitTests [0x42c649]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428edc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e63]\\n??:? _d_run_main [0x428dce]\\n??:? main [0x42881f]\\\
    n??:? __libc_start_main [0x268d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkt1xg44s.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpkt1xg44s.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmpkt1xg44s.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x454b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi7x4l7v4.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aad]\\n??:? void tmpi7x4l7v4.__unittest_L21_C1()\
    \ [0x427de7]\\n??:? void tmpi7x4l7v4.__modtest() [0x42882c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c87b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b70e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43082d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6e5]\\n??:? runModuleUnitTests [0x42c651]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428efc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e83]\\n??:? _d_run_main [0x428dee]\\n??:? main [0x42883f]\\\
    n??:? __libc_start_main [0x225c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0guv0_cv.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmp0guv0_cv.__unittest_L21_C1()\
    \ [0x427aed]\\n??:? void tmp0guv0_cv.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0xb7102554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdpnt148s.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpdpnt148s.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpdpnt148s.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xff7af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxb4hkkxy.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmpxb4hkkxy.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxb4hkkxy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(a, 1.0 / 3) == (int)pow(a, 1.0 / 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppp8wd2vu.d(19): Error: C style cast illegal, use `cast(int)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppp8wd2vu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a,\
    \ 1.0/3) * (long)pow(a, 1.0/3) * (long)pow(a, 1.0/3) == a);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvku19lqb.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpvku19lqb.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\n/tmp/tmpvku19lqb.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvku19lqb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphbefrylb.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmphbefrylb.__unittest_L21_C1()\
    \ [0x427d64]\\n??:? void tmphbefrylb.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c77b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b60e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43072d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5e5]\\n??:? runModuleUnitTests [0x42c551]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dfc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d83]\\n??:? _d_run_main [0x428cee]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0xa896b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(int)pow(a, 1.0/3.0),\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkpvrh_nt.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a65]\\n??:? void tmpkpvrh_nt.__unittest_L21_C1()\
    \ [0x427d94]\\n??:? void tmpkpvrh_nt.__modtest() [0x4287e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c833]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430859]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b69d]\\n??:? runModuleUnitTests [0x42c609]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eb4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e3b]\\n??:? _d_run_main [0x428da6]\\n??:? main [0x4287fb]\\\
    n??:? __libc_start_main [0xf67ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return (a == 0 || a == 1 || a == -1) ||\
    \ (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzoasue0d.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpzoasue0d.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpzoasue0d.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x7c784554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpue3wzjn5.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpue3wzjn5.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpue3wzjn5.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xdc82b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc7nxsby0.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpc7nxsby0.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpc7nxsby0.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xb3f47554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_m15_s4o.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp_m15_s4o.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmp_m15_s4o.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0x999fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)round(pow(a, 1.0/3.0)), 3));\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp48gh7yhk.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp48gh7yhk.__unittest_L21_C1()\
    \ [0x427abb]\\n??:? void tmp48gh7yhk.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0x68ae3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3lq501rp.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp3lq501rp.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp3lq501rp.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x9f023554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_8yylyf.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp7_8yylyf.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp7_8yylyf.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x60491554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ij14cui.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp_ij14cui.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp_ij14cui.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xb84e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a\
    \ == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 ||\
    \ a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 ||\
    \ a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp06d_p3t8.d(20): Error: expression expected, not `unittest`\\\
    n/tmp/tmp06d_p3t8.d(21): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06d_p3t8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? -a :\
    \ a) == pow(floor(pow(a < 0 ? -a : a, 1.0 / 3.0)), 3);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzv_zp3vk.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428acd]\\n??:? void tmpzv_zp3vk.__unittest_L21_C1()\
    \ [0x427ea3]\\n??:? void tmpzv_zp3vk.__modtest() [0x428850]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b846]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430965]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b81d]\\n??:? runModuleUnitTests [0x42c789]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f1c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428ea3]\\n??:? _d_run_main [0x428e0e]\\n??:? main [0x428863]\\\
    n??:? __libc_start_main [0x81a88554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9x7fphib.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp9x7fphib.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp9x7fphib.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xcf998554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzd3iubm7.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd3iubm7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && pow(floor(pow(a, 1.0/3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuytz2ewh.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428aa5]\\n??:? void tmpuytz2ewh.__unittest_L21_C1()\
    \ [0x427e7b]\\n??:? void tmpuytz2ewh.__modtest() [0x428828]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c98b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b81e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4309b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43093d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7f5]\\n??:? runModuleUnitTests [0x42c761]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ef4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e7b]\\n??:? _d_run_main [0x428de6]\\n??:? main [0x42883b]\\\
    n??:? __libc_start_main [0x7cec6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3t5ahpo.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpw3t5ahpo.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpw3t5ahpo.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xe967d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && isPow(a, 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7uiqc70o.d(19): Error: undefined identifier `isPow`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uiqc70o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm55eqg7l.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm55eqg7l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 ? -a :\
    \ a) == pow(cast(long)pow(cast(long)(a < 0 ? -a : a), 1.0 / 3.0), 3);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7xp5892d.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428ad5]\\n??:? void tmp7xp5892d.__unittest_L21_C1()\
    \ [0x427e0f]\\n??:? void tmp7xp5892d.__modtest() [0x428854]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8a3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430855]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b70d]\\n??:? runModuleUnitTests [0x42c679]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f24]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428eab]\\n??:? _d_run_main [0x428e16]\\n??:? main [0x428867]\\\
    n??:? __libc_start_main [0x65e9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_eor1thi.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp_eor1thi.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp_eor1thi.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x8b283554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe_spif8p.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmpe_spif8p.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmpe_spif8p.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x9b75e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1nmfqf0q.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp1nmfqf0q.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp1nmfqf0q.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0xfc89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3u7ze9gg.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a85]\\n??:? void tmp3u7ze9gg.__unittest_L21_C1()\
    \ [0x427da4]\\n??:? void tmp3u7ze9gg.__modtest() [0x428808]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c853]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430879]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430805]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6bd]\\n??:? runModuleUnitTests [0x42c629]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428ed4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e5b]\\n??:? _d_run_main [0x428dc6]\\n??:? main [0x42881b]\\\
    n??:? __libc_start_main [0xfa1f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptodra1qh.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptodra1qh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(a, 1.0 /\
    \ 3) % 1 == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp68hd_8b6.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289ad]\\n??:? void tmp68hd_8b6.__unittest_L21_C1()\
    \ [0x427d64]\\n??:? void tmp68hd_8b6.__modtest() [0x428730]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c77b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b60e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43072d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5e5]\\n??:? runModuleUnitTests [0x42c551]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dfc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d83]\\n??:? _d_run_main [0x428cee]\\n??:? main [0x428743]\\\
    n??:? __libc_start_main [0x3e3dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9wg2wag2.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp9wg2wag2.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp9wg2wag2.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x7a232554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == (long)pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ninibyi.d(19): Error: C style cast illegal, use `cast(long)pow(a,\
    \ 1.00000 / 3.00000)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ninibyi.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || is(typeof(a)\
    \ == long) && a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd_lsm8h8.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428ab5]\\n??:? void tmpd_lsm8h8.__unittest_L21_C1()\
    \ [0x427def]\\n??:? void tmpd_lsm8h8.__modtest() [0x428834]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c883]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b716]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430835]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6ed]\\n??:? runModuleUnitTests [0x42c659]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f04]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e8b]\\n??:? _d_run_main [0x428df6]\\n??:? main [0x428847]\\\
    n??:? __libc_start_main [0xb10e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n  \
    \  iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n  \
    \  \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a\
    \ > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8kamdm6k.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428abd]\\n??:? void tmp8kamdm6k.__unittest_L21_C1()\
    \ [0x427df7]\\n??:? void tmp8kamdm6k.__modtest() [0x42883c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c88b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b71e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43083d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6f5]\\n??:? runModuleUnitTests [0x42c661]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428f0c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e93]\\n??:? _d_run_main [0x428dfe]\\n??:? main [0x42884f]\\\
    n??:? __libc_start_main [0x74d12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
